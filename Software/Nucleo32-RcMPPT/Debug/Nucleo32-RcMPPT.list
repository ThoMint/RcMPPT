
Nucleo32-RcMPPT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000076c8  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080078a0  080078a0  000178a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080078e0  080078e0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080078e0  080078e0  000178e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080078e8  080078e8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080078e8  080078e8  000178e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080078ec  080078ec  000178ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080078f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000214  2000000c  080078fc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000220  080078fc  00020220  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000142cb  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001f07  00000000  00000000  00034307  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001200  00000000  00000000  00036210  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001108  00000000  00000000  00037410  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00027bfc  00000000  00000000  00038518  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d236  00000000  00000000  00060114  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00118eb9  00000000  00000000  0006d34a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00186203  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e9c  00000000  00000000  00186280  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08007888 	.word	0x08007888

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08007888 	.word	0x08007888

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b972 	b.w	8000514 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	4688      	mov	r8, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14b      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000256:	428a      	cmp	r2, r1
 8000258:	4615      	mov	r5, r2
 800025a:	d967      	bls.n	800032c <__udivmoddi4+0xe4>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0720 	rsb	r7, r2, #32
 8000266:	fa01 f302 	lsl.w	r3, r1, r2
 800026a:	fa20 f707 	lsr.w	r7, r0, r7
 800026e:	4095      	lsls	r5, r2
 8000270:	ea47 0803 	orr.w	r8, r7, r3
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000280:	fa1f fc85 	uxth.w	ip, r5
 8000284:	fb0e 8817 	mls	r8, lr, r7, r8
 8000288:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028c:	fb07 f10c 	mul.w	r1, r7, ip
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18eb      	adds	r3, r5, r3
 8000296:	f107 30ff 	add.w	r0, r7, #4294967295
 800029a:	f080 811b 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8118 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002a4:	3f02      	subs	r7, #2
 80002a6:	442b      	add	r3, r5
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002bc:	45a4      	cmp	ip, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	192c      	adds	r4, r5, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c6:	f080 8107 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002ca:	45a4      	cmp	ip, r4
 80002cc:	f240 8104 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002d0:	3802      	subs	r0, #2
 80002d2:	442c      	add	r4, r5
 80002d4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d8:	eba4 040c 	sub.w	r4, r4, ip
 80002dc:	2700      	movs	r7, #0
 80002de:	b11e      	cbz	r6, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c6 4300 	strd	r4, r3, [r6]
 80002e8:	4639      	mov	r1, r7
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xbe>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80eb 	beq.w	80004ce <__udivmoddi4+0x286>
 80002f8:	2700      	movs	r7, #0
 80002fa:	e9c6 0100 	strd	r0, r1, [r6]
 80002fe:	4638      	mov	r0, r7
 8000300:	4639      	mov	r1, r7
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f783 	clz	r7, r3
 800030a:	2f00      	cmp	r7, #0
 800030c:	d147      	bne.n	800039e <__udivmoddi4+0x156>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd0>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80fa 	bhi.w	800050c <__udivmoddi4+0x2c4>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4698      	mov	r8, r3
 8000322:	2e00      	cmp	r6, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000326:	e9c6 4800 	strd	r4, r8, [r6]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa0>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xe8>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 808f 	bne.w	8000458 <__udivmoddi4+0x210>
 800033a:	1b49      	subs	r1, r1, r5
 800033c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000340:	fa1f f885 	uxth.w	r8, r5
 8000344:	2701      	movs	r7, #1
 8000346:	fbb1 fcfe 	udiv	ip, r1, lr
 800034a:	0c23      	lsrs	r3, r4, #16
 800034c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb08 f10c 	mul.w	r1, r8, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x124>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4299      	cmp	r1, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 800036a:	4684      	mov	ip, r0
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	b2a3      	uxth	r3, r4
 8000370:	fbb1 f0fe 	udiv	r0, r1, lr
 8000374:	fb0e 1410 	mls	r4, lr, r0, r1
 8000378:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800037c:	fb08 f800 	mul.w	r8, r8, r0
 8000380:	45a0      	cmp	r8, r4
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x14c>
 8000384:	192c      	adds	r4, r5, r4
 8000386:	f100 33ff 	add.w	r3, r0, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x14a>
 800038c:	45a0      	cmp	r8, r4
 800038e:	f200 80b6 	bhi.w	80004fe <__udivmoddi4+0x2b6>
 8000392:	4618      	mov	r0, r3
 8000394:	eba4 0408 	sub.w	r4, r4, r8
 8000398:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800039c:	e79f      	b.n	80002de <__udivmoddi4+0x96>
 800039e:	f1c7 0c20 	rsb	ip, r7, #32
 80003a2:	40bb      	lsls	r3, r7
 80003a4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003ac:	fa01 f407 	lsl.w	r4, r1, r7
 80003b0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003b4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003bc:	4325      	orrs	r5, r4
 80003be:	fbb3 f9f8 	udiv	r9, r3, r8
 80003c2:	0c2c      	lsrs	r4, r5, #16
 80003c4:	fb08 3319 	mls	r3, r8, r9, r3
 80003c8:	fa1f fa8e 	uxth.w	sl, lr
 80003cc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d0:	fb09 f40a 	mul.w	r4, r9, sl
 80003d4:	429c      	cmp	r4, r3
 80003d6:	fa02 f207 	lsl.w	r2, r2, r7
 80003da:	fa00 f107 	lsl.w	r1, r0, r7
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1e 0303 	adds.w	r3, lr, r3
 80003e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e8:	f080 8087 	bcs.w	80004fa <__udivmoddi4+0x2b2>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f240 8084 	bls.w	80004fa <__udivmoddi4+0x2b2>
 80003f2:	f1a9 0902 	sub.w	r9, r9, #2
 80003f6:	4473      	add	r3, lr
 80003f8:	1b1b      	subs	r3, r3, r4
 80003fa:	b2ad      	uxth	r5, r5
 80003fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000400:	fb08 3310 	mls	r3, r8, r0, r3
 8000404:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000408:	fb00 fa0a 	mul.w	sl, r0, sl
 800040c:	45a2      	cmp	sl, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1e 0404 	adds.w	r4, lr, r4
 8000414:	f100 33ff 	add.w	r3, r0, #4294967295
 8000418:	d26b      	bcs.n	80004f2 <__udivmoddi4+0x2aa>
 800041a:	45a2      	cmp	sl, r4
 800041c:	d969      	bls.n	80004f2 <__udivmoddi4+0x2aa>
 800041e:	3802      	subs	r0, #2
 8000420:	4474      	add	r4, lr
 8000422:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000426:	fba0 8902 	umull	r8, r9, r0, r2
 800042a:	eba4 040a 	sub.w	r4, r4, sl
 800042e:	454c      	cmp	r4, r9
 8000430:	46c2      	mov	sl, r8
 8000432:	464b      	mov	r3, r9
 8000434:	d354      	bcc.n	80004e0 <__udivmoddi4+0x298>
 8000436:	d051      	beq.n	80004dc <__udivmoddi4+0x294>
 8000438:	2e00      	cmp	r6, #0
 800043a:	d069      	beq.n	8000510 <__udivmoddi4+0x2c8>
 800043c:	ebb1 050a 	subs.w	r5, r1, sl
 8000440:	eb64 0403 	sbc.w	r4, r4, r3
 8000444:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000448:	40fd      	lsrs	r5, r7
 800044a:	40fc      	lsrs	r4, r7
 800044c:	ea4c 0505 	orr.w	r5, ip, r5
 8000450:	e9c6 5400 	strd	r5, r4, [r6]
 8000454:	2700      	movs	r7, #0
 8000456:	e747      	b.n	80002e8 <__udivmoddi4+0xa0>
 8000458:	f1c2 0320 	rsb	r3, r2, #32
 800045c:	fa20 f703 	lsr.w	r7, r0, r3
 8000460:	4095      	lsls	r5, r2
 8000462:	fa01 f002 	lsl.w	r0, r1, r2
 8000466:	fa21 f303 	lsr.w	r3, r1, r3
 800046a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800046e:	4338      	orrs	r0, r7
 8000470:	0c01      	lsrs	r1, r0, #16
 8000472:	fbb3 f7fe 	udiv	r7, r3, lr
 8000476:	fa1f f885 	uxth.w	r8, r5
 800047a:	fb0e 3317 	mls	r3, lr, r7, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb07 f308 	mul.w	r3, r7, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x256>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f107 3cff 	add.w	ip, r7, #4294967295
 8000494:	d22f      	bcs.n	80004f6 <__udivmoddi4+0x2ae>
 8000496:	428b      	cmp	r3, r1
 8000498:	d92d      	bls.n	80004f6 <__udivmoddi4+0x2ae>
 800049a:	3f02      	subs	r7, #2
 800049c:	4429      	add	r1, r5
 800049e:	1acb      	subs	r3, r1, r3
 80004a0:	b281      	uxth	r1, r0
 80004a2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004a6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004aa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ae:	fb00 f308 	mul.w	r3, r0, r8
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x27e>
 80004b6:	1869      	adds	r1, r5, r1
 80004b8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004bc:	d217      	bcs.n	80004ee <__udivmoddi4+0x2a6>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d915      	bls.n	80004ee <__udivmoddi4+0x2a6>
 80004c2:	3802      	subs	r0, #2
 80004c4:	4429      	add	r1, r5
 80004c6:	1ac9      	subs	r1, r1, r3
 80004c8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004cc:	e73b      	b.n	8000346 <__udivmoddi4+0xfe>
 80004ce:	4637      	mov	r7, r6
 80004d0:	4630      	mov	r0, r6
 80004d2:	e709      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d4:	4607      	mov	r7, r0
 80004d6:	e6e7      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d8:	4618      	mov	r0, r3
 80004da:	e6fb      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004dc:	4541      	cmp	r1, r8
 80004de:	d2ab      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004e4:	eb69 020e 	sbc.w	r2, r9, lr
 80004e8:	3801      	subs	r0, #1
 80004ea:	4613      	mov	r3, r2
 80004ec:	e7a4      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004ee:	4660      	mov	r0, ip
 80004f0:	e7e9      	b.n	80004c6 <__udivmoddi4+0x27e>
 80004f2:	4618      	mov	r0, r3
 80004f4:	e795      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f6:	4667      	mov	r7, ip
 80004f8:	e7d1      	b.n	800049e <__udivmoddi4+0x256>
 80004fa:	4681      	mov	r9, r0
 80004fc:	e77c      	b.n	80003f8 <__udivmoddi4+0x1b0>
 80004fe:	3802      	subs	r0, #2
 8000500:	442c      	add	r4, r5
 8000502:	e747      	b.n	8000394 <__udivmoddi4+0x14c>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	442b      	add	r3, r5
 800050a:	e72f      	b.n	800036c <__udivmoddi4+0x124>
 800050c:	4638      	mov	r0, r7
 800050e:	e708      	b.n	8000322 <__udivmoddi4+0xda>
 8000510:	4637      	mov	r7, r6
 8000512:	e6e9      	b.n	80002e8 <__udivmoddi4+0xa0>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b084      	sub	sp, #16
 800051c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051e:	f000 fd9c 	bl	800105a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000522:	f000 f85b 	bl	80005dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000526:	f000 fb8f 	bl	8000c48 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 800052a:	f000 fb47 	bl	8000bbc <MX_LPUART1_UART_Init>
  MX_HRTIM1_Init();
 800052e:	f000 f987 	bl	8000840 <MX_HRTIM1_Init>
  MX_ADC1_Init();
 8000532:	f000 f8bd 	bl	80006b0 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_HRTIM_WaveformCountStart(&hhrtim1, HRTIM_TIMERID_TIMER_A | HRTIM_TIMERID_TIMER_B);
 8000536:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 800053a:	4825      	ldr	r0, [pc, #148]	; (80005d0 <main+0xb8>)
 800053c:	f004 f9fc 	bl	8004938 <HAL_HRTIM_WaveformCountStart>
  HAL_HRTIM_WaveformOutputStart(&hhrtim1, HRTIM_OUTPUT_TA1 | HRTIM_OUTPUT_TA2 | HRTIM_OUTPUT_TB1 | HRTIM_OUTPUT_TB2);
 8000540:	210f      	movs	r1, #15
 8000542:	4823      	ldr	r0, [pc, #140]	; (80005d0 <main+0xb8>)
 8000544:	f004 f9cb 	bl	80048de <HAL_HRTIM_WaveformOutputStart>

  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000548:	217f      	movs	r1, #127	; 0x7f
 800054a:	4822      	ldr	r0, [pc, #136]	; (80005d4 <main+0xbc>)
 800054c:	f002 f87e 	bl	800264c <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_InjectedStart(&hadc1);
 8000550:	4820      	ldr	r0, [pc, #128]	; (80005d4 <main+0xbc>)
 8000552:	f002 f8dd 	bl	8002710 <HAL_ADCEx_InjectedStart>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t cmp = 0;
 8000556:	2300      	movs	r3, #0
 8000558:	60fb      	str	r3, [r7, #12]
  uint32_t targetV = 10;
 800055a:	230a      	movs	r3, #10
 800055c:	60bb      	str	r3, [r7, #8]
  uint32_t target = targetV * 100;
 800055e:	68bb      	ldr	r3, [r7, #8]
 8000560:	2264      	movs	r2, #100	; 0x64
 8000562:	fb02 f303 	mul.w	r3, r2, r3
 8000566:	607b      	str	r3, [r7, #4]
  while (1)
  {
	  //uint32_t Vin = (HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_1) * 3300)/0xFFF;
	  //cmp = map(Vin, 0, 3300, 0, PERIOD);
	  HAL_Delay(1);
 8000568:	2001      	movs	r0, #1
 800056a:	f000 fde7 	bl	800113c <HAL_Delay>

	  uint32_t Vout = (HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_1) * 3300)/0xFFF;
 800056e:	2109      	movs	r1, #9
 8000570:	4818      	ldr	r0, [pc, #96]	; (80005d4 <main+0xbc>)
 8000572:	f002 f99d 	bl	80028b0 <HAL_ADCEx_InjectedGetValue>
 8000576:	4602      	mov	r2, r0
 8000578:	f640 43e4 	movw	r3, #3300	; 0xce4
 800057c:	fb03 f202 	mul.w	r2, r3, r2
 8000580:	4b15      	ldr	r3, [pc, #84]	; (80005d8 <main+0xc0>)
 8000582:	fba3 1302 	umull	r1, r3, r3, r2
 8000586:	1ad2      	subs	r2, r2, r3
 8000588:	0852      	lsrs	r2, r2, #1
 800058a:	4413      	add	r3, r2
 800058c:	0adb      	lsrs	r3, r3, #11
 800058e:	603b      	str	r3, [r7, #0]

	  if (Vout < target)
 8000590:	683a      	ldr	r2, [r7, #0]
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	429a      	cmp	r2, r3
 8000596:	d202      	bcs.n	800059e <main+0x86>
	  {
		  cmp += 100;
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	3364      	adds	r3, #100	; 0x64
 800059c:	60fb      	str	r3, [r7, #12]
	  }
	  if(Vout > target)
 800059e:	683a      	ldr	r2, [r7, #0]
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	429a      	cmp	r2, r3
 80005a4:	d902      	bls.n	80005ac <main+0x94>
	  {
		  cmp-= 100;
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	3b64      	subs	r3, #100	; 0x64
 80005aa:	60fb      	str	r3, [r7, #12]
	  }

	  __HAL_HRTIM_SETCOMPARE(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_1, cmp);
 80005ac:	4b08      	ldr	r3, [pc, #32]	; (80005d0 <main+0xb8>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	68fa      	ldr	r2, [r7, #12]
 80005b2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	  __HAL_HRTIM_SETCOMPARE(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_2, cmp/2);
 80005b6:	4b06      	ldr	r3, [pc, #24]	; (80005d0 <main+0xb8>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	68fa      	ldr	r2, [r7, #12]
 80005bc:	0852      	lsrs	r2, r2, #1
 80005be:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	  __HAL_HRTIM_SETCOMPARE(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, HRTIM_COMPAREUNIT_1, cmp);
 80005c2:	4b03      	ldr	r3, [pc, #12]	; (80005d0 <main+0xb8>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	68fa      	ldr	r2, [r7, #12]
 80005c8:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
  {
 80005cc:	e7cc      	b.n	8000568 <main+0x50>
 80005ce:	bf00      	nop
 80005d0:	20000120 	.word	0x20000120
 80005d4:	200000b4 	.word	0x200000b4
 80005d8:	00100101 	.word	0x00100101

080005dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b0a8      	sub	sp, #160	; 0xa0
 80005e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80005e6:	2238      	movs	r2, #56	; 0x38
 80005e8:	2100      	movs	r1, #0
 80005ea:	4618      	mov	r0, r3
 80005ec:	f007 f944 	bl	8007878 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	605a      	str	r2, [r3, #4]
 80005fa:	609a      	str	r2, [r3, #8]
 80005fc:	60da      	str	r2, [r3, #12]
 80005fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000600:	463b      	mov	r3, r7
 8000602:	2254      	movs	r2, #84	; 0x54
 8000604:	2100      	movs	r1, #0
 8000606:	4618      	mov	r0, r3
 8000608:	f007 f936 	bl	8007878 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800060c:	2000      	movs	r0, #0
 800060e:	f005 fb31 	bl	8005c74 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000612:	2301      	movs	r3, #1
 8000614:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000616:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800061a:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800061c:	2302      	movs	r3, #2
 800061e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000622:	2303      	movs	r3, #3
 8000624:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8000628:	2306      	movs	r3, #6
 800062a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800062e:	2355      	movs	r3, #85	; 0x55
 8000630:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000634:	2302      	movs	r3, #2
 8000636:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800063a:	2302      	movs	r3, #2
 800063c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000640:	2302      	movs	r3, #2
 8000642:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000646:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800064a:	4618      	mov	r0, r3
 800064c:	f005 fbc6 	bl	8005ddc <HAL_RCC_OscConfig>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000656:	f000 fb67 	bl	8000d28 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800065a:	230f      	movs	r3, #15
 800065c:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800065e:	2303      	movs	r3, #3
 8000660:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000662:	2300      	movs	r3, #0
 8000664:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000666:	2300      	movs	r3, #0
 8000668:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800066a:	2300      	movs	r3, #0
 800066c:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800066e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000672:	2104      	movs	r1, #4
 8000674:	4618      	mov	r0, r3
 8000676:	f005 fec9 	bl	800640c <HAL_RCC_ClockConfig>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000680:	f000 fb52 	bl	8000d28 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_ADC12;
 8000684:	f248 0320 	movw	r3, #32800	; 0x8020
 8000688:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800068a:	2300      	movs	r3, #0
 800068c:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800068e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000692:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000694:	463b      	mov	r3, r7
 8000696:	4618      	mov	r0, r3
 8000698:	f006 f8d4 	bl	8006844 <HAL_RCCEx_PeriphCLKConfig>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80006a2:	f000 fb41 	bl	8000d28 <Error_Handler>
  }
}
 80006a6:	bf00      	nop
 80006a8:	37a0      	adds	r7, #160	; 0xa0
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
	...

080006b0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b09a      	sub	sp, #104	; 0x68
 80006b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80006b6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80006ba:	2200      	movs	r2, #0
 80006bc:	601a      	str	r2, [r3, #0]
 80006be:	605a      	str	r2, [r3, #4]
 80006c0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80006c2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80006c6:	2220      	movs	r2, #32
 80006c8:	2100      	movs	r1, #0
 80006ca:	4618      	mov	r0, r3
 80006cc:	f007 f8d4 	bl	8007878 <memset>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80006d0:	463b      	mov	r3, r7
 80006d2:	223c      	movs	r2, #60	; 0x3c
 80006d4:	2100      	movs	r1, #0
 80006d6:	4618      	mov	r0, r3
 80006d8:	f007 f8ce 	bl	8007878 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80006dc:	4b55      	ldr	r3, [pc, #340]	; (8000834 <MX_ADC1_Init+0x184>)
 80006de:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80006e2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006e4:	4b53      	ldr	r3, [pc, #332]	; (8000834 <MX_ADC1_Init+0x184>)
 80006e6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80006ea:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006ec:	4b51      	ldr	r3, [pc, #324]	; (8000834 <MX_ADC1_Init+0x184>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006f2:	4b50      	ldr	r3, [pc, #320]	; (8000834 <MX_ADC1_Init+0x184>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80006f8:	4b4e      	ldr	r3, [pc, #312]	; (8000834 <MX_ADC1_Init+0x184>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80006fe:	4b4d      	ldr	r3, [pc, #308]	; (8000834 <MX_ADC1_Init+0x184>)
 8000700:	2201      	movs	r2, #1
 8000702:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000704:	4b4b      	ldr	r3, [pc, #300]	; (8000834 <MX_ADC1_Init+0x184>)
 8000706:	2204      	movs	r2, #4
 8000708:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800070a:	4b4a      	ldr	r3, [pc, #296]	; (8000834 <MX_ADC1_Init+0x184>)
 800070c:	2200      	movs	r2, #0
 800070e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000710:	4b48      	ldr	r3, [pc, #288]	; (8000834 <MX_ADC1_Init+0x184>)
 8000712:	2200      	movs	r2, #0
 8000714:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 8000716:	4b47      	ldr	r3, [pc, #284]	; (8000834 <MX_ADC1_Init+0x184>)
 8000718:	2202      	movs	r2, #2
 800071a:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800071c:	4b45      	ldr	r3, [pc, #276]	; (8000834 <MX_ADC1_Init+0x184>)
 800071e:	2200      	movs	r2, #0
 8000720:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000724:	4b43      	ldr	r3, [pc, #268]	; (8000834 <MX_ADC1_Init+0x184>)
 8000726:	2200      	movs	r2, #0
 8000728:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800072a:	4b42      	ldr	r3, [pc, #264]	; (8000834 <MX_ADC1_Init+0x184>)
 800072c:	2200      	movs	r2, #0
 800072e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000730:	4b40      	ldr	r3, [pc, #256]	; (8000834 <MX_ADC1_Init+0x184>)
 8000732:	2200      	movs	r2, #0
 8000734:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000738:	4b3e      	ldr	r3, [pc, #248]	; (8000834 <MX_ADC1_Init+0x184>)
 800073a:	2200      	movs	r2, #0
 800073c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800073e:	4b3d      	ldr	r3, [pc, #244]	; (8000834 <MX_ADC1_Init+0x184>)
 8000740:	2200      	movs	r2, #0
 8000742:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000746:	483b      	ldr	r0, [pc, #236]	; (8000834 <MX_ADC1_Init+0x184>)
 8000748:	f000 ff2a 	bl	80015a0 <HAL_ADC_Init>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000752:	f000 fae9 	bl	8000d28 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000756:	2300      	movs	r3, #0
 8000758:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800075a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800075e:	4619      	mov	r1, r3
 8000760:	4834      	ldr	r0, [pc, #208]	; (8000834 <MX_ADC1_Init+0x184>)
 8000762:	f002 fe03 	bl	800336c <HAL_ADCEx_MultiModeConfigChannel>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_ADC1_Init+0xc0>
  {
    Error_Handler();
 800076c:	f000 fadc 	bl	8000d28 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000770:	4b31      	ldr	r3, [pc, #196]	; (8000838 <MX_ADC1_Init+0x188>)
 8000772:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000774:	2306      	movs	r3, #6
 8000776:	643b      	str	r3, [r7, #64]	; 0x40
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8000778:	2306      	movs	r3, #6
 800077a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800077c:	237f      	movs	r3, #127	; 0x7f
 800077e:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000780:	2304      	movs	r3, #4
 8000782:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.Offset = 0;
 8000784:	2300      	movs	r3, #0
 8000786:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000788:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800078c:	4619      	mov	r1, r3
 800078e:	4829      	ldr	r0, [pc, #164]	; (8000834 <MX_ADC1_Init+0x184>)
 8000790:	f001 f8c6 	bl	8001920 <HAL_ADC_ConfigChannel>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 800079a:	f000 fac5 	bl	8000d28 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800079e:	4b27      	ldr	r3, [pc, #156]	; (800083c <MX_ADC1_Init+0x18c>)
 80007a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80007a2:	230c      	movs	r3, #12
 80007a4:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007a6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80007aa:	4619      	mov	r1, r3
 80007ac:	4821      	ldr	r0, [pc, #132]	; (8000834 <MX_ADC1_Init+0x184>)
 80007ae:	f001 f8b7 	bl	8001920 <HAL_ADC_ConfigChannel>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_ADC1_Init+0x10c>
  {
    Error_Handler();
 80007b8:	f000 fab6 	bl	8000d28 <Error_Handler>
  }
  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 80007bc:	4b1e      	ldr	r3, [pc, #120]	; (8000838 <MX_ADC1_Init+0x188>)
 80007be:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 80007c0:	2309      	movs	r3, #9
 80007c2:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 80007c4:	2306      	movs	r3, #6
 80007c6:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 80007c8:	237f      	movs	r3, #127	; 0x7f
 80007ca:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 80007cc:	2304      	movs	r3, #4
 80007ce:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffset = 0;
 80007d0:	2300      	movs	r3, #0
 80007d2:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedNbrOfConversion = 2;
 80007d4:	2302      	movs	r3, #2
 80007d6:	623b      	str	r3, [r7, #32]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80007d8:	2300      	movs	r3, #0
 80007da:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sConfigInjected.AutoInjectedConv = DISABLE;
 80007de:	2300      	movs	r3, #0
 80007e0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sConfigInjected.QueueInjectedContext = DISABLE;
 80007e4:	2300      	movs	r3, #0
 80007e6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_HRTIM_TRG2;
 80007ea:	23cc      	movs	r3, #204	; 0xcc
 80007ec:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 80007ee:	2380      	movs	r3, #128	; 0x80
 80007f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigInjected.InjecOversamplingMode = DISABLE;
 80007f2:	2300      	movs	r3, #0
 80007f4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80007f8:	463b      	mov	r3, r7
 80007fa:	4619      	mov	r1, r3
 80007fc:	480d      	ldr	r0, [pc, #52]	; (8000834 <MX_ADC1_Init+0x184>)
 80007fe:	f002 f889 	bl	8002914 <HAL_ADCEx_InjectedConfigChannel>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_ADC1_Init+0x15c>
  {
    Error_Handler();
 8000808:	f000 fa8e 	bl	8000d28 <Error_Handler>
  }
  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_2;
 800080c:	4b0b      	ldr	r3, [pc, #44]	; (800083c <MX_ADC1_Init+0x18c>)
 800080e:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8000810:	f240 130f 	movw	r3, #271	; 0x10f
 8000814:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000816:	463b      	mov	r3, r7
 8000818:	4619      	mov	r1, r3
 800081a:	4806      	ldr	r0, [pc, #24]	; (8000834 <MX_ADC1_Init+0x184>)
 800081c:	f002 f87a 	bl	8002914 <HAL_ADCEx_InjectedConfigChannel>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_ADC1_Init+0x17a>
  {
    Error_Handler();
 8000826:	f000 fa7f 	bl	8000d28 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800082a:	bf00      	nop
 800082c:	3768      	adds	r7, #104	; 0x68
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	200000b4 	.word	0x200000b4
 8000838:	04300002 	.word	0x04300002
 800083c:	08600004 	.word	0x08600004

08000840 <MX_HRTIM1_Init>:
  * @brief HRTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_HRTIM1_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b0ba      	sub	sp, #232	; 0xe8
 8000844:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HRTIM1_Init 0 */

  /* USER CODE END HRTIM1_Init 0 */

  HRTIM_ADCTriggerCfgTypeDef pADCTriggerCfg = {0};
 8000846:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800084a:	2200      	movs	r2, #0
 800084c:	601a      	str	r2, [r3, #0]
 800084e:	605a      	str	r2, [r3, #4]
  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 8000850:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
 8000858:	605a      	str	r2, [r3, #4]
 800085a:	609a      	str	r2, [r3, #8]
 800085c:	60da      	str	r2, [r3, #12]
  HRTIM_TimerCtlTypeDef pTimerCtl = {0};
 800085e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000862:	2200      	movs	r2, #0
 8000864:	601a      	str	r2, [r3, #0]
 8000866:	605a      	str	r2, [r3, #4]
 8000868:	609a      	str	r2, [r3, #8]
 800086a:	60da      	str	r2, [r3, #12]
 800086c:	611a      	str	r2, [r3, #16]
 800086e:	615a      	str	r2, [r3, #20]
 8000870:	619a      	str	r2, [r3, #24]
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 8000872:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000876:	2260      	movs	r2, #96	; 0x60
 8000878:	2100      	movs	r1, #0
 800087a:	4618      	mov	r0, r3
 800087c:	f006 fffc 	bl	8007878 <memset>
  HRTIM_CompareCfgTypeDef pCompareCfg = {0};
 8000880:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000884:	2200      	movs	r2, #0
 8000886:	601a      	str	r2, [r3, #0]
 8000888:	605a      	str	r2, [r3, #4]
 800088a:	609a      	str	r2, [r3, #8]
  HRTIM_DeadTimeCfgTypeDef pDeadTimeCfg = {0};
 800088c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000890:	2224      	movs	r2, #36	; 0x24
 8000892:	2100      	movs	r1, #0
 8000894:	4618      	mov	r0, r3
 8000896:	f006 ffef 	bl	8007878 <memset>
  HRTIM_OutputCfgTypeDef pOutputCfg = {0};
 800089a:	1d3b      	adds	r3, r7, #4
 800089c:	2220      	movs	r2, #32
 800089e:	2100      	movs	r1, #0
 80008a0:	4618      	mov	r0, r3
 80008a2:	f006 ffe9 	bl	8007878 <memset>

  /* USER CODE BEGIN HRTIM1_Init 1 */

  /* USER CODE END HRTIM1_Init 1 */
  hhrtim1.Instance = HRTIM1;
 80008a6:	4bc3      	ldr	r3, [pc, #780]	; (8000bb4 <MX_HRTIM1_Init+0x374>)
 80008a8:	4ac3      	ldr	r2, [pc, #780]	; (8000bb8 <MX_HRTIM1_Init+0x378>)
 80008aa:	601a      	str	r2, [r3, #0]
  hhrtim1.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 80008ac:	4bc1      	ldr	r3, [pc, #772]	; (8000bb4 <MX_HRTIM1_Init+0x374>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	605a      	str	r2, [r3, #4]
  hhrtim1.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 80008b2:	4bc0      	ldr	r3, [pc, #768]	; (8000bb4 <MX_HRTIM1_Init+0x374>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	609a      	str	r2, [r3, #8]
  if (HAL_HRTIM_Init(&hhrtim1) != HAL_OK)
 80008b8:	48be      	ldr	r0, [pc, #760]	; (8000bb4 <MX_HRTIM1_Init+0x374>)
 80008ba:	f003 f929 	bl	8003b10 <HAL_HRTIM_Init>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <MX_HRTIM1_Init+0x88>
  {
    Error_Handler();
 80008c4:	f000 fa30 	bl	8000d28 <Error_Handler>
  }
  if (HAL_HRTIM_DLLCalibrationStart(&hhrtim1, HRTIM_CALIBRATIONRATE_3) != HAL_OK)
 80008c8:	210c      	movs	r1, #12
 80008ca:	48ba      	ldr	r0, [pc, #744]	; (8000bb4 <MX_HRTIM1_Init+0x374>)
 80008cc:	f003 f9f0 	bl	8003cb0 <HAL_HRTIM_DLLCalibrationStart>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_HRTIM1_Init+0x9a>
  {
    Error_Handler();
 80008d6:	f000 fa27 	bl	8000d28 <Error_Handler>
  }
  if (HAL_HRTIM_PollForDLLCalibration(&hhrtim1, 10) != HAL_OK)
 80008da:	210a      	movs	r1, #10
 80008dc:	48b5      	ldr	r0, [pc, #724]	; (8000bb4 <MX_HRTIM1_Init+0x374>)
 80008de:	f003 fa3f 	bl	8003d60 <HAL_HRTIM_PollForDLLCalibration>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_HRTIM1_Init+0xac>
  {
    Error_Handler();
 80008e8:	f000 fa1e 	bl	8000d28 <Error_Handler>
  }
  pADCTriggerCfg.UpdateSource = HRTIM_ADCTRIGGERUPDATE_TIMER_A;
 80008ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  pADCTriggerCfg.Trigger = HRTIM_ADCTRIGGEREVENT24_TIMERA_CMP4;
 80008f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008f8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  if (HAL_HRTIM_ADCTriggerConfig(&hhrtim1, HRTIM_ADCTRIGGER_2, &pADCTriggerCfg) != HAL_OK)
 80008fc:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8000900:	461a      	mov	r2, r3
 8000902:	2102      	movs	r1, #2
 8000904:	48ab      	ldr	r0, [pc, #684]	; (8000bb4 <MX_HRTIM1_Init+0x374>)
 8000906:	f003 fa87 	bl	8003e18 <HAL_HRTIM_ADCTriggerConfig>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_HRTIM1_Init+0xd4>
  {
    Error_Handler();
 8000910:	f000 fa0a 	bl	8000d28 <Error_Handler>
  }
  if (HAL_HRTIM_ADCPostScalerConfig(&hhrtim1, HRTIM_ADCTRIGGER_2, 0x0) != HAL_OK)
 8000914:	2200      	movs	r2, #0
 8000916:	2102      	movs	r1, #2
 8000918:	48a6      	ldr	r0, [pc, #664]	; (8000bb4 <MX_HRTIM1_Init+0x374>)
 800091a:	f003 fc1e 	bl	800415a <HAL_HRTIM_ADCPostScalerConfig>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_HRTIM1_Init+0xe8>
  {
    Error_Handler();
 8000924:	f000 fa00 	bl	8000d28 <Error_Handler>
  }
  pTimeBaseCfg.Period = PERIOD;
 8000928:	f64f 73df 	movw	r3, #65503	; 0xffdf
 800092c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  pTimeBaseCfg.RepetitionCounter = 0x00;
 8000930:	2300      	movs	r3, #0
 8000932:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_MUL32;
 8000936:	2300      	movs	r3, #0
 8000938:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 800093c:	2308      	movs	r3, #8
 800093e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimeBaseCfg) != HAL_OK)
 8000942:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8000946:	461a      	mov	r2, r3
 8000948:	2100      	movs	r1, #0
 800094a:	489a      	ldr	r0, [pc, #616]	; (8000bb4 <MX_HRTIM1_Init+0x374>)
 800094c:	f003 fa3c 	bl	8003dc8 <HAL_HRTIM_TimeBaseConfig>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_HRTIM1_Init+0x11a>
  {
    Error_Handler();
 8000956:	f000 f9e7 	bl	8000d28 <Error_Handler>
  }
  pTimerCtl.UpDownMode = HRTIM_TIMERUPDOWNMODE_UP;
 800095a:	2300      	movs	r3, #0
 800095c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  pTimerCtl.GreaterCMP1 = HRTIM_TIMERGTCMP1_EQUAL;
 8000960:	2300      	movs	r3, #0
 8000962:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  pTimerCtl.DualChannelDacEnable = HRTIM_TIMER_DCDE_DISABLED;
 8000966:	2300      	movs	r3, #0
 8000968:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimerCtl) != HAL_OK)
 800096c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000970:	461a      	mov	r2, r3
 8000972:	2100      	movs	r1, #0
 8000974:	488f      	ldr	r0, [pc, #572]	; (8000bb4 <MX_HRTIM1_Init+0x374>)
 8000976:	f003 fd60 	bl	800443a <HAL_HRTIM_WaveformTimerControl>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <MX_HRTIM1_Init+0x144>
  {
    Error_Handler();
 8000980:	f000 f9d2 	bl	8000d28 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_REP;
 8000984:	2310      	movs	r3, #16
 8000986:	657b      	str	r3, [r7, #84]	; 0x54
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
 8000988:	2300      	movs	r3, #0
 800098a:	65bb      	str	r3, [r7, #88]	; 0x58
  pTimerCfg.DMASrcAddress = 0x0000;
 800098c:	2300      	movs	r3, #0
 800098e:	65fb      	str	r3, [r7, #92]	; 0x5c
  pTimerCfg.DMADstAddress = 0x0000;
 8000990:	2300      	movs	r3, #0
 8000992:	663b      	str	r3, [r7, #96]	; 0x60
  pTimerCfg.DMASize = 0x1;
 8000994:	2301      	movs	r3, #1
 8000996:	667b      	str	r3, [r7, #100]	; 0x64
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 8000998:	2300      	movs	r3, #0
 800099a:	66bb      	str	r3, [r7, #104]	; 0x68
  pTimerCfg.InterleavedMode = HRTIM_INTERLEAVED_MODE_DISABLED;
 800099c:	2300      	movs	r3, #0
 800099e:	66fb      	str	r3, [r7, #108]	; 0x6c
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 80009a0:	2300      	movs	r3, #0
 80009a2:	673b      	str	r3, [r7, #112]	; 0x70
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 80009a4:	2300      	movs	r3, #0
 80009a6:	677b      	str	r3, [r7, #116]	; 0x74
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 80009a8:	2300      	movs	r3, #0
 80009aa:	67bb      	str	r3, [r7, #120]	; 0x78
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_DISABLED;
 80009ac:	2300      	movs	r3, #0
 80009ae:	67fb      	str	r3, [r7, #124]	; 0x7c
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 80009b0:	2300      	movs	r3, #0
 80009b2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 80009b6:	2300      	movs	r3, #0
 80009b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 80009bc:	2300      	movs	r3, #0
 80009be:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 80009c2:	2300      	movs	r3, #0
 80009c4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_NONE;
 80009c8:	2300      	movs	r3, #0
 80009ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 80009ce:	2300      	movs	r3, #0
 80009d0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_ENABLED;
 80009d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED;
 80009dc:	2300      	movs	r3, #0
 80009de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_NONE;
 80009e2:	2300      	movs	r3, #0
 80009e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_NONE;
 80009e8:	2300      	movs	r3, #0
 80009ea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_DISABLED;
 80009ee:	2300      	movs	r3, #0
 80009f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  pTimerCfg.ReSyncUpdate = HRTIM_TIMERESYNC_UPDATE_UNCONDITIONAL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimerCfg) != HAL_OK)
 80009fa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80009fe:	461a      	mov	r2, r3
 8000a00:	2100      	movs	r1, #0
 8000a02:	486c      	ldr	r0, [pc, #432]	; (8000bb4 <MX_HRTIM1_Init+0x374>)
 8000a04:	f003 fca7 	bl	8004356 <HAL_HRTIM_WaveformTimerConfig>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_HRTIM1_Init+0x1d2>
  {
    Error_Handler();
 8000a0e:	f000 f98b 	bl	8000d28 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_NONE;
 8000a12:	2300      	movs	r3, #0
 8000a14:	657b      	str	r3, [r7, #84]	; 0x54
  pTimerCfg.DMASrcAddress = 0x0000;
 8000a16:	2300      	movs	r3, #0
 8000a18:	65fb      	str	r3, [r7, #92]	; 0x5c
  pTimerCfg.DMADstAddress = 0x0000;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	663b      	str	r3, [r7, #96]	; 0x60
  pTimerCfg.DMASize = 0x1;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, &pTimerCfg) != HAL_OK)
 8000a22:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a26:	461a      	mov	r2, r3
 8000a28:	2101      	movs	r1, #1
 8000a2a:	4862      	ldr	r0, [pc, #392]	; (8000bb4 <MX_HRTIM1_Init+0x374>)
 8000a2c:	f003 fc93 	bl	8004356 <HAL_HRTIM_WaveformTimerConfig>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_HRTIM1_Init+0x1fa>
  {
    Error_Handler();
 8000a36:	f000 f977 	bl	8000d28 <Error_Handler>
  }
  pCompareCfg.CompareValue = 27200;
 8000a3a:	f646 2340 	movw	r3, #27200	; 0x6a40
 8000a3e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8000a40:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000a44:	2201      	movs	r2, #1
 8000a46:	2100      	movs	r1, #0
 8000a48:	485a      	ldr	r0, [pc, #360]	; (8000bb4 <MX_HRTIM1_Init+0x374>)
 8000a4a:	f003 fda9 	bl	80045a0 <HAL_HRTIM_WaveformCompareConfig>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_HRTIM1_Init+0x218>
  {
    Error_Handler();
 8000a54:	f000 f968 	bl	8000d28 <Error_Handler>
  }
  pCompareCfg.CompareValue = 13600;
 8000a58:	f243 5320 	movw	r3, #13600	; 0x3520
 8000a5c:	64bb      	str	r3, [r7, #72]	; 0x48
  pCompareCfg.AutoDelayedMode = HRTIM_AUTODELAYEDMODE_REGULAR;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	64fb      	str	r3, [r7, #76]	; 0x4c
  pCompareCfg.AutoDelayedTimeout = 0x0000;
 8000a62:	2300      	movs	r3, #0
 8000a64:	653b      	str	r3, [r7, #80]	; 0x50

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_4, &pCompareCfg) != HAL_OK)
 8000a66:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000a6a:	2208      	movs	r2, #8
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	4851      	ldr	r0, [pc, #324]	; (8000bb4 <MX_HRTIM1_Init+0x374>)
 8000a70:	f003 fd96 	bl	80045a0 <HAL_HRTIM_WaveformCompareConfig>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_HRTIM1_Init+0x23e>
  {
    Error_Handler();
 8000a7a:	f000 f955 	bl	8000d28 <Error_Handler>
  }
  pDeadTimeCfg.Prescaler = HRTIM_TIMDEADTIME_PRESCALERRATIO_MUL8;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	627b      	str	r3, [r7, #36]	; 0x24
  pDeadTimeCfg.RisingValue = DTIME;
 8000a82:	f44f 73cc 	mov.w	r3, #408	; 0x198
 8000a86:	62bb      	str	r3, [r7, #40]	; 0x28
  pDeadTimeCfg.RisingSign = HRTIM_TIMDEADTIME_RISINGSIGN_POSITIVE;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  pDeadTimeCfg.RisingLock = HRTIM_TIMDEADTIME_RISINGLOCK_WRITE;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	633b      	str	r3, [r7, #48]	; 0x30
  pDeadTimeCfg.RisingSignLock = HRTIM_TIMDEADTIME_RISINGSIGNLOCK_WRITE;
 8000a90:	2300      	movs	r3, #0
 8000a92:	637b      	str	r3, [r7, #52]	; 0x34
  pDeadTimeCfg.FallingValue = DTIME;
 8000a94:	f44f 73cc 	mov.w	r3, #408	; 0x198
 8000a98:	63bb      	str	r3, [r7, #56]	; 0x38
  pDeadTimeCfg.FallingSign = HRTIM_TIMDEADTIME_FALLINGSIGN_POSITIVE;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	63fb      	str	r3, [r7, #60]	; 0x3c
  pDeadTimeCfg.FallingLock = HRTIM_TIMDEADTIME_FALLINGLOCK_WRITE;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	643b      	str	r3, [r7, #64]	; 0x40
  pDeadTimeCfg.FallingSignLock = HRTIM_TIMDEADTIME_FALLINGSIGNLOCK_WRITE;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_HRTIM_DeadTimeConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pDeadTimeCfg) != HAL_OK)
 8000aa6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aaa:	461a      	mov	r2, r3
 8000aac:	2100      	movs	r1, #0
 8000aae:	4841      	ldr	r0, [pc, #260]	; (8000bb4 <MX_HRTIM1_Init+0x374>)
 8000ab0:	f003 fcf6 	bl	80044a0 <HAL_HRTIM_DeadTimeConfig>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_HRTIM1_Init+0x27e>
  {
    Error_Handler();
 8000aba:	f000 f935 	bl	8000d28 <Error_Handler>
  }
  if (HAL_HRTIM_DeadTimeConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, &pDeadTimeCfg) != HAL_OK)
 8000abe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ac2:	461a      	mov	r2, r3
 8000ac4:	2101      	movs	r1, #1
 8000ac6:	483b      	ldr	r0, [pc, #236]	; (8000bb4 <MX_HRTIM1_Init+0x374>)
 8000ac8:	f003 fcea 	bl	80044a0 <HAL_HRTIM_DeadTimeConfig>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_HRTIM1_Init+0x296>
  {
    Error_Handler();
 8000ad2:	f000 f929 	bl	8000d28 <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	607b      	str	r3, [r7, #4]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_TIMPER;
 8000ada:	2304      	movs	r3, #4
 8000adc:	60bb      	str	r3, [r7, #8]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP1;
 8000ade:	2308      	movs	r3, #8
 8000ae0:	60fb      	str	r3, [r7, #12]
  pOutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	613b      	str	r3, [r7, #16]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	617b      	str	r3, [r7, #20]
  pOutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
 8000aea:	2300      	movs	r3, #0
 8000aec:	61bb      	str	r3, [r7, #24]
  pOutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 8000aee:	2300      	movs	r3, #0
 8000af0:	61fb      	str	r3, [r7, #28]
  pOutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 8000af2:	2300      	movs	r3, #0
 8000af4:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA1, &pOutputCfg) != HAL_OK)
 8000af6:	1d3b      	adds	r3, r7, #4
 8000af8:	2201      	movs	r2, #1
 8000afa:	2100      	movs	r1, #0
 8000afc:	482d      	ldr	r0, [pc, #180]	; (8000bb4 <MX_HRTIM1_Init+0x374>)
 8000afe:	f003 febd 	bl	800487c <HAL_HRTIM_WaveformOutputConfig>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <MX_HRTIM1_Init+0x2cc>
  {
    Error_Handler();
 8000b08:	f000 f90e 	bl	8000d28 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, HRTIM_OUTPUT_TB1, &pOutputCfg) != HAL_OK)
 8000b0c:	1d3b      	adds	r3, r7, #4
 8000b0e:	2204      	movs	r2, #4
 8000b10:	2101      	movs	r1, #1
 8000b12:	4828      	ldr	r0, [pc, #160]	; (8000bb4 <MX_HRTIM1_Init+0x374>)
 8000b14:	f003 feb2 	bl	800487c <HAL_HRTIM_WaveformOutputConfig>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_HRTIM1_Init+0x2e2>
  {
    Error_Handler();
 8000b1e:	f000 f903 	bl	8000d28 <Error_Handler>
  }
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_NONE;
 8000b22:	2300      	movs	r3, #0
 8000b24:	60bb      	str	r3, [r7, #8]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_NONE;
 8000b26:	2300      	movs	r3, #0
 8000b28:	60fb      	str	r3, [r7, #12]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA2, &pOutputCfg) != HAL_OK)
 8000b2a:	1d3b      	adds	r3, r7, #4
 8000b2c:	2202      	movs	r2, #2
 8000b2e:	2100      	movs	r1, #0
 8000b30:	4820      	ldr	r0, [pc, #128]	; (8000bb4 <MX_HRTIM1_Init+0x374>)
 8000b32:	f003 fea3 	bl	800487c <HAL_HRTIM_WaveformOutputConfig>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <MX_HRTIM1_Init+0x300>
  {
    Error_Handler();
 8000b3c:	f000 f8f4 	bl	8000d28 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, HRTIM_OUTPUT_TB2, &pOutputCfg) != HAL_OK)
 8000b40:	1d3b      	adds	r3, r7, #4
 8000b42:	2208      	movs	r2, #8
 8000b44:	2101      	movs	r1, #1
 8000b46:	481b      	ldr	r0, [pc, #108]	; (8000bb4 <MX_HRTIM1_Init+0x374>)
 8000b48:	f003 fe98 	bl	800487c <HAL_HRTIM_WaveformOutputConfig>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <MX_HRTIM1_Init+0x316>
  {
    Error_Handler();
 8000b52:	f000 f8e9 	bl	8000d28 <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, &pTimeBaseCfg) != HAL_OK)
 8000b56:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8000b5a:	461a      	mov	r2, r3
 8000b5c:	2101      	movs	r1, #1
 8000b5e:	4815      	ldr	r0, [pc, #84]	; (8000bb4 <MX_HRTIM1_Init+0x374>)
 8000b60:	f003 f932 	bl	8003dc8 <HAL_HRTIM_TimeBaseConfig>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <MX_HRTIM1_Init+0x32e>
  {
    Error_Handler();
 8000b6a:	f000 f8dd 	bl	8000d28 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, &pTimerCtl) != HAL_OK)
 8000b6e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000b72:	461a      	mov	r2, r3
 8000b74:	2101      	movs	r1, #1
 8000b76:	480f      	ldr	r0, [pc, #60]	; (8000bb4 <MX_HRTIM1_Init+0x374>)
 8000b78:	f003 fc5f 	bl	800443a <HAL_HRTIM_WaveformTimerControl>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <MX_HRTIM1_Init+0x346>
  {
    Error_Handler();
 8000b82:	f000 f8d1 	bl	8000d28 <Error_Handler>
  }
  pCompareCfg.CompareValue = 27200;
 8000b86:	f646 2340 	movw	r3, #27200	; 0x6a40
 8000b8a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8000b8c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000b90:	2201      	movs	r2, #1
 8000b92:	2101      	movs	r1, #1
 8000b94:	4807      	ldr	r0, [pc, #28]	; (8000bb4 <MX_HRTIM1_Init+0x374>)
 8000b96:	f003 fd03 	bl	80045a0 <HAL_HRTIM_WaveformCompareConfig>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <MX_HRTIM1_Init+0x364>
  {
    Error_Handler();
 8000ba0:	f000 f8c2 	bl	8000d28 <Error_Handler>
  }
  /* USER CODE BEGIN HRTIM1_Init 2 */

  /* USER CODE END HRTIM1_Init 2 */
  HAL_HRTIM_MspPostInit(&hhrtim1);
 8000ba4:	4803      	ldr	r0, [pc, #12]	; (8000bb4 <MX_HRTIM1_Init+0x374>)
 8000ba6:	f000 f955 	bl	8000e54 <HAL_HRTIM_MspPostInit>

}
 8000baa:	bf00      	nop
 8000bac:	37e8      	adds	r7, #232	; 0xe8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	20000120 	.word	0x20000120
 8000bb8:	40016800 	.word	0x40016800

08000bbc <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000bc0:	4b1f      	ldr	r3, [pc, #124]	; (8000c40 <MX_LPUART1_UART_Init+0x84>)
 8000bc2:	4a20      	ldr	r2, [pc, #128]	; (8000c44 <MX_LPUART1_UART_Init+0x88>)
 8000bc4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000bc6:	4b1e      	ldr	r3, [pc, #120]	; (8000c40 <MX_LPUART1_UART_Init+0x84>)
 8000bc8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bcc:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bce:	4b1c      	ldr	r3, [pc, #112]	; (8000c40 <MX_LPUART1_UART_Init+0x84>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000bd4:	4b1a      	ldr	r3, [pc, #104]	; (8000c40 <MX_LPUART1_UART_Init+0x84>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000bda:	4b19      	ldr	r3, [pc, #100]	; (8000c40 <MX_LPUART1_UART_Init+0x84>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000be0:	4b17      	ldr	r3, [pc, #92]	; (8000c40 <MX_LPUART1_UART_Init+0x84>)
 8000be2:	220c      	movs	r2, #12
 8000be4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000be6:	4b16      	ldr	r3, [pc, #88]	; (8000c40 <MX_LPUART1_UART_Init+0x84>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bec:	4b14      	ldr	r3, [pc, #80]	; (8000c40 <MX_LPUART1_UART_Init+0x84>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bf2:	4b13      	ldr	r3, [pc, #76]	; (8000c40 <MX_LPUART1_UART_Init+0x84>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000bf8:	4811      	ldr	r0, [pc, #68]	; (8000c40 <MX_LPUART1_UART_Init+0x84>)
 8000bfa:	f006 f86f 	bl	8006cdc <HAL_UART_Init>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8000c04:	f000 f890 	bl	8000d28 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c08:	2100      	movs	r1, #0
 8000c0a:	480d      	ldr	r0, [pc, #52]	; (8000c40 <MX_LPUART1_UART_Init+0x84>)
 8000c0c:	f006 fd2b 	bl	8007666 <HAL_UARTEx_SetTxFifoThreshold>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <MX_LPUART1_UART_Init+0x5e>
  {
    Error_Handler();
 8000c16:	f000 f887 	bl	8000d28 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	4808      	ldr	r0, [pc, #32]	; (8000c40 <MX_LPUART1_UART_Init+0x84>)
 8000c1e:	f006 fd60 	bl	80076e2 <HAL_UARTEx_SetRxFifoThreshold>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <MX_LPUART1_UART_Init+0x70>
  {
    Error_Handler();
 8000c28:	f000 f87e 	bl	8000d28 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000c2c:	4804      	ldr	r0, [pc, #16]	; (8000c40 <MX_LPUART1_UART_Init+0x84>)
 8000c2e:	f006 fce1 	bl	80075f4 <HAL_UARTEx_DisableFifoMode>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_LPUART1_UART_Init+0x80>
  {
    Error_Handler();
 8000c38:	f000 f876 	bl	8000d28 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000c3c:	bf00      	nop
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	20000028 	.word	0x20000028
 8000c44:	40008000 	.word	0x40008000

08000c48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b08a      	sub	sp, #40	; 0x28
 8000c4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4e:	f107 0314 	add.w	r3, r7, #20
 8000c52:	2200      	movs	r2, #0
 8000c54:	601a      	str	r2, [r3, #0]
 8000c56:	605a      	str	r2, [r3, #4]
 8000c58:	609a      	str	r2, [r3, #8]
 8000c5a:	60da      	str	r2, [r3, #12]
 8000c5c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c5e:	4b2f      	ldr	r3, [pc, #188]	; (8000d1c <MX_GPIO_Init+0xd4>)
 8000c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c62:	4a2e      	ldr	r2, [pc, #184]	; (8000d1c <MX_GPIO_Init+0xd4>)
 8000c64:	f043 0304 	orr.w	r3, r3, #4
 8000c68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c6a:	4b2c      	ldr	r3, [pc, #176]	; (8000d1c <MX_GPIO_Init+0xd4>)
 8000c6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c6e:	f003 0304 	and.w	r3, r3, #4
 8000c72:	613b      	str	r3, [r7, #16]
 8000c74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c76:	4b29      	ldr	r3, [pc, #164]	; (8000d1c <MX_GPIO_Init+0xd4>)
 8000c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c7a:	4a28      	ldr	r2, [pc, #160]	; (8000d1c <MX_GPIO_Init+0xd4>)
 8000c7c:	f043 0320 	orr.w	r3, r3, #32
 8000c80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c82:	4b26      	ldr	r3, [pc, #152]	; (8000d1c <MX_GPIO_Init+0xd4>)
 8000c84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c86:	f003 0320 	and.w	r3, r3, #32
 8000c8a:	60fb      	str	r3, [r7, #12]
 8000c8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8e:	4b23      	ldr	r3, [pc, #140]	; (8000d1c <MX_GPIO_Init+0xd4>)
 8000c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c92:	4a22      	ldr	r2, [pc, #136]	; (8000d1c <MX_GPIO_Init+0xd4>)
 8000c94:	f043 0301 	orr.w	r3, r3, #1
 8000c98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c9a:	4b20      	ldr	r3, [pc, #128]	; (8000d1c <MX_GPIO_Init+0xd4>)
 8000c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c9e:	f003 0301 	and.w	r3, r3, #1
 8000ca2:	60bb      	str	r3, [r7, #8]
 8000ca4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ca6:	4b1d      	ldr	r3, [pc, #116]	; (8000d1c <MX_GPIO_Init+0xd4>)
 8000ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000caa:	4a1c      	ldr	r2, [pc, #112]	; (8000d1c <MX_GPIO_Init+0xd4>)
 8000cac:	f043 0302 	orr.w	r3, r3, #2
 8000cb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cb2:	4b1a      	ldr	r3, [pc, #104]	; (8000d1c <MX_GPIO_Init+0xd4>)
 8000cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cb6:	f003 0302 	and.w	r3, r3, #2
 8000cba:	607b      	str	r3, [r7, #4]
 8000cbc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	2120      	movs	r1, #32
 8000cc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cc6:	f002 fee7 	bl	8003a98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000cca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cd0:	4b13      	ldr	r3, [pc, #76]	; (8000d20 <MX_GPIO_Init+0xd8>)
 8000cd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000cd8:	f107 0314 	add.w	r3, r7, #20
 8000cdc:	4619      	mov	r1, r3
 8000cde:	4811      	ldr	r0, [pc, #68]	; (8000d24 <MX_GPIO_Init+0xdc>)
 8000ce0:	f002 fd58 	bl	8003794 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000ce4:	2320      	movs	r3, #32
 8000ce6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce8:	2301      	movs	r3, #1
 8000cea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cec:	2300      	movs	r3, #0
 8000cee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000cf4:	f107 0314 	add.w	r3, r7, #20
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cfe:	f002 fd49 	bl	8003794 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000d02:	2200      	movs	r2, #0
 8000d04:	2100      	movs	r1, #0
 8000d06:	2028      	movs	r0, #40	; 0x28
 8000d08:	f002 fd0f 	bl	800372a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d0c:	2028      	movs	r0, #40	; 0x28
 8000d0e:	f002 fd26 	bl	800375e <HAL_NVIC_EnableIRQ>

}
 8000d12:	bf00      	nop
 8000d14:	3728      	adds	r7, #40	; 0x28
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	40021000 	.word	0x40021000
 8000d20:	10110000 	.word	0x10110000
 8000d24:	48000800 	.word	0x48000800

08000d28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000d2c:	bf00      	nop
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
	...

08000d38 <HAL_MspInit>:
void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef *hhrtim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d3e:	4b0f      	ldr	r3, [pc, #60]	; (8000d7c <HAL_MspInit+0x44>)
 8000d40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d42:	4a0e      	ldr	r2, [pc, #56]	; (8000d7c <HAL_MspInit+0x44>)
 8000d44:	f043 0301 	orr.w	r3, r3, #1
 8000d48:	6613      	str	r3, [r2, #96]	; 0x60
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <HAL_MspInit+0x44>)
 8000d4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d4e:	f003 0301 	and.w	r3, r3, #1
 8000d52:	607b      	str	r3, [r7, #4]
 8000d54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d56:	4b09      	ldr	r3, [pc, #36]	; (8000d7c <HAL_MspInit+0x44>)
 8000d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d5a:	4a08      	ldr	r2, [pc, #32]	; (8000d7c <HAL_MspInit+0x44>)
 8000d5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d60:	6593      	str	r3, [r2, #88]	; 0x58
 8000d62:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <HAL_MspInit+0x44>)
 8000d64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d6a:	603b      	str	r3, [r7, #0]
 8000d6c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000d6e:	f005 f825 	bl	8005dbc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d72:	bf00      	nop
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	40021000 	.word	0x40021000

08000d80 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b08a      	sub	sp, #40	; 0x28
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d88:	f107 0314 	add.w	r3, r7, #20
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	605a      	str	r2, [r3, #4]
 8000d92:	609a      	str	r2, [r3, #8]
 8000d94:	60da      	str	r2, [r3, #12]
 8000d96:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000da0:	d124      	bne.n	8000dec <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000da2:	4b14      	ldr	r3, [pc, #80]	; (8000df4 <HAL_ADC_MspInit+0x74>)
 8000da4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000da6:	4a13      	ldr	r2, [pc, #76]	; (8000df4 <HAL_ADC_MspInit+0x74>)
 8000da8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000dac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dae:	4b11      	ldr	r3, [pc, #68]	; (8000df4 <HAL_ADC_MspInit+0x74>)
 8000db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000db2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000db6:	613b      	str	r3, [r7, #16]
 8000db8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dba:	4b0e      	ldr	r3, [pc, #56]	; (8000df4 <HAL_ADC_MspInit+0x74>)
 8000dbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dbe:	4a0d      	ldr	r2, [pc, #52]	; (8000df4 <HAL_ADC_MspInit+0x74>)
 8000dc0:	f043 0301 	orr.w	r3, r3, #1
 8000dc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dc6:	4b0b      	ldr	r3, [pc, #44]	; (8000df4 <HAL_ADC_MspInit+0x74>)
 8000dc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dca:	f003 0301 	and.w	r3, r3, #1
 8000dce:	60fb      	str	r3, [r7, #12]
 8000dd0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000dd2:	2303      	movs	r3, #3
 8000dd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dd6:	2303      	movs	r3, #3
 8000dd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dde:	f107 0314 	add.w	r3, r7, #20
 8000de2:	4619      	mov	r1, r3
 8000de4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000de8:	f002 fcd4 	bl	8003794 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000dec:	bf00      	nop
 8000dee:	3728      	adds	r7, #40	; 0x28
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	40021000 	.word	0x40021000

08000df8 <HAL_HRTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hhrtim: HRTIM handle pointer
* @retval None
*/
void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hhrtim)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b084      	sub	sp, #16
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  if(hhrtim->Instance==HRTIM1)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a11      	ldr	r2, [pc, #68]	; (8000e4c <HAL_HRTIM_MspInit+0x54>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d11b      	bne.n	8000e42 <HAL_HRTIM_MspInit+0x4a>
  {
  /* USER CODE BEGIN HRTIM1_MspInit 0 */

  /* USER CODE END HRTIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 8000e0a:	4b11      	ldr	r3, [pc, #68]	; (8000e50 <HAL_HRTIM_MspInit+0x58>)
 8000e0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e0e:	4a10      	ldr	r2, [pc, #64]	; (8000e50 <HAL_HRTIM_MspInit+0x58>)
 8000e10:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000e14:	6613      	str	r3, [r2, #96]	; 0x60
 8000e16:	4b0e      	ldr	r3, [pc, #56]	; (8000e50 <HAL_HRTIM_MspInit+0x58>)
 8000e18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e1a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000e1e:	60fb      	str	r3, [r7, #12]
 8000e20:	68fb      	ldr	r3, [r7, #12]
    /* HRTIM1 interrupt Init */
    HAL_NVIC_SetPriority(HRTIM1_TIMA_IRQn, 0, 0);
 8000e22:	2200      	movs	r2, #0
 8000e24:	2100      	movs	r1, #0
 8000e26:	2044      	movs	r0, #68	; 0x44
 8000e28:	f002 fc7f 	bl	800372a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HRTIM1_TIMA_IRQn);
 8000e2c:	2044      	movs	r0, #68	; 0x44
 8000e2e:	f002 fc96 	bl	800375e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(HRTIM1_TIMB_IRQn, 0, 0);
 8000e32:	2200      	movs	r2, #0
 8000e34:	2100      	movs	r1, #0
 8000e36:	2045      	movs	r0, #69	; 0x45
 8000e38:	f002 fc77 	bl	800372a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HRTIM1_TIMB_IRQn);
 8000e3c:	2045      	movs	r0, #69	; 0x45
 8000e3e:	f002 fc8e 	bl	800375e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN HRTIM1_MspInit 1 */

  /* USER CODE END HRTIM1_MspInit 1 */
  }

}
 8000e42:	bf00      	nop
 8000e44:	3710      	adds	r7, #16
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	40016800 	.word	0x40016800
 8000e50:	40021000 	.word	0x40021000

08000e54 <HAL_HRTIM_MspPostInit>:

void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef* hhrtim)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b088      	sub	sp, #32
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e5c:	f107 030c 	add.w	r3, r7, #12
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]
 8000e64:	605a      	str	r2, [r3, #4]
 8000e66:	609a      	str	r2, [r3, #8]
 8000e68:	60da      	str	r2, [r3, #12]
 8000e6a:	611a      	str	r2, [r3, #16]
  if(hhrtim->Instance==HRTIM1)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a12      	ldr	r2, [pc, #72]	; (8000ebc <HAL_HRTIM_MspPostInit+0x68>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d11d      	bne.n	8000eb2 <HAL_HRTIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN HRTIM1_MspPostInit 0 */

  /* USER CODE END HRTIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e76:	4b12      	ldr	r3, [pc, #72]	; (8000ec0 <HAL_HRTIM_MspPostInit+0x6c>)
 8000e78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e7a:	4a11      	ldr	r2, [pc, #68]	; (8000ec0 <HAL_HRTIM_MspPostInit+0x6c>)
 8000e7c:	f043 0301 	orr.w	r3, r3, #1
 8000e80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e82:	4b0f      	ldr	r3, [pc, #60]	; (8000ec0 <HAL_HRTIM_MspPostInit+0x6c>)
 8000e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e86:	f003 0301 	and.w	r3, r3, #1
 8000e8a:	60bb      	str	r3, [r7, #8]
 8000e8c:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> HRTIM1_CHA1
    PA9     ------> HRTIM1_CHA2
    PA10     ------> HRTIM1_CHB1
    PA11     ------> HRTIM1_CHB2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8000e8e:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000e92:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e94:	2302      	movs	r3, #2
 8000e96:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e9c:	2303      	movs	r3, #3
 8000e9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 8000ea0:	230d      	movs	r3, #13
 8000ea2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea4:	f107 030c 	add.w	r3, r7, #12
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eae:	f002 fc71 	bl	8003794 <HAL_GPIO_Init>
  /* USER CODE BEGIN HRTIM1_MspPostInit 1 */

  /* USER CODE END HRTIM1_MspPostInit 1 */
  }

}
 8000eb2:	bf00      	nop
 8000eb4:	3720      	adds	r7, #32
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	40016800 	.word	0x40016800
 8000ec0:	40021000 	.word	0x40021000

08000ec4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b08a      	sub	sp, #40	; 0x28
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ecc:	f107 0314 	add.w	r3, r7, #20
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	605a      	str	r2, [r3, #4]
 8000ed6:	609a      	str	r2, [r3, #8]
 8000ed8:	60da      	str	r2, [r3, #12]
 8000eda:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a17      	ldr	r2, [pc, #92]	; (8000f40 <HAL_UART_MspInit+0x7c>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d128      	bne.n	8000f38 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000ee6:	4b17      	ldr	r3, [pc, #92]	; (8000f44 <HAL_UART_MspInit+0x80>)
 8000ee8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000eea:	4a16      	ldr	r2, [pc, #88]	; (8000f44 <HAL_UART_MspInit+0x80>)
 8000eec:	f043 0301 	orr.w	r3, r3, #1
 8000ef0:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000ef2:	4b14      	ldr	r3, [pc, #80]	; (8000f44 <HAL_UART_MspInit+0x80>)
 8000ef4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ef6:	f003 0301 	and.w	r3, r3, #1
 8000efa:	613b      	str	r3, [r7, #16]
 8000efc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000efe:	4b11      	ldr	r3, [pc, #68]	; (8000f44 <HAL_UART_MspInit+0x80>)
 8000f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f02:	4a10      	ldr	r2, [pc, #64]	; (8000f44 <HAL_UART_MspInit+0x80>)
 8000f04:	f043 0301 	orr.w	r3, r3, #1
 8000f08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f0a:	4b0e      	ldr	r3, [pc, #56]	; (8000f44 <HAL_UART_MspInit+0x80>)
 8000f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f0e:	f003 0301 	and.w	r3, r3, #1
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000f16:	230c      	movs	r3, #12
 8000f18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f22:	2300      	movs	r3, #0
 8000f24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000f26:	230c      	movs	r3, #12
 8000f28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f2a:	f107 0314 	add.w	r3, r7, #20
 8000f2e:	4619      	mov	r1, r3
 8000f30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f34:	f002 fc2e 	bl	8003794 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000f38:	bf00      	nop
 8000f3a:	3728      	adds	r7, #40	; 0x28
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	40008000 	.word	0x40008000
 8000f44:	40021000 	.word	0x40021000

08000f48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000f4c:	bf00      	nop
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr

08000f56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f56:	b480      	push	{r7}
 8000f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f5a:	e7fe      	b.n	8000f5a <HardFault_Handler+0x4>

08000f5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f60:	e7fe      	b.n	8000f60 <MemManage_Handler+0x4>

08000f62 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f62:	b480      	push	{r7}
 8000f64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f66:	e7fe      	b.n	8000f66 <BusFault_Handler+0x4>

08000f68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f6c:	e7fe      	b.n	8000f6c <UsageFault_Handler+0x4>

08000f6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f6e:	b480      	push	{r7}
 8000f70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f72:	bf00      	nop
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr

08000f7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f80:	bf00      	nop
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr

08000f8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f8a:	b480      	push	{r7}
 8000f8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f8e:	bf00      	nop
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr

08000f98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f9c:	f000 f8b0 	bl	8001100 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fa0:	bf00      	nop
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000fa8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000fac:	f002 fd8c 	bl	8003ac8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000fb0:	bf00      	nop
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <HRTIM1_TIMA_IRQHandler>:

/**
  * @brief This function handles HRTIM timer A global interrupt.
  */
void HRTIM1_TIMA_IRQHandler(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HRTIM1_TIMA_IRQn 0 */
  /* USER CODE END HRTIM1_TIMA_IRQn 0 */
  HAL_HRTIM_IRQHandler(&hhrtim1,HRTIM_TIMERINDEX_TIMER_A);
 8000fb8:	2100      	movs	r1, #0
 8000fba:	4802      	ldr	r0, [pc, #8]	; (8000fc4 <HRTIM1_TIMA_IRQHandler+0x10>)
 8000fbc:	f003 fce7 	bl	800498e <HAL_HRTIM_IRQHandler>
  /* USER CODE BEGIN HRTIM1_TIMA_IRQn 1 */

  /* USER CODE END HRTIM1_TIMA_IRQn 1 */
}
 8000fc0:	bf00      	nop
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	20000120 	.word	0x20000120

08000fc8 <HRTIM1_TIMB_IRQHandler>:

/**
  * @brief This function handles HRTIM timer B global interrupt.
  */
void HRTIM1_TIMB_IRQHandler(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HRTIM1_TIMB_IRQn 0 */

  /* USER CODE END HRTIM1_TIMB_IRQn 0 */
  HAL_HRTIM_IRQHandler(&hhrtim1,HRTIM_TIMERINDEX_TIMER_B);
 8000fcc:	2101      	movs	r1, #1
 8000fce:	4802      	ldr	r0, [pc, #8]	; (8000fd8 <HRTIM1_TIMB_IRQHandler+0x10>)
 8000fd0:	f003 fcdd 	bl	800498e <HAL_HRTIM_IRQHandler>
  /* USER CODE BEGIN HRTIM1_TIMB_IRQn 1 */

  /* USER CODE END HRTIM1_TIMB_IRQn 1 */
}
 8000fd4:	bf00      	nop
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	20000120 	.word	0x20000120

08000fdc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000fe0:	4b08      	ldr	r3, [pc, #32]	; (8001004 <SystemInit+0x28>)
 8000fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fe6:	4a07      	ldr	r2, [pc, #28]	; (8001004 <SystemInit+0x28>)
 8000fe8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ff0:	4b04      	ldr	r3, [pc, #16]	; (8001004 <SystemInit+0x28>)
 8000ff2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ff6:	609a      	str	r2, [r3, #8]
#endif
}
 8000ff8:	bf00      	nop
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	e000ed00 	.word	0xe000ed00

08001008 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001008:	480d      	ldr	r0, [pc, #52]	; (8001040 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800100a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800100c:	480d      	ldr	r0, [pc, #52]	; (8001044 <LoopForever+0x6>)
  ldr r1, =_edata
 800100e:	490e      	ldr	r1, [pc, #56]	; (8001048 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001010:	4a0e      	ldr	r2, [pc, #56]	; (800104c <LoopForever+0xe>)
  movs r3, #0
 8001012:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001014:	e002      	b.n	800101c <LoopCopyDataInit>

08001016 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001016:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001018:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800101a:	3304      	adds	r3, #4

0800101c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800101c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800101e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001020:	d3f9      	bcc.n	8001016 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001022:	4a0b      	ldr	r2, [pc, #44]	; (8001050 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001024:	4c0b      	ldr	r4, [pc, #44]	; (8001054 <LoopForever+0x16>)
  movs r3, #0
 8001026:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001028:	e001      	b.n	800102e <LoopFillZerobss>

0800102a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800102a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800102c:	3204      	adds	r2, #4

0800102e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800102e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001030:	d3fb      	bcc.n	800102a <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001032:	f7ff ffd3 	bl	8000fdc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001036:	f006 fbfb 	bl	8007830 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800103a:	f7ff fa6d 	bl	8000518 <main>

0800103e <LoopForever>:

LoopForever:
    b LoopForever
 800103e:	e7fe      	b.n	800103e <LoopForever>
  ldr   r0, =_estack
 8001040:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001044:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001048:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800104c:	080078f0 	.word	0x080078f0
  ldr r2, =_sbss
 8001050:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001054:	20000220 	.word	0x20000220

08001058 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001058:	e7fe      	b.n	8001058 <ADC1_2_IRQHandler>

0800105a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800105a:	b580      	push	{r7, lr}
 800105c:	b082      	sub	sp, #8
 800105e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001060:	2300      	movs	r3, #0
 8001062:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001064:	2003      	movs	r0, #3
 8001066:	f002 fb55 	bl	8003714 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800106a:	2000      	movs	r0, #0
 800106c:	f000 f80e 	bl	800108c <HAL_InitTick>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d002      	beq.n	800107c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	71fb      	strb	r3, [r7, #7]
 800107a:	e001      	b.n	8001080 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800107c:	f7ff fe5c 	bl	8000d38 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001080:	79fb      	ldrb	r3, [r7, #7]

}
 8001082:	4618      	mov	r0, r3
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
	...

0800108c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001094:	2300      	movs	r3, #0
 8001096:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001098:	4b16      	ldr	r3, [pc, #88]	; (80010f4 <HAL_InitTick+0x68>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d022      	beq.n	80010e6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80010a0:	4b15      	ldr	r3, [pc, #84]	; (80010f8 <HAL_InitTick+0x6c>)
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	4b13      	ldr	r3, [pc, #76]	; (80010f4 <HAL_InitTick+0x68>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80010ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80010b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80010b4:	4618      	mov	r0, r3
 80010b6:	f002 fb60 	bl	800377a <HAL_SYSTICK_Config>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d10f      	bne.n	80010e0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2b0f      	cmp	r3, #15
 80010c4:	d809      	bhi.n	80010da <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010c6:	2200      	movs	r2, #0
 80010c8:	6879      	ldr	r1, [r7, #4]
 80010ca:	f04f 30ff 	mov.w	r0, #4294967295
 80010ce:	f002 fb2c 	bl	800372a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010d2:	4a0a      	ldr	r2, [pc, #40]	; (80010fc <HAL_InitTick+0x70>)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6013      	str	r3, [r2, #0]
 80010d8:	e007      	b.n	80010ea <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80010da:	2301      	movs	r3, #1
 80010dc:	73fb      	strb	r3, [r7, #15]
 80010de:	e004      	b.n	80010ea <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010e0:	2301      	movs	r3, #1
 80010e2:	73fb      	strb	r3, [r7, #15]
 80010e4:	e001      	b.n	80010ea <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010e6:	2301      	movs	r3, #1
 80010e8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80010ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	3710      	adds	r7, #16
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	20000008 	.word	0x20000008
 80010f8:	20000000 	.word	0x20000000
 80010fc:	20000004 	.word	0x20000004

08001100 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001104:	4b05      	ldr	r3, [pc, #20]	; (800111c <HAL_IncTick+0x1c>)
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	4b05      	ldr	r3, [pc, #20]	; (8001120 <HAL_IncTick+0x20>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4413      	add	r3, r2
 800110e:	4a03      	ldr	r2, [pc, #12]	; (800111c <HAL_IncTick+0x1c>)
 8001110:	6013      	str	r3, [r2, #0]
}
 8001112:	bf00      	nop
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr
 800111c:	2000021c 	.word	0x2000021c
 8001120:	20000008 	.word	0x20000008

08001124 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  return uwTick;
 8001128:	4b03      	ldr	r3, [pc, #12]	; (8001138 <HAL_GetTick+0x14>)
 800112a:	681b      	ldr	r3, [r3, #0]
}
 800112c:	4618      	mov	r0, r3
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	2000021c 	.word	0x2000021c

0800113c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001144:	f7ff ffee 	bl	8001124 <HAL_GetTick>
 8001148:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001154:	d004      	beq.n	8001160 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001156:	4b09      	ldr	r3, [pc, #36]	; (800117c <HAL_Delay+0x40>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	68fa      	ldr	r2, [r7, #12]
 800115c:	4413      	add	r3, r2
 800115e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001160:	bf00      	nop
 8001162:	f7ff ffdf 	bl	8001124 <HAL_GetTick>
 8001166:	4602      	mov	r2, r0
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	1ad3      	subs	r3, r2, r3
 800116c:	68fa      	ldr	r2, [r7, #12]
 800116e:	429a      	cmp	r2, r3
 8001170:	d8f7      	bhi.n	8001162 <HAL_Delay+0x26>
  {
  }
}
 8001172:	bf00      	nop
 8001174:	3710      	adds	r7, #16
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	20000008 	.word	0x20000008

08001180 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	689b      	ldr	r3, [r3, #8]
 800118e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	431a      	orrs	r2, r3
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	609a      	str	r2, [r3, #8]
}
 800119a:	bf00      	nop
 800119c:	370c      	adds	r7, #12
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr

080011a6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80011a6:	b480      	push	{r7}
 80011a8:	b083      	sub	sp, #12
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	6078      	str	r0, [r7, #4]
 80011ae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	689b      	ldr	r3, [r3, #8]
 80011b4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	431a      	orrs	r2, r3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	609a      	str	r2, [r3, #8]
}
 80011c0:	bf00      	nop
 80011c2:	370c      	adds	r7, #12
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr

080011cc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80011dc:	4618      	mov	r0, r3
 80011de:	370c      	adds	r7, #12
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr

080011e8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b087      	sub	sp, #28
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	60f8      	str	r0, [r7, #12]
 80011f0:	60b9      	str	r1, [r7, #8]
 80011f2:	607a      	str	r2, [r7, #4]
 80011f4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	3360      	adds	r3, #96	; 0x60
 80011fa:	461a      	mov	r2, r3
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	4413      	add	r3, r2
 8001202:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	4b08      	ldr	r3, [pc, #32]	; (800122c <LL_ADC_SetOffset+0x44>)
 800120a:	4013      	ands	r3, r2
 800120c:	687a      	ldr	r2, [r7, #4]
 800120e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001212:	683a      	ldr	r2, [r7, #0]
 8001214:	430a      	orrs	r2, r1
 8001216:	4313      	orrs	r3, r2
 8001218:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001220:	bf00      	nop
 8001222:	371c      	adds	r7, #28
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr
 800122c:	03fff000 	.word	0x03fff000

08001230 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001230:	b480      	push	{r7}
 8001232:	b085      	sub	sp, #20
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	3360      	adds	r3, #96	; 0x60
 800123e:	461a      	mov	r2, r3
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	4413      	add	r3, r2
 8001246:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001250:	4618      	mov	r0, r3
 8001252:	3714      	adds	r7, #20
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr

0800125c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800125c:	b480      	push	{r7}
 800125e:	b087      	sub	sp, #28
 8001260:	af00      	add	r7, sp, #0
 8001262:	60f8      	str	r0, [r7, #12]
 8001264:	60b9      	str	r1, [r7, #8]
 8001266:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	3360      	adds	r3, #96	; 0x60
 800126c:	461a      	mov	r2, r3
 800126e:	68bb      	ldr	r3, [r7, #8]
 8001270:	009b      	lsls	r3, r3, #2
 8001272:	4413      	add	r3, r2
 8001274:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	431a      	orrs	r2, r3
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001286:	bf00      	nop
 8001288:	371c      	adds	r7, #28
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr

08001292 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001292:	b480      	push	{r7}
 8001294:	b087      	sub	sp, #28
 8001296:	af00      	add	r7, sp, #0
 8001298:	60f8      	str	r0, [r7, #12]
 800129a:	60b9      	str	r1, [r7, #8]
 800129c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	3360      	adds	r3, #96	; 0x60
 80012a2:	461a      	mov	r2, r3
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	4413      	add	r3, r2
 80012aa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	431a      	orrs	r2, r3
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80012bc:	bf00      	nop
 80012be:	371c      	adds	r7, #28
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr

080012c8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b087      	sub	sp, #28
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	60f8      	str	r0, [r7, #12]
 80012d0:	60b9      	str	r1, [r7, #8]
 80012d2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	3360      	adds	r3, #96	; 0x60
 80012d8:	461a      	mov	r2, r3
 80012da:	68bb      	ldr	r3, [r7, #8]
 80012dc:	009b      	lsls	r3, r3, #2
 80012de:	4413      	add	r3, r2
 80012e0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	431a      	orrs	r2, r3
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80012f2:	bf00      	nop
 80012f4:	371c      	adds	r7, #28
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr

080012fe <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80012fe:	b480      	push	{r7}
 8001300:	b083      	sub	sp, #12
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
 8001306:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	695b      	ldr	r3, [r3, #20]
 800130c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	431a      	orrs	r2, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	615a      	str	r2, [r3, #20]
}
 8001318:	bf00      	nop
 800131a:	370c      	adds	r7, #12
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr

08001324 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001324:	b480      	push	{r7}
 8001326:	b087      	sub	sp, #28
 8001328:	af00      	add	r7, sp, #0
 800132a:	60f8      	str	r0, [r7, #12]
 800132c:	60b9      	str	r1, [r7, #8]
 800132e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	3330      	adds	r3, #48	; 0x30
 8001334:	461a      	mov	r2, r3
 8001336:	68bb      	ldr	r3, [r7, #8]
 8001338:	0a1b      	lsrs	r3, r3, #8
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	f003 030c 	and.w	r3, r3, #12
 8001340:	4413      	add	r3, r2
 8001342:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	f003 031f 	and.w	r3, r3, #31
 800134e:	211f      	movs	r1, #31
 8001350:	fa01 f303 	lsl.w	r3, r1, r3
 8001354:	43db      	mvns	r3, r3
 8001356:	401a      	ands	r2, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	0e9b      	lsrs	r3, r3, #26
 800135c:	f003 011f 	and.w	r1, r3, #31
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	f003 031f 	and.w	r3, r3, #31
 8001366:	fa01 f303 	lsl.w	r3, r1, r3
 800136a:	431a      	orrs	r2, r3
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001370:	bf00      	nop
 8001372:	371c      	adds	r7, #28
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr

0800137c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800137c:	b480      	push	{r7}
 800137e:	b087      	sub	sp, #28
 8001380:	af00      	add	r7, sp, #0
 8001382:	60f8      	str	r0, [r7, #12]
 8001384:	60b9      	str	r1, [r7, #8]
 8001386:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	3314      	adds	r3, #20
 800138c:	461a      	mov	r2, r3
 800138e:	68bb      	ldr	r3, [r7, #8]
 8001390:	0e5b      	lsrs	r3, r3, #25
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	f003 0304 	and.w	r3, r3, #4
 8001398:	4413      	add	r3, r2
 800139a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	0d1b      	lsrs	r3, r3, #20
 80013a4:	f003 031f 	and.w	r3, r3, #31
 80013a8:	2107      	movs	r1, #7
 80013aa:	fa01 f303 	lsl.w	r3, r1, r3
 80013ae:	43db      	mvns	r3, r3
 80013b0:	401a      	ands	r2, r3
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	0d1b      	lsrs	r3, r3, #20
 80013b6:	f003 031f 	and.w	r3, r3, #31
 80013ba:	6879      	ldr	r1, [r7, #4]
 80013bc:	fa01 f303 	lsl.w	r3, r1, r3
 80013c0:	431a      	orrs	r2, r3
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80013c6:	bf00      	nop
 80013c8:	371c      	adds	r7, #28
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
	...

080013d4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b085      	sub	sp, #20
 80013d8:	af00      	add	r7, sp, #0
 80013da:	60f8      	str	r0, [r7, #12]
 80013dc:	60b9      	str	r1, [r7, #8]
 80013de:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013ec:	43db      	mvns	r3, r3
 80013ee:	401a      	ands	r2, r3
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	f003 0318 	and.w	r3, r3, #24
 80013f6:	4908      	ldr	r1, [pc, #32]	; (8001418 <LL_ADC_SetChannelSingleDiff+0x44>)
 80013f8:	40d9      	lsrs	r1, r3
 80013fa:	68bb      	ldr	r3, [r7, #8]
 80013fc:	400b      	ands	r3, r1
 80013fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001402:	431a      	orrs	r2, r3
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800140a:	bf00      	nop
 800140c:	3714      	adds	r7, #20
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	0007ffff 	.word	0x0007ffff

0800141c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800142c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001430:	687a      	ldr	r2, [r7, #4]
 8001432:	6093      	str	r3, [r2, #8]
}
 8001434:	bf00      	nop
 8001436:	370c      	adds	r7, #12
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr

08001440 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001450:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001454:	d101      	bne.n	800145a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001456:	2301      	movs	r3, #1
 8001458:	e000      	b.n	800145c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800145a:	2300      	movs	r3, #0
}
 800145c:	4618      	mov	r0, r3
 800145e:	370c      	adds	r7, #12
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr

08001468 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001478:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800147c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001484:	bf00      	nop
 8001486:	370c      	adds	r7, #12
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr

08001490 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80014a4:	d101      	bne.n	80014aa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80014a6:	2301      	movs	r3, #1
 80014a8:	e000      	b.n	80014ac <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80014aa:	2300      	movs	r3, #0
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	370c      	adds	r7, #12
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr

080014b8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80014c8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80014cc:	f043 0201 	orr.w	r2, r3, #1
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80014d4:	bf00      	nop
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr

080014e0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80014f0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80014f4:	f043 0202 	orr.w	r2, r3, #2
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80014fc:	bf00      	nop
 80014fe:	370c      	adds	r7, #12
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr

08001508 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	f003 0301 	and.w	r3, r3, #1
 8001518:	2b01      	cmp	r3, #1
 800151a:	d101      	bne.n	8001520 <LL_ADC_IsEnabled+0x18>
 800151c:	2301      	movs	r3, #1
 800151e:	e000      	b.n	8001522 <LL_ADC_IsEnabled+0x1a>
 8001520:	2300      	movs	r3, #0
}
 8001522:	4618      	mov	r0, r3
 8001524:	370c      	adds	r7, #12
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr

0800152e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800152e:	b480      	push	{r7}
 8001530:	b083      	sub	sp, #12
 8001532:	af00      	add	r7, sp, #0
 8001534:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	f003 0302 	and.w	r3, r3, #2
 800153e:	2b02      	cmp	r3, #2
 8001540:	d101      	bne.n	8001546 <LL_ADC_IsDisableOngoing+0x18>
 8001542:	2301      	movs	r3, #1
 8001544:	e000      	b.n	8001548 <LL_ADC_IsDisableOngoing+0x1a>
 8001546:	2300      	movs	r3, #0
}
 8001548:	4618      	mov	r0, r3
 800154a:	370c      	adds	r7, #12
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr

08001554 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	f003 0304 	and.w	r3, r3, #4
 8001564:	2b04      	cmp	r3, #4
 8001566:	d101      	bne.n	800156c <LL_ADC_REG_IsConversionOngoing+0x18>
 8001568:	2301      	movs	r3, #1
 800156a:	e000      	b.n	800156e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800156c:	2300      	movs	r3, #0
}
 800156e:	4618      	mov	r0, r3
 8001570:	370c      	adds	r7, #12
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr

0800157a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800157a:	b480      	push	{r7}
 800157c:	b083      	sub	sp, #12
 800157e:	af00      	add	r7, sp, #0
 8001580:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	f003 0308 	and.w	r3, r3, #8
 800158a:	2b08      	cmp	r3, #8
 800158c:	d101      	bne.n	8001592 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800158e:	2301      	movs	r3, #1
 8001590:	e000      	b.n	8001594 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001592:	2300      	movs	r3, #0
}
 8001594:	4618      	mov	r0, r3
 8001596:	370c      	adds	r7, #12
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr

080015a0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80015a0:	b590      	push	{r4, r7, lr}
 80015a2:	b089      	sub	sp, #36	; 0x24
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015a8:	2300      	movs	r3, #0
 80015aa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80015ac:	2300      	movs	r3, #0
 80015ae:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d101      	bne.n	80015ba <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e1ad      	b.n	8001916 <HAL_ADC_Init+0x376>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	695b      	ldr	r3, [r3, #20]
 80015be:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d109      	bne.n	80015dc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	f7ff fbd9 	bl	8000d80 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2200      	movs	r2, #0
 80015d2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2200      	movs	r2, #0
 80015d8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7ff ff2d 	bl	8001440 <LL_ADC_IsDeepPowerDownEnabled>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d004      	beq.n	80015f6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7ff ff13 	bl	800141c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7ff ff48 	bl	8001490 <LL_ADC_IsInternalRegulatorEnabled>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d113      	bne.n	800162e <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4618      	mov	r0, r3
 800160c:	f7ff ff2c 	bl	8001468 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001610:	4b9e      	ldr	r3, [pc, #632]	; (800188c <HAL_ADC_Init+0x2ec>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	099b      	lsrs	r3, r3, #6
 8001616:	4a9e      	ldr	r2, [pc, #632]	; (8001890 <HAL_ADC_Init+0x2f0>)
 8001618:	fba2 2303 	umull	r2, r3, r2, r3
 800161c:	099b      	lsrs	r3, r3, #6
 800161e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001620:	e002      	b.n	8001628 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8001622:	68bb      	ldr	r3, [r7, #8]
 8001624:	3b01      	subs	r3, #1
 8001626:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d1f9      	bne.n	8001622 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4618      	mov	r0, r3
 8001634:	f7ff ff2c 	bl	8001490 <LL_ADC_IsInternalRegulatorEnabled>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d10d      	bne.n	800165a <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001642:	f043 0210 	orr.w	r2, r3, #16
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800164e:	f043 0201 	orr.w	r2, r3, #1
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4618      	mov	r0, r3
 8001660:	f7ff ff78 	bl	8001554 <LL_ADC_REG_IsConversionOngoing>
 8001664:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800166a:	f003 0310 	and.w	r3, r3, #16
 800166e:	2b00      	cmp	r3, #0
 8001670:	f040 8148 	bne.w	8001904 <HAL_ADC_Init+0x364>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	2b00      	cmp	r3, #0
 8001678:	f040 8144 	bne.w	8001904 <HAL_ADC_Init+0x364>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001680:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001684:	f043 0202 	orr.w	r2, r3, #2
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff ff39 	bl	8001508 <LL_ADC_IsEnabled>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d141      	bne.n	8001720 <HAL_ADC_Init+0x180>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80016a4:	d004      	beq.n	80016b0 <HAL_ADC_Init+0x110>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a7a      	ldr	r2, [pc, #488]	; (8001894 <HAL_ADC_Init+0x2f4>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d10f      	bne.n	80016d0 <HAL_ADC_Init+0x130>
 80016b0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80016b4:	f7ff ff28 	bl	8001508 <LL_ADC_IsEnabled>
 80016b8:	4604      	mov	r4, r0
 80016ba:	4876      	ldr	r0, [pc, #472]	; (8001894 <HAL_ADC_Init+0x2f4>)
 80016bc:	f7ff ff24 	bl	8001508 <LL_ADC_IsEnabled>
 80016c0:	4603      	mov	r3, r0
 80016c2:	4323      	orrs	r3, r4
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	bf0c      	ite	eq
 80016c8:	2301      	moveq	r3, #1
 80016ca:	2300      	movne	r3, #0
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	e012      	b.n	80016f6 <HAL_ADC_Init+0x156>
 80016d0:	4871      	ldr	r0, [pc, #452]	; (8001898 <HAL_ADC_Init+0x2f8>)
 80016d2:	f7ff ff19 	bl	8001508 <LL_ADC_IsEnabled>
 80016d6:	4604      	mov	r4, r0
 80016d8:	4870      	ldr	r0, [pc, #448]	; (800189c <HAL_ADC_Init+0x2fc>)
 80016da:	f7ff ff15 	bl	8001508 <LL_ADC_IsEnabled>
 80016de:	4603      	mov	r3, r0
 80016e0:	431c      	orrs	r4, r3
 80016e2:	486f      	ldr	r0, [pc, #444]	; (80018a0 <HAL_ADC_Init+0x300>)
 80016e4:	f7ff ff10 	bl	8001508 <LL_ADC_IsEnabled>
 80016e8:	4603      	mov	r3, r0
 80016ea:	4323      	orrs	r3, r4
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	bf0c      	ite	eq
 80016f0:	2301      	moveq	r3, #1
 80016f2:	2300      	movne	r3, #0
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d012      	beq.n	8001720 <HAL_ADC_Init+0x180>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001702:	d004      	beq.n	800170e <HAL_ADC_Init+0x16e>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a62      	ldr	r2, [pc, #392]	; (8001894 <HAL_ADC_Init+0x2f4>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d101      	bne.n	8001712 <HAL_ADC_Init+0x172>
 800170e:	4a65      	ldr	r2, [pc, #404]	; (80018a4 <HAL_ADC_Init+0x304>)
 8001710:	e000      	b.n	8001714 <HAL_ADC_Init+0x174>
 8001712:	4a65      	ldr	r2, [pc, #404]	; (80018a8 <HAL_ADC_Init+0x308>)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	4619      	mov	r1, r3
 800171a:	4610      	mov	r0, r2
 800171c:	f7ff fd30 	bl	8001180 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	7f5b      	ldrb	r3, [r3, #29]
 8001724:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800172a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001730:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001736:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800173e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001740:	4313      	orrs	r3, r2
 8001742:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800174a:	2b01      	cmp	r3, #1
 800174c:	d106      	bne.n	800175c <HAL_ADC_Init+0x1bc>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001752:	3b01      	subs	r3, #1
 8001754:	045b      	lsls	r3, r3, #17
 8001756:	69ba      	ldr	r2, [r7, #24]
 8001758:	4313      	orrs	r3, r2
 800175a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001760:	2b00      	cmp	r3, #0
 8001762:	d009      	beq.n	8001778 <HAL_ADC_Init+0x1d8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001768:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001770:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001772:	69ba      	ldr	r2, [r7, #24]
 8001774:	4313      	orrs	r3, r2
 8001776:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	68da      	ldr	r2, [r3, #12]
 800177e:	4b4b      	ldr	r3, [pc, #300]	; (80018ac <HAL_ADC_Init+0x30c>)
 8001780:	4013      	ands	r3, r2
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	6812      	ldr	r2, [r2, #0]
 8001786:	69b9      	ldr	r1, [r7, #24]
 8001788:	430b      	orrs	r3, r1
 800178a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	691b      	ldr	r3, [r3, #16]
 8001792:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	430a      	orrs	r2, r1
 80017a0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7ff fed4 	bl	8001554 <LL_ADC_REG_IsConversionOngoing>
 80017ac:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4618      	mov	r0, r3
 80017b4:	f7ff fee1 	bl	800157a <LL_ADC_INJ_IsConversionOngoing>
 80017b8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d17f      	bne.n	80018c0 <HAL_ADC_Init+0x320>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d17c      	bne.n	80018c0 <HAL_ADC_Init+0x320>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80017ca:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80017d2:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80017d4:	4313      	orrs	r3, r2
 80017d6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	68db      	ldr	r3, [r3, #12]
 80017de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80017e2:	f023 0302 	bic.w	r3, r3, #2
 80017e6:	687a      	ldr	r2, [r7, #4]
 80017e8:	6812      	ldr	r2, [r2, #0]
 80017ea:	69b9      	ldr	r1, [r7, #24]
 80017ec:	430b      	orrs	r3, r1
 80017ee:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	691b      	ldr	r3, [r3, #16]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d017      	beq.n	8001828 <HAL_ADC_Init+0x288>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	691a      	ldr	r2, [r3, #16]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001806:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001810:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001814:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001818:	687a      	ldr	r2, [r7, #4]
 800181a:	6911      	ldr	r1, [r2, #16]
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	6812      	ldr	r2, [r2, #0]
 8001820:	430b      	orrs	r3, r1
 8001822:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001826:	e013      	b.n	8001850 <HAL_ADC_Init+0x2b0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	691a      	ldr	r2, [r3, #16]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001836:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001840:	687a      	ldr	r2, [r7, #4]
 8001842:	6812      	ldr	r2, [r2, #0]
 8001844:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001848:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800184c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001856:	2b01      	cmp	r3, #1
 8001858:	d12a      	bne.n	80018b0 <HAL_ADC_Init+0x310>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	691b      	ldr	r3, [r3, #16]
 8001860:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001864:	f023 0304 	bic.w	r3, r3, #4
 8001868:	687a      	ldr	r2, [r7, #4]
 800186a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800186c:	687a      	ldr	r2, [r7, #4]
 800186e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001870:	4311      	orrs	r1, r2
 8001872:	687a      	ldr	r2, [r7, #4]
 8001874:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001876:	4311      	orrs	r1, r2
 8001878:	687a      	ldr	r2, [r7, #4]
 800187a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800187c:	430a      	orrs	r2, r1
 800187e:	431a      	orrs	r2, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f042 0201 	orr.w	r2, r2, #1
 8001888:	611a      	str	r2, [r3, #16]
 800188a:	e019      	b.n	80018c0 <HAL_ADC_Init+0x320>
 800188c:	20000000 	.word	0x20000000
 8001890:	053e2d63 	.word	0x053e2d63
 8001894:	50000100 	.word	0x50000100
 8001898:	50000400 	.word	0x50000400
 800189c:	50000500 	.word	0x50000500
 80018a0:	50000600 	.word	0x50000600
 80018a4:	50000300 	.word	0x50000300
 80018a8:	50000700 	.word	0x50000700
 80018ac:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	691a      	ldr	r2, [r3, #16]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f022 0201 	bic.w	r2, r2, #1
 80018be:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	695b      	ldr	r3, [r3, #20]
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d10c      	bne.n	80018e2 <HAL_ADC_Init+0x342>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ce:	f023 010f 	bic.w	r1, r3, #15
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6a1b      	ldr	r3, [r3, #32]
 80018d6:	1e5a      	subs	r2, r3, #1
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	430a      	orrs	r2, r1
 80018de:	631a      	str	r2, [r3, #48]	; 0x30
 80018e0:	e007      	b.n	80018f2 <HAL_ADC_Init+0x352>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f022 020f 	bic.w	r2, r2, #15
 80018f0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018f6:	f023 0303 	bic.w	r3, r3, #3
 80018fa:	f043 0201 	orr.w	r2, r3, #1
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	65da      	str	r2, [r3, #92]	; 0x5c
 8001902:	e007      	b.n	8001914 <HAL_ADC_Init+0x374>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001908:	f043 0210 	orr.w	r2, r3, #16
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001914:	7ffb      	ldrb	r3, [r7, #31]
}
 8001916:	4618      	mov	r0, r3
 8001918:	3724      	adds	r7, #36	; 0x24
 800191a:	46bd      	mov	sp, r7
 800191c:	bd90      	pop	{r4, r7, pc}
 800191e:	bf00      	nop

08001920 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b0b6      	sub	sp, #216	; 0xd8
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800192a:	2300      	movs	r3, #0
 800192c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001930:	2300      	movs	r3, #0
 8001932:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800193a:	2b01      	cmp	r3, #1
 800193c:	d102      	bne.n	8001944 <HAL_ADC_ConfigChannel+0x24>
 800193e:	2302      	movs	r3, #2
 8001940:	f000 bc12 	b.w	8002168 <HAL_ADC_ConfigChannel+0x848>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2201      	movs	r2, #1
 8001948:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4618      	mov	r0, r3
 8001952:	f7ff fdff 	bl	8001554 <LL_ADC_REG_IsConversionOngoing>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	f040 83f2 	bne.w	8002142 <HAL_ADC_ConfigChannel+0x822>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6818      	ldr	r0, [r3, #0]
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	6859      	ldr	r1, [r3, #4]
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	461a      	mov	r2, r3
 800196c:	f7ff fcda 	bl	8001324 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4618      	mov	r0, r3
 8001976:	f7ff fded 	bl	8001554 <LL_ADC_REG_IsConversionOngoing>
 800197a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4618      	mov	r0, r3
 8001984:	f7ff fdf9 	bl	800157a <LL_ADC_INJ_IsConversionOngoing>
 8001988:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800198c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001990:	2b00      	cmp	r3, #0
 8001992:	f040 81d9 	bne.w	8001d48 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001996:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800199a:	2b00      	cmp	r3, #0
 800199c:	f040 81d4 	bne.w	8001d48 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80019a8:	d10f      	bne.n	80019ca <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6818      	ldr	r0, [r3, #0]
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	2200      	movs	r2, #0
 80019b4:	4619      	mov	r1, r3
 80019b6:	f7ff fce1 	bl	800137c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7ff fc9b 	bl	80012fe <LL_ADC_SetSamplingTimeCommonConfig>
 80019c8:	e00e      	b.n	80019e8 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6818      	ldr	r0, [r3, #0]
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	6819      	ldr	r1, [r3, #0]
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	461a      	mov	r2, r3
 80019d8:	f7ff fcd0 	bl	800137c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	2100      	movs	r1, #0
 80019e2:	4618      	mov	r0, r3
 80019e4:	f7ff fc8b 	bl	80012fe <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	695a      	ldr	r2, [r3, #20]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	68db      	ldr	r3, [r3, #12]
 80019f2:	08db      	lsrs	r3, r3, #3
 80019f4:	f003 0303 	and.w	r3, r3, #3
 80019f8:	005b      	lsls	r3, r3, #1
 80019fa:	fa02 f303 	lsl.w	r3, r2, r3
 80019fe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	691b      	ldr	r3, [r3, #16]
 8001a06:	2b04      	cmp	r3, #4
 8001a08:	d022      	beq.n	8001a50 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6818      	ldr	r0, [r3, #0]
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	6919      	ldr	r1, [r3, #16]
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001a1a:	f7ff fbe5 	bl	80011e8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6818      	ldr	r0, [r3, #0]
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	6919      	ldr	r1, [r3, #16]
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	699b      	ldr	r3, [r3, #24]
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	f7ff fc31 	bl	8001292 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6818      	ldr	r0, [r3, #0]
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	6919      	ldr	r1, [r3, #16]
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	7f1b      	ldrb	r3, [r3, #28]
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d102      	bne.n	8001a46 <HAL_ADC_ConfigChannel+0x126>
 8001a40:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a44:	e000      	b.n	8001a48 <HAL_ADC_ConfigChannel+0x128>
 8001a46:	2300      	movs	r3, #0
 8001a48:	461a      	mov	r2, r3
 8001a4a:	f7ff fc3d 	bl	80012c8 <LL_ADC_SetOffsetSaturation>
 8001a4e:	e17b      	b.n	8001d48 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	2100      	movs	r1, #0
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7ff fbea 	bl	8001230 <LL_ADC_GetOffsetChannel>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d10a      	bne.n	8001a7c <HAL_ADC_ConfigChannel+0x15c>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	2100      	movs	r1, #0
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7ff fbdf 	bl	8001230 <LL_ADC_GetOffsetChannel>
 8001a72:	4603      	mov	r3, r0
 8001a74:	0e9b      	lsrs	r3, r3, #26
 8001a76:	f003 021f 	and.w	r2, r3, #31
 8001a7a:	e01e      	b.n	8001aba <HAL_ADC_ConfigChannel+0x19a>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2100      	movs	r1, #0
 8001a82:	4618      	mov	r0, r3
 8001a84:	f7ff fbd4 	bl	8001230 <LL_ADC_GetOffsetChannel>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a8e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001a92:	fa93 f3a3 	rbit	r3, r3
 8001a96:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001a9a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001a9e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001aa2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d101      	bne.n	8001aae <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8001aaa:	2320      	movs	r3, #32
 8001aac:	e004      	b.n	8001ab8 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8001aae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001ab2:	fab3 f383 	clz	r3, r3
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	461a      	mov	r2, r3
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d105      	bne.n	8001ad2 <HAL_ADC_ConfigChannel+0x1b2>
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	0e9b      	lsrs	r3, r3, #26
 8001acc:	f003 031f 	and.w	r3, r3, #31
 8001ad0:	e018      	b.n	8001b04 <HAL_ADC_ConfigChannel+0x1e4>
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ada:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001ade:	fa93 f3a3 	rbit	r3, r3
 8001ae2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001ae6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001aea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001aee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d101      	bne.n	8001afa <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8001af6:	2320      	movs	r3, #32
 8001af8:	e004      	b.n	8001b04 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8001afa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001afe:	fab3 f383 	clz	r3, r3
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d106      	bne.n	8001b16 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	2100      	movs	r1, #0
 8001b10:	4618      	mov	r0, r3
 8001b12:	f7ff fba3 	bl	800125c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	2101      	movs	r1, #1
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7ff fb87 	bl	8001230 <LL_ADC_GetOffsetChannel>
 8001b22:	4603      	mov	r3, r0
 8001b24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d10a      	bne.n	8001b42 <HAL_ADC_ConfigChannel+0x222>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	2101      	movs	r1, #1
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7ff fb7c 	bl	8001230 <LL_ADC_GetOffsetChannel>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	0e9b      	lsrs	r3, r3, #26
 8001b3c:	f003 021f 	and.w	r2, r3, #31
 8001b40:	e01e      	b.n	8001b80 <HAL_ADC_ConfigChannel+0x260>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	2101      	movs	r1, #1
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7ff fb71 	bl	8001230 <LL_ADC_GetOffsetChannel>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b54:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001b58:	fa93 f3a3 	rbit	r3, r3
 8001b5c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001b60:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001b64:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001b68:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d101      	bne.n	8001b74 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8001b70:	2320      	movs	r3, #32
 8001b72:	e004      	b.n	8001b7e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8001b74:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001b78:	fab3 f383 	clz	r3, r3
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	461a      	mov	r2, r3
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d105      	bne.n	8001b98 <HAL_ADC_ConfigChannel+0x278>
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	0e9b      	lsrs	r3, r3, #26
 8001b92:	f003 031f 	and.w	r3, r3, #31
 8001b96:	e018      	b.n	8001bca <HAL_ADC_ConfigChannel+0x2aa>
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001ba4:	fa93 f3a3 	rbit	r3, r3
 8001ba8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001bac:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001bb0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001bb4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d101      	bne.n	8001bc0 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8001bbc:	2320      	movs	r3, #32
 8001bbe:	e004      	b.n	8001bca <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8001bc0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001bc4:	fab3 f383 	clz	r3, r3
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d106      	bne.n	8001bdc <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	2101      	movs	r1, #1
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7ff fb40 	bl	800125c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2102      	movs	r1, #2
 8001be2:	4618      	mov	r0, r3
 8001be4:	f7ff fb24 	bl	8001230 <LL_ADC_GetOffsetChannel>
 8001be8:	4603      	mov	r3, r0
 8001bea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d10a      	bne.n	8001c08 <HAL_ADC_ConfigChannel+0x2e8>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	2102      	movs	r1, #2
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7ff fb19 	bl	8001230 <LL_ADC_GetOffsetChannel>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	0e9b      	lsrs	r3, r3, #26
 8001c02:	f003 021f 	and.w	r2, r3, #31
 8001c06:	e01e      	b.n	8001c46 <HAL_ADC_ConfigChannel+0x326>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	2102      	movs	r1, #2
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7ff fb0e 	bl	8001230 <LL_ADC_GetOffsetChannel>
 8001c14:	4603      	mov	r3, r0
 8001c16:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001c1e:	fa93 f3a3 	rbit	r3, r3
 8001c22:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001c26:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001c2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001c2e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d101      	bne.n	8001c3a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8001c36:	2320      	movs	r3, #32
 8001c38:	e004      	b.n	8001c44 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8001c3a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001c3e:	fab3 f383 	clz	r3, r3
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	461a      	mov	r2, r3
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d105      	bne.n	8001c5e <HAL_ADC_ConfigChannel+0x33e>
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	0e9b      	lsrs	r3, r3, #26
 8001c58:	f003 031f 	and.w	r3, r3, #31
 8001c5c:	e016      	b.n	8001c8c <HAL_ADC_ConfigChannel+0x36c>
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c66:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001c6a:	fa93 f3a3 	rbit	r3, r3
 8001c6e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001c70:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001c72:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001c76:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d101      	bne.n	8001c82 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8001c7e:	2320      	movs	r3, #32
 8001c80:	e004      	b.n	8001c8c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8001c82:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001c86:	fab3 f383 	clz	r3, r3
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d106      	bne.n	8001c9e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	2200      	movs	r2, #0
 8001c96:	2102      	movs	r1, #2
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f7ff fadf 	bl	800125c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	2103      	movs	r1, #3
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7ff fac3 	bl	8001230 <LL_ADC_GetOffsetChannel>
 8001caa:	4603      	mov	r3, r0
 8001cac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d10a      	bne.n	8001cca <HAL_ADC_ConfigChannel+0x3aa>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	2103      	movs	r1, #3
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f7ff fab8 	bl	8001230 <LL_ADC_GetOffsetChannel>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	0e9b      	lsrs	r3, r3, #26
 8001cc4:	f003 021f 	and.w	r2, r3, #31
 8001cc8:	e017      	b.n	8001cfa <HAL_ADC_ConfigChannel+0x3da>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	2103      	movs	r1, #3
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7ff faad 	bl	8001230 <LL_ADC_GetOffsetChannel>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001cdc:	fa93 f3a3 	rbit	r3, r3
 8001ce0:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001ce2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ce4:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001ce6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d101      	bne.n	8001cf0 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8001cec:	2320      	movs	r3, #32
 8001cee:	e003      	b.n	8001cf8 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8001cf0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001cf2:	fab3 f383 	clz	r3, r3
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d105      	bne.n	8001d12 <HAL_ADC_ConfigChannel+0x3f2>
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	0e9b      	lsrs	r3, r3, #26
 8001d0c:	f003 031f 	and.w	r3, r3, #31
 8001d10:	e011      	b.n	8001d36 <HAL_ADC_ConfigChannel+0x416>
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d18:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d1a:	fa93 f3a3 	rbit	r3, r3
 8001d1e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001d20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001d22:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001d24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d101      	bne.n	8001d2e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8001d2a:	2320      	movs	r3, #32
 8001d2c:	e003      	b.n	8001d36 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8001d2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d30:	fab3 f383 	clz	r3, r3
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d106      	bne.n	8001d48 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	2103      	movs	r1, #3
 8001d42:	4618      	mov	r0, r3
 8001d44:	f7ff fa8a 	bl	800125c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7ff fbdb 	bl	8001508 <LL_ADC_IsEnabled>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	f040 813d 	bne.w	8001fd4 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6818      	ldr	r0, [r3, #0]
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	6819      	ldr	r1, [r3, #0]
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	68db      	ldr	r3, [r3, #12]
 8001d66:	461a      	mov	r2, r3
 8001d68:	f7ff fb34 	bl	80013d4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	4aa2      	ldr	r2, [pc, #648]	; (8001ffc <HAL_ADC_ConfigChannel+0x6dc>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	f040 812e 	bne.w	8001fd4 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d10b      	bne.n	8001da0 <HAL_ADC_ConfigChannel+0x480>
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	0e9b      	lsrs	r3, r3, #26
 8001d8e:	3301      	adds	r3, #1
 8001d90:	f003 031f 	and.w	r3, r3, #31
 8001d94:	2b09      	cmp	r3, #9
 8001d96:	bf94      	ite	ls
 8001d98:	2301      	movls	r3, #1
 8001d9a:	2300      	movhi	r3, #0
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	e019      	b.n	8001dd4 <HAL_ADC_ConfigChannel+0x4b4>
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001da8:	fa93 f3a3 	rbit	r3, r3
 8001dac:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001dae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001db0:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001db2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d101      	bne.n	8001dbc <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8001db8:	2320      	movs	r3, #32
 8001dba:	e003      	b.n	8001dc4 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8001dbc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001dbe:	fab3 f383 	clz	r3, r3
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	3301      	adds	r3, #1
 8001dc6:	f003 031f 	and.w	r3, r3, #31
 8001dca:	2b09      	cmp	r3, #9
 8001dcc:	bf94      	ite	ls
 8001dce:	2301      	movls	r3, #1
 8001dd0:	2300      	movhi	r3, #0
 8001dd2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d079      	beq.n	8001ecc <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d107      	bne.n	8001df4 <HAL_ADC_ConfigChannel+0x4d4>
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	0e9b      	lsrs	r3, r3, #26
 8001dea:	3301      	adds	r3, #1
 8001dec:	069b      	lsls	r3, r3, #26
 8001dee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001df2:	e015      	b.n	8001e20 <HAL_ADC_ConfigChannel+0x500>
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001dfc:	fa93 f3a3 	rbit	r3, r3
 8001e00:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001e02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e04:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001e06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d101      	bne.n	8001e10 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8001e0c:	2320      	movs	r3, #32
 8001e0e:	e003      	b.n	8001e18 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8001e10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e12:	fab3 f383 	clz	r3, r3
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	3301      	adds	r3, #1
 8001e1a:	069b      	lsls	r3, r3, #26
 8001e1c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d109      	bne.n	8001e40 <HAL_ADC_ConfigChannel+0x520>
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	0e9b      	lsrs	r3, r3, #26
 8001e32:	3301      	adds	r3, #1
 8001e34:	f003 031f 	and.w	r3, r3, #31
 8001e38:	2101      	movs	r1, #1
 8001e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e3e:	e017      	b.n	8001e70 <HAL_ADC_ConfigChannel+0x550>
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e48:	fa93 f3a3 	rbit	r3, r3
 8001e4c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001e4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e50:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001e52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d101      	bne.n	8001e5c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8001e58:	2320      	movs	r3, #32
 8001e5a:	e003      	b.n	8001e64 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8001e5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e5e:	fab3 f383 	clz	r3, r3
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	3301      	adds	r3, #1
 8001e66:	f003 031f 	and.w	r3, r3, #31
 8001e6a:	2101      	movs	r1, #1
 8001e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e70:	ea42 0103 	orr.w	r1, r2, r3
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d10a      	bne.n	8001e96 <HAL_ADC_ConfigChannel+0x576>
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	0e9b      	lsrs	r3, r3, #26
 8001e86:	3301      	adds	r3, #1
 8001e88:	f003 021f 	and.w	r2, r3, #31
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	005b      	lsls	r3, r3, #1
 8001e90:	4413      	add	r3, r2
 8001e92:	051b      	lsls	r3, r3, #20
 8001e94:	e018      	b.n	8001ec8 <HAL_ADC_ConfigChannel+0x5a8>
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e9e:	fa93 f3a3 	rbit	r3, r3
 8001ea2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001ea4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001ea8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d101      	bne.n	8001eb2 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8001eae:	2320      	movs	r3, #32
 8001eb0:	e003      	b.n	8001eba <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8001eb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001eb4:	fab3 f383 	clz	r3, r3
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	3301      	adds	r3, #1
 8001ebc:	f003 021f 	and.w	r2, r3, #31
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	005b      	lsls	r3, r3, #1
 8001ec4:	4413      	add	r3, r2
 8001ec6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ec8:	430b      	orrs	r3, r1
 8001eca:	e07e      	b.n	8001fca <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d107      	bne.n	8001ee8 <HAL_ADC_ConfigChannel+0x5c8>
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	0e9b      	lsrs	r3, r3, #26
 8001ede:	3301      	adds	r3, #1
 8001ee0:	069b      	lsls	r3, r3, #26
 8001ee2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ee6:	e015      	b.n	8001f14 <HAL_ADC_ConfigChannel+0x5f4>
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ef0:	fa93 f3a3 	rbit	r3, r3
 8001ef4:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ef8:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d101      	bne.n	8001f04 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8001f00:	2320      	movs	r3, #32
 8001f02:	e003      	b.n	8001f0c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8001f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f06:	fab3 f383 	clz	r3, r3
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	3301      	adds	r3, #1
 8001f0e:	069b      	lsls	r3, r3, #26
 8001f10:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d109      	bne.n	8001f34 <HAL_ADC_ConfigChannel+0x614>
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	0e9b      	lsrs	r3, r3, #26
 8001f26:	3301      	adds	r3, #1
 8001f28:	f003 031f 	and.w	r3, r3, #31
 8001f2c:	2101      	movs	r1, #1
 8001f2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f32:	e017      	b.n	8001f64 <HAL_ADC_ConfigChannel+0x644>
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f3a:	6a3b      	ldr	r3, [r7, #32]
 8001f3c:	fa93 f3a3 	rbit	r3, r3
 8001f40:	61fb      	str	r3, [r7, #28]
  return result;
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d101      	bne.n	8001f50 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8001f4c:	2320      	movs	r3, #32
 8001f4e:	e003      	b.n	8001f58 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8001f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f52:	fab3 f383 	clz	r3, r3
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	3301      	adds	r3, #1
 8001f5a:	f003 031f 	and.w	r3, r3, #31
 8001f5e:	2101      	movs	r1, #1
 8001f60:	fa01 f303 	lsl.w	r3, r1, r3
 8001f64:	ea42 0103 	orr.w	r1, r2, r3
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d10d      	bne.n	8001f90 <HAL_ADC_ConfigChannel+0x670>
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	0e9b      	lsrs	r3, r3, #26
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	f003 021f 	and.w	r2, r3, #31
 8001f80:	4613      	mov	r3, r2
 8001f82:	005b      	lsls	r3, r3, #1
 8001f84:	4413      	add	r3, r2
 8001f86:	3b1e      	subs	r3, #30
 8001f88:	051b      	lsls	r3, r3, #20
 8001f8a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f8e:	e01b      	b.n	8001fc8 <HAL_ADC_ConfigChannel+0x6a8>
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	fa93 f3a3 	rbit	r3, r3
 8001f9c:	613b      	str	r3, [r7, #16]
  return result;
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d101      	bne.n	8001fac <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8001fa8:	2320      	movs	r3, #32
 8001faa:	e003      	b.n	8001fb4 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	fab3 f383 	clz	r3, r3
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	f003 021f 	and.w	r2, r3, #31
 8001fba:	4613      	mov	r3, r2
 8001fbc:	005b      	lsls	r3, r3, #1
 8001fbe:	4413      	add	r3, r2
 8001fc0:	3b1e      	subs	r3, #30
 8001fc2:	051b      	lsls	r3, r3, #20
 8001fc4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001fc8:	430b      	orrs	r3, r1
 8001fca:	683a      	ldr	r2, [r7, #0]
 8001fcc:	6892      	ldr	r2, [r2, #8]
 8001fce:	4619      	mov	r1, r3
 8001fd0:	f7ff f9d4 	bl	800137c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	4b09      	ldr	r3, [pc, #36]	; (8002000 <HAL_ADC_ConfigChannel+0x6e0>)
 8001fda:	4013      	ands	r3, r2
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	f000 80bd 	beq.w	800215c <HAL_ADC_ConfigChannel+0x83c>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001fea:	d004      	beq.n	8001ff6 <HAL_ADC_ConfigChannel+0x6d6>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a04      	ldr	r2, [pc, #16]	; (8002004 <HAL_ADC_ConfigChannel+0x6e4>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d10a      	bne.n	800200c <HAL_ADC_ConfigChannel+0x6ec>
 8001ff6:	4b04      	ldr	r3, [pc, #16]	; (8002008 <HAL_ADC_ConfigChannel+0x6e8>)
 8001ff8:	e009      	b.n	800200e <HAL_ADC_ConfigChannel+0x6ee>
 8001ffa:	bf00      	nop
 8001ffc:	407f0000 	.word	0x407f0000
 8002000:	80080000 	.word	0x80080000
 8002004:	50000100 	.word	0x50000100
 8002008:	50000300 	.word	0x50000300
 800200c:	4b58      	ldr	r3, [pc, #352]	; (8002170 <HAL_ADC_ConfigChannel+0x850>)
 800200e:	4618      	mov	r0, r3
 8002010:	f7ff f8dc 	bl	80011cc <LL_ADC_GetCommonPathInternalCh>
 8002014:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a55      	ldr	r2, [pc, #340]	; (8002174 <HAL_ADC_ConfigChannel+0x854>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d004      	beq.n	800202c <HAL_ADC_ConfigChannel+0x70c>
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a54      	ldr	r2, [pc, #336]	; (8002178 <HAL_ADC_ConfigChannel+0x858>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d139      	bne.n	80020a0 <HAL_ADC_ConfigChannel+0x780>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800202c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002030:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002034:	2b00      	cmp	r3, #0
 8002036:	d133      	bne.n	80020a0 <HAL_ADC_ConfigChannel+0x780>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002040:	d005      	beq.n	800204e <HAL_ADC_ConfigChannel+0x72e>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a4d      	ldr	r2, [pc, #308]	; (800217c <HAL_ADC_ConfigChannel+0x85c>)
 8002048:	4293      	cmp	r3, r2
 800204a:	f040 8084 	bne.w	8002156 <HAL_ADC_ConfigChannel+0x836>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002056:	d004      	beq.n	8002062 <HAL_ADC_ConfigChannel+0x742>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a48      	ldr	r2, [pc, #288]	; (8002180 <HAL_ADC_ConfigChannel+0x860>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d101      	bne.n	8002066 <HAL_ADC_ConfigChannel+0x746>
 8002062:	4a48      	ldr	r2, [pc, #288]	; (8002184 <HAL_ADC_ConfigChannel+0x864>)
 8002064:	e000      	b.n	8002068 <HAL_ADC_ConfigChannel+0x748>
 8002066:	4a42      	ldr	r2, [pc, #264]	; (8002170 <HAL_ADC_ConfigChannel+0x850>)
 8002068:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800206c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002070:	4619      	mov	r1, r3
 8002072:	4610      	mov	r0, r2
 8002074:	f7ff f897 	bl	80011a6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002078:	4b43      	ldr	r3, [pc, #268]	; (8002188 <HAL_ADC_ConfigChannel+0x868>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	099b      	lsrs	r3, r3, #6
 800207e:	4a43      	ldr	r2, [pc, #268]	; (800218c <HAL_ADC_ConfigChannel+0x86c>)
 8002080:	fba2 2303 	umull	r2, r3, r2, r3
 8002084:	099a      	lsrs	r2, r3, #6
 8002086:	4613      	mov	r3, r2
 8002088:	005b      	lsls	r3, r3, #1
 800208a:	4413      	add	r3, r2
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002090:	e002      	b.n	8002098 <HAL_ADC_ConfigChannel+0x778>
          {
            wait_loop_index--;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	3b01      	subs	r3, #1
 8002096:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d1f9      	bne.n	8002092 <HAL_ADC_ConfigChannel+0x772>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800209e:	e05a      	b.n	8002156 <HAL_ADC_ConfigChannel+0x836>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a3a      	ldr	r2, [pc, #232]	; (8002190 <HAL_ADC_ConfigChannel+0x870>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d125      	bne.n	80020f6 <HAL_ADC_ConfigChannel+0x7d6>
 80020aa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80020ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d11f      	bne.n	80020f6 <HAL_ADC_ConfigChannel+0x7d6>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a31      	ldr	r2, [pc, #196]	; (8002180 <HAL_ADC_ConfigChannel+0x860>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d104      	bne.n	80020ca <HAL_ADC_ConfigChannel+0x7aa>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a33      	ldr	r2, [pc, #204]	; (8002194 <HAL_ADC_ConfigChannel+0x874>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d047      	beq.n	800215a <HAL_ADC_ConfigChannel+0x83a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80020d2:	d004      	beq.n	80020de <HAL_ADC_ConfigChannel+0x7be>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a29      	ldr	r2, [pc, #164]	; (8002180 <HAL_ADC_ConfigChannel+0x860>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d101      	bne.n	80020e2 <HAL_ADC_ConfigChannel+0x7c2>
 80020de:	4a29      	ldr	r2, [pc, #164]	; (8002184 <HAL_ADC_ConfigChannel+0x864>)
 80020e0:	e000      	b.n	80020e4 <HAL_ADC_ConfigChannel+0x7c4>
 80020e2:	4a23      	ldr	r2, [pc, #140]	; (8002170 <HAL_ADC_ConfigChannel+0x850>)
 80020e4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80020e8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020ec:	4619      	mov	r1, r3
 80020ee:	4610      	mov	r0, r2
 80020f0:	f7ff f859 	bl	80011a6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80020f4:	e031      	b.n	800215a <HAL_ADC_ConfigChannel+0x83a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a27      	ldr	r2, [pc, #156]	; (8002198 <HAL_ADC_ConfigChannel+0x878>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d12d      	bne.n	800215c <HAL_ADC_ConfigChannel+0x83c>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002100:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002104:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d127      	bne.n	800215c <HAL_ADC_ConfigChannel+0x83c>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a1b      	ldr	r2, [pc, #108]	; (8002180 <HAL_ADC_ConfigChannel+0x860>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d022      	beq.n	800215c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800211e:	d004      	beq.n	800212a <HAL_ADC_ConfigChannel+0x80a>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a16      	ldr	r2, [pc, #88]	; (8002180 <HAL_ADC_ConfigChannel+0x860>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d101      	bne.n	800212e <HAL_ADC_ConfigChannel+0x80e>
 800212a:	4a16      	ldr	r2, [pc, #88]	; (8002184 <HAL_ADC_ConfigChannel+0x864>)
 800212c:	e000      	b.n	8002130 <HAL_ADC_ConfigChannel+0x810>
 800212e:	4a10      	ldr	r2, [pc, #64]	; (8002170 <HAL_ADC_ConfigChannel+0x850>)
 8002130:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002134:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002138:	4619      	mov	r1, r3
 800213a:	4610      	mov	r0, r2
 800213c:	f7ff f833 	bl	80011a6 <LL_ADC_SetCommonPathInternalCh>
 8002140:	e00c      	b.n	800215c <HAL_ADC_ConfigChannel+0x83c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002146:	f043 0220 	orr.w	r2, r3, #32
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002154:	e002      	b.n	800215c <HAL_ADC_ConfigChannel+0x83c>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002156:	bf00      	nop
 8002158:	e000      	b.n	800215c <HAL_ADC_ConfigChannel+0x83c>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800215a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2200      	movs	r2, #0
 8002160:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002164:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002168:	4618      	mov	r0, r3
 800216a:	37d8      	adds	r7, #216	; 0xd8
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	50000700 	.word	0x50000700
 8002174:	c3210000 	.word	0xc3210000
 8002178:	90c00010 	.word	0x90c00010
 800217c:	50000600 	.word	0x50000600
 8002180:	50000100 	.word	0x50000100
 8002184:	50000300 	.word	0x50000300
 8002188:	20000000 	.word	0x20000000
 800218c:	053e2d63 	.word	0x053e2d63
 8002190:	c7520000 	.word	0xc7520000
 8002194:	50000500 	.word	0x50000500
 8002198:	cb840000 	.word	0xcb840000

0800219c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b084      	sub	sp, #16
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4618      	mov	r0, r3
 80021aa:	f7ff f9ad 	bl	8001508 <LL_ADC_IsEnabled>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d146      	bne.n	8002242 <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	689a      	ldr	r2, [r3, #8]
 80021ba:	4b24      	ldr	r3, [pc, #144]	; (800224c <ADC_Enable+0xb0>)
 80021bc:	4013      	ands	r3, r2
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d00d      	beq.n	80021de <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021c6:	f043 0210 	orr.w	r2, r3, #16
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021d2:	f043 0201 	orr.w	r2, r3, #1
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e032      	b.n	8002244 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7ff f968 	bl	80014b8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80021e8:	f7fe ff9c 	bl	8001124 <HAL_GetTick>
 80021ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80021ee:	e021      	b.n	8002234 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4618      	mov	r0, r3
 80021f6:	f7ff f987 	bl	8001508 <LL_ADC_IsEnabled>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d104      	bne.n	800220a <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4618      	mov	r0, r3
 8002206:	f7ff f957 	bl	80014b8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800220a:	f7fe ff8b 	bl	8001124 <HAL_GetTick>
 800220e:	4602      	mov	r2, r0
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	2b02      	cmp	r3, #2
 8002216:	d90d      	bls.n	8002234 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800221c:	f043 0210 	orr.w	r2, r3, #16
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002228:	f043 0201 	orr.w	r2, r3, #1
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e007      	b.n	8002244 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0301 	and.w	r3, r3, #1
 800223e:	2b01      	cmp	r3, #1
 8002240:	d1d6      	bne.n	80021f0 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002242:	2300      	movs	r3, #0
}
 8002244:	4618      	mov	r0, r3
 8002246:	3710      	adds	r7, #16
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	8000003f 	.word	0x8000003f

08002250 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4618      	mov	r0, r3
 800225e:	f7ff f966 	bl	800152e <LL_ADC_IsDisableOngoing>
 8002262:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4618      	mov	r0, r3
 800226a:	f7ff f94d 	bl	8001508 <LL_ADC_IsEnabled>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d040      	beq.n	80022f6 <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d13d      	bne.n	80022f6 <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	f003 030d 	and.w	r3, r3, #13
 8002284:	2b01      	cmp	r3, #1
 8002286:	d10c      	bne.n	80022a2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4618      	mov	r0, r3
 800228e:	f7ff f927 	bl	80014e0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	2203      	movs	r2, #3
 8002298:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800229a:	f7fe ff43 	bl	8001124 <HAL_GetTick>
 800229e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80022a0:	e022      	b.n	80022e8 <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022a6:	f043 0210 	orr.w	r2, r3, #16
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022b2:	f043 0201 	orr.w	r2, r3, #1
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e01c      	b.n	80022f8 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80022be:	f7fe ff31 	bl	8001124 <HAL_GetTick>
 80022c2:	4602      	mov	r2, r0
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	1ad3      	subs	r3, r2, r3
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d90d      	bls.n	80022e8 <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022d0:	f043 0210 	orr.w	r2, r3, #16
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022dc:	f043 0201 	orr.w	r2, r3, #1
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e007      	b.n	80022f8 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	f003 0301 	and.w	r3, r3, #1
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d1e3      	bne.n	80022be <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80022f6:	2300      	movs	r3, #0
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3710      	adds	r7, #16
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}

08002300 <LL_ADC_SetCommonPathInternalCh>:
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	431a      	orrs	r2, r3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	609a      	str	r2, [r3, #8]
}
 800231a:	bf00      	nop
 800231c:	370c      	adds	r7, #12
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr

08002326 <LL_ADC_GetCommonPathInternalCh>:
{
 8002326:	b480      	push	{r7}
 8002328:	b083      	sub	sp, #12
 800232a:	af00      	add	r7, sp, #0
 800232c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002336:	4618      	mov	r0, r3
 8002338:	370c      	adds	r7, #12
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
	...

08002344 <LL_ADC_SetOffset>:
{
 8002344:	b480      	push	{r7}
 8002346:	b087      	sub	sp, #28
 8002348:	af00      	add	r7, sp, #0
 800234a:	60f8      	str	r0, [r7, #12]
 800234c:	60b9      	str	r1, [r7, #8]
 800234e:	607a      	str	r2, [r7, #4]
 8002350:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	3360      	adds	r3, #96	; 0x60
 8002356:	461a      	mov	r2, r3
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	4413      	add	r3, r2
 800235e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	4b08      	ldr	r3, [pc, #32]	; (8002388 <LL_ADC_SetOffset+0x44>)
 8002366:	4013      	ands	r3, r2
 8002368:	687a      	ldr	r2, [r7, #4]
 800236a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800236e:	683a      	ldr	r2, [r7, #0]
 8002370:	430a      	orrs	r2, r1
 8002372:	4313      	orrs	r3, r2
 8002374:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	601a      	str	r2, [r3, #0]
}
 800237c:	bf00      	nop
 800237e:	371c      	adds	r7, #28
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr
 8002388:	03fff000 	.word	0x03fff000

0800238c <LL_ADC_GetOffsetChannel>:
{
 800238c:	b480      	push	{r7}
 800238e:	b085      	sub	sp, #20
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	3360      	adds	r3, #96	; 0x60
 800239a:	461a      	mov	r2, r3
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	4413      	add	r3, r2
 80023a2:	60fb      	str	r3, [r7, #12]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3714      	adds	r7, #20
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr

080023b8 <LL_ADC_SetOffsetState>:
{
 80023b8:	b480      	push	{r7}
 80023ba:	b087      	sub	sp, #28
 80023bc:	af00      	add	r7, sp, #0
 80023be:	60f8      	str	r0, [r7, #12]
 80023c0:	60b9      	str	r1, [r7, #8]
 80023c2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	3360      	adds	r3, #96	; 0x60
 80023c8:	461a      	mov	r2, r3
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	4413      	add	r3, r2
 80023d0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	431a      	orrs	r2, r3
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	601a      	str	r2, [r3, #0]
}
 80023e2:	bf00      	nop
 80023e4:	371c      	adds	r7, #28
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr

080023ee <LL_ADC_SetOffsetSign>:
{
 80023ee:	b480      	push	{r7}
 80023f0:	b087      	sub	sp, #28
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	60f8      	str	r0, [r7, #12]
 80023f6:	60b9      	str	r1, [r7, #8]
 80023f8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	3360      	adds	r3, #96	; 0x60
 80023fe:	461a      	mov	r2, r3
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	4413      	add	r3, r2
 8002406:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	431a      	orrs	r2, r3
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	601a      	str	r2, [r3, #0]
}
 8002418:	bf00      	nop
 800241a:	371c      	adds	r7, #28
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr

08002424 <LL_ADC_SetOffsetSaturation>:
{
 8002424:	b480      	push	{r7}
 8002426:	b087      	sub	sp, #28
 8002428:	af00      	add	r7, sp, #0
 800242a:	60f8      	str	r0, [r7, #12]
 800242c:	60b9      	str	r1, [r7, #8]
 800242e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	3360      	adds	r3, #96	; 0x60
 8002434:	461a      	mov	r2, r3
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	4413      	add	r3, r2
 800243c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	431a      	orrs	r2, r3
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	601a      	str	r2, [r3, #0]
}
 800244e:	bf00      	nop
 8002450:	371c      	adds	r7, #28
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr

0800245a <LL_ADC_SetSamplingTimeCommonConfig>:
{
 800245a:	b480      	push	{r7}
 800245c:	b083      	sub	sp, #12
 800245e:	af00      	add	r7, sp, #0
 8002460:	6078      	str	r0, [r7, #4]
 8002462:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	695b      	ldr	r3, [r3, #20]
 8002468:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	431a      	orrs	r2, r3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	615a      	str	r2, [r3, #20]
}
 8002474:	bf00      	nop
 8002476:	370c      	adds	r7, #12
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr

08002480 <LL_ADC_INJ_GetTrigAuto>:
{
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_JAUTO));
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
}
 8002490:	4618      	mov	r0, r3
 8002492:	370c      	adds	r7, #12
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr

0800249c <LL_ADC_SetChannelSamplingTime>:
{
 800249c:	b480      	push	{r7}
 800249e:	b087      	sub	sp, #28
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	60f8      	str	r0, [r7, #12]
 80024a4:	60b9      	str	r1, [r7, #8]
 80024a6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	3314      	adds	r3, #20
 80024ac:	461a      	mov	r2, r3
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	0e5b      	lsrs	r3, r3, #25
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	f003 0304 	and.w	r3, r3, #4
 80024b8:	4413      	add	r3, r2
 80024ba:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	0d1b      	lsrs	r3, r3, #20
 80024c4:	f003 031f 	and.w	r3, r3, #31
 80024c8:	2107      	movs	r1, #7
 80024ca:	fa01 f303 	lsl.w	r3, r1, r3
 80024ce:	43db      	mvns	r3, r3
 80024d0:	401a      	ands	r2, r3
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	0d1b      	lsrs	r3, r3, #20
 80024d6:	f003 031f 	and.w	r3, r3, #31
 80024da:	6879      	ldr	r1, [r7, #4]
 80024dc:	fa01 f303 	lsl.w	r3, r1, r3
 80024e0:	431a      	orrs	r2, r3
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	601a      	str	r2, [r3, #0]
}
 80024e6:	bf00      	nop
 80024e8:	371c      	adds	r7, #28
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr
	...

080024f4 <LL_ADC_SetChannelSingleDiff>:
{
 80024f4:	b480      	push	{r7}
 80024f6:	b085      	sub	sp, #20
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	60f8      	str	r0, [r7, #12]
 80024fc:	60b9      	str	r1, [r7, #8]
 80024fe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->DIFSEL,
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800250c:	43db      	mvns	r3, r3
 800250e:	401a      	ands	r2, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f003 0318 	and.w	r3, r3, #24
 8002516:	4908      	ldr	r1, [pc, #32]	; (8002538 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002518:	40d9      	lsrs	r1, r3
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	400b      	ands	r3, r1
 800251e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002522:	431a      	orrs	r2, r3
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 800252a:	bf00      	nop
 800252c:	3714      	adds	r7, #20
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop
 8002538:	0007ffff 	.word	0x0007ffff

0800253c <LL_ADC_GetMultimode>:
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	f003 031f 	and.w	r3, r3, #31
}
 800254c:	4618      	mov	r0, r3
 800254e:	370c      	adds	r7, #12
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr

08002558 <LL_ADC_IsEnabled>:
{
 8002558:	b480      	push	{r7}
 800255a:	b083      	sub	sp, #12
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	f003 0301 	and.w	r3, r3, #1
 8002568:	2b01      	cmp	r3, #1
 800256a:	d101      	bne.n	8002570 <LL_ADC_IsEnabled+0x18>
 800256c:	2301      	movs	r3, #1
 800256e:	e000      	b.n	8002572 <LL_ADC_IsEnabled+0x1a>
 8002570:	2300      	movs	r3, #0
}
 8002572:	4618      	mov	r0, r3
 8002574:	370c      	adds	r7, #12
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr

0800257e <LL_ADC_StartCalibration>:
{
 800257e:	b480      	push	{r7}
 8002580:	b083      	sub	sp, #12
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
 8002586:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002590:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002594:	683a      	ldr	r2, [r7, #0]
 8002596:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800259a:	4313      	orrs	r3, r2
 800259c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	609a      	str	r2, [r3, #8]
}
 80025a4:	bf00      	nop
 80025a6:	370c      	adds	r7, #12
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr

080025b0 <LL_ADC_IsCalibrationOnGoing>:
{
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80025c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80025c4:	d101      	bne.n	80025ca <LL_ADC_IsCalibrationOnGoing+0x1a>
 80025c6:	2301      	movs	r3, #1
 80025c8:	e000      	b.n	80025cc <LL_ADC_IsCalibrationOnGoing+0x1c>
 80025ca:	2300      	movs	r3, #0
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	370c      	adds	r7, #12
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr

080025d8 <LL_ADC_REG_IsConversionOngoing>:
{
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	f003 0304 	and.w	r3, r3, #4
 80025e8:	2b04      	cmp	r3, #4
 80025ea:	d101      	bne.n	80025f0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80025ec:	2301      	movs	r3, #1
 80025ee:	e000      	b.n	80025f2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80025f0:	2300      	movs	r3, #0
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	370c      	adds	r7, #12
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr

080025fe <LL_ADC_INJ_StartConversion>:
{
 80025fe:	b480      	push	{r7}
 8002600:	b083      	sub	sp, #12
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800260e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002612:	f043 0208 	orr.w	r2, r3, #8
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	609a      	str	r2, [r3, #8]
}
 800261a:	bf00      	nop
 800261c:	370c      	adds	r7, #12
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr

08002626 <LL_ADC_INJ_IsConversionOngoing>:
{
 8002626:	b480      	push	{r7}
 8002628:	b083      	sub	sp, #12
 800262a:	af00      	add	r7, sp, #0
 800262c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	f003 0308 	and.w	r3, r3, #8
 8002636:	2b08      	cmp	r3, #8
 8002638:	d101      	bne.n	800263e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800263a:	2301      	movs	r3, #1
 800263c:	e000      	b.n	8002640 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800263e:	2300      	movs	r3, #0
}
 8002640:	4618      	mov	r0, r3
 8002642:	370c      	adds	r7, #12
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr

0800264c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b084      	sub	sp, #16
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002656:	2300      	movs	r3, #0
 8002658:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002660:	2b01      	cmp	r3, #1
 8002662:	d101      	bne.n	8002668 <HAL_ADCEx_Calibration_Start+0x1c>
 8002664:	2302      	movs	r3, #2
 8002666:	e04d      	b.n	8002704 <HAL_ADCEx_Calibration_Start+0xb8>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2201      	movs	r2, #1
 800266c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f7ff fded 	bl	8002250 <ADC_Disable>
 8002676:	4603      	mov	r3, r0
 8002678:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800267a:	7bfb      	ldrb	r3, [r7, #15]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d136      	bne.n	80026ee <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002684:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002688:	f023 0302 	bic.w	r3, r3, #2
 800268c:	f043 0202 	orr.w	r2, r3, #2
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	6839      	ldr	r1, [r7, #0]
 800269a:	4618      	mov	r0, r3
 800269c:	f7ff ff6f 	bl	800257e <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80026a0:	e014      	b.n	80026cc <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	3301      	adds	r3, #1
 80026a6:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	4a18      	ldr	r2, [pc, #96]	; (800270c <HAL_ADCEx_Calibration_Start+0xc0>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d90d      	bls.n	80026cc <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026b4:	f023 0312 	bic.w	r3, r3, #18
 80026b8:	f043 0210 	orr.w	r2, r3, #16
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2200      	movs	r2, #0
 80026c4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e01b      	b.n	8002704 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4618      	mov	r0, r3
 80026d2:	f7ff ff6d 	bl	80025b0 <LL_ADC_IsCalibrationOnGoing>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d1e2      	bne.n	80026a2 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026e0:	f023 0303 	bic.w	r3, r3, #3
 80026e4:	f043 0201 	orr.w	r2, r3, #1
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	65da      	str	r2, [r3, #92]	; 0x5c
 80026ec:	e005      	b.n	80026fa <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026f2:	f043 0210 	orr.w	r2, r3, #16
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2200      	movs	r2, #0
 80026fe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002702:	7bfb      	ldrb	r3, [r7, #15]
}
 8002704:	4618      	mov	r0, r3
 8002706:	3710      	adds	r7, #16
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}
 800270c:	0004de01 	.word	0x0004de01

08002710 <HAL_ADCEx_InjectedStart>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef *hadc)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b086      	sub	sp, #24
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_config_injected_queue;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002720:	d004      	beq.n	800272c <HAL_ADCEx_InjectedStart+0x1c>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a5d      	ldr	r2, [pc, #372]	; (800289c <HAL_ADCEx_InjectedStart+0x18c>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d101      	bne.n	8002730 <HAL_ADCEx_InjectedStart+0x20>
 800272c:	4b5c      	ldr	r3, [pc, #368]	; (80028a0 <HAL_ADCEx_InjectedStart+0x190>)
 800272e:	e000      	b.n	8002732 <HAL_ADCEx_InjectedStart+0x22>
 8002730:	4b5c      	ldr	r3, [pc, #368]	; (80028a4 <HAL_ADCEx_InjectedStart+0x194>)
 8002732:	4618      	mov	r0, r3
 8002734:	f7ff ff02 	bl	800253c <LL_ADC_GetMultimode>
 8002738:	6178      	str	r0, [r7, #20]
#endif

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4618      	mov	r0, r3
 8002740:	f7ff ff71 	bl	8002626 <LL_ADC_INJ_IsConversionOngoing>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d001      	beq.n	800274e <HAL_ADCEx_InjectedStart+0x3e>
  {
    return HAL_BUSY;
 800274a:	2302      	movs	r3, #2
 800274c:	e0a2      	b.n	8002894 <HAL_ADCEx_InjectedStart+0x184>
       If JQDIS is not set at that point, returns an error
       - since software trigger detection is disabled. User needs to
       resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
       - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
         the queue is empty */
    tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002758:	613b      	str	r3, [r7, #16]

    if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002760:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8002764:	2b00      	cmp	r3, #0
 8002766:	d10a      	bne.n	800277e <HAL_ADCEx_InjectedStart+0x6e>
        && (tmp_config_injected_queue == 0UL)
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d107      	bne.n	800277e <HAL_ADCEx_InjectedStart+0x6e>
       )
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002772:	f043 0220 	orr.w	r2, r3, #32
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e08a      	b.n	8002894 <HAL_ADCEx_InjectedStart+0x184>
    }

    /* Process locked */
    __HAL_LOCK(hadc);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002784:	2b01      	cmp	r3, #1
 8002786:	d101      	bne.n	800278c <HAL_ADCEx_InjectedStart+0x7c>
 8002788:	2302      	movs	r3, #2
 800278a:	e083      	b.n	8002894 <HAL_ADCEx_InjectedStart+0x184>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2201      	movs	r2, #1
 8002790:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002794:	6878      	ldr	r0, [r7, #4]
 8002796:	f7ff fd01 	bl	800219c <ADC_Enable>
 800279a:	4603      	mov	r3, r0
 800279c:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800279e:	7bfb      	ldrb	r3, [r7, #15]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d172      	bne.n	800288a <HAL_ADCEx_InjectedStart+0x17a>
    {
      /* Check if a regular conversion is ongoing */
      if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d006      	beq.n	80027be <HAL_ADCEx_InjectedStart+0xae>
      {
        /* Reset ADC error code field related to injected conversions only */
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027b4:	f023 0208 	bic.w	r2, r3, #8
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	661a      	str	r2, [r3, #96]	; 0x60
 80027bc:	e002      	b.n	80027c4 <HAL_ADCEx_InjectedStart+0xb4>
      }
      else
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027c8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80027cc:	f023 0301 	bic.w	r3, r3, #1
 80027d0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a2f      	ldr	r2, [pc, #188]	; (800289c <HAL_ADCEx_InjectedStart+0x18c>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d009      	beq.n	80027f6 <HAL_ADCEx_InjectedStart+0xe6>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a30      	ldr	r2, [pc, #192]	; (80028a8 <HAL_ADCEx_InjectedStart+0x198>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d002      	beq.n	80027f2 <HAL_ADCEx_InjectedStart+0xe2>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	e003      	b.n	80027fa <HAL_ADCEx_InjectedStart+0xea>
 80027f2:	4b2e      	ldr	r3, [pc, #184]	; (80028ac <HAL_ADCEx_InjectedStart+0x19c>)
 80027f4:	e001      	b.n	80027fa <HAL_ADCEx_InjectedStart+0xea>
 80027f6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	6812      	ldr	r2, [r2, #0]
 80027fe:	4293      	cmp	r3, r2
 8002800:	d002      	beq.n	8002808 <HAL_ADCEx_InjectedStart+0xf8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d105      	bne.n	8002814 <HAL_ADCEx_InjectedStart+0x104>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800280c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Clear ADC group injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2260      	movs	r2, #96	; 0x60
 800281a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2200      	movs	r2, #0
 8002820:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /*    - if multimode only concerns regular conversion, ADC is enabled     */
      /*     and conversion is started.                                         */
      /* If ADC is master or independent,                                       */
      /*    - ADC is enabled and conversion is started.                         */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a1c      	ldr	r2, [pc, #112]	; (800289c <HAL_ADCEx_InjectedStart+0x18c>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d009      	beq.n	8002842 <HAL_ADCEx_InjectedStart+0x132>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a1d      	ldr	r2, [pc, #116]	; (80028a8 <HAL_ADCEx_InjectedStart+0x198>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d002      	beq.n	800283e <HAL_ADCEx_InjectedStart+0x12e>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	e003      	b.n	8002846 <HAL_ADCEx_InjectedStart+0x136>
 800283e:	4b1b      	ldr	r3, [pc, #108]	; (80028ac <HAL_ADCEx_InjectedStart+0x19c>)
 8002840:	e001      	b.n	8002846 <HAL_ADCEx_InjectedStart+0x136>
 8002842:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	6812      	ldr	r2, [r2, #0]
 800284a:	4293      	cmp	r3, r2
 800284c:	d008      	beq.n	8002860 <HAL_ADCEx_InjectedStart+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d005      	beq.n	8002860 <HAL_ADCEx_InjectedStart+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	2b06      	cmp	r3, #6
 8002858:	d002      	beq.n	8002860 <HAL_ADCEx_InjectedStart+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	2b07      	cmp	r3, #7
 800285e:	d10d      	bne.n	800287c <HAL_ADCEx_InjectedStart+0x16c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4618      	mov	r0, r3
 8002866:	f7ff fe0b 	bl	8002480 <LL_ADC_INJ_GetTrigAuto>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d110      	bne.n	8002892 <HAL_ADCEx_InjectedStart+0x182>
        {
          LL_ADC_INJ_StartConversion(hadc->Instance);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4618      	mov	r0, r3
 8002876:	f7ff fec2 	bl	80025fe <LL_ADC_INJ_StartConversion>
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 800287a:	e00a      	b.n	8002892 <HAL_ADCEx_InjectedStart+0x182>
        }
      }
      else
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002880:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	65da      	str	r2, [r3, #92]	; 0x5c
 8002888:	e003      	b.n	8002892 <HAL_ADCEx_InjectedStart+0x182>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2200      	movs	r2, #0
 800288e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 8002892:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002894:	4618      	mov	r0, r3
 8002896:	3718      	adds	r7, #24
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}
 800289c:	50000100 	.word	0x50000100
 80028a0:	50000300 	.word	0x50000300
 80028a4:	50000700 	.word	0x50000700
 80028a8:	50000500 	.word	0x50000500
 80028ac:	50000400 	.word	0x50000400

080028b0 <HAL_ADCEx_InjectedGetValue>:
  *            @arg @ref ADC_INJECTED_RANK_3 ADC group injected rank 3
  *            @arg @ref ADC_INJECTED_RANK_4 ADC group injected rank 4
  * @retval ADC group injected conversion data
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef *hadc, uint32_t InjectedRank)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b085      	sub	sp, #20
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));

  /* Get ADC converted value */
  switch (InjectedRank)
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	f240 2215 	movw	r2, #533	; 0x215
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d00e      	beq.n	80028e2 <HAL_ADCEx_InjectedGetValue+0x32>
 80028c4:	f240 321b 	movw	r2, #795	; 0x31b
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d004      	beq.n	80028d6 <HAL_ADCEx_InjectedGetValue+0x26>
 80028cc:	f240 120f 	movw	r2, #271	; 0x10f
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d00c      	beq.n	80028ee <HAL_ADCEx_InjectedGetValue+0x3e>
 80028d4:	e011      	b.n	80028fa <HAL_ADCEx_InjectedGetValue+0x4a>
  {
    case ADC_INJECTED_RANK_4:
      tmp_jdr = hadc->Instance->JDR4;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028de:	60fb      	str	r3, [r7, #12]
      break;
 80028e0:	e011      	b.n	8002906 <HAL_ADCEx_InjectedGetValue+0x56>
    case ADC_INJECTED_RANK_3:
      tmp_jdr = hadc->Instance->JDR3;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ea:	60fb      	str	r3, [r7, #12]
      break;
 80028ec:	e00b      	b.n	8002906 <HAL_ADCEx_InjectedGetValue+0x56>
    case ADC_INJECTED_RANK_2:
      tmp_jdr = hadc->Instance->JDR2;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028f6:	60fb      	str	r3, [r7, #12]
      break;
 80028f8:	e005      	b.n	8002906 <HAL_ADCEx_InjectedGetValue+0x56>
    case ADC_INJECTED_RANK_1:
    default:
      tmp_jdr = hadc->Instance->JDR1;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002902:	60fb      	str	r3, [r7, #12]
      break;
 8002904:	bf00      	nop
  }

  /* Return ADC converted value */
  return tmp_jdr;
 8002906:	68fb      	ldr	r3, [r7, #12]
}
 8002908:	4618      	mov	r0, r3
 800290a:	3714      	adds	r7, #20
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr

08002914 <HAL_ADCEx_InjectedConfigChannel>:
  * @param sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b0b6      	sub	sp, #216	; 0xd8
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800291e:	2300      	movs	r3, #0
 8002920:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0;
 8002924:	2300      	movs	r3, #0
 8002926:	60bb      	str	r3, [r7, #8]

  uint32_t tmp_JSQR_ContextQueueBeingBuilt = 0U;
 8002928:	2300      	movs	r3, #0
 800292a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002934:	2b01      	cmp	r3, #1
 8002936:	d102      	bne.n	800293e <HAL_ADCEx_InjectedConfigChannel+0x2a>
 8002938:	2302      	movs	r3, #2
 800293a:	f000 bcfc 	b.w	8003336 <HAL_ADCEx_InjectedConfigChannel+0xa22>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2201      	movs	r2, #1
 8002942:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	695b      	ldr	r3, [r3, #20]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d003      	beq.n	8002956 <HAL_ADCEx_InjectedConfigChannel+0x42>
      (sConfigInjected->InjectedNbrOfConversion == 1U))
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	6a1b      	ldr	r3, [r3, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8002952:	2b01      	cmp	r3, #1
 8002954:	d130      	bne.n	80029b8 <HAL_ADCEx_InjectedConfigChannel+0xa4>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 can be used) */

    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	2b09      	cmp	r3, #9
 800295c:	d179      	bne.n	8002a52 <HAL_ADCEx_InjectedConfigChannel+0x13e>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002962:	2b00      	cmp	r3, #0
 8002964:	d010      	beq.n	8002988 <HAL_ADCEx_InjectedConfigChannel+0x74>
      {
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	0e9b      	lsrs	r3, r3, #26
 800296c:	025b      	lsls	r3, r3, #9
 800296e:	f403 5278 	and.w	r2, r3, #15872	; 0x3e00
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002976:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 800297a:	431a      	orrs	r2, r3
                                           | sConfigInjected->ExternalTrigInjecConvEdge
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8002980:	4313      	orrs	r3, r2
 8002982:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002986:	e007      	b.n	8002998 <HAL_ADCEx_InjectedConfigChannel+0x84>
                                          );
      }
      else
      {
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	0e9b      	lsrs	r3, r3, #26
 800298e:	025b      	lsls	r3, r3, #9
 8002990:	f403 5378 	and.w	r3, r3, #15872	; 0x3e00
 8002994:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
      }

      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_JSQR_ContextQueueBeingBuilt);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800299e:	4ba3      	ldr	r3, [pc, #652]	; (8002c2c <HAL_ADCEx_InjectedConfigChannel+0x318>)
 80029a0:	4013      	ands	r3, r2
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	6812      	ldr	r2, [r2, #0]
 80029a6:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80029aa:	430b      	orrs	r3, r1
 80029ac:	64d3      	str	r3, [r2, #76]	; 0x4c
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80029b4:	665a      	str	r2, [r3, #100]	; 0x64
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 80029b6:	e04c      	b.n	8002a52 <HAL_ADCEx_InjectedConfigChannel+0x13e>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d11d      	bne.n	80029fc <HAL_ADCEx_InjectedConfigChannel+0xe8>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = sConfigInjected->InjectedNbrOfConversion;
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	6a1a      	ldr	r2, [r3, #32]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	669a      	str	r2, [r3, #104]	; 0x68
      /* Handle hadc saves the context under build up over each HAL_ADCEx_InjectedConfigChannel()
         call, this context will be written in JSQR register at the last call.
         At this point, the context is merely reset  */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2200      	movs	r2, #0
 80029cc:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d00d      	beq.n	80029f2 <HAL_ADCEx_InjectedConfigChannel+0xde>
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	6a1b      	ldr	r3, [r3, #32]
 80029da:	1e5a      	subs	r2, r3, #1
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029e0:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 80029e4:	431a      	orrs	r2, r3
                                           | sConfigInjected->ExternalTrigInjecConvEdge
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 80029ea:	4313      	orrs	r3, r2
 80029ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80029f0:	e004      	b.n	80029fc <HAL_ADCEx_InjectedConfigChannel+0xe8>
                                          );
      }
      else
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U));
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	6a1b      	ldr	r3, [r3, #32]
 80029f6:	3b01      	subs	r3, #1
 80029f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	0e9b      	lsrs	r3, r3, #26
 8002a02:	f003 021f 	and.w	r2, r3, #31
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	f003 031f 	and.w	r3, r3, #31
 8002a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a12:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002a16:	4313      	orrs	r3, r2
 8002a18:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a20:	1e5a      	subs	r2, r3, #1
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	669a      	str	r2, [r3, #104]	; 0x68

    /* 3. tmp_JSQR_ContextQueueBeingBuilt is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002a2a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002a2e:	431a      	orrs	r2, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	665a      	str	r2, [r3, #100]	; 0x64

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d10a      	bne.n	8002a52 <HAL_ADCEx_InjectedConfigChannel+0x13e>
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002a42:	4b7a      	ldr	r3, [pc, #488]	; (8002c2c <HAL_ADCEx_InjectedConfigChannel+0x318>)
 8002a44:	4013      	ands	r3, r2
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	6e51      	ldr	r1, [r2, #100]	; 0x64
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	6812      	ldr	r2, [r2, #0]
 8002a4e:	430b      	orrs	r3, r1
 8002a50:	64d3      	str	r3, [r2, #76]	; 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4618      	mov	r0, r3
 8002a58:	f7ff fde5 	bl	8002626 <LL_ADC_INJ_IsConversionOngoing>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d124      	bne.n	8002aac <HAL_ADCEx_InjectedConfigChannel+0x198>
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d112      	bne.n	8002a92 <HAL_ADCEx_InjectedConfigChannel+0x17e>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	68db      	ldr	r3, [r3, #12]
 8002a72:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002a7c:	055a      	lsls	r2, r3, #21
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a84:	051b      	lsls	r3, r3, #20
 8002a86:	431a      	orrs	r2, r3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	430a      	orrs	r2, r1
 8002a8e:	60da      	str	r2, [r3, #12]
 8002a90:	e00c      	b.n	8002aac <HAL_ADCEx_InjectedConfigChannel+0x198>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002aa2:	055a      	lsls	r2, r3, #21
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	430a      	orrs	r2, r1
 8002aaa:	60da      	str	r2, [r3, #12]
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f7ff fd91 	bl	80025d8 <LL_ADC_REG_IsConversionOngoing>
 8002ab6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f7ff fdb1 	bl	8002626 <LL_ADC_INJ_IsConversionOngoing>
 8002ac4:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8

  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002ac8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	f040 822e 	bne.w	8002f2e <HAL_ADCEx_InjectedConfigChannel+0x61a>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002ad2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	f040 8229 	bne.w	8002f2e <HAL_ADCEx_InjectedConfigChannel+0x61a>
     )
  {
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if ((sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d003      	beq.n	8002aec <HAL_ADCEx_InjectedConfigChannel+0x1d8>
        || (sConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d116      	bne.n	8002b1a <HAL_ADCEx_InjectedConfigChannel+0x206>
    {
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d108      	bne.n	8002b08 <HAL_ADCEx_InjectedConfigChannel+0x1f4>
      {
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	68da      	ldr	r2, [r3, #12]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8002b04:	60da      	str	r2, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8002b06:	e01f      	b.n	8002b48 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	68da      	ldr	r2, [r3, #12]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8002b16:	60da      	str	r2, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8002b18:	e016      	b.n	8002b48 <HAL_ADCEx_InjectedConfigChannel+0x234>
    }
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d109      	bne.n	8002b38 <HAL_ADCEx_InjectedConfigChannel+0x224>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b28:	f043 0220 	orr.w	r2, r3, #32
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	65da      	str	r2, [r3, #92]	; 0x5c

        tmp_hal_status = HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002b36:	e007      	b.n	8002b48 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	68da      	ldr	r2, [r3, #12]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8002b46:	60da      	str	r2, [r3, #12]
      }
    }

    if (sConfigInjected->InjecOversamplingMode == ENABLE)
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d110      	bne.n	8002b74 <HAL_ADCEx_InjectedConfigChannel+0x260>
      /* Configuration of Injected Oversampler:                                 */
      /*  - Oversampling Ratio                                                  */
      /*  - Right bit shift                                                     */

      /* Enable OverSampling mode */
      MODIFY_REG(hadc->Instance->CFGR2,
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	691b      	ldr	r3, [r3, #16]
 8002b58:	f423 72ff 	bic.w	r2, r3, #510	; 0x1fe
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b64:	430b      	orrs	r3, r1
 8002b66:	431a      	orrs	r2, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f042 0202 	orr.w	r2, r2, #2
 8002b70:	611a      	str	r2, [r3, #16]
 8002b72:	e007      	b.n	8002b84 <HAL_ADCEx_InjectedConfigChannel+0x270>
                );
    }
    else
    {
      /* Disable Regular OverSampling */
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	691a      	ldr	r2, [r3, #16]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f022 0202 	bic.w	r2, r2, #2
 8002b82:	611a      	str	r2, [r3, #16]
    }

    /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
    if (sConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002b8c:	d10f      	bne.n	8002bae <HAL_ADCEx_InjectedConfigChannel+0x29a>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfigInjected->InjectedChannel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6818      	ldr	r0, [r3, #0]
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	2200      	movs	r2, #0
 8002b98:	4619      	mov	r1, r3
 8002b9a:	f7ff fc7f 	bl	800249c <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f7ff fc57 	bl	800245a <LL_ADC_SetSamplingTimeCommonConfig>
 8002bac:	e00e      	b.n	8002bcc <HAL_ADCEx_InjectedConfigChannel+0x2b8>
    }
    else
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSamplingTime);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6818      	ldr	r0, [r3, #0]
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	6819      	ldr	r1, [r3, #0]
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	461a      	mov	r2, r3
 8002bbc:	f7ff fc6e 	bl	800249c <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	2100      	movs	r1, #0
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f7ff fc47 	bl	800245a <LL_ADC_SetSamplingTimeCommonConfig>

    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset with respect to the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	695a      	ldr	r2, [r3, #20]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	08db      	lsrs	r3, r3, #3
 8002bd8:	f003 0303 	and.w	r3, r3, #3
 8002bdc:	005b      	lsls	r3, r3, #1
 8002bde:	fa02 f303 	lsl.w	r3, r2, r3
 8002be2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	691b      	ldr	r3, [r3, #16]
 8002bea:	2b04      	cmp	r3, #4
 8002bec:	d025      	beq.n	8002c3a <HAL_ADCEx_InjectedConfigChannel+0x326>
    {
      /* Set ADC selected offset number */
      LL_ADC_SetOffset(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->InjectedChannel,
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6818      	ldr	r0, [r3, #0]
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	6919      	ldr	r1, [r3, #16]
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002bfe:	f7ff fba1 	bl	8002344 <LL_ADC_SetOffset>
                       tmpOffsetShifted);

      /* Set ADC selected offset sign & saturation */
      LL_ADC_SetOffsetSign(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->InjectedOffsetSign);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6818      	ldr	r0, [r3, #0]
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	6919      	ldr	r1, [r3, #16]
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	699b      	ldr	r3, [r3, #24]
 8002c0e:	461a      	mov	r2, r3
 8002c10:	f7ff fbed 	bl	80023ee <LL_ADC_SetOffsetSign>
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6818      	ldr	r0, [r3, #0]
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	6919      	ldr	r1, [r3, #16]
                                 (sConfigInjected->InjectedOffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	7f1b      	ldrb	r3, [r3, #28]
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d105      	bne.n	8002c30 <HAL_ADCEx_InjectedConfigChannel+0x31c>
 8002c24:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c28:	e003      	b.n	8002c32 <HAL_ADCEx_InjectedConfigChannel+0x31e>
 8002c2a:	bf00      	nop
 8002c2c:	04104000 	.word	0x04104000
 8002c30:	2300      	movs	r3, #0
 8002c32:	461a      	mov	r2, r3
 8002c34:	f7ff fbf6 	bl	8002424 <LL_ADC_SetOffsetSaturation>
 8002c38:	e179      	b.n	8002f2e <HAL_ADCEx_InjectedConfigChannel+0x61a>
    }
    else
    {
      /* Scan each offset register to check if the selected channel is targeted. */
      /* If this is the case, the corresponding offset number is disabled.       */
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	2100      	movs	r1, #0
 8002c40:	4618      	mov	r0, r3
 8002c42:	f7ff fba3 	bl	800238c <LL_ADC_GetOffsetChannel>
 8002c46:	4603      	mov	r3, r0
 8002c48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d10a      	bne.n	8002c66 <HAL_ADCEx_InjectedConfigChannel+0x352>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	2100      	movs	r1, #0
 8002c56:	4618      	mov	r0, r3
 8002c58:	f7ff fb98 	bl	800238c <LL_ADC_GetOffsetChannel>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	0e9b      	lsrs	r3, r3, #26
 8002c60:	f003 021f 	and.w	r2, r3, #31
 8002c64:	e01e      	b.n	8002ca4 <HAL_ADCEx_InjectedConfigChannel+0x390>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	2100      	movs	r1, #0
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f7ff fb8d 	bl	800238c <LL_ADC_GetOffsetChannel>
 8002c72:	4603      	mov	r3, r0
 8002c74:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c78:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002c7c:	fa93 f3a3 	rbit	r3, r3
 8002c80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8002c84:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002c88:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8002c8c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d101      	bne.n	8002c98 <HAL_ADCEx_InjectedConfigChannel+0x384>
    return 32U;
 8002c94:	2320      	movs	r3, #32
 8002c96:	e004      	b.n	8002ca2 <HAL_ADCEx_InjectedConfigChannel+0x38e>
  return __builtin_clz(value);
 8002c98:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002c9c:	fab3 f383 	clz	r3, r3
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d105      	bne.n	8002cbc <HAL_ADCEx_InjectedConfigChannel+0x3a8>
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	0e9b      	lsrs	r3, r3, #26
 8002cb6:	f003 031f 	and.w	r3, r3, #31
 8002cba:	e018      	b.n	8002cee <HAL_ADCEx_InjectedConfigChannel+0x3da>
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002cc8:	fa93 f3a3 	rbit	r3, r3
 8002ccc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8002cd0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002cd4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8002cd8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d101      	bne.n	8002ce4 <HAL_ADCEx_InjectedConfigChannel+0x3d0>
    return 32U;
 8002ce0:	2320      	movs	r3, #32
 8002ce2:	e004      	b.n	8002cee <HAL_ADCEx_InjectedConfigChannel+0x3da>
  return __builtin_clz(value);
 8002ce4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002ce8:	fab3 f383 	clz	r3, r3
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d106      	bne.n	8002d00 <HAL_ADCEx_InjectedConfigChannel+0x3ec>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	2100      	movs	r1, #0
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f7ff fb5c 	bl	80023b8 <LL_ADC_SetOffsetState>
      }
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	2101      	movs	r1, #1
 8002d06:	4618      	mov	r0, r3
 8002d08:	f7ff fb40 	bl	800238c <LL_ADC_GetOffsetChannel>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d10a      	bne.n	8002d2c <HAL_ADCEx_InjectedConfigChannel+0x418>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	2101      	movs	r1, #1
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f7ff fb35 	bl	800238c <LL_ADC_GetOffsetChannel>
 8002d22:	4603      	mov	r3, r0
 8002d24:	0e9b      	lsrs	r3, r3, #26
 8002d26:	f003 021f 	and.w	r2, r3, #31
 8002d2a:	e01e      	b.n	8002d6a <HAL_ADCEx_InjectedConfigChannel+0x456>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	2101      	movs	r1, #1
 8002d32:	4618      	mov	r0, r3
 8002d34:	f7ff fb2a 	bl	800238c <LL_ADC_GetOffsetChannel>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002d42:	fa93 f3a3 	rbit	r3, r3
 8002d46:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8002d4a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002d4e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8002d52:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d101      	bne.n	8002d5e <HAL_ADCEx_InjectedConfigChannel+0x44a>
    return 32U;
 8002d5a:	2320      	movs	r3, #32
 8002d5c:	e004      	b.n	8002d68 <HAL_ADCEx_InjectedConfigChannel+0x454>
  return __builtin_clz(value);
 8002d5e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002d62:	fab3 f383 	clz	r3, r3
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	461a      	mov	r2, r3
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d105      	bne.n	8002d82 <HAL_ADCEx_InjectedConfigChannel+0x46e>
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	0e9b      	lsrs	r3, r3, #26
 8002d7c:	f003 031f 	and.w	r3, r3, #31
 8002d80:	e018      	b.n	8002db4 <HAL_ADCEx_InjectedConfigChannel+0x4a0>
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d8a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002d8e:	fa93 f3a3 	rbit	r3, r3
 8002d92:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8002d96:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002d9a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8002d9e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d101      	bne.n	8002daa <HAL_ADCEx_InjectedConfigChannel+0x496>
    return 32U;
 8002da6:	2320      	movs	r3, #32
 8002da8:	e004      	b.n	8002db4 <HAL_ADCEx_InjectedConfigChannel+0x4a0>
  return __builtin_clz(value);
 8002daa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002dae:	fab3 f383 	clz	r3, r3
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d106      	bne.n	8002dc6 <HAL_ADCEx_InjectedConfigChannel+0x4b2>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	2101      	movs	r1, #1
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f7ff faf9 	bl	80023b8 <LL_ADC_SetOffsetState>
      }
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	2102      	movs	r1, #2
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f7ff fadd 	bl	800238c <LL_ADC_GetOffsetChannel>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d10a      	bne.n	8002df2 <HAL_ADCEx_InjectedConfigChannel+0x4de>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	2102      	movs	r1, #2
 8002de2:	4618      	mov	r0, r3
 8002de4:	f7ff fad2 	bl	800238c <LL_ADC_GetOffsetChannel>
 8002de8:	4603      	mov	r3, r0
 8002dea:	0e9b      	lsrs	r3, r3, #26
 8002dec:	f003 021f 	and.w	r2, r3, #31
 8002df0:	e01e      	b.n	8002e30 <HAL_ADCEx_InjectedConfigChannel+0x51c>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	2102      	movs	r1, #2
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f7ff fac7 	bl	800238c <LL_ADC_GetOffsetChannel>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e04:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002e08:	fa93 f3a3 	rbit	r3, r3
 8002e0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8002e10:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e14:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8002e18:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d101      	bne.n	8002e24 <HAL_ADCEx_InjectedConfigChannel+0x510>
    return 32U;
 8002e20:	2320      	movs	r3, #32
 8002e22:	e004      	b.n	8002e2e <HAL_ADCEx_InjectedConfigChannel+0x51a>
  return __builtin_clz(value);
 8002e24:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e28:	fab3 f383 	clz	r3, r3
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	461a      	mov	r2, r3
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d105      	bne.n	8002e48 <HAL_ADCEx_InjectedConfigChannel+0x534>
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	0e9b      	lsrs	r3, r3, #26
 8002e42:	f003 031f 	and.w	r3, r3, #31
 8002e46:	e014      	b.n	8002e72 <HAL_ADCEx_InjectedConfigChannel+0x55e>
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e4e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002e50:	fa93 f3a3 	rbit	r3, r3
 8002e54:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8002e56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e58:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8002e5c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d101      	bne.n	8002e68 <HAL_ADCEx_InjectedConfigChannel+0x554>
    return 32U;
 8002e64:	2320      	movs	r3, #32
 8002e66:	e004      	b.n	8002e72 <HAL_ADCEx_InjectedConfigChannel+0x55e>
  return __builtin_clz(value);
 8002e68:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002e6c:	fab3 f383 	clz	r3, r3
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d106      	bne.n	8002e84 <HAL_ADCEx_InjectedConfigChannel+0x570>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	2102      	movs	r1, #2
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f7ff fa9a 	bl	80023b8 <LL_ADC_SetOffsetState>
      }
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	2103      	movs	r1, #3
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f7ff fa7e 	bl	800238c <LL_ADC_GetOffsetChannel>
 8002e90:	4603      	mov	r3, r0
 8002e92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d10a      	bne.n	8002eb0 <HAL_ADCEx_InjectedConfigChannel+0x59c>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	2103      	movs	r1, #3
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f7ff fa73 	bl	800238c <LL_ADC_GetOffsetChannel>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	0e9b      	lsrs	r3, r3, #26
 8002eaa:	f003 021f 	and.w	r2, r3, #31
 8002eae:	e017      	b.n	8002ee0 <HAL_ADCEx_InjectedConfigChannel+0x5cc>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	2103      	movs	r1, #3
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f7ff fa68 	bl	800238c <LL_ADC_GetOffsetChannel>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ec0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ec2:	fa93 f3a3 	rbit	r3, r3
 8002ec6:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002ec8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002eca:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8002ecc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d101      	bne.n	8002ed6 <HAL_ADCEx_InjectedConfigChannel+0x5c2>
    return 32U;
 8002ed2:	2320      	movs	r3, #32
 8002ed4:	e003      	b.n	8002ede <HAL_ADCEx_InjectedConfigChannel+0x5ca>
  return __builtin_clz(value);
 8002ed6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ed8:	fab3 f383 	clz	r3, r3
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	461a      	mov	r2, r3
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d105      	bne.n	8002ef8 <HAL_ADCEx_InjectedConfigChannel+0x5e4>
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	0e9b      	lsrs	r3, r3, #26
 8002ef2:	f003 031f 	and.w	r3, r3, #31
 8002ef6:	e011      	b.n	8002f1c <HAL_ADCEx_InjectedConfigChannel+0x608>
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002efe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f00:	fa93 f3a3 	rbit	r3, r3
 8002f04:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8002f06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f08:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8002f0a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d101      	bne.n	8002f14 <HAL_ADCEx_InjectedConfigChannel+0x600>
    return 32U;
 8002f10:	2320      	movs	r3, #32
 8002f12:	e003      	b.n	8002f1c <HAL_ADCEx_InjectedConfigChannel+0x608>
  return __builtin_clz(value);
 8002f14:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f16:	fab3 f383 	clz	r3, r3
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d106      	bne.n	8002f2e <HAL_ADCEx_InjectedConfigChannel+0x61a>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2200      	movs	r2, #0
 8002f26:	2103      	movs	r1, #3
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f7ff fa45 	bl	80023b8 <LL_ADC_SetOffsetState>
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4618      	mov	r0, r3
 8002f34:	f7ff fb10 	bl	8002558 <LL_ADC_IsEnabled>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	f040 813d 	bne.w	80031ba <HAL_ADCEx_InjectedConfigChannel+0x8a6>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6818      	ldr	r0, [r3, #0]
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	6819      	ldr	r1, [r3, #0]
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	f7ff fad1 	bl	80024f4 <LL_ADC_SetChannelSingleDiff>

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (sConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	4aa2      	ldr	r2, [pc, #648]	; (80031e0 <HAL_ADCEx_InjectedConfigChannel+0x8cc>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	f040 812e 	bne.w	80031ba <HAL_ADCEx_InjectedConfigChannel+0x8a6>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel) + 1UL) & 0x1FUL)), sConfigInjected->InjectedSamplingTime);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6818      	ldr	r0, [r3, #0]
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d10b      	bne.n	8002f86 <HAL_ADCEx_InjectedConfigChannel+0x672>
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	0e9b      	lsrs	r3, r3, #26
 8002f74:	3301      	adds	r3, #1
 8002f76:	f003 031f 	and.w	r3, r3, #31
 8002f7a:	2b09      	cmp	r3, #9
 8002f7c:	bf94      	ite	ls
 8002f7e:	2301      	movls	r3, #1
 8002f80:	2300      	movhi	r3, #0
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	e019      	b.n	8002fba <HAL_ADCEx_InjectedConfigChannel+0x6a6>
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f8c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f8e:	fa93 f3a3 	rbit	r3, r3
 8002f92:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002f94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f96:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002f98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d101      	bne.n	8002fa2 <HAL_ADCEx_InjectedConfigChannel+0x68e>
    return 32U;
 8002f9e:	2320      	movs	r3, #32
 8002fa0:	e003      	b.n	8002faa <HAL_ADCEx_InjectedConfigChannel+0x696>
  return __builtin_clz(value);
 8002fa2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fa4:	fab3 f383 	clz	r3, r3
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	3301      	adds	r3, #1
 8002fac:	f003 031f 	and.w	r3, r3, #31
 8002fb0:	2b09      	cmp	r3, #9
 8002fb2:	bf94      	ite	ls
 8002fb4:	2301      	movls	r3, #1
 8002fb6:	2300      	movhi	r3, #0
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d079      	beq.n	80030b2 <HAL_ADCEx_InjectedConfigChannel+0x79e>
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d107      	bne.n	8002fda <HAL_ADCEx_InjectedConfigChannel+0x6c6>
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	0e9b      	lsrs	r3, r3, #26
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	069b      	lsls	r3, r3, #26
 8002fd4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002fd8:	e015      	b.n	8003006 <HAL_ADCEx_InjectedConfigChannel+0x6f2>
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fe2:	fa93 f3a3 	rbit	r3, r3
 8002fe6:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002fe8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fea:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002fec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d101      	bne.n	8002ff6 <HAL_ADCEx_InjectedConfigChannel+0x6e2>
    return 32U;
 8002ff2:	2320      	movs	r3, #32
 8002ff4:	e003      	b.n	8002ffe <HAL_ADCEx_InjectedConfigChannel+0x6ea>
  return __builtin_clz(value);
 8002ff6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ff8:	fab3 f383 	clz	r3, r3
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	3301      	adds	r3, #1
 8003000:	069b      	lsls	r3, r3, #26
 8003002:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800300e:	2b00      	cmp	r3, #0
 8003010:	d109      	bne.n	8003026 <HAL_ADCEx_InjectedConfigChannel+0x712>
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	0e9b      	lsrs	r3, r3, #26
 8003018:	3301      	adds	r3, #1
 800301a:	f003 031f 	and.w	r3, r3, #31
 800301e:	2101      	movs	r1, #1
 8003020:	fa01 f303 	lsl.w	r3, r1, r3
 8003024:	e017      	b.n	8003056 <HAL_ADCEx_InjectedConfigChannel+0x742>
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800302c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800302e:	fa93 f3a3 	rbit	r3, r3
 8003032:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003034:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003036:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003038:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800303a:	2b00      	cmp	r3, #0
 800303c:	d101      	bne.n	8003042 <HAL_ADCEx_InjectedConfigChannel+0x72e>
    return 32U;
 800303e:	2320      	movs	r3, #32
 8003040:	e003      	b.n	800304a <HAL_ADCEx_InjectedConfigChannel+0x736>
  return __builtin_clz(value);
 8003042:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003044:	fab3 f383 	clz	r3, r3
 8003048:	b2db      	uxtb	r3, r3
 800304a:	3301      	adds	r3, #1
 800304c:	f003 031f 	and.w	r3, r3, #31
 8003050:	2101      	movs	r1, #1
 8003052:	fa01 f303 	lsl.w	r3, r1, r3
 8003056:	ea42 0103 	orr.w	r1, r2, r3
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003062:	2b00      	cmp	r3, #0
 8003064:	d10a      	bne.n	800307c <HAL_ADCEx_InjectedConfigChannel+0x768>
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	0e9b      	lsrs	r3, r3, #26
 800306c:	3301      	adds	r3, #1
 800306e:	f003 021f 	and.w	r2, r3, #31
 8003072:	4613      	mov	r3, r2
 8003074:	005b      	lsls	r3, r3, #1
 8003076:	4413      	add	r3, r2
 8003078:	051b      	lsls	r3, r3, #20
 800307a:	e018      	b.n	80030ae <HAL_ADCEx_InjectedConfigChannel+0x79a>
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003082:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003084:	fa93 f3a3 	rbit	r3, r3
 8003088:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800308a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800308c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800308e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003090:	2b00      	cmp	r3, #0
 8003092:	d101      	bne.n	8003098 <HAL_ADCEx_InjectedConfigChannel+0x784>
    return 32U;
 8003094:	2320      	movs	r3, #32
 8003096:	e003      	b.n	80030a0 <HAL_ADCEx_InjectedConfigChannel+0x78c>
  return __builtin_clz(value);
 8003098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800309a:	fab3 f383 	clz	r3, r3
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	3301      	adds	r3, #1
 80030a2:	f003 021f 	and.w	r2, r3, #31
 80030a6:	4613      	mov	r3, r2
 80030a8:	005b      	lsls	r3, r3, #1
 80030aa:	4413      	add	r3, r2
 80030ac:	051b      	lsls	r3, r3, #20
 80030ae:	430b      	orrs	r3, r1
 80030b0:	e07e      	b.n	80031b0 <HAL_ADCEx_InjectedConfigChannel+0x89c>
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d107      	bne.n	80030ce <HAL_ADCEx_InjectedConfigChannel+0x7ba>
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	0e9b      	lsrs	r3, r3, #26
 80030c4:	3301      	adds	r3, #1
 80030c6:	069b      	lsls	r3, r3, #26
 80030c8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80030cc:	e015      	b.n	80030fa <HAL_ADCEx_InjectedConfigChannel+0x7e6>
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030d6:	fa93 f3a3 	rbit	r3, r3
 80030da:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80030dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030de:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80030e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d101      	bne.n	80030ea <HAL_ADCEx_InjectedConfigChannel+0x7d6>
    return 32U;
 80030e6:	2320      	movs	r3, #32
 80030e8:	e003      	b.n	80030f2 <HAL_ADCEx_InjectedConfigChannel+0x7de>
  return __builtin_clz(value);
 80030ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030ec:	fab3 f383 	clz	r3, r3
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	3301      	adds	r3, #1
 80030f4:	069b      	lsls	r3, r3, #26
 80030f6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003102:	2b00      	cmp	r3, #0
 8003104:	d109      	bne.n	800311a <HAL_ADCEx_InjectedConfigChannel+0x806>
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	0e9b      	lsrs	r3, r3, #26
 800310c:	3301      	adds	r3, #1
 800310e:	f003 031f 	and.w	r3, r3, #31
 8003112:	2101      	movs	r1, #1
 8003114:	fa01 f303 	lsl.w	r3, r1, r3
 8003118:	e017      	b.n	800314a <HAL_ADCEx_InjectedConfigChannel+0x836>
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	fa93 f3a3 	rbit	r3, r3
 8003126:	61bb      	str	r3, [r7, #24]
  return result;
 8003128:	69bb      	ldr	r3, [r7, #24]
 800312a:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800312c:	6a3b      	ldr	r3, [r7, #32]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d101      	bne.n	8003136 <HAL_ADCEx_InjectedConfigChannel+0x822>
    return 32U;
 8003132:	2320      	movs	r3, #32
 8003134:	e003      	b.n	800313e <HAL_ADCEx_InjectedConfigChannel+0x82a>
  return __builtin_clz(value);
 8003136:	6a3b      	ldr	r3, [r7, #32]
 8003138:	fab3 f383 	clz	r3, r3
 800313c:	b2db      	uxtb	r3, r3
 800313e:	3301      	adds	r3, #1
 8003140:	f003 031f 	and.w	r3, r3, #31
 8003144:	2101      	movs	r1, #1
 8003146:	fa01 f303 	lsl.w	r3, r1, r3
 800314a:	ea42 0103 	orr.w	r1, r2, r3
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003156:	2b00      	cmp	r3, #0
 8003158:	d10d      	bne.n	8003176 <HAL_ADCEx_InjectedConfigChannel+0x862>
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	0e9b      	lsrs	r3, r3, #26
 8003160:	3301      	adds	r3, #1
 8003162:	f003 021f 	and.w	r2, r3, #31
 8003166:	4613      	mov	r3, r2
 8003168:	005b      	lsls	r3, r3, #1
 800316a:	4413      	add	r3, r2
 800316c:	3b1e      	subs	r3, #30
 800316e:	051b      	lsls	r3, r3, #20
 8003170:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003174:	e01b      	b.n	80031ae <HAL_ADCEx_InjectedConfigChannel+0x89a>
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	fa93 f3a3 	rbit	r3, r3
 8003182:	60fb      	str	r3, [r7, #12]
  return result;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d101      	bne.n	8003192 <HAL_ADCEx_InjectedConfigChannel+0x87e>
    return 32U;
 800318e:	2320      	movs	r3, #32
 8003190:	e003      	b.n	800319a <HAL_ADCEx_InjectedConfigChannel+0x886>
  return __builtin_clz(value);
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	fab3 f383 	clz	r3, r3
 8003198:	b2db      	uxtb	r3, r3
 800319a:	3301      	adds	r3, #1
 800319c:	f003 021f 	and.w	r2, r3, #31
 80031a0:	4613      	mov	r3, r2
 80031a2:	005b      	lsls	r3, r3, #1
 80031a4:	4413      	add	r3, r2
 80031a6:	3b1e      	subs	r3, #30
 80031a8:	051b      	lsls	r3, r3, #20
 80031aa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80031ae:	430b      	orrs	r3, r1
 80031b0:	683a      	ldr	r2, [r7, #0]
 80031b2:	6892      	ldr	r2, [r2, #8]
 80031b4:	4619      	mov	r1, r3
 80031b6:	f7ff f971 	bl	800249c <LL_ADC_SetChannelSamplingTime>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	4b09      	ldr	r3, [pc, #36]	; (80031e4 <HAL_ADCEx_InjectedConfigChannel+0x8d0>)
 80031c0:	4013      	ands	r3, r2
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	f000 80b1 	beq.w	800332a <HAL_ADCEx_InjectedConfigChannel+0xa16>
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031d0:	d004      	beq.n	80031dc <HAL_ADCEx_InjectedConfigChannel+0x8c8>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a04      	ldr	r2, [pc, #16]	; (80031e8 <HAL_ADCEx_InjectedConfigChannel+0x8d4>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d109      	bne.n	80031f0 <HAL_ADCEx_InjectedConfigChannel+0x8dc>
 80031dc:	4b03      	ldr	r3, [pc, #12]	; (80031ec <HAL_ADCEx_InjectedConfigChannel+0x8d8>)
 80031de:	e008      	b.n	80031f2 <HAL_ADCEx_InjectedConfigChannel+0x8de>
 80031e0:	407f0000 	.word	0x407f0000
 80031e4:	80080000 	.word	0x80080000
 80031e8:	50000100 	.word	0x50000100
 80031ec:	50000300 	.word	0x50000300
 80031f0:	4b53      	ldr	r3, [pc, #332]	; (8003340 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 80031f2:	4618      	mov	r0, r3
 80031f4:	f7ff f897 	bl	8002326 <LL_ADC_GetCommonPathInternalCh>
 80031f8:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a50      	ldr	r2, [pc, #320]	; (8003344 <HAL_ADCEx_InjectedConfigChannel+0xa30>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d004      	beq.n	8003210 <HAL_ADCEx_InjectedConfigChannel+0x8fc>
         || (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a4f      	ldr	r2, [pc, #316]	; (8003348 <HAL_ADCEx_InjectedConfigChannel+0xa34>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d138      	bne.n	8003282 <HAL_ADCEx_InjectedConfigChannel+0x96e>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003210:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003214:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003218:	2b00      	cmp	r3, #0
 800321a:	d132      	bne.n	8003282 <HAL_ADCEx_InjectedConfigChannel+0x96e>
    {
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003224:	d004      	beq.n	8003230 <HAL_ADCEx_InjectedConfigChannel+0x91c>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a48      	ldr	r2, [pc, #288]	; (800334c <HAL_ADCEx_InjectedConfigChannel+0xa38>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d179      	bne.n	8003324 <HAL_ADCEx_InjectedConfigChannel+0xa10>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003238:	d004      	beq.n	8003244 <HAL_ADCEx_InjectedConfigChannel+0x930>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a44      	ldr	r2, [pc, #272]	; (8003350 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d101      	bne.n	8003248 <HAL_ADCEx_InjectedConfigChannel+0x934>
 8003244:	4a43      	ldr	r2, [pc, #268]	; (8003354 <HAL_ADCEx_InjectedConfigChannel+0xa40>)
 8003246:	e000      	b.n	800324a <HAL_ADCEx_InjectedConfigChannel+0x936>
 8003248:	4a3d      	ldr	r2, [pc, #244]	; (8003340 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 800324a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800324e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003252:	4619      	mov	r1, r3
 8003254:	4610      	mov	r0, r2
 8003256:	f7ff f853 	bl	8002300 <LL_ADC_SetCommonPathInternalCh>
        /* Delay for temperature sensor stabilization time */
        /* Wait loop initialization and execution */
        /* Note: Variable divided by 2 to compensate partially              */
        /*       CPU processing cycles, scaling in us split to not          */
        /*       exceed 32 bits register capacity and handle low frequency. */
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800325a:	4b3f      	ldr	r3, [pc, #252]	; (8003358 <HAL_ADCEx_InjectedConfigChannel+0xa44>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	099b      	lsrs	r3, r3, #6
 8003260:	4a3e      	ldr	r2, [pc, #248]	; (800335c <HAL_ADCEx_InjectedConfigChannel+0xa48>)
 8003262:	fba2 2303 	umull	r2, r3, r2, r3
 8003266:	099a      	lsrs	r2, r3, #6
 8003268:	4613      	mov	r3, r2
 800326a:	005b      	lsls	r3, r3, #1
 800326c:	4413      	add	r3, r2
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 8003272:	e002      	b.n	800327a <HAL_ADCEx_InjectedConfigChannel+0x966>
        {
          wait_loop_index--;
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	3b01      	subs	r3, #1
 8003278:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d1f9      	bne.n	8003274 <HAL_ADCEx_InjectedConfigChannel+0x960>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003280:	e050      	b.n	8003324 <HAL_ADCEx_InjectedConfigChannel+0xa10>
        }
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a36      	ldr	r2, [pc, #216]	; (8003360 <HAL_ADCEx_InjectedConfigChannel+0xa4c>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d125      	bne.n	80032d8 <HAL_ADCEx_InjectedConfigChannel+0x9c4>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800328c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003290:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003294:	2b00      	cmp	r3, #0
 8003296:	d11f      	bne.n	80032d8 <HAL_ADCEx_InjectedConfigChannel+0x9c4>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a2c      	ldr	r2, [pc, #176]	; (8003350 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d104      	bne.n	80032ac <HAL_ADCEx_InjectedConfigChannel+0x998>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a2f      	ldr	r2, [pc, #188]	; (8003364 <HAL_ADCEx_InjectedConfigChannel+0xa50>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d03d      	beq.n	8003328 <HAL_ADCEx_InjectedConfigChannel+0xa14>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80032b4:	d004      	beq.n	80032c0 <HAL_ADCEx_InjectedConfigChannel+0x9ac>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a25      	ldr	r2, [pc, #148]	; (8003350 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d101      	bne.n	80032c4 <HAL_ADCEx_InjectedConfigChannel+0x9b0>
 80032c0:	4a24      	ldr	r2, [pc, #144]	; (8003354 <HAL_ADCEx_InjectedConfigChannel+0xa40>)
 80032c2:	e000      	b.n	80032c6 <HAL_ADCEx_InjectedConfigChannel+0x9b2>
 80032c4:	4a1e      	ldr	r2, [pc, #120]	; (8003340 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 80032c6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80032ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032ce:	4619      	mov	r1, r3
 80032d0:	4610      	mov	r0, r2
 80032d2:	f7ff f815 	bl	8002300 <LL_ADC_SetCommonPathInternalCh>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80032d6:	e027      	b.n	8003328 <HAL_ADCEx_InjectedConfigChannel+0xa14>
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a22      	ldr	r2, [pc, #136]	; (8003368 <HAL_ADCEx_InjectedConfigChannel+0xa54>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d123      	bne.n	800332a <HAL_ADCEx_InjectedConfigChannel+0xa16>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80032e2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80032e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d11d      	bne.n	800332a <HAL_ADCEx_InjectedConfigChannel+0xa16>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a17      	ldr	r2, [pc, #92]	; (8003350 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d018      	beq.n	800332a <HAL_ADCEx_InjectedConfigChannel+0xa16>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003300:	d004      	beq.n	800330c <HAL_ADCEx_InjectedConfigChannel+0x9f8>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a12      	ldr	r2, [pc, #72]	; (8003350 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d101      	bne.n	8003310 <HAL_ADCEx_InjectedConfigChannel+0x9fc>
 800330c:	4a11      	ldr	r2, [pc, #68]	; (8003354 <HAL_ADCEx_InjectedConfigChannel+0xa40>)
 800330e:	e000      	b.n	8003312 <HAL_ADCEx_InjectedConfigChannel+0x9fe>
 8003310:	4a0b      	ldr	r2, [pc, #44]	; (8003340 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 8003312:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003316:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800331a:	4619      	mov	r1, r3
 800331c:	4610      	mov	r0, r2
 800331e:	f7fe ffef 	bl	8002300 <LL_ADC_SetCommonPathInternalCh>
 8003322:	e002      	b.n	800332a <HAL_ADCEx_InjectedConfigChannel+0xa16>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003324:	bf00      	nop
 8003326:	e000      	b.n	800332a <HAL_ADCEx_InjectedConfigChannel+0xa16>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003328:	bf00      	nop
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003332:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003336:	4618      	mov	r0, r3
 8003338:	37d8      	adds	r7, #216	; 0xd8
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	50000700 	.word	0x50000700
 8003344:	c3210000 	.word	0xc3210000
 8003348:	90c00010 	.word	0x90c00010
 800334c:	50000600 	.word	0x50000600
 8003350:	50000100 	.word	0x50000100
 8003354:	50000300 	.word	0x50000300
 8003358:	20000000 	.word	0x20000000
 800335c:	053e2d63 	.word	0x053e2d63
 8003360:	c7520000 	.word	0xc7520000
 8003364:	50000500 	.word	0x50000500
 8003368:	cb840000 	.word	0xcb840000

0800336c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800336c:	b590      	push	{r4, r7, lr}
 800336e:	b0a1      	sub	sp, #132	; 0x84
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003376:	2300      	movs	r3, #0
 8003378:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003382:	2b01      	cmp	r3, #1
 8003384:	d101      	bne.n	800338a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003386:	2302      	movs	r3, #2
 8003388:	e0e3      	b.n	8003552 <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2201      	movs	r2, #1
 800338e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800339a:	d102      	bne.n	80033a2 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 800339c:	4b6f      	ldr	r3, [pc, #444]	; (800355c <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 800339e:	60bb      	str	r3, [r7, #8]
 80033a0:	e009      	b.n	80033b6 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a6e      	ldr	r2, [pc, #440]	; (8003560 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d102      	bne.n	80033b2 <HAL_ADCEx_MultiModeConfigChannel+0x46>
 80033ac:	4b6d      	ldr	r3, [pc, #436]	; (8003564 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80033ae:	60bb      	str	r3, [r7, #8]
 80033b0:	e001      	b.n	80033b6 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 80033b2:	2300      	movs	r3, #0
 80033b4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d10b      	bne.n	80033d4 <HAL_ADCEx_MultiModeConfigChannel+0x68>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033c0:	f043 0220 	orr.w	r2, r3, #32
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2200      	movs	r2, #0
 80033cc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e0be      	b.n	8003552 <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	4618      	mov	r0, r3
 80033d8:	f7ff f8fe 	bl	80025d8 <LL_ADC_REG_IsConversionOngoing>
 80033dc:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4618      	mov	r0, r3
 80033e4:	f7ff f8f8 	bl	80025d8 <LL_ADC_REG_IsConversionOngoing>
 80033e8:	4603      	mov	r3, r0
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	f040 80a0 	bne.w	8003530 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80033f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	f040 809c 	bne.w	8003530 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003400:	d004      	beq.n	800340c <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a55      	ldr	r2, [pc, #340]	; (800355c <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d101      	bne.n	8003410 <HAL_ADCEx_MultiModeConfigChannel+0xa4>
 800340c:	4b56      	ldr	r3, [pc, #344]	; (8003568 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800340e:	e000      	b.n	8003412 <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 8003410:	4b56      	ldr	r3, [pc, #344]	; (800356c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003412:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d04b      	beq.n	80034b4 <HAL_ADCEx_MultiModeConfigChannel+0x148>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800341c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	6859      	ldr	r1, [r3, #4]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800342e:	035b      	lsls	r3, r3, #13
 8003430:	430b      	orrs	r3, r1
 8003432:	431a      	orrs	r2, r3
 8003434:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003436:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003440:	d004      	beq.n	800344c <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a45      	ldr	r2, [pc, #276]	; (800355c <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d10f      	bne.n	800346c <HAL_ADCEx_MultiModeConfigChannel+0x100>
 800344c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003450:	f7ff f882 	bl	8002558 <LL_ADC_IsEnabled>
 8003454:	4604      	mov	r4, r0
 8003456:	4841      	ldr	r0, [pc, #260]	; (800355c <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8003458:	f7ff f87e 	bl	8002558 <LL_ADC_IsEnabled>
 800345c:	4603      	mov	r3, r0
 800345e:	4323      	orrs	r3, r4
 8003460:	2b00      	cmp	r3, #0
 8003462:	bf0c      	ite	eq
 8003464:	2301      	moveq	r3, #1
 8003466:	2300      	movne	r3, #0
 8003468:	b2db      	uxtb	r3, r3
 800346a:	e012      	b.n	8003492 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 800346c:	483c      	ldr	r0, [pc, #240]	; (8003560 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 800346e:	f7ff f873 	bl	8002558 <LL_ADC_IsEnabled>
 8003472:	4604      	mov	r4, r0
 8003474:	483b      	ldr	r0, [pc, #236]	; (8003564 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003476:	f7ff f86f 	bl	8002558 <LL_ADC_IsEnabled>
 800347a:	4603      	mov	r3, r0
 800347c:	431c      	orrs	r4, r3
 800347e:	483c      	ldr	r0, [pc, #240]	; (8003570 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003480:	f7ff f86a 	bl	8002558 <LL_ADC_IsEnabled>
 8003484:	4603      	mov	r3, r0
 8003486:	4323      	orrs	r3, r4
 8003488:	2b00      	cmp	r3, #0
 800348a:	bf0c      	ite	eq
 800348c:	2301      	moveq	r3, #1
 800348e:	2300      	movne	r3, #0
 8003490:	b2db      	uxtb	r3, r3
 8003492:	2b00      	cmp	r3, #0
 8003494:	d056      	beq.n	8003544 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003496:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800349e:	f023 030f 	bic.w	r3, r3, #15
 80034a2:	683a      	ldr	r2, [r7, #0]
 80034a4:	6811      	ldr	r1, [r2, #0]
 80034a6:	683a      	ldr	r2, [r7, #0]
 80034a8:	6892      	ldr	r2, [r2, #8]
 80034aa:	430a      	orrs	r2, r1
 80034ac:	431a      	orrs	r2, r3
 80034ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034b0:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80034b2:	e047      	b.n	8003544 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80034b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80034bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034be:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80034c8:	d004      	beq.n	80034d4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a23      	ldr	r2, [pc, #140]	; (800355c <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d10f      	bne.n	80034f4 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80034d4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80034d8:	f7ff f83e 	bl	8002558 <LL_ADC_IsEnabled>
 80034dc:	4604      	mov	r4, r0
 80034de:	481f      	ldr	r0, [pc, #124]	; (800355c <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 80034e0:	f7ff f83a 	bl	8002558 <LL_ADC_IsEnabled>
 80034e4:	4603      	mov	r3, r0
 80034e6:	4323      	orrs	r3, r4
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	bf0c      	ite	eq
 80034ec:	2301      	moveq	r3, #1
 80034ee:	2300      	movne	r3, #0
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	e012      	b.n	800351a <HAL_ADCEx_MultiModeConfigChannel+0x1ae>
 80034f4:	481a      	ldr	r0, [pc, #104]	; (8003560 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 80034f6:	f7ff f82f 	bl	8002558 <LL_ADC_IsEnabled>
 80034fa:	4604      	mov	r4, r0
 80034fc:	4819      	ldr	r0, [pc, #100]	; (8003564 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80034fe:	f7ff f82b 	bl	8002558 <LL_ADC_IsEnabled>
 8003502:	4603      	mov	r3, r0
 8003504:	431c      	orrs	r4, r3
 8003506:	481a      	ldr	r0, [pc, #104]	; (8003570 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003508:	f7ff f826 	bl	8002558 <LL_ADC_IsEnabled>
 800350c:	4603      	mov	r3, r0
 800350e:	4323      	orrs	r3, r4
 8003510:	2b00      	cmp	r3, #0
 8003512:	bf0c      	ite	eq
 8003514:	2301      	moveq	r3, #1
 8003516:	2300      	movne	r3, #0
 8003518:	b2db      	uxtb	r3, r3
 800351a:	2b00      	cmp	r3, #0
 800351c:	d012      	beq.n	8003544 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800351e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003526:	f023 030f 	bic.w	r3, r3, #15
 800352a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800352c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800352e:	e009      	b.n	8003544 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003534:	f043 0220 	orr.w	r2, r3, #32
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003542:	e000      	b.n	8003546 <HAL_ADCEx_MultiModeConfigChannel+0x1da>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003544:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800354e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003552:	4618      	mov	r0, r3
 8003554:	3784      	adds	r7, #132	; 0x84
 8003556:	46bd      	mov	sp, r7
 8003558:	bd90      	pop	{r4, r7, pc}
 800355a:	bf00      	nop
 800355c:	50000100 	.word	0x50000100
 8003560:	50000400 	.word	0x50000400
 8003564:	50000500 	.word	0x50000500
 8003568:	50000300 	.word	0x50000300
 800356c:	50000700 	.word	0x50000700
 8003570:	50000600 	.word	0x50000600

08003574 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003574:	b480      	push	{r7}
 8003576:	b085      	sub	sp, #20
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	f003 0307 	and.w	r3, r3, #7
 8003582:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003584:	4b0c      	ldr	r3, [pc, #48]	; (80035b8 <__NVIC_SetPriorityGrouping+0x44>)
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800358a:	68ba      	ldr	r2, [r7, #8]
 800358c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003590:	4013      	ands	r3, r2
 8003592:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800359c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80035a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035a6:	4a04      	ldr	r2, [pc, #16]	; (80035b8 <__NVIC_SetPriorityGrouping+0x44>)
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	60d3      	str	r3, [r2, #12]
}
 80035ac:	bf00      	nop
 80035ae:	3714      	adds	r7, #20
 80035b0:	46bd      	mov	sp, r7
 80035b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b6:	4770      	bx	lr
 80035b8:	e000ed00 	.word	0xe000ed00

080035bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80035bc:	b480      	push	{r7}
 80035be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035c0:	4b04      	ldr	r3, [pc, #16]	; (80035d4 <__NVIC_GetPriorityGrouping+0x18>)
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	0a1b      	lsrs	r3, r3, #8
 80035c6:	f003 0307 	and.w	r3, r3, #7
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr
 80035d4:	e000ed00 	.word	0xe000ed00

080035d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035d8:	b480      	push	{r7}
 80035da:	b083      	sub	sp, #12
 80035dc:	af00      	add	r7, sp, #0
 80035de:	4603      	mov	r3, r0
 80035e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	db0b      	blt.n	8003602 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035ea:	79fb      	ldrb	r3, [r7, #7]
 80035ec:	f003 021f 	and.w	r2, r3, #31
 80035f0:	4907      	ldr	r1, [pc, #28]	; (8003610 <__NVIC_EnableIRQ+0x38>)
 80035f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035f6:	095b      	lsrs	r3, r3, #5
 80035f8:	2001      	movs	r0, #1
 80035fa:	fa00 f202 	lsl.w	r2, r0, r2
 80035fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003602:	bf00      	nop
 8003604:	370c      	adds	r7, #12
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr
 800360e:	bf00      	nop
 8003610:	e000e100 	.word	0xe000e100

08003614 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003614:	b480      	push	{r7}
 8003616:	b083      	sub	sp, #12
 8003618:	af00      	add	r7, sp, #0
 800361a:	4603      	mov	r3, r0
 800361c:	6039      	str	r1, [r7, #0]
 800361e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003620:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003624:	2b00      	cmp	r3, #0
 8003626:	db0a      	blt.n	800363e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	b2da      	uxtb	r2, r3
 800362c:	490c      	ldr	r1, [pc, #48]	; (8003660 <__NVIC_SetPriority+0x4c>)
 800362e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003632:	0112      	lsls	r2, r2, #4
 8003634:	b2d2      	uxtb	r2, r2
 8003636:	440b      	add	r3, r1
 8003638:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800363c:	e00a      	b.n	8003654 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	b2da      	uxtb	r2, r3
 8003642:	4908      	ldr	r1, [pc, #32]	; (8003664 <__NVIC_SetPriority+0x50>)
 8003644:	79fb      	ldrb	r3, [r7, #7]
 8003646:	f003 030f 	and.w	r3, r3, #15
 800364a:	3b04      	subs	r3, #4
 800364c:	0112      	lsls	r2, r2, #4
 800364e:	b2d2      	uxtb	r2, r2
 8003650:	440b      	add	r3, r1
 8003652:	761a      	strb	r2, [r3, #24]
}
 8003654:	bf00      	nop
 8003656:	370c      	adds	r7, #12
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr
 8003660:	e000e100 	.word	0xe000e100
 8003664:	e000ed00 	.word	0xe000ed00

08003668 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003668:	b480      	push	{r7}
 800366a:	b089      	sub	sp, #36	; 0x24
 800366c:	af00      	add	r7, sp, #0
 800366e:	60f8      	str	r0, [r7, #12]
 8003670:	60b9      	str	r1, [r7, #8]
 8003672:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f003 0307 	and.w	r3, r3, #7
 800367a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	f1c3 0307 	rsb	r3, r3, #7
 8003682:	2b04      	cmp	r3, #4
 8003684:	bf28      	it	cs
 8003686:	2304      	movcs	r3, #4
 8003688:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	3304      	adds	r3, #4
 800368e:	2b06      	cmp	r3, #6
 8003690:	d902      	bls.n	8003698 <NVIC_EncodePriority+0x30>
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	3b03      	subs	r3, #3
 8003696:	e000      	b.n	800369a <NVIC_EncodePriority+0x32>
 8003698:	2300      	movs	r3, #0
 800369a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800369c:	f04f 32ff 	mov.w	r2, #4294967295
 80036a0:	69bb      	ldr	r3, [r7, #24]
 80036a2:	fa02 f303 	lsl.w	r3, r2, r3
 80036a6:	43da      	mvns	r2, r3
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	401a      	ands	r2, r3
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036b0:	f04f 31ff 	mov.w	r1, #4294967295
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	fa01 f303 	lsl.w	r3, r1, r3
 80036ba:	43d9      	mvns	r1, r3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036c0:	4313      	orrs	r3, r2
         );
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3724      	adds	r7, #36	; 0x24
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr
	...

080036d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	3b01      	subs	r3, #1
 80036dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036e0:	d301      	bcc.n	80036e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036e2:	2301      	movs	r3, #1
 80036e4:	e00f      	b.n	8003706 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036e6:	4a0a      	ldr	r2, [pc, #40]	; (8003710 <SysTick_Config+0x40>)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	3b01      	subs	r3, #1
 80036ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036ee:	210f      	movs	r1, #15
 80036f0:	f04f 30ff 	mov.w	r0, #4294967295
 80036f4:	f7ff ff8e 	bl	8003614 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036f8:	4b05      	ldr	r3, [pc, #20]	; (8003710 <SysTick_Config+0x40>)
 80036fa:	2200      	movs	r2, #0
 80036fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036fe:	4b04      	ldr	r3, [pc, #16]	; (8003710 <SysTick_Config+0x40>)
 8003700:	2207      	movs	r2, #7
 8003702:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003704:	2300      	movs	r3, #0
}
 8003706:	4618      	mov	r0, r3
 8003708:	3708      	adds	r7, #8
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	e000e010 	.word	0xe000e010

08003714 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b082      	sub	sp, #8
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f7ff ff29 	bl	8003574 <__NVIC_SetPriorityGrouping>
}
 8003722:	bf00      	nop
 8003724:	3708      	adds	r7, #8
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}

0800372a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800372a:	b580      	push	{r7, lr}
 800372c:	b086      	sub	sp, #24
 800372e:	af00      	add	r7, sp, #0
 8003730:	4603      	mov	r3, r0
 8003732:	60b9      	str	r1, [r7, #8]
 8003734:	607a      	str	r2, [r7, #4]
 8003736:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003738:	f7ff ff40 	bl	80035bc <__NVIC_GetPriorityGrouping>
 800373c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	68b9      	ldr	r1, [r7, #8]
 8003742:	6978      	ldr	r0, [r7, #20]
 8003744:	f7ff ff90 	bl	8003668 <NVIC_EncodePriority>
 8003748:	4602      	mov	r2, r0
 800374a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800374e:	4611      	mov	r1, r2
 8003750:	4618      	mov	r0, r3
 8003752:	f7ff ff5f 	bl	8003614 <__NVIC_SetPriority>
}
 8003756:	bf00      	nop
 8003758:	3718      	adds	r7, #24
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}

0800375e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800375e:	b580      	push	{r7, lr}
 8003760:	b082      	sub	sp, #8
 8003762:	af00      	add	r7, sp, #0
 8003764:	4603      	mov	r3, r0
 8003766:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003768:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800376c:	4618      	mov	r0, r3
 800376e:	f7ff ff33 	bl	80035d8 <__NVIC_EnableIRQ>
}
 8003772:	bf00      	nop
 8003774:	3708      	adds	r7, #8
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}

0800377a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800377a:	b580      	push	{r7, lr}
 800377c:	b082      	sub	sp, #8
 800377e:	af00      	add	r7, sp, #0
 8003780:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f7ff ffa4 	bl	80036d0 <SysTick_Config>
 8003788:	4603      	mov	r3, r0
}
 800378a:	4618      	mov	r0, r3
 800378c:	3708      	adds	r7, #8
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
	...

08003794 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003794:	b480      	push	{r7}
 8003796:	b087      	sub	sp, #28
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
 800379c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800379e:	2300      	movs	r3, #0
 80037a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80037a2:	e15a      	b.n	8003a5a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	2101      	movs	r1, #1
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	fa01 f303 	lsl.w	r3, r1, r3
 80037b0:	4013      	ands	r3, r2
 80037b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	f000 814c 	beq.w	8003a54 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d00b      	beq.n	80037dc <HAL_GPIO_Init+0x48>
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	2b02      	cmp	r3, #2
 80037ca:	d007      	beq.n	80037dc <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80037d0:	2b11      	cmp	r3, #17
 80037d2:	d003      	beq.n	80037dc <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	2b12      	cmp	r3, #18
 80037da:	d130      	bne.n	800383e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	005b      	lsls	r3, r3, #1
 80037e6:	2203      	movs	r2, #3
 80037e8:	fa02 f303 	lsl.w	r3, r2, r3
 80037ec:	43db      	mvns	r3, r3
 80037ee:	693a      	ldr	r2, [r7, #16]
 80037f0:	4013      	ands	r3, r2
 80037f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	68da      	ldr	r2, [r3, #12]
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	005b      	lsls	r3, r3, #1
 80037fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003800:	693a      	ldr	r2, [r7, #16]
 8003802:	4313      	orrs	r3, r2
 8003804:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	693a      	ldr	r2, [r7, #16]
 800380a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003812:	2201      	movs	r2, #1
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	fa02 f303 	lsl.w	r3, r2, r3
 800381a:	43db      	mvns	r3, r3
 800381c:	693a      	ldr	r2, [r7, #16]
 800381e:	4013      	ands	r3, r2
 8003820:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	091b      	lsrs	r3, r3, #4
 8003828:	f003 0201 	and.w	r2, r3, #1
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	fa02 f303 	lsl.w	r3, r2, r3
 8003832:	693a      	ldr	r2, [r7, #16]
 8003834:	4313      	orrs	r3, r2
 8003836:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	693a      	ldr	r2, [r7, #16]
 800383c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	005b      	lsls	r3, r3, #1
 8003848:	2203      	movs	r2, #3
 800384a:	fa02 f303 	lsl.w	r3, r2, r3
 800384e:	43db      	mvns	r3, r3
 8003850:	693a      	ldr	r2, [r7, #16]
 8003852:	4013      	ands	r3, r2
 8003854:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	689a      	ldr	r2, [r3, #8]
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	005b      	lsls	r3, r3, #1
 800385e:	fa02 f303 	lsl.w	r3, r2, r3
 8003862:	693a      	ldr	r2, [r7, #16]
 8003864:	4313      	orrs	r3, r2
 8003866:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	693a      	ldr	r2, [r7, #16]
 800386c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	2b02      	cmp	r3, #2
 8003874:	d003      	beq.n	800387e <HAL_GPIO_Init+0xea>
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	2b12      	cmp	r3, #18
 800387c:	d123      	bne.n	80038c6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	08da      	lsrs	r2, r3, #3
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	3208      	adds	r2, #8
 8003886:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800388a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	f003 0307 	and.w	r3, r3, #7
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	220f      	movs	r2, #15
 8003896:	fa02 f303 	lsl.w	r3, r2, r3
 800389a:	43db      	mvns	r3, r3
 800389c:	693a      	ldr	r2, [r7, #16]
 800389e:	4013      	ands	r3, r2
 80038a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	691a      	ldr	r2, [r3, #16]
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	f003 0307 	and.w	r3, r3, #7
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	fa02 f303 	lsl.w	r3, r2, r3
 80038b2:	693a      	ldr	r2, [r7, #16]
 80038b4:	4313      	orrs	r3, r2
 80038b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	08da      	lsrs	r2, r3, #3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	3208      	adds	r2, #8
 80038c0:	6939      	ldr	r1, [r7, #16]
 80038c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	005b      	lsls	r3, r3, #1
 80038d0:	2203      	movs	r2, #3
 80038d2:	fa02 f303 	lsl.w	r3, r2, r3
 80038d6:	43db      	mvns	r3, r3
 80038d8:	693a      	ldr	r2, [r7, #16]
 80038da:	4013      	ands	r3, r2
 80038dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	f003 0203 	and.w	r2, r3, #3
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	005b      	lsls	r3, r3, #1
 80038ea:	fa02 f303 	lsl.w	r3, r2, r3
 80038ee:	693a      	ldr	r2, [r7, #16]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	693a      	ldr	r2, [r7, #16]
 80038f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003902:	2b00      	cmp	r3, #0
 8003904:	f000 80a6 	beq.w	8003a54 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003908:	4b5b      	ldr	r3, [pc, #364]	; (8003a78 <HAL_GPIO_Init+0x2e4>)
 800390a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800390c:	4a5a      	ldr	r2, [pc, #360]	; (8003a78 <HAL_GPIO_Init+0x2e4>)
 800390e:	f043 0301 	orr.w	r3, r3, #1
 8003912:	6613      	str	r3, [r2, #96]	; 0x60
 8003914:	4b58      	ldr	r3, [pc, #352]	; (8003a78 <HAL_GPIO_Init+0x2e4>)
 8003916:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003918:	f003 0301 	and.w	r3, r3, #1
 800391c:	60bb      	str	r3, [r7, #8]
 800391e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003920:	4a56      	ldr	r2, [pc, #344]	; (8003a7c <HAL_GPIO_Init+0x2e8>)
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	089b      	lsrs	r3, r3, #2
 8003926:	3302      	adds	r3, #2
 8003928:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800392c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	f003 0303 	and.w	r3, r3, #3
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	220f      	movs	r2, #15
 8003938:	fa02 f303 	lsl.w	r3, r2, r3
 800393c:	43db      	mvns	r3, r3
 800393e:	693a      	ldr	r2, [r7, #16]
 8003940:	4013      	ands	r3, r2
 8003942:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800394a:	d01f      	beq.n	800398c <HAL_GPIO_Init+0x1f8>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	4a4c      	ldr	r2, [pc, #304]	; (8003a80 <HAL_GPIO_Init+0x2ec>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d019      	beq.n	8003988 <HAL_GPIO_Init+0x1f4>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	4a4b      	ldr	r2, [pc, #300]	; (8003a84 <HAL_GPIO_Init+0x2f0>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d013      	beq.n	8003984 <HAL_GPIO_Init+0x1f0>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	4a4a      	ldr	r2, [pc, #296]	; (8003a88 <HAL_GPIO_Init+0x2f4>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d00d      	beq.n	8003980 <HAL_GPIO_Init+0x1ec>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	4a49      	ldr	r2, [pc, #292]	; (8003a8c <HAL_GPIO_Init+0x2f8>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d007      	beq.n	800397c <HAL_GPIO_Init+0x1e8>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	4a48      	ldr	r2, [pc, #288]	; (8003a90 <HAL_GPIO_Init+0x2fc>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d101      	bne.n	8003978 <HAL_GPIO_Init+0x1e4>
 8003974:	2305      	movs	r3, #5
 8003976:	e00a      	b.n	800398e <HAL_GPIO_Init+0x1fa>
 8003978:	2306      	movs	r3, #6
 800397a:	e008      	b.n	800398e <HAL_GPIO_Init+0x1fa>
 800397c:	2304      	movs	r3, #4
 800397e:	e006      	b.n	800398e <HAL_GPIO_Init+0x1fa>
 8003980:	2303      	movs	r3, #3
 8003982:	e004      	b.n	800398e <HAL_GPIO_Init+0x1fa>
 8003984:	2302      	movs	r3, #2
 8003986:	e002      	b.n	800398e <HAL_GPIO_Init+0x1fa>
 8003988:	2301      	movs	r3, #1
 800398a:	e000      	b.n	800398e <HAL_GPIO_Init+0x1fa>
 800398c:	2300      	movs	r3, #0
 800398e:	697a      	ldr	r2, [r7, #20]
 8003990:	f002 0203 	and.w	r2, r2, #3
 8003994:	0092      	lsls	r2, r2, #2
 8003996:	4093      	lsls	r3, r2
 8003998:	693a      	ldr	r2, [r7, #16]
 800399a:	4313      	orrs	r3, r2
 800399c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800399e:	4937      	ldr	r1, [pc, #220]	; (8003a7c <HAL_GPIO_Init+0x2e8>)
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	089b      	lsrs	r3, r3, #2
 80039a4:	3302      	adds	r3, #2
 80039a6:	693a      	ldr	r2, [r7, #16]
 80039a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80039ac:	4b39      	ldr	r3, [pc, #228]	; (8003a94 <HAL_GPIO_Init+0x300>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	43db      	mvns	r3, r3
 80039b6:	693a      	ldr	r2, [r7, #16]
 80039b8:	4013      	ands	r3, r2
 80039ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d003      	beq.n	80039d0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80039c8:	693a      	ldr	r2, [r7, #16]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80039d0:	4a30      	ldr	r2, [pc, #192]	; (8003a94 <HAL_GPIO_Init+0x300>)
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80039d6:	4b2f      	ldr	r3, [pc, #188]	; (8003a94 <HAL_GPIO_Init+0x300>)
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	43db      	mvns	r3, r3
 80039e0:	693a      	ldr	r2, [r7, #16]
 80039e2:	4013      	ands	r3, r2
 80039e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d003      	beq.n	80039fa <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80039f2:	693a      	ldr	r2, [r7, #16]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80039fa:	4a26      	ldr	r2, [pc, #152]	; (8003a94 <HAL_GPIO_Init+0x300>)
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003a00:	4b24      	ldr	r3, [pc, #144]	; (8003a94 <HAL_GPIO_Init+0x300>)
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	43db      	mvns	r3, r3
 8003a0a:	693a      	ldr	r2, [r7, #16]
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d003      	beq.n	8003a24 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003a1c:	693a      	ldr	r2, [r7, #16]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003a24:	4a1b      	ldr	r2, [pc, #108]	; (8003a94 <HAL_GPIO_Init+0x300>)
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003a2a:	4b1a      	ldr	r3, [pc, #104]	; (8003a94 <HAL_GPIO_Init+0x300>)
 8003a2c:	68db      	ldr	r3, [r3, #12]
 8003a2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	43db      	mvns	r3, r3
 8003a34:	693a      	ldr	r2, [r7, #16]
 8003a36:	4013      	ands	r3, r2
 8003a38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d003      	beq.n	8003a4e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003a46:	693a      	ldr	r2, [r7, #16]
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003a4e:	4a11      	ldr	r2, [pc, #68]	; (8003a94 <HAL_GPIO_Init+0x300>)
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	3301      	adds	r3, #1
 8003a58:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	fa22 f303 	lsr.w	r3, r2, r3
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	f47f ae9d 	bne.w	80037a4 <HAL_GPIO_Init+0x10>
  }
}
 8003a6a:	bf00      	nop
 8003a6c:	371c      	adds	r7, #28
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a74:	4770      	bx	lr
 8003a76:	bf00      	nop
 8003a78:	40021000 	.word	0x40021000
 8003a7c:	40010000 	.word	0x40010000
 8003a80:	48000400 	.word	0x48000400
 8003a84:	48000800 	.word	0x48000800
 8003a88:	48000c00 	.word	0x48000c00
 8003a8c:	48001000 	.word	0x48001000
 8003a90:	48001400 	.word	0x48001400
 8003a94:	40010400 	.word	0x40010400

08003a98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	460b      	mov	r3, r1
 8003aa2:	807b      	strh	r3, [r7, #2]
 8003aa4:	4613      	mov	r3, r2
 8003aa6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003aa8:	787b      	ldrb	r3, [r7, #1]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d003      	beq.n	8003ab6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003aae:	887a      	ldrh	r2, [r7, #2]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003ab4:	e002      	b.n	8003abc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003ab6:	887a      	ldrh	r2, [r7, #2]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003abc:	bf00      	nop
 8003abe:	370c      	adds	r7, #12
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr

08003ac8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b082      	sub	sp, #8
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	4603      	mov	r3, r0
 8003ad0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003ad2:	4b08      	ldr	r3, [pc, #32]	; (8003af4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ad4:	695a      	ldr	r2, [r3, #20]
 8003ad6:	88fb      	ldrh	r3, [r7, #6]
 8003ad8:	4013      	ands	r3, r2
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d006      	beq.n	8003aec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003ade:	4a05      	ldr	r2, [pc, #20]	; (8003af4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ae0:	88fb      	ldrh	r3, [r7, #6]
 8003ae2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003ae4:	88fb      	ldrh	r3, [r7, #6]
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f000 f806 	bl	8003af8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003aec:	bf00      	nop
 8003aee:	3708      	adds	r7, #8
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}
 8003af4:	40010400 	.word	0x40010400

08003af8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	4603      	mov	r3, r0
 8003b00:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003b02:	bf00      	nop
 8003b04:	370c      	adds	r7, #12
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr
	...

08003b10 <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef * hhrtim)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b086      	sub	sp, #24
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if(hhrtim == NULL)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d101      	bne.n	8003b22 <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e0be      	b.n	8003ca0 <HAL_HRTIM_Init+0x190>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2202      	movs	r2, #2
 8003b26:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
  hhrtim->hdmaTimerF = (DMA_HandleTypeDef *)NULL;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	f003 0301 	and.w	r3, r3, #1
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d02e      	beq.n	8003bcc <HAL_HRTIM_Init+0xbc>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a4d      	ldr	r2, [pc, #308]	; (8003ca8 <HAL_HRTIM_Init+0x198>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d10b      	bne.n	8003b90 <HAL_HRTIM_Init+0x80>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 8003b78:	4b4c      	ldr	r3, [pc, #304]	; (8003cac <HAL_HRTIM_Init+0x19c>)
 8003b7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b7c:	4a4b      	ldr	r2, [pc, #300]	; (8003cac <HAL_HRTIM_Init+0x19c>)
 8003b7e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003b82:	6613      	str	r3, [r2, #96]	; 0x60
 8003b84:	4b49      	ldr	r3, [pc, #292]	; (8003cac <HAL_HRTIM_Init+0x19c>)
 8003b86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b88:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003b8c:	60fb      	str	r3, [r7, #12]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003b9e:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	691b      	ldr	r3, [r3, #16]
 8003ba4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003ba8:	693a      	ldr	r2, [r7, #16]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003bb4:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	695b      	ldr	r3, [r3, #20]
 8003bba:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003bbe:	693a      	ldr	r2, [r7, #16]
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	693a      	ldr	r2, [r7, #16]
 8003bca:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f7fd f913 	bl	8000df8 <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	f003 0302 	and.w	r3, r3, #2
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d012      	beq.n	8003c04 <HAL_HRTIM_Init+0xf4>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bec:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	68db      	ldr	r3, [r3, #12]
 8003bf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bf6:	693a      	ldr	r2, [r7, #16]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	693a      	ldr	r2, [r7, #16]
 8003c02:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2201      	movs	r2, #1
 8003c08:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8003c14:	2300      	movs	r3, #0
 8003c16:	75fb      	strb	r3, [r7, #23]
 8003c18:	e03e      	b.n	8003c98 <HAL_HRTIM_Init+0x188>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 8003c1a:	7dfa      	ldrb	r2, [r7, #23]
 8003c1c:	6879      	ldr	r1, [r7, #4]
 8003c1e:	4613      	mov	r3, r2
 8003c20:	00db      	lsls	r3, r3, #3
 8003c22:	1a9b      	subs	r3, r3, r2
 8003c24:	009b      	lsls	r3, r3, #2
 8003c26:	440b      	add	r3, r1
 8003c28:	3318      	adds	r3, #24
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 8003c2e:	7dfa      	ldrb	r2, [r7, #23]
 8003c30:	6879      	ldr	r1, [r7, #4]
 8003c32:	4613      	mov	r3, r2
 8003c34:	00db      	lsls	r3, r3, #3
 8003c36:	1a9b      	subs	r3, r3, r2
 8003c38:	009b      	lsls	r3, r3, #2
 8003c3a:	440b      	add	r3, r1
 8003c3c:	331c      	adds	r3, #28
 8003c3e:	2200      	movs	r2, #0
 8003c40:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 8003c42:	7dfa      	ldrb	r2, [r7, #23]
 8003c44:	6879      	ldr	r1, [r7, #4]
 8003c46:	4613      	mov	r3, r2
 8003c48:	00db      	lsls	r3, r3, #3
 8003c4a:	1a9b      	subs	r3, r3, r2
 8003c4c:	009b      	lsls	r3, r3, #2
 8003c4e:	440b      	add	r3, r1
 8003c50:	3320      	adds	r3, #32
 8003c52:	2200      	movs	r2, #0
 8003c54:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 8003c56:	7dfa      	ldrb	r2, [r7, #23]
 8003c58:	6879      	ldr	r1, [r7, #4]
 8003c5a:	4613      	mov	r3, r2
 8003c5c:	00db      	lsls	r3, r3, #3
 8003c5e:	1a9b      	subs	r3, r3, r2
 8003c60:	009b      	lsls	r3, r3, #2
 8003c62:	440b      	add	r3, r1
 8003c64:	3324      	adds	r3, #36	; 0x24
 8003c66:	2200      	movs	r2, #0
 8003c68:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 8003c6a:	7dfa      	ldrb	r2, [r7, #23]
 8003c6c:	6879      	ldr	r1, [r7, #4]
 8003c6e:	4613      	mov	r3, r2
 8003c70:	00db      	lsls	r3, r3, #3
 8003c72:	1a9b      	subs	r3, r3, r2
 8003c74:	009b      	lsls	r3, r3, #2
 8003c76:	440b      	add	r3, r1
 8003c78:	3328      	adds	r3, #40	; 0x28
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 8003c7e:	7dfa      	ldrb	r2, [r7, #23]
 8003c80:	6879      	ldr	r1, [r7, #4]
 8003c82:	4613      	mov	r3, r2
 8003c84:	00db      	lsls	r3, r3, #3
 8003c86:	1a9b      	subs	r3, r3, r2
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	440b      	add	r3, r1
 8003c8c:	3330      	adds	r3, #48	; 0x30
 8003c8e:	2200      	movs	r2, #0
 8003c90:	601a      	str	r2, [r3, #0]
       timer_idx++)
 8003c92:	7dfb      	ldrb	r3, [r7, #23]
 8003c94:	3301      	adds	r3, #1
 8003c96:	75fb      	strb	r3, [r7, #23]
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8003c98:	7dfb      	ldrb	r3, [r7, #23]
 8003c9a:	2b06      	cmp	r3, #6
 8003c9c:	d9bd      	bls.n	8003c1a <HAL_HRTIM_Init+0x10a>
  }

  return HAL_OK;
 8003c9e:	2300      	movs	r3, #0
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3718      	adds	r7, #24
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}
 8003ca8:	40016800 	.word	0x40016800
 8003cac:	40021000 	.word	0x40021000

08003cb0 <HAL_HRTIM_DLLCalibrationStart>:
  *       within the HAL_HRTIM_PollForDLLCalibration function, just before
  *       exiting the function.
  */
HAL_StatusTypeDef HAL_HRTIM_DLLCalibrationStart(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t CalibrationRate)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b083      	sub	sp, #12
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_HRTIM_CALIBRATIONRATE(CalibrationRate));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d101      	bne.n	8003cc8 <HAL_HRTIM_DLLCalibrationStart+0x18>
 8003cc4:	2302      	movs	r3, #2
 8003cc6:	e045      	b.n	8003d54 <HAL_HRTIM_DLLCalibrationStart+0xa4>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2202      	movs	r2, #2
 8003cd4:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  if (CalibrationRate == HRTIM_SINGLE_CALIBRATION)
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cde:	d114      	bne.n	8003d0a <HAL_HRTIM_DLLCalibrationStart+0x5a>
  {
    /* One shot DLL calibration */
    CLEAR_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f022 0202 	bic.w	r2, r2, #2
 8003cf0:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f042 0201 	orr.w	r2, r2, #1
 8003d04:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
 8003d08:	e01f      	b.n	8003d4a <HAL_HRTIM_DLLCalibrationStart+0x9a>
  }
  else
  {
    /* Periodic DLL calibration */
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f042 0202 	orr.w	r2, r2, #2
 8003d1a:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
    MODIFY_REG(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALRTE, CalibrationRate);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 8003d26:	f023 010c 	bic.w	r1, r3, #12
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	683a      	ldr	r2, [r7, #0]
 8003d30:	430a      	orrs	r2, r1
 8003d32:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f042 0201 	orr.w	r2, r2, #1
 8003d46:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  return HAL_OK;
 8003d52:	2300      	movs	r3, #0
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	370c      	adds	r7, #12
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr

08003d60 <HAL_HRTIM_PollForDLLCalibration>:
  * @param  Timeout Timeout duration in millisecond
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_PollForDLLCalibration(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t Timeout)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b084      	sub	sp, #16
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  tickstart = HAL_GetTick();
 8003d6a:	f7fd f9db 	bl	8001124 <HAL_GetTick>
 8003d6e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 8003d70:	e014      	b.n	8003d9c <HAL_HRTIM_PollForDLLCalibration+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d78:	d010      	beq.n	8003d9c <HAL_HRTIM_PollForDLLCalibration+0x3c>
    {
      if(((HAL_GetTick()-tickstart) > Timeout) || (Timeout == 0U))
 8003d7a:	f7fd f9d3 	bl	8001124 <HAL_GetTick>
 8003d7e:	4602      	mov	r2, r0
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	1ad3      	subs	r3, r2, r3
 8003d84:	683a      	ldr	r2, [r7, #0]
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d302      	bcc.n	8003d90 <HAL_HRTIM_PollForDLLCalibration+0x30>
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d105      	bne.n	8003d9c <HAL_HRTIM_PollForDLLCalibration+0x3c>
      {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2207      	movs	r2, #7
 8003d94:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
        return HAL_TIMEOUT;
 8003d98:	2303      	movs	r3, #3
 8003d9a:	e011      	b.n	8003dc0 <HAL_HRTIM_PollForDLLCalibration+0x60>
  while(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 8003da4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003da8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dac:	d1e1      	bne.n	8003d72 <HAL_HRTIM_PollForDLLCalibration+0x12>
      }
    }
  }

  /* Set HRTIM State */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2201      	movs	r2, #1
 8003db2:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process unlocked */
  __HAL_UNLOCK(hhrtim);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2200      	movs	r2, #0
 8003dba:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8003dbe:	2300      	movs	r3, #0
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3710      	adds	r7, #16
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b084      	sub	sp, #16
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	60f8      	str	r0, [r7, #12]
 8003dd0:	60b9      	str	r1, [r7, #8]
 8003dd2:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	2b02      	cmp	r3, #2
 8003dde:	d101      	bne.n	8003de4 <HAL_HRTIM_TimeBaseConfig+0x1c>
  {
     return HAL_BUSY;
 8003de0:	2302      	movs	r3, #2
 8003de2:	e015      	b.n	8003e10 <HAL_HRTIM_TimeBaseConfig+0x48>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2202      	movs	r2, #2
 8003de8:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	2b06      	cmp	r3, #6
 8003df0:	d104      	bne.n	8003dfc <HAL_HRTIM_TimeBaseConfig+0x34>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 8003df2:	6879      	ldr	r1, [r7, #4]
 8003df4:	68f8      	ldr	r0, [r7, #12]
 8003df6:	f000 fee3 	bl	8004bc0 <HRTIM_MasterBase_Config>
 8003dfa:	e004      	b.n	8003e06 <HAL_HRTIM_TimeBaseConfig+0x3e>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	68b9      	ldr	r1, [r7, #8]
 8003e00:	68f8      	ldr	r0, [r7, #12]
 8003e02:	f000 ff0c 	bl	8004c1e <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2201      	movs	r2, #1
 8003e0a:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  return HAL_OK;
 8003e0e:	2300      	movs	r3, #0
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	3710      	adds	r7, #16
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}

08003e18 <HAL_HRTIM_ADCTriggerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_ADCTriggerConfig(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t ADCTrigger,
                                             HRTIM_ADCTriggerCfgTypeDef* pADCTriggerCfg)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b087      	sub	sp, #28
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	60f8      	str	r0, [r7, #12]
 8003e20:	60b9      	str	r1, [r7, #8]
 8003e22:	607a      	str	r2, [r7, #4]

  /* Check parameters */
  assert_param(IS_HRTIM_ADCTRIGGER(ADCTrigger));
  assert_param(IS_HRTIM_ADCTRIGGERUPDATE(pADCTriggerCfg->UpdateSource));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	2b02      	cmp	r3, #2
 8003e2e:	d101      	bne.n	8003e34 <HAL_HRTIM_ADCTriggerConfig+0x1c>
  {
     return HAL_BUSY;
 8003e30:	2302      	movs	r3, #2
 8003e32:	e18c      	b.n	800414e <HAL_HRTIM_ADCTriggerConfig+0x336>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d101      	bne.n	8003e42 <HAL_HRTIM_ADCTriggerConfig+0x2a>
 8003e3e:	2302      	movs	r3, #2
 8003e40:	e185      	b.n	800414e <HAL_HRTIM_ADCTriggerConfig+0x336>
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2201      	movs	r2, #1
 8003e46:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2202      	movs	r2, #2
 8003e4e:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Set the ADC trigger update source */
  hrtim_cr1 = hhrtim->Instance->sCommonRegs.CR1;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8003e5a:	617b      	str	r3, [r7, #20]
  hrtim_adcur = hhrtim->Instance->sCommonRegs.ADCUR;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8003e64:	613b      	str	r3, [r7, #16]

  switch (ADCTrigger)
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	2b10      	cmp	r3, #16
 8003e6a:	d06c      	beq.n	8003f46 <HAL_HRTIM_ADCTriggerConfig+0x12e>
 8003e6c:	2b10      	cmp	r3, #16
 8003e6e:	d80b      	bhi.n	8003e88 <HAL_HRTIM_ADCTriggerConfig+0x70>
 8003e70:	2b02      	cmp	r3, #2
 8003e72:	d02f      	beq.n	8003ed4 <HAL_HRTIM_ADCTriggerConfig+0xbc>
 8003e74:	2b02      	cmp	r3, #2
 8003e76:	d802      	bhi.n	8003e7e <HAL_HRTIM_ADCTriggerConfig+0x66>
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d019      	beq.n	8003eb0 <HAL_HRTIM_ADCTriggerConfig+0x98>
 8003e7c:	e13f      	b.n	80040fe <HAL_HRTIM_ADCTriggerConfig+0x2e6>
 8003e7e:	2b04      	cmp	r3, #4
 8003e80:	d03b      	beq.n	8003efa <HAL_HRTIM_ADCTriggerConfig+0xe2>
 8003e82:	2b08      	cmp	r3, #8
 8003e84:	d04c      	beq.n	8003f20 <HAL_HRTIM_ADCTriggerConfig+0x108>
 8003e86:	e13a      	b.n	80040fe <HAL_HRTIM_ADCTriggerConfig+0x2e6>
 8003e88:	2b80      	cmp	r3, #128	; 0x80
 8003e8a:	f000 80ca 	beq.w	8004022 <HAL_HRTIM_ADCTriggerConfig+0x20a>
 8003e8e:	2b80      	cmp	r3, #128	; 0x80
 8003e90:	d805      	bhi.n	8003e9e <HAL_HRTIM_ADCTriggerConfig+0x86>
 8003e92:	2b20      	cmp	r3, #32
 8003e94:	d07b      	beq.n	8003f8e <HAL_HRTIM_ADCTriggerConfig+0x176>
 8003e96:	2b40      	cmp	r3, #64	; 0x40
 8003e98:	f000 809e 	beq.w	8003fd8 <HAL_HRTIM_ADCTriggerConfig+0x1c0>
 8003e9c:	e12f      	b.n	80040fe <HAL_HRTIM_ADCTriggerConfig+0x2e6>
 8003e9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ea2:	f000 80e3 	beq.w	800406c <HAL_HRTIM_ADCTriggerConfig+0x254>
 8003ea6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003eaa:	f000 8103 	beq.w	80040b4 <HAL_HRTIM_ADCTriggerConfig+0x29c>
 8003eae:	e126      	b.n	80040fe <HAL_HRTIM_ADCTriggerConfig+0x2e6>
  {
  case HRTIM_ADCTRIGGER_1:
    {
      hrtim_cr1 &= ~(HRTIM_CR1_ADC1USRC);
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8003eb6:	617b      	str	r3, [r7, #20]
      hrtim_cr1 |= (pADCTriggerCfg->UpdateSource & HRTIM_CR1_ADC1USRC);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8003ec0:	697a      	ldr	r2, [r7, #20]
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	617b      	str	r3, [r7, #20]

      /* Set the ADC trigger 1 source */
      hhrtim->Instance->sCommonRegs.ADC1R = pADCTriggerCfg->Trigger;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	6852      	ldr	r2, [r2, #4]
 8003ece:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
      break;
 8003ed2:	e11d      	b.n	8004110 <HAL_HRTIM_ADCTriggerConfig+0x2f8>
    }

  case HRTIM_ADCTRIGGER_2:
    {
      hrtim_cr1 &= ~(HRTIM_CR1_ADC2USRC);
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	f423 1360 	bic.w	r3, r3, #3670016	; 0x380000
 8003eda:	617b      	str	r3, [r7, #20]
      hrtim_cr1 |= ((pADCTriggerCfg->UpdateSource << 3U) & HRTIM_CR1_ADC2USRC);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	00db      	lsls	r3, r3, #3
 8003ee2:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 8003ee6:	697a      	ldr	r2, [r7, #20]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	617b      	str	r3, [r7, #20]

      /* Set the ADC trigger 2 source */
      hhrtim->Instance->sCommonRegs.ADC2R = pADCTriggerCfg->Trigger;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	687a      	ldr	r2, [r7, #4]
 8003ef2:	6852      	ldr	r2, [r2, #4]
 8003ef4:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
      break;
 8003ef8:	e10a      	b.n	8004110 <HAL_HRTIM_ADCTriggerConfig+0x2f8>
    }

  case HRTIM_ADCTRIGGER_3:
    {
      hrtim_cr1 &= ~(HRTIM_CR1_ADC3USRC);
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8003f00:	617b      	str	r3, [r7, #20]
      hrtim_cr1 |= ((pADCTriggerCfg->UpdateSource << 6U) & HRTIM_CR1_ADC3USRC);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	019b      	lsls	r3, r3, #6
 8003f08:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
 8003f0c:	697a      	ldr	r2, [r7, #20]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	617b      	str	r3, [r7, #20]

      /* Set the ADC trigger 3 source */
      hhrtim->Instance->sCommonRegs.ADC3R = pADCTriggerCfg->Trigger;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	6852      	ldr	r2, [r2, #4]
 8003f1a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
      break;
 8003f1e:	e0f7      	b.n	8004110 <HAL_HRTIM_ADCTriggerConfig+0x2f8>
    }

  case HRTIM_ADCTRIGGER_4:
    {
      hrtim_cr1 &= ~(HRTIM_CR1_ADC4USRC);
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 8003f26:	617b      	str	r3, [r7, #20]
      hrtim_cr1 |= ((pADCTriggerCfg->UpdateSource << 9U) & HRTIM_CR1_ADC4USRC);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	025b      	lsls	r3, r3, #9
 8003f2e:	f003 6360 	and.w	r3, r3, #234881024	; 0xe000000
 8003f32:	697a      	ldr	r2, [r7, #20]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	617b      	str	r3, [r7, #20]

      /* Set the ADC trigger 4 source */
      hhrtim->Instance->sCommonRegs.ADC4R = pADCTriggerCfg->Trigger;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	6852      	ldr	r2, [r2, #4]
 8003f40:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
      break;
 8003f44:	e0e4      	b.n	8004110 <HAL_HRTIM_ADCTriggerConfig+0x2f8>
    }

  case HRTIM_ADCTRIGGER_5:
    {
      hrtim_adcur &= ~(HRTIM_ADCUR_AD5USRC);
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	f023 0307 	bic.w	r3, r3, #7
 8003f4c:	613b      	str	r3, [r7, #16]
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource >> 16U) & HRTIM_ADCUR_AD5USRC);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	0c1b      	lsrs	r3, r3, #16
 8003f54:	f003 0307 	and.w	r3, r3, #7
 8003f58:	693a      	ldr	r2, [r7, #16]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	613b      	str	r3, [r7, #16]

      /* Set the ADC trigger 5 source */
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD5TRG);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f8d3 23f8 	ldr.w	r2, [r3, #1016]	; 0x3f8
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f022 021f 	bic.w	r2, r2, #31
 8003f6e:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD5TRG_Pos) & HRTIM_ADCER_AD5TRG);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f8d3 13f8 	ldr.w	r1, [r3, #1016]	; 0x3f8
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	f003 021f 	and.w	r2, r3, #31
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	430a      	orrs	r2, r1
 8003f88:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8
      break;
 8003f8c:	e0c0      	b.n	8004110 <HAL_HRTIM_ADCTriggerConfig+0x2f8>
    }

  case HRTIM_ADCTRIGGER_6:
    {
      hrtim_adcur &= ~(HRTIM_ADCUR_AD6USRC);
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f94:	613b      	str	r3, [r7, #16]
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource >> 12U) & HRTIM_ADCUR_AD6USRC);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	0b1b      	lsrs	r3, r3, #12
 8003f9c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003fa0:	693a      	ldr	r2, [r7, #16]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	613b      	str	r3, [r7, #16]

      /* Set the ADC trigger 6 source */
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD6TRG);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f8d3 23f8 	ldr.w	r2, [r3, #1016]	; 0x3f8
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f422 7278 	bic.w	r2, r2, #992	; 0x3e0
 8003fb6:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD6TRG_Pos) & HRTIM_ADCER_AD6TRG);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f8d3 13f8 	ldr.w	r1, [r3, #1016]	; 0x3f8
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	015b      	lsls	r3, r3, #5
 8003fc8:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	430a      	orrs	r2, r1
 8003fd2:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8
      break;
 8003fd6:	e09b      	b.n	8004110 <HAL_HRTIM_ADCTriggerConfig+0x2f8>
    }

  case HRTIM_ADCTRIGGER_7:
    {
      hrtim_adcur &= ~(HRTIM_ADCUR_AD7USRC);
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003fde:	613b      	str	r3, [r7, #16]
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource >> 8U) & HRTIM_ADCUR_AD7USRC);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	0a1b      	lsrs	r3, r3, #8
 8003fe6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003fea:	693a      	ldr	r2, [r7, #16]
 8003fec:	4313      	orrs	r3, r2
 8003fee:	613b      	str	r3, [r7, #16]

      /* Set the ADC trigger 7 source */
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD7TRG);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f8d3 23f8 	ldr.w	r2, [r3, #1016]	; 0x3f8
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8004000:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD7TRG_Pos) & HRTIM_ADCER_AD7TRG);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f8d3 13f8 	ldr.w	r1, [r3, #1016]	; 0x3f8
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	029b      	lsls	r3, r3, #10
 8004012:	f403 42f8 	and.w	r2, r3, #31744	; 0x7c00
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	430a      	orrs	r2, r1
 800401c:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8
      break;
 8004020:	e076      	b.n	8004110 <HAL_HRTIM_ADCTriggerConfig+0x2f8>
    }

  case HRTIM_ADCTRIGGER_8:
    {
      hrtim_adcur &= ~(HRTIM_ADCUR_AD8USRC);
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004028:	613b      	str	r3, [r7, #16]
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource >> 4U) & HRTIM_ADCUR_AD8USRC);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	091b      	lsrs	r3, r3, #4
 8004030:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8004034:	693a      	ldr	r2, [r7, #16]
 8004036:	4313      	orrs	r3, r2
 8004038:	613b      	str	r3, [r7, #16]

      /* Set the ADC trigger 8 source */
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD8TRG);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f8d3 23f8 	ldr.w	r2, [r3, #1016]	; 0x3f8
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 800404a:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD8TRG_Pos) & HRTIM_ADCER_AD8TRG);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f8d3 13f8 	ldr.w	r1, [r3, #1016]	; 0x3f8
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	041b      	lsls	r3, r3, #16
 800405c:	f403 12f8 	and.w	r2, r3, #2031616	; 0x1f0000
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	430a      	orrs	r2, r1
 8004066:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8
      break;
 800406a:	e051      	b.n	8004110 <HAL_HRTIM_ADCTriggerConfig+0x2f8>
    }

  case HRTIM_ADCTRIGGER_9:
    {
      hrtim_adcur &= ~(HRTIM_ADCUR_AD9USRC);
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8004072:	613b      	str	r3, [r7, #16]
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource) & HRTIM_ADCUR_AD9USRC);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800407c:	693a      	ldr	r2, [r7, #16]
 800407e:	4313      	orrs	r3, r2
 8004080:	613b      	str	r3, [r7, #16]

      /* Set the ADC trigger 9 source */
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD9TRG);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f8d3 23f8 	ldr.w	r2, [r3, #1016]	; 0x3f8
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f022 7278 	bic.w	r2, r2, #65011712	; 0x3e00000
 8004092:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD9TRG_Pos) & HRTIM_ADCER_AD9TRG);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f8d3 13f8 	ldr.w	r1, [r3, #1016]	; 0x3f8
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	055b      	lsls	r3, r3, #21
 80040a4:	f003 7278 	and.w	r2, r3, #65011712	; 0x3e00000
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	430a      	orrs	r2, r1
 80040ae:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8
      break;
 80040b2:	e02d      	b.n	8004110 <HAL_HRTIM_ADCTriggerConfig+0x2f8>
    }

  case HRTIM_ADCTRIGGER_10:
    {
      hrtim_adcur &= ~(HRTIM_ADCUR_AD10USRC);
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80040ba:	613b      	str	r3, [r7, #16]
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource << 4U) & HRTIM_ADCUR_AD10USRC);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	011b      	lsls	r3, r3, #4
 80040c2:	f403 03e0 	and.w	r3, r3, #7340032	; 0x700000
 80040c6:	693a      	ldr	r2, [r7, #16]
 80040c8:	4313      	orrs	r3, r2
 80040ca:	613b      	str	r3, [r7, #16]

      /* Set the ADC trigger 10 source */
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD10TRG);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f8d3 23f8 	ldr.w	r2, [r3, #1016]	; 0x3f8
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f022 42f8 	bic.w	r2, r2, #2080374784	; 0x7c000000
 80040dc:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD10TRG_Pos) & HRTIM_ADCER_AD10TRG);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f8d3 13f8 	ldr.w	r1, [r3, #1016]	; 0x3f8
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	069b      	lsls	r3, r3, #26
 80040ee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	430a      	orrs	r2, r1
 80040f8:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8
      break;
 80040fc:	e008      	b.n	8004110 <HAL_HRTIM_ADCTriggerConfig+0x2f8>
    }

  default:
    {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2207      	movs	r2, #7
 8004102:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2200      	movs	r2, #0
 800410a:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

      break;
 800410e:	bf00      	nop
    }
  }

  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8004116:	b2db      	uxtb	r3, r3
 8004118:	2b07      	cmp	r3, #7
 800411a:	d101      	bne.n	8004120 <HAL_HRTIM_ADCTriggerConfig+0x308>
  {
     return HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	e016      	b.n	800414e <HAL_HRTIM_ADCTriggerConfig+0x336>
  }

  /* Update the HRTIM registers */
  if (ADCTrigger < HRTIM_ADCTRIGGER_5)
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	2b0f      	cmp	r3, #15
 8004124:	d805      	bhi.n	8004132 <HAL_HRTIM_ADCTriggerConfig+0x31a>
  {
   hhrtim->Instance->sCommonRegs.CR1 = hrtim_cr1;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	697a      	ldr	r2, [r7, #20]
 800412c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380
 8004130:	e004      	b.n	800413c <HAL_HRTIM_ADCTriggerConfig+0x324>
  }
  else
  {
   hhrtim->Instance->sCommonRegs.ADCUR = hrtim_adcur;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	693a      	ldr	r2, [r7, #16]
 8004138:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  }

  hhrtim->State = HAL_HRTIM_STATE_READY;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2201      	movs	r2, #1
 8004140:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2200      	movs	r2, #0
 8004148:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 800414c:	2300      	movs	r3, #0
}
 800414e:	4618      	mov	r0, r3
 8004150:	371c      	adds	r7, #28
 8004152:	46bd      	mov	sp, r7
 8004154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004158:	4770      	bx	lr

0800415a <HAL_HRTIM_ADCPostScalerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_ADCPostScalerConfig(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t ADCTrigger,
                                             uint32_t Postscaler)
{
 800415a:	b480      	push	{r7}
 800415c:	b085      	sub	sp, #20
 800415e:	af00      	add	r7, sp, #0
 8004160:	60f8      	str	r0, [r7, #12]
 8004162:	60b9      	str	r1, [r7, #8]
 8004164:	607a      	str	r2, [r7, #4]
  /* Check parameters */
  assert_param(IS_HRTIM_ADCTRIGGER(ADCTrigger));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 800416c:	b2db      	uxtb	r3, r3
 800416e:	2b02      	cmp	r3, #2
 8004170:	d101      	bne.n	8004176 <HAL_HRTIM_ADCPostScalerConfig+0x1c>
  {
     return HAL_BUSY;
 8004172:	2302      	movs	r3, #2
 8004174:	e0e9      	b.n	800434a <HAL_HRTIM_ADCPostScalerConfig+0x1f0>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 800417c:	2b01      	cmp	r3, #1
 800417e:	d101      	bne.n	8004184 <HAL_HRTIM_ADCPostScalerConfig+0x2a>
 8004180:	2302      	movs	r3, #2
 8004182:	e0e2      	b.n	800434a <HAL_HRTIM_ADCPostScalerConfig+0x1f0>
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2201      	movs	r2, #1
 8004188:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2202      	movs	r2, #2
 8004190:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  switch (ADCTrigger)
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	2b10      	cmp	r3, #16
 8004198:	d05e      	beq.n	8004258 <HAL_HRTIM_ADCPostScalerConfig+0xfe>
 800419a:	2b10      	cmp	r3, #16
 800419c:	d80b      	bhi.n	80041b6 <HAL_HRTIM_ADCPostScalerConfig+0x5c>
 800419e:	2b02      	cmp	r3, #2
 80041a0:	d02a      	beq.n	80041f8 <HAL_HRTIM_ADCPostScalerConfig+0x9e>
 80041a2:	2b02      	cmp	r3, #2
 80041a4:	d802      	bhi.n	80041ac <HAL_HRTIM_ADCPostScalerConfig+0x52>
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d017      	beq.n	80041da <HAL_HRTIM_ADCPostScalerConfig+0x80>
 80041aa:	e0b4      	b.n	8004316 <HAL_HRTIM_ADCPostScalerConfig+0x1bc>
 80041ac:	2b04      	cmp	r3, #4
 80041ae:	d033      	beq.n	8004218 <HAL_HRTIM_ADCPostScalerConfig+0xbe>
 80041b0:	2b08      	cmp	r3, #8
 80041b2:	d041      	beq.n	8004238 <HAL_HRTIM_ADCPostScalerConfig+0xde>
 80041b4:	e0af      	b.n	8004316 <HAL_HRTIM_ADCPostScalerConfig+0x1bc>
 80041b6:	2b80      	cmp	r3, #128	; 0x80
 80041b8:	d07d      	beq.n	80042b6 <HAL_HRTIM_ADCPostScalerConfig+0x15c>
 80041ba:	2b80      	cmp	r3, #128	; 0x80
 80041bc:	d804      	bhi.n	80041c8 <HAL_HRTIM_ADCPostScalerConfig+0x6e>
 80041be:	2b20      	cmp	r3, #32
 80041c0:	d05a      	beq.n	8004278 <HAL_HRTIM_ADCPostScalerConfig+0x11e>
 80041c2:	2b40      	cmp	r3, #64	; 0x40
 80041c4:	d067      	beq.n	8004296 <HAL_HRTIM_ADCPostScalerConfig+0x13c>
 80041c6:	e0a6      	b.n	8004316 <HAL_HRTIM_ADCPostScalerConfig+0x1bc>
 80041c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041cc:	f000 8083 	beq.w	80042d6 <HAL_HRTIM_ADCPostScalerConfig+0x17c>
 80041d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041d4:	f000 808f 	beq.w	80042f6 <HAL_HRTIM_ADCPostScalerConfig+0x19c>
 80041d8:	e09d      	b.n	8004316 <HAL_HRTIM_ADCPostScalerConfig+0x1bc>
  {
  case HRTIM_ADCTRIGGER_1:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS1, HRTIM_ADCPS1_AD1PSC, (Postscaler & HRTIM_ADCPS1_AD1PSC));
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80041e2:	f023 011f 	bic.w	r1, r3, #31
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f003 021f 	and.w	r2, r3, #31
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	430a      	orrs	r2, r1
 80041f2:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      break;
 80041f6:	e097      	b.n	8004328 <HAL_HRTIM_ADCPostScalerConfig+0x1ce>
    }

  case HRTIM_ADCTRIGGER_2:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS1, HRTIM_ADCPS1_AD2PSC, ((Postscaler << HRTIM_ADCPS1_AD2PSC_Pos) & HRTIM_ADCPS1_AD2PSC));
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8004200:	f423 61f8 	bic.w	r1, r3, #1984	; 0x7c0
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	019b      	lsls	r3, r3, #6
 8004208:	f403 62f8 	and.w	r2, r3, #1984	; 0x7c0
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	430a      	orrs	r2, r1
 8004212:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      break;
 8004216:	e087      	b.n	8004328 <HAL_HRTIM_ADCPostScalerConfig+0x1ce>
    }

  case HRTIM_ADCTRIGGER_3:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS1, HRTIM_ADCPS1_AD3PSC, ((Postscaler << HRTIM_ADCPS1_AD3PSC_Pos) & HRTIM_ADCPS1_AD3PSC));
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8004220:	f423 31f8 	bic.w	r1, r3, #126976	; 0x1f000
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	031b      	lsls	r3, r3, #12
 8004228:	f403 32f8 	and.w	r2, r3, #126976	; 0x1f000
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	430a      	orrs	r2, r1
 8004232:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      break;
 8004236:	e077      	b.n	8004328 <HAL_HRTIM_ADCPostScalerConfig+0x1ce>
    }

  case HRTIM_ADCTRIGGER_4:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS1, HRTIM_ADCPS1_AD4PSC, ((Postscaler << HRTIM_ADCPS1_AD4PSC_Pos) & HRTIM_ADCPS1_AD4PSC));
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8004240:	f423 01f8 	bic.w	r1, r3, #8126464	; 0x7c0000
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	049b      	lsls	r3, r3, #18
 8004248:	f403 02f8 	and.w	r2, r3, #8126464	; 0x7c0000
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	430a      	orrs	r2, r1
 8004252:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      break;
 8004256:	e067      	b.n	8004328 <HAL_HRTIM_ADCPostScalerConfig+0x1ce>
    }

  case HRTIM_ADCTRIGGER_5:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS1, HRTIM_ADCPS1_AD5PSC, ((Postscaler << HRTIM_ADCPS1_AD5PSC_Pos) & HRTIM_ADCPS1_AD5PSC));
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8004260:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	061b      	lsls	r3, r3, #24
 8004268:	f003 52f8 	and.w	r2, r3, #520093696	; 0x1f000000
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	430a      	orrs	r2, r1
 8004272:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      break;
 8004276:	e057      	b.n	8004328 <HAL_HRTIM_ADCPostScalerConfig+0x1ce>
    }

  case HRTIM_ADCTRIGGER_6:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS2, HRTIM_ADCPS2_AD6PSC, ((Postscaler << HRTIM_ADCPS2_AD6PSC_Pos) & HRTIM_ADCPS2_AD6PSC));
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8004280:	f023 011f 	bic.w	r1, r3, #31
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	f003 021f 	and.w	r2, r3, #31
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	430a      	orrs	r2, r1
 8004290:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
      break;
 8004294:	e048      	b.n	8004328 <HAL_HRTIM_ADCPostScalerConfig+0x1ce>
    }

  case HRTIM_ADCTRIGGER_7:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS2, HRTIM_ADCPS2_AD7PSC, ((Postscaler << HRTIM_ADCPS2_AD7PSC_Pos) & HRTIM_ADCPS2_AD7PSC));
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800429e:	f423 61f8 	bic.w	r1, r3, #1984	; 0x7c0
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	019b      	lsls	r3, r3, #6
 80042a6:	f403 62f8 	and.w	r2, r3, #1984	; 0x7c0
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	430a      	orrs	r2, r1
 80042b0:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
      break;
 80042b4:	e038      	b.n	8004328 <HAL_HRTIM_ADCPostScalerConfig+0x1ce>
    }

  case HRTIM_ADCTRIGGER_8:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS2, HRTIM_ADCPS2_AD8PSC, ((Postscaler << HRTIM_ADCPS2_AD8PSC_Pos) & HRTIM_ADCPS2_AD8PSC));
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80042be:	f423 31f8 	bic.w	r1, r3, #126976	; 0x1f000
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	031b      	lsls	r3, r3, #12
 80042c6:	f403 32f8 	and.w	r2, r3, #126976	; 0x1f000
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	430a      	orrs	r2, r1
 80042d0:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
      break;
 80042d4:	e028      	b.n	8004328 <HAL_HRTIM_ADCPostScalerConfig+0x1ce>
    }

  case HRTIM_ADCTRIGGER_9:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS2, HRTIM_ADCPS2_AD9PSC, ((Postscaler << HRTIM_ADCPS2_AD9PSC_Pos) & HRTIM_ADCPS2_AD9PSC));
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80042de:	f423 01f8 	bic.w	r1, r3, #8126464	; 0x7c0000
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	049b      	lsls	r3, r3, #18
 80042e6:	f403 02f8 	and.w	r2, r3, #8126464	; 0x7c0000
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	430a      	orrs	r2, r1
 80042f0:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
      break;
 80042f4:	e018      	b.n	8004328 <HAL_HRTIM_ADCPostScalerConfig+0x1ce>
    }

  case HRTIM_ADCTRIGGER_10:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS2, HRTIM_ADCPS2_AD10PSC, ((Postscaler << HRTIM_ADCPS2_AD10PSC_Pos) & HRTIM_ADCPS2_AD10PSC));
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80042fe:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	061b      	lsls	r3, r3, #24
 8004306:	f003 52f8 	and.w	r2, r3, #520093696	; 0x1f000000
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	430a      	orrs	r2, r1
 8004310:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
      break;
 8004314:	e008      	b.n	8004328 <HAL_HRTIM_ADCPostScalerConfig+0x1ce>
    }

  default:
    {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2207      	movs	r2, #7
 800431a:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2200      	movs	r2, #0
 8004322:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

      break;
 8004326:	bf00      	nop
    }
  }

  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 800432e:	b2db      	uxtb	r3, r3
 8004330:	2b07      	cmp	r3, #7
 8004332:	d101      	bne.n	8004338 <HAL_HRTIM_ADCPostScalerConfig+0x1de>
  {
     return HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	e008      	b.n	800434a <HAL_HRTIM_ADCPostScalerConfig+0x1f0>
  }

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2200      	movs	r2, #0
 8004344:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8004348:	2300      	movs	r3, #0
}
 800434a:	4618      	mov	r0, r3
 800434c:	3714      	adds	r7, #20
 800434e:	46bd      	mov	sp, r7
 8004350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004354:	4770      	bx	lr

08004356 <HAL_HRTIM_WaveformTimerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8004356:	b580      	push	{r7, lr}
 8004358:	b084      	sub	sp, #16
 800435a:	af00      	add	r7, sp, #0
 800435c:	60f8      	str	r0, [r7, #12]
 800435e:	60b9      	str	r1, [r7, #8]
 8004360:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_DACSYNC(pTimerCfg->DACSynchro));
  assert_param(IS_HRTIM_PRELOAD(pTimerCfg->PreloadEnable));
  assert_param(IS_HRTIM_TIMERBURSTMODE(pTimerCfg->BurstMode));
  assert_param(IS_HRTIM_UPDATEONREPETITION(pTimerCfg->RepetitionUpdate));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8004368:	b2db      	uxtb	r3, r3
 800436a:	2b02      	cmp	r3, #2
 800436c:	d101      	bne.n	8004372 <HAL_HRTIM_WaveformTimerConfig+0x1c>
  {
     return HAL_BUSY;
 800436e:	2302      	movs	r3, #2
 8004370:	e05f      	b.n	8004432 <HAL_HRTIM_WaveformTimerConfig+0xdc>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8004378:	2b01      	cmp	r3, #1
 800437a:	d101      	bne.n	8004380 <HAL_HRTIM_WaveformTimerConfig+0x2a>
 800437c:	2302      	movs	r3, #2
 800437e:	e058      	b.n	8004432 <HAL_HRTIM_WaveformTimerConfig+0xdc>
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2202      	movs	r2, #2
 800438c:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	2b06      	cmp	r3, #6
 8004394:	d104      	bne.n	80043a0 <HAL_HRTIM_WaveformTimerConfig+0x4a>
    assert_param(IS_HRTIM_UPDATEGATING_MASTER(pTimerCfg->UpdateGating));
    assert_param(IS_HRTIM_MASTER_IT(pTimerCfg->InterruptRequests));
    assert_param(IS_HRTIM_MASTER_DMA(pTimerCfg->DMARequests));

    /* Configure master timer */
    HRTIM_MasterWaveform_Config(hhrtim, pTimerCfg);
 8004396:	6879      	ldr	r1, [r7, #4]
 8004398:	68f8      	ldr	r0, [r7, #12]
 800439a:	f000 fc80 	bl	8004c9e <HRTIM_MasterWaveform_Config>
 800439e:	e004      	b.n	80043aa <HAL_HRTIM_WaveformTimerConfig+0x54>
    assert_param(IS_HRTIM_TIMRESETTRIGGER(pTimerCfg->ResetTrigger));
    assert_param(IS_HRTIM_TIMUPDATEONRESET(pTimerCfg->ResetUpdate));
    assert_param(IS_HRTIM_TIMSYNCUPDATE(pTimerCfg->ReSyncUpdate));

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Config(hhrtim, TimerIdx, pTimerCfg);
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	68b9      	ldr	r1, [r7, #8]
 80043a4:	68f8      	ldr	r0, [r7, #12]
 80043a6:	f000 fd17 	bl	8004dd8 <HRTIM_TimingUnitWaveform_Config>
  }

  /* Update timer parameters */
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6819      	ldr	r1, [r3, #0]
 80043ae:	68f8      	ldr	r0, [r7, #12]
 80043b0:	68ba      	ldr	r2, [r7, #8]
 80043b2:	4613      	mov	r3, r2
 80043b4:	00db      	lsls	r3, r3, #3
 80043b6:	1a9b      	subs	r3, r3, r2
 80043b8:	009b      	lsls	r3, r3, #2
 80043ba:	4403      	add	r3, r0
 80043bc:	3320      	adds	r3, #32
 80043be:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6859      	ldr	r1, [r3, #4]
 80043c4:	68f8      	ldr	r0, [r7, #12]
 80043c6:	68ba      	ldr	r2, [r7, #8]
 80043c8:	4613      	mov	r3, r2
 80043ca:	00db      	lsls	r3, r3, #3
 80043cc:	1a9b      	subs	r3, r3, r2
 80043ce:	009b      	lsls	r3, r3, #2
 80043d0:	4403      	add	r3, r0
 80043d2:	3324      	adds	r3, #36	; 0x24
 80043d4:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6899      	ldr	r1, [r3, #8]
 80043da:	68f8      	ldr	r0, [r7, #12]
 80043dc:	68ba      	ldr	r2, [r7, #8]
 80043de:	4613      	mov	r3, r2
 80043e0:	00db      	lsls	r3, r3, #3
 80043e2:	1a9b      	subs	r3, r3, r2
 80043e4:	009b      	lsls	r3, r3, #2
 80043e6:	4403      	add	r3, r0
 80043e8:	3328      	adds	r3, #40	; 0x28
 80043ea:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	68d9      	ldr	r1, [r3, #12]
 80043f0:	68f8      	ldr	r0, [r7, #12]
 80043f2:	68ba      	ldr	r2, [r7, #8]
 80043f4:	4613      	mov	r3, r2
 80043f6:	00db      	lsls	r3, r3, #3
 80043f8:	1a9b      	subs	r3, r3, r2
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	4403      	add	r3, r0
 80043fe:	332c      	adds	r3, #44	; 0x2c
 8004400:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6919      	ldr	r1, [r3, #16]
 8004406:	68f8      	ldr	r0, [r7, #12]
 8004408:	68ba      	ldr	r2, [r7, #8]
 800440a:	4613      	mov	r3, r2
 800440c:	00db      	lsls	r3, r3, #3
 800440e:	1a9b      	subs	r3, r3, r2
 8004410:	009b      	lsls	r3, r3, #2
 8004412:	4403      	add	r3, r0
 8004414:	3330      	adds	r3, #48	; 0x30
 8004416:	6019      	str	r1, [r3, #0]

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 8004418:	68b9      	ldr	r1, [r7, #8]
 800441a:	68f8      	ldr	r0, [r7, #12]
 800441c:	f000 ff8e 	bl	800533c <HRTIM_ForceRegistersUpdate>

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2201      	movs	r2, #1
 8004424:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2200      	movs	r2, #0
 800442c:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8004430:	2300      	movs	r3, #0
}
 8004432:	4618      	mov	r0, r3
 8004434:	3710      	adds	r7, #16
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}

0800443a <HAL_HRTIM_WaveformTimerControl>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerControl(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                HRTIM_TimerCtlTypeDef * pTimerCtl)
{
 800443a:	b580      	push	{r7, lr}
 800443c:	b084      	sub	sp, #16
 800443e:	af00      	add	r7, sp, #0
 8004440:	60f8      	str	r0, [r7, #12]
 8004442:	60b9      	str	r1, [r7, #8]
 8004444:	607a      	str	r2, [r7, #4]
    assert_param(IS_HRTIM_TIMERGTCMP1(pTimerCtl->GreaterCMP1));
    assert_param(IS_HRTIM_DUALDAC_RESET(pTimerCtl->DualChannelDacReset));
    assert_param(IS_HRTIM_DUALDAC_STEP(pTimerCtl->DualChannelDacStep));
    assert_param(IS_HRTIM_DUALDAC_ENABLE(pTimerCtl->DualChannelDacEnable));

    if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 800444c:	b2db      	uxtb	r3, r3
 800444e:	2b02      	cmp	r3, #2
 8004450:	d101      	bne.n	8004456 <HAL_HRTIM_WaveformTimerControl+0x1c>
    {
       return HAL_BUSY;
 8004452:	2302      	movs	r3, #2
 8004454:	e020      	b.n	8004498 <HAL_HRTIM_WaveformTimerControl+0x5e>
    }

    /* Process Locked */
    __HAL_LOCK(hhrtim);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 800445c:	2b01      	cmp	r3, #1
 800445e:	d101      	bne.n	8004464 <HAL_HRTIM_WaveformTimerControl+0x2a>
 8004460:	2302      	movs	r3, #2
 8004462:	e019      	b.n	8004498 <HAL_HRTIM_WaveformTimerControl+0x5e>
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2201      	movs	r2, #1
 8004468:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

    hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2202      	movs	r2, #2
 8004470:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Control(hhrtim, TimerIdx, pTimerCtl);
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	68b9      	ldr	r1, [r7, #8]
 8004478:	68f8      	ldr	r0, [r7, #12]
 800447a:	f000 fe41 	bl	8005100 <HRTIM_TimingUnitWaveform_Control>

    /* Force a software update */
    HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 800447e:	68b9      	ldr	r1, [r7, #8]
 8004480:	68f8      	ldr	r0, [r7, #12]
 8004482:	f000 ff5b 	bl	800533c <HRTIM_ForceRegistersUpdate>

    hhrtim->State = HAL_HRTIM_STATE_READY;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2201      	movs	r2, #1
 800448a:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

    /* Process Unlocked */
    __HAL_UNLOCK(hhrtim);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2200      	movs	r2, #0
 8004492:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

    return HAL_OK;
 8004496:	2300      	movs	r3, #0
}
 8004498:	4618      	mov	r0, r3
 800449a:	3710      	adds	r7, #16
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}

080044a0 <HAL_HRTIM_DeadTimeConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_DeadTimeConfig(HRTIM_HandleTypeDef * hhrtim,
                                           uint32_t TimerIdx,
                                           HRTIM_DeadTimeCfgTypeDef* pDeadTimeCfg)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b087      	sub	sp, #28
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	60f8      	str	r0, [r7, #12]
 80044a8:	60b9      	str	r1, [r7, #8]
 80044aa:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_TIMDEADTIME_RISINGSIGNLOCK(pDeadTimeCfg->RisingSignLock));
  assert_param(IS_HRTIM_TIMDEADTIME_FALLINGSIGN(pDeadTimeCfg->FallingSign));
  assert_param(IS_HRTIM_TIMDEADTIME_FALLINGLOCK(pDeadTimeCfg->FallingLock));
  assert_param(IS_HRTIM_TIMDEADTIME_FALLINGSIGNLOCK(pDeadTimeCfg->FallingSignLock));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 80044b2:	b2db      	uxtb	r3, r3
 80044b4:	2b02      	cmp	r3, #2
 80044b6:	d101      	bne.n	80044bc <HAL_HRTIM_DeadTimeConfig+0x1c>
  {
     return HAL_BUSY;
 80044b8:	2302      	movs	r3, #2
 80044ba:	e067      	b.n	800458c <HAL_HRTIM_DeadTimeConfig+0xec>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	d101      	bne.n	80044ca <HAL_HRTIM_DeadTimeConfig+0x2a>
 80044c6:	2302      	movs	r3, #2
 80044c8:	e060      	b.n	800458c <HAL_HRTIM_DeadTimeConfig+0xec>
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2201      	movs	r2, #1
 80044ce:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2202      	movs	r2, #2
 80044d6:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Set timer deadtime configuration */
  hrtim_dtr  = (pDeadTimeCfg->Prescaler & HRTIM_DTR_DTPRSC);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80044e2:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->RisingValue & HRTIM_DTR_DTR);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044ec:	697a      	ldr	r2, [r7, #20]
 80044ee:	4313      	orrs	r3, r2
 80044f0:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->RisingSign & HRTIM_DTR_SDTR);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044fa:	697a      	ldr	r2, [r7, #20]
 80044fc:	4313      	orrs	r3, r2
 80044fe:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->RisingSignLock & HRTIM_DTR_DTRSLK);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	691b      	ldr	r3, [r3, #16]
 8004504:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004508:	697a      	ldr	r2, [r7, #20]
 800450a:	4313      	orrs	r3, r2
 800450c:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->RisingLock & HRTIM_DTR_DTRLK);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	68db      	ldr	r3, [r3, #12]
 8004512:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004516:	697a      	ldr	r2, [r7, #20]
 8004518:	4313      	orrs	r3, r2
 800451a:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= ((pDeadTimeCfg->FallingValue << 16U) & HRTIM_DTR_DTF);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	695b      	ldr	r3, [r3, #20]
 8004520:	041a      	lsls	r2, r3, #16
 8004522:	4b1d      	ldr	r3, [pc, #116]	; (8004598 <HAL_HRTIM_DeadTimeConfig+0xf8>)
 8004524:	4013      	ands	r3, r2
 8004526:	697a      	ldr	r2, [r7, #20]
 8004528:	4313      	orrs	r3, r2
 800452a:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->FallingSign & HRTIM_DTR_SDTF);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	699b      	ldr	r3, [r3, #24]
 8004530:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004534:	697a      	ldr	r2, [r7, #20]
 8004536:	4313      	orrs	r3, r2
 8004538:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->FallingSignLock & HRTIM_DTR_DTFSLK);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6a1b      	ldr	r3, [r3, #32]
 800453e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004542:	697a      	ldr	r2, [r7, #20]
 8004544:	4313      	orrs	r3, r2
 8004546:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->FallingLock & HRTIM_DTR_DTFLK);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	69db      	ldr	r3, [r3, #28]
 800454c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004550:	697a      	ldr	r2, [r7, #20]
 8004552:	4313      	orrs	r3, r2
 8004554:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR, (
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	01db      	lsls	r3, r3, #7
 800455e:	4413      	add	r3, r2
 8004560:	33b8      	adds	r3, #184	; 0xb8
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	4b0d      	ldr	r3, [pc, #52]	; (800459c <HAL_HRTIM_DeadTimeConfig+0xfc>)
 8004566:	4013      	ands	r3, r2
 8004568:	68fa      	ldr	r2, [r7, #12]
 800456a:	6811      	ldr	r1, [r2, #0]
 800456c:	697a      	ldr	r2, [r7, #20]
 800456e:	431a      	orrs	r2, r3
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	01db      	lsls	r3, r3, #7
 8004574:	440b      	add	r3, r1
 8004576:	33b8      	adds	r3, #184	; 0xb8
 8004578:	601a      	str	r2, [r3, #0]
                 HRTIM_DTR_DTR | HRTIM_DTR_SDTR | HRTIM_DTR_DTPRSC |
                 HRTIM_DTR_DTRSLK | HRTIM_DTR_DTRLK | HRTIM_DTR_DTF |
                 HRTIM_DTR_SDTF | HRTIM_DTR_DTFSLK | HRTIM_DTR_DTFLK), hrtim_dtr);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2201      	movs	r2, #1
 800457e:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2200      	movs	r2, #0
 8004586:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 800458a:	2300      	movs	r3, #0
}
 800458c:	4618      	mov	r0, r3
 800458e:	371c      	adds	r7, #28
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr
 8004598:	01ff0000 	.word	0x01ff0000
 800459c:	3c002000 	.word	0x3c002000

080045a0 <HAL_HRTIM_WaveformCompareConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCompareConfig(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t TimerIdx,
                                                  uint32_t CompareUnit,
                                                  HRTIM_CompareCfgTypeDef* pCompareCfg)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b085      	sub	sp, #20
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	60f8      	str	r0, [r7, #12]
 80045a8:	60b9      	str	r1, [r7, #8]
 80045aa:	607a      	str	r2, [r7, #4]
 80045ac:	603b      	str	r3, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	2b02      	cmp	r3, #2
 80045b8:	d101      	bne.n	80045be <HAL_HRTIM_WaveformCompareConfig+0x1e>
  {
     return HAL_BUSY;
 80045ba:	2302      	movs	r3, #2
 80045bc:	e157      	b.n	800486e <HAL_HRTIM_WaveformCompareConfig+0x2ce>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d101      	bne.n	80045cc <HAL_HRTIM_WaveformCompareConfig+0x2c>
 80045c8:	2302      	movs	r3, #2
 80045ca:	e150      	b.n	800486e <HAL_HRTIM_WaveformCompareConfig+0x2ce>
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2202      	movs	r2, #2
 80045d8:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Configure the compare unit */
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	2b06      	cmp	r3, #6
 80045e0:	d140      	bne.n	8004664 <HAL_HRTIM_WaveformCompareConfig+0xc4>
  {
    switch (CompareUnit)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	3b01      	subs	r3, #1
 80045e6:	2b07      	cmp	r3, #7
 80045e8:	d82a      	bhi.n	8004640 <HAL_HRTIM_WaveformCompareConfig+0xa0>
 80045ea:	a201      	add	r2, pc, #4	; (adr r2, 80045f0 <HAL_HRTIM_WaveformCompareConfig+0x50>)
 80045ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045f0:	08004611 	.word	0x08004611
 80045f4:	0800461d 	.word	0x0800461d
 80045f8:	08004641 	.word	0x08004641
 80045fc:	08004629 	.word	0x08004629
 8004600:	08004641 	.word	0x08004641
 8004604:	08004641 	.word	0x08004641
 8004608:	08004641 	.word	0x08004641
 800460c:	08004635 	.word	0x08004635
    {
      case HRTIM_COMPAREUNIT_1:
        {
        hhrtim->Instance->sMasterRegs.MCMP1R = pCompareCfg->CompareValue;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	683a      	ldr	r2, [r7, #0]
 8004616:	6812      	ldr	r2, [r2, #0]
 8004618:	61da      	str	r2, [r3, #28]
        break;
 800461a:	e01a      	b.n	8004652 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_2:
        {
        hhrtim->Instance->sMasterRegs.MCMP2R = pCompareCfg->CompareValue;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	683a      	ldr	r2, [r7, #0]
 8004622:	6812      	ldr	r2, [r2, #0]
 8004624:	625a      	str	r2, [r3, #36]	; 0x24
        break;
 8004626:	e014      	b.n	8004652 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_3:
        {
        hhrtim->Instance->sMasterRegs.MCMP3R = pCompareCfg->CompareValue;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	683a      	ldr	r2, [r7, #0]
 800462e:	6812      	ldr	r2, [r2, #0]
 8004630:	629a      	str	r2, [r3, #40]	; 0x28
        break;
 8004632:	e00e      	b.n	8004652 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_4:
        {
        hhrtim->Instance->sMasterRegs.MCMP4R = pCompareCfg->CompareValue;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	683a      	ldr	r2, [r7, #0]
 800463a:	6812      	ldr	r2, [r2, #0]
 800463c:	62da      	str	r2, [r3, #44]	; 0x2c
        break;
 800463e:	e008      	b.n	8004652 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      default:
        {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2207      	movs	r2, #7
 8004644:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

        /* Process Unlocked */
        __HAL_UNLOCK(hhrtim);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2200      	movs	r2, #0
 800464c:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

        break;
 8004650:	bf00      	nop
        }
    }

    if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8004658:	b2db      	uxtb	r3, r3
 800465a:	2b07      	cmp	r3, #7
 800465c:	f040 80fe 	bne.w	800485c <HAL_HRTIM_WaveformCompareConfig+0x2bc>
    {
     return HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	e104      	b.n	800486e <HAL_HRTIM_WaveformCompareConfig+0x2ce>
    }

  }
  else
  {
    switch (CompareUnit)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	3b01      	subs	r3, #1
 8004668:	2b07      	cmp	r3, #7
 800466a:	f200 80e3 	bhi.w	8004834 <HAL_HRTIM_WaveformCompareConfig+0x294>
 800466e:	a201      	add	r2, pc, #4	; (adr r2, 8004674 <HAL_HRTIM_WaveformCompareConfig+0xd4>)
 8004670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004674:	08004695 	.word	0x08004695
 8004678:	080046a9 	.word	0x080046a9
 800467c:	08004835 	.word	0x08004835
 8004680:	08004765 	.word	0x08004765
 8004684:	08004835 	.word	0x08004835
 8004688:	08004835 	.word	0x08004835
 800468c:	08004835 	.word	0x08004835
 8004690:	08004779 	.word	0x08004779
    {
    case HRTIM_COMPAREUNIT_1:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->CompareValue;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	6819      	ldr	r1, [r3, #0]
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	01db      	lsls	r3, r3, #7
 80046a0:	440b      	add	r3, r1
 80046a2:	339c      	adds	r3, #156	; 0x9c
 80046a4:	601a      	str	r2, [r3, #0]
        break;
 80046a6:	e0d1      	b.n	800484c <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP2xR = pCompareCfg->CompareValue;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	6819      	ldr	r1, [r3, #0]
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	01db      	lsls	r3, r3, #7
 80046b4:	440b      	add	r3, r1
 80046b6:	33a4      	adds	r3, #164	; 0xa4
 80046b8:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d03f      	beq.n	8004742 <HAL_HRTIM_WaveformCompareConfig+0x1a2>
        {
          /* Configure auto-delayed mode */
          /* DELCMP2 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP2;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	3301      	adds	r3, #1
 80046ca:	01db      	lsls	r3, r3, #7
 80046cc:	4413      	add	r3, r2
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	68fa      	ldr	r2, [r7, #12]
 80046d2:	6811      	ldr	r1, [r2, #0]
 80046d4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	3301      	adds	r3, #1
 80046dc:	01db      	lsls	r3, r3, #7
 80046de:	440b      	add	r3, r1
 80046e0:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= pCompareCfg->AutoDelayedMode;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	3301      	adds	r3, #1
 80046ea:	01db      	lsls	r3, r3, #7
 80046ec:	4413      	add	r3, r2
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	68f9      	ldr	r1, [r7, #12]
 80046f6:	6809      	ldr	r1, [r1, #0]
 80046f8:	431a      	orrs	r2, r3
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	3301      	adds	r3, #1
 80046fe:	01db      	lsls	r3, r3, #7
 8004700:	440b      	add	r3, r1
 8004702:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800470c:	d109      	bne.n	8004722 <HAL_HRTIM_WaveformCompareConfig+0x182>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	6819      	ldr	r1, [r3, #0]
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	689a      	ldr	r2, [r3, #8]
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	01db      	lsls	r3, r3, #7
 800471a:	440b      	add	r3, r1
 800471c:	339c      	adds	r3, #156	; 0x9c
 800471e:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP2 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
        }
         break;
 8004720:	e091      	b.n	8004846 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800472a:	f040 808c 	bne.w	8004846 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	6819      	ldr	r1, [r3, #0]
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	689a      	ldr	r2, [r3, #8]
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	01db      	lsls	r3, r3, #7
 800473a:	440b      	add	r3, r1
 800473c:	33a8      	adds	r3, #168	; 0xa8
 800473e:	601a      	str	r2, [r3, #0]
         break;
 8004740:	e081      	b.n	8004846 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	3301      	adds	r3, #1
 800474a:	01db      	lsls	r3, r3, #7
 800474c:	4413      	add	r3, r2
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	68fa      	ldr	r2, [r7, #12]
 8004752:	6811      	ldr	r1, [r2, #0]
 8004754:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	3301      	adds	r3, #1
 800475c:	01db      	lsls	r3, r3, #7
 800475e:	440b      	add	r3, r1
 8004760:	601a      	str	r2, [r3, #0]
         break;
 8004762:	e070      	b.n	8004846 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
      }

    case HRTIM_COMPAREUNIT_3:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->CompareValue;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	6819      	ldr	r1, [r3, #0]
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	01db      	lsls	r3, r3, #7
 8004770:	440b      	add	r3, r1
 8004772:	33a8      	adds	r3, #168	; 0xa8
 8004774:	601a      	str	r2, [r3, #0]
        break;
 8004776:	e069      	b.n	800484c <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP4xR = pCompareCfg->CompareValue;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	6819      	ldr	r1, [r3, #0]
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	01db      	lsls	r3, r3, #7
 8004784:	440b      	add	r3, r1
 8004786:	33ac      	adds	r3, #172	; 0xac
 8004788:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d03f      	beq.n	8004812 <HAL_HRTIM_WaveformCompareConfig+0x272>
        {
          /* Configure auto-delayed mode */
          /* DELCMP4 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP4;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	3301      	adds	r3, #1
 800479a:	01db      	lsls	r3, r3, #7
 800479c:	4413      	add	r3, r2
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	68fa      	ldr	r2, [r7, #12]
 80047a2:	6811      	ldr	r1, [r2, #0]
 80047a4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	3301      	adds	r3, #1
 80047ac:	01db      	lsls	r3, r3, #7
 80047ae:	440b      	add	r3, r1
 80047b0:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= (pCompareCfg->AutoDelayedMode << 2U);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	3301      	adds	r3, #1
 80047ba:	01db      	lsls	r3, r3, #7
 80047bc:	4413      	add	r3, r2
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	009b      	lsls	r3, r3, #2
 80047c6:	68f9      	ldr	r1, [r7, #12]
 80047c8:	6809      	ldr	r1, [r1, #0]
 80047ca:	431a      	orrs	r2, r3
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	3301      	adds	r3, #1
 80047d0:	01db      	lsls	r3, r3, #7
 80047d2:	440b      	add	r3, r1
 80047d4:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047de:	d109      	bne.n	80047f4 <HAL_HRTIM_WaveformCompareConfig+0x254>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	6819      	ldr	r1, [r3, #0]
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	689a      	ldr	r2, [r3, #8]
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	01db      	lsls	r3, r3, #7
 80047ec:	440b      	add	r3, r1
 80047ee:	339c      	adds	r3, #156	; 0x9c
 80047f0:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP4 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
        }
         break;
 80047f2:	e02a      	b.n	800484a <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80047fc:	d125      	bne.n	800484a <HAL_HRTIM_WaveformCompareConfig+0x2aa>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	6819      	ldr	r1, [r3, #0]
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	689a      	ldr	r2, [r3, #8]
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	01db      	lsls	r3, r3, #7
 800480a:	440b      	add	r3, r1
 800480c:	33a8      	adds	r3, #168	; 0xa8
 800480e:	601a      	str	r2, [r3, #0]
         break;
 8004810:	e01b      	b.n	800484a <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	3301      	adds	r3, #1
 800481a:	01db      	lsls	r3, r3, #7
 800481c:	4413      	add	r3, r2
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	68fa      	ldr	r2, [r7, #12]
 8004822:	6811      	ldr	r1, [r2, #0]
 8004824:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	3301      	adds	r3, #1
 800482c:	01db      	lsls	r3, r3, #7
 800482e:	440b      	add	r3, r1
 8004830:	601a      	str	r2, [r3, #0]
         break;
 8004832:	e00a      	b.n	800484a <HAL_HRTIM_WaveformCompareConfig+0x2aa>
      }

  default:
     {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2207      	movs	r2, #7
 8004838:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	2200      	movs	r2, #0
 8004840:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

      break;
 8004844:	e002      	b.n	800484c <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 8004846:	bf00      	nop
 8004848:	e000      	b.n	800484c <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 800484a:	bf00      	nop
     }
   }

   if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8004852:	b2db      	uxtb	r3, r3
 8004854:	2b07      	cmp	r3, #7
 8004856:	d101      	bne.n	800485c <HAL_HRTIM_WaveformCompareConfig+0x2bc>
   {
     return HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	e008      	b.n	800486e <HAL_HRTIM_WaveformCompareConfig+0x2ce>
   }

  }
  hhrtim->State = HAL_HRTIM_STATE_READY;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2201      	movs	r2, #1
 8004860:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2200      	movs	r2, #0
 8004868:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 800486c:	2300      	movs	r3, #0
}
 800486e:	4618      	mov	r0, r3
 8004870:	3714      	adds	r7, #20
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr
 800487a:	bf00      	nop

0800487c <HAL_HRTIM_WaveformOutputConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                uint32_t Output,
                                                HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b084      	sub	sp, #16
 8004880:	af00      	add	r7, sp, #0
 8004882:	60f8      	str	r0, [r7, #12]
 8004884:	60b9      	str	r1, [r7, #8]
 8004886:	607a      	str	r2, [r7, #4]
 8004888:	603b      	str	r3, [r7, #0]
  assert_param(IS_HRTIM_OUTPUTIDLEMODE(pOutputCfg->IdleMode));
  assert_param(IS_HRTIM_OUTPUTFAULTLEVEL(pOutputCfg->FaultLevel));
  assert_param(IS_HRTIM_OUTPUTCHOPPERMODE(pOutputCfg->ChopperModeEnable));
  assert_param(IS_HRTIM_OUTPUTBURSTMODEENTRY(pOutputCfg->BurstModeEntryDelayed));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8004890:	b2db      	uxtb	r3, r3
 8004892:	2b02      	cmp	r3, #2
 8004894:	d101      	bne.n	800489a <HAL_HRTIM_WaveformOutputConfig+0x1e>
  {
     return HAL_BUSY;
 8004896:	2302      	movs	r3, #2
 8004898:	e01d      	b.n	80048d6 <HAL_HRTIM_WaveformOutputConfig+0x5a>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	d101      	bne.n	80048a8 <HAL_HRTIM_WaveformOutputConfig+0x2c>
 80048a4:	2302      	movs	r3, #2
 80048a6:	e016      	b.n	80048d6 <HAL_HRTIM_WaveformOutputConfig+0x5a>
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2201      	movs	r2, #1
 80048ac:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2202      	movs	r2, #2
 80048b4:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Configure the timer output */
  HRTIM_OutputConfig(hhrtim,
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	68b9      	ldr	r1, [r7, #8]
 80048be:	68f8      	ldr	r0, [r7, #12]
 80048c0:	f000 fc7e 	bl	80051c0 <HRTIM_OutputConfig>
                     TimerIdx,
                     Output,
                     pOutputCfg);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2201      	movs	r2, #1
 80048c8:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2200      	movs	r2, #0
 80048d0:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 80048d4:	2300      	movs	r3, #0
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3710      	adds	r7, #16
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}

080048de <HAL_HRTIM_WaveformOutputStart>:
  *                    @arg HRTIM_OUTPUT_TF2: Timer F - Output 2
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputStart(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t OutputsToStart)
{
 80048de:	b480      	push	{r7}
 80048e0:	b083      	sub	sp, #12
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	6078      	str	r0, [r7, #4]
 80048e6:	6039      	str	r1, [r7, #0]
   /* Check the parameters */
  assert_param(IS_HRTIM_OUTPUT(OutputsToStart));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80048ee:	2b01      	cmp	r3, #1
 80048f0:	d101      	bne.n	80048f6 <HAL_HRTIM_WaveformOutputStart+0x18>
 80048f2:	2302      	movs	r3, #2
 80048f4:	e01a      	b.n	800492c <HAL_HRTIM_WaveformOutputStart+0x4e>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2201      	movs	r2, #1
 80048fa:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2202      	movs	r2, #2
 8004902:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Enable the HRTIM outputs */
  hhrtim->Instance->sCommonRegs.OENR |= (OutputsToStart);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f8d3 1394 	ldr.w	r1, [r3, #916]	; 0x394
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	683a      	ldr	r2, [r7, #0]
 8004914:	430a      	orrs	r2, r1
 8004916:	f8c3 2394 	str.w	r2, [r3, #916]	; 0x394

  hhrtim->State = HAL_HRTIM_STATE_READY;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2201      	movs	r2, #1
 800491e:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 800492a:	2300      	movs	r3, #0
}
 800492c:	4618      	mov	r0, r3
 800492e:	370c      	adds	r7, #12
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr

08004938 <HAL_HRTIM_WaveformCountStart>:
  *                   @arg HRTIM_TIMERID_TIMER_F
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCountStart(HRTIM_HandleTypeDef * hhrtim,
                                                 uint32_t Timers)
{
 8004938:	b480      	push	{r7}
 800493a:	b083      	sub	sp, #12
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
 8004940:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERID(Timers));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8004948:	2b01      	cmp	r3, #1
 800494a:	d101      	bne.n	8004950 <HAL_HRTIM_WaveformCountStart+0x18>
 800494c:	2302      	movs	r3, #2
 800494e:	e018      	b.n	8004982 <HAL_HRTIM_WaveformCountStart+0x4a>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2201      	movs	r2, #1
 8004954:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2202      	movs	r2, #2
 800495c:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Enable timer(s) counter */
  hhrtim->Instance->sMasterRegs.MCR |= (Timers);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	6819      	ldr	r1, [r3, #0]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	683a      	ldr	r2, [r7, #0]
 800496c:	430a      	orrs	r2, r1
 800496e:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2201      	movs	r2, #1
 8004974:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2200      	movs	r2, #0
 800497c:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8004980:	2300      	movs	r3, #0
}
 8004982:	4618      	mov	r0, r3
 8004984:	370c      	adds	r7, #12
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr

0800498e <HAL_HRTIM_IRQHandler>:
  *                   This parameter can be any value of HRTIM_Timer_Index
  * @retval None
  */
void HAL_HRTIM_IRQHandler(HRTIM_HandleTypeDef * hhrtim,
                          uint32_t TimerIdx)
{
 800498e:	b580      	push	{r7, lr}
 8004990:	b082      	sub	sp, #8
 8004992:	af00      	add	r7, sp, #0
 8004994:	6078      	str	r0, [r7, #4]
 8004996:	6039      	str	r1, [r7, #0]
  /* HRTIM interrupts handling */
  if (TimerIdx == HRTIM_TIMERINDEX_COMMON)
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	2bff      	cmp	r3, #255	; 0xff
 800499c:	d103      	bne.n	80049a6 <HAL_HRTIM_IRQHandler+0x18>
  {
    HRTIM_HRTIM_ISR(hhrtim);
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f000 fd3a 	bl	8005418 <HRTIM_HRTIM_ISR>
  {
    /* Timing unit related interrupts handling */
    HRTIM_Timer_ISR(hhrtim, TimerIdx);
  }

}
 80049a4:	e00a      	b.n	80049bc <HAL_HRTIM_IRQHandler+0x2e>
  else if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	2b06      	cmp	r3, #6
 80049aa:	d103      	bne.n	80049b4 <HAL_HRTIM_IRQHandler+0x26>
    HRTIM_Master_ISR(hhrtim);
 80049ac:	6878      	ldr	r0, [r7, #4]
 80049ae:	f000 fe06 	bl	80055be <HRTIM_Master_ISR>
}
 80049b2:	e003      	b.n	80049bc <HAL_HRTIM_IRQHandler+0x2e>
    HRTIM_Timer_ISR(hhrtim, TimerIdx);
 80049b4:	6839      	ldr	r1, [r7, #0]
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f000 ff0d 	bl	80057d6 <HRTIM_Timer_ISR>
}
 80049bc:	bf00      	nop
 80049be:	3708      	adds	r7, #8
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}

080049c4 <HAL_HRTIM_Fault1Callback>:
  * @brief  Callback function invoked when a fault 1 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle  * @retval None
  * @retval None
  */
__weak void HAL_HRTIM_Fault1Callback(HRTIM_HandleTypeDef * hhrtim)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b083      	sub	sp, #12
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault1Callback could be implemented in the user file
   */
}
 80049cc:	bf00      	nop
 80049ce:	370c      	adds	r7, #12
 80049d0:	46bd      	mov	sp, r7
 80049d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d6:	4770      	bx	lr

080049d8 <HAL_HRTIM_Fault2Callback>:
  * @brief  Callback function invoked when a fault 2 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault2Callback(HRTIM_HandleTypeDef * hhrtim)
{
 80049d8:	b480      	push	{r7}
 80049da:	b083      	sub	sp, #12
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault2Callback could be implemented in the user file
   */
}
 80049e0:	bf00      	nop
 80049e2:	370c      	adds	r7, #12
 80049e4:	46bd      	mov	sp, r7
 80049e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ea:	4770      	bx	lr

080049ec <HAL_HRTIM_Fault3Callback>:
  * @brief  Callback function invoked when a fault 3 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault3Callback(HRTIM_HandleTypeDef * hhrtim)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b083      	sub	sp, #12
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault3Callback could be implemented in the user file
   */
}
 80049f4:	bf00      	nop
 80049f6:	370c      	adds	r7, #12
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr

08004a00 <HAL_HRTIM_Fault4Callback>:
  * @brief  Callback function invoked when a fault 4 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault4Callback(HRTIM_HandleTypeDef * hhrtim)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b083      	sub	sp, #12
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault4Callback could be implemented in the user file
   */
}
 8004a08:	bf00      	nop
 8004a0a:	370c      	adds	r7, #12
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr

08004a14 <HAL_HRTIM_Fault5Callback>:
  * @brief  Callback function invoked when a fault 5 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault5Callback(HRTIM_HandleTypeDef * hhrtim)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b083      	sub	sp, #12
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault5Callback could be implemented in the user file
   */
}
 8004a1c:	bf00      	nop
 8004a1e:	370c      	adds	r7, #12
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr

08004a28 <HAL_HRTIM_Fault6Callback>:
  * @brief  Callback function invoked when a fault 6 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault6Callback(HRTIM_HandleTypeDef * hhrtim)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b083      	sub	sp, #12
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault6Callback could be implemented in the user file
   */
}
 8004a30:	bf00      	nop
 8004a32:	370c      	adds	r7, #12
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr

08004a3c <HAL_HRTIM_SystemFaultCallback>:
  * @brief  Callback function invoked when a system fault interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_SystemFaultCallback(HRTIM_HandleTypeDef * hhrtim)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b083      	sub	sp, #12
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_SystemFaultCallback could be implemented in the user file
   */
}
 8004a44:	bf00      	nop
 8004a46:	370c      	adds	r7, #12
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr

08004a50 <HAL_HRTIM_DLLCalibrationReadyCallback>:
  * @brief  Callback function invoked when the DLL calibration is completed
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_DLLCalibrationReadyCallback(HRTIM_HandleTypeDef * hhrtim)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b083      	sub	sp, #12
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_DLLCalibrationCallback could be implemented in the user file
   */
}
 8004a58:	bf00      	nop
 8004a5a:	370c      	adds	r7, #12
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr

08004a64 <HAL_HRTIM_BurstModePeriodCallback>:
  * @brief  Callback function invoked when the end of the burst mode period is reached
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_BurstModePeriodCallback(HRTIM_HandleTypeDef * hhrtim)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b083      	sub	sp, #12
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_BurstModeCallback could be implemented in the user file
   */
}
 8004a6c:	bf00      	nop
 8004a6e:	370c      	adds	r7, #12
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr

08004a78 <HAL_HRTIM_SynchronizationEventCallback>:
  * @brief  Callback function invoked when a synchronization input event is received
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_SynchronizationEventCallback(HRTIM_HandleTypeDef * hhrtim)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b083      	sub	sp, #12
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_SynchronizationEventCallback could be implemented in the user file
   */
}
 8004a80:	bf00      	nop
 8004a82:	370c      	adds	r7, #12
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr

08004a8c <HAL_HRTIM_RegistersUpdateCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_RegistersUpdateCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b083      	sub	sp, #12
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_RegistersUpdateCallback could be implemented in the user file
   */
}
 8004a96:	bf00      	nop
 8004a98:	370c      	adds	r7, #12
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr

08004aa2 <HAL_HRTIM_RepetitionEventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_RepetitionEventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8004aa2:	b480      	push	{r7}
 8004aa4:	b083      	sub	sp, #12
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	6078      	str	r0, [r7, #4]
 8004aaa:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_RepetitionEventCallback could be implemented in the user file
   */
}
 8004aac:	bf00      	nop
 8004aae:	370c      	adds	r7, #12
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr

08004ab8 <HAL_HRTIM_Compare1EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Compare1EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b083      	sub	sp, #12
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare1EventCallback could be implemented in the user file
   */
}
 8004ac2:	bf00      	nop
 8004ac4:	370c      	adds	r7, #12
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr

08004ace <HAL_HRTIM_Compare2EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  */
__weak void HAL_HRTIM_Compare2EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8004ace:	b480      	push	{r7}
 8004ad0:	b083      	sub	sp, #12
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	6078      	str	r0, [r7, #4]
 8004ad6:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare2EventCallback could be implemented in the user file
   */
}
 8004ad8:	bf00      	nop
 8004ada:	370c      	adds	r7, #12
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr

08004ae4 <HAL_HRTIM_Compare3EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Compare3EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b083      	sub	sp, #12
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
 8004aec:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare3EventCallback could be implemented in the user file
   */
}
 8004aee:	bf00      	nop
 8004af0:	370c      	adds	r7, #12
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr

08004afa <HAL_HRTIM_Compare4EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Compare4EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8004afa:	b480      	push	{r7}
 8004afc:	b083      	sub	sp, #12
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	6078      	str	r0, [r7, #4]
 8004b02:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare4EventCallback could be implemented in the user file
   */
}
 8004b04:	bf00      	nop
 8004b06:	370c      	adds	r7, #12
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr

08004b10 <HAL_HRTIM_Capture1EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Capture1EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b083      	sub	sp, #12
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Capture1EventCallback could be implemented in the user file
   */
}
 8004b1a:	bf00      	nop
 8004b1c:	370c      	adds	r7, #12
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b24:	4770      	bx	lr

08004b26 <HAL_HRTIM_Capture2EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Capture2EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8004b26:	b480      	push	{r7}
 8004b28:	b083      	sub	sp, #12
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	6078      	str	r0, [r7, #4]
 8004b2e:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Capture2EventCallback could be implemented in the user file
   */
}
 8004b30:	bf00      	nop
 8004b32:	370c      	adds	r7, #12
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr

08004b3c <HAL_HRTIM_DelayedProtectionCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_DelayedProtectionCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b083      	sub	sp, #12
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
 8004b44:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_DelayedProtectionCallback could be implemented in the user file
   */
}
 8004b46:	bf00      	nop
 8004b48:	370c      	adds	r7, #12
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr

08004b52 <HAL_HRTIM_CounterResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_CounterResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8004b52:	b480      	push	{r7}
 8004b54:	b083      	sub	sp, #12
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	6078      	str	r0, [r7, #4]
 8004b5a:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_CounterResetCallback could be implemented in the user file
   */
}
 8004b5c:	bf00      	nop
 8004b5e:	370c      	adds	r7, #12
 8004b60:	46bd      	mov	sp, r7
 8004b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b66:	4770      	bx	lr

08004b68 <HAL_HRTIM_Output1SetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Output1SetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b083      	sub	sp, #12
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output1SetCallback could be implemented in the user file
   */
}
 8004b72:	bf00      	nop
 8004b74:	370c      	adds	r7, #12
 8004b76:	46bd      	mov	sp, r7
 8004b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7c:	4770      	bx	lr

08004b7e <HAL_HRTIM_Output1ResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Output1ResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8004b7e:	b480      	push	{r7}
 8004b80:	b083      	sub	sp, #12
 8004b82:	af00      	add	r7, sp, #0
 8004b84:	6078      	str	r0, [r7, #4]
 8004b86:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output1ResetCallback could be implemented in the user file
   */
}
 8004b88:	bf00      	nop
 8004b8a:	370c      	adds	r7, #12
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr

08004b94 <HAL_HRTIM_Output2SetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Output2SetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b083      	sub	sp, #12
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
 8004b9c:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output2SetCallback could be implemented in the user file
   */
}
 8004b9e:	bf00      	nop
 8004ba0:	370c      	adds	r7, #12
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr

08004baa <HAL_HRTIM_Output2ResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Output2ResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8004baa:	b480      	push	{r7}
 8004bac:	b083      	sub	sp, #12
 8004bae:	af00      	add	r7, sp, #0
 8004bb0:	6078      	str	r0, [r7, #4]
 8004bb2:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output2ResetCallback could be implemented in the user file
   */
}
 8004bb4:	bf00      	nop
 8004bb6:	370c      	adds	r7, #12
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr

08004bc0 <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                     HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b085      	sub	sp, #20
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
 8004bc8:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	f023 0307 	bic.w	r3, r3, #7
 8004bd8:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	68fa      	ldr	r2, [r7, #12]
 8004be0:	4313      	orrs	r3, r2
 8004be2:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f023 0318 	bic.w	r3, r3, #24
 8004bea:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	68db      	ldr	r3, [r3, #12]
 8004bf0:	68fa      	ldr	r2, [r7, #12]
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	68fa      	ldr	r2, [r7, #12]
 8004bfc:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	683a      	ldr	r2, [r7, #0]
 8004c04:	6812      	ldr	r2, [r2, #0]
 8004c06:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	683a      	ldr	r2, [r7, #0]
 8004c0e:	6852      	ldr	r2, [r2, #4]
 8004c10:	619a      	str	r2, [r3, #24]
}
 8004c12:	bf00      	nop
 8004c14:	3714      	adds	r7, #20
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr

08004c1e <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                         uint32_t TimerIdx ,
                                         HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8004c1e:	b480      	push	{r7}
 8004c20:	b087      	sub	sp, #28
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	60f8      	str	r0, [r7, #12]
 8004c26:	60b9      	str	r1, [r7, #8]
 8004c28:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	3301      	adds	r3, #1
 8004c32:	01db      	lsls	r3, r3, #7
 8004c34:	4413      	add	r3, r2
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	f023 0307 	bic.w	r3, r3, #7
 8004c40:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	697a      	ldr	r2, [r7, #20]
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	f023 0318 	bic.w	r3, r3, #24
 8004c52:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	68db      	ldr	r3, [r3, #12]
 8004c58:	697a      	ldr	r2, [r7, #20]
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	3301      	adds	r3, #1
 8004c66:	01db      	lsls	r3, r3, #7
 8004c68:	4413      	add	r3, r2
 8004c6a:	697a      	ldr	r2, [r7, #20]
 8004c6c:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	6819      	ldr	r1, [r3, #0]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	01db      	lsls	r3, r3, #7
 8004c7a:	440b      	add	r3, r1
 8004c7c:	3394      	adds	r3, #148	; 0x94
 8004c7e:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	6819      	ldr	r1, [r3, #0]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	685a      	ldr	r2, [r3, #4]
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	01db      	lsls	r3, r3, #7
 8004c8c:	440b      	add	r3, r1
 8004c8e:	3398      	adds	r3, #152	; 0x98
 8004c90:	601a      	str	r2, [r3, #0]
}
 8004c92:	bf00      	nop
 8004c94:	371c      	adds	r7, #28
 8004c96:	46bd      	mov	sp, r7
 8004c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9c:	4770      	bx	lr

08004c9e <HRTIM_MasterWaveform_Config>:
  * @param  pTimerCfg pointer to the timer configuration data structure
  * @retval None
  */
static void HRTIM_MasterWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                         HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8004c9e:	b480      	push	{r7}
 8004ca0:	b085      	sub	sp, #20
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	6078      	str	r0, [r7, #4]
 8004ca6:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;
  uint32_t hrtim_bmcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 8004cb8:	60bb      	str	r3, [r7, #8]

  /* Enable/Disable the half mode */
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	f023 0320 	bic.w	r3, r3, #32
 8004cc0:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	695b      	ldr	r3, [r3, #20]
 8004cc6:	68fa      	ldr	r2, [r7, #12]
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	60fb      	str	r3, [r7, #12]

  /* INTLVD bits are set to 00 */
  hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004cd2:	60fb      	str	r3, [r7, #12]
  if ((pTimerCfg->HalfModeEnable == HRTIM_HALFMODE_ENABLED) || (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_DUAL))
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	695b      	ldr	r3, [r3, #20]
 8004cd8:	2b20      	cmp	r3, #32
 8004cda:	d003      	beq.n	8004ce4 <HRTIM_MasterWaveform_Config+0x46>
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	699b      	ldr	r3, [r3, #24]
 8004ce0:	2b02      	cmp	r3, #2
 8004ce2:	d108      	bne.n	8004cf6 <HRTIM_MasterWaveform_Config+0x58>
  {
    /* INTLVD bits set to 00 */
    hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004cea:	60fb      	str	r3, [r7, #12]
    hrtim_mcr |= (HRTIM_MCR_HALF);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	f043 0320 	orr.w	r3, r3, #32
 8004cf2:	60fb      	str	r3, [r7, #12]
 8004cf4:	e021      	b.n	8004d3a <HRTIM_MasterWaveform_Config+0x9c>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_TRIPLE)
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	699b      	ldr	r3, [r3, #24]
 8004cfa:	2b03      	cmp	r3, #3
 8004cfc:	d108      	bne.n	8004d10 <HRTIM_MasterWaveform_Config+0x72>
  {
        hrtim_mcr |= (HRTIM_MCR_INTLVD_0);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d04:	60fb      	str	r3, [r7, #12]
        hrtim_mcr &= ~(HRTIM_MCR_INTLVD_1);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d0c:	60fb      	str	r3, [r7, #12]
 8004d0e:	e014      	b.n	8004d3a <HRTIM_MasterWaveform_Config+0x9c>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_QUAD)
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	699b      	ldr	r3, [r3, #24]
 8004d14:	2b04      	cmp	r3, #4
 8004d16:	d108      	bne.n	8004d2a <HRTIM_MasterWaveform_Config+0x8c>
  {
        hrtim_mcr |= (HRTIM_MCR_INTLVD_1);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d1e:	60fb      	str	r3, [r7, #12]
        hrtim_mcr &= ~(HRTIM_MCR_INTLVD_0);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d26:	60fb      	str	r3, [r7, #12]
 8004d28:	e007      	b.n	8004d3a <HRTIM_MasterWaveform_Config+0x9c>
  }
  else
  {
        hrtim_mcr &= ~(HRTIM_MCR_HALF);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	f023 0320 	bic.w	r3, r3, #32
 8004d30:	60fb      	str	r3, [r7, #12]
        hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004d38:	60fb      	str	r3, [r7, #12]
  }

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d40:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->StartOnSync;
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	69db      	ldr	r3, [r3, #28]
 8004d46:	68fa      	ldr	r2, [r7, #12]
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d52:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	6a1b      	ldr	r3, [r3, #32]
 8004d58:	68fa      	ldr	r2, [r7, #12]
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004d64:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->DACSynchro;
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d6a:	68fa      	ldr	r2, [r7, #12]
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8004d76:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d7c:	68fa      	ldr	r2, [r7, #12]
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	60fb      	str	r3, [r7, #12]

  /* Master timer registers update handling */
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004d88:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d8e:	009b      	lsls	r3, r3, #2
 8004d90:	68fa      	ldr	r2, [r7, #12]
 8004d92:	4313      	orrs	r3, r2
 8004d94:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable registers update on repetition */
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004d9c:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004da2:	68fa      	ldr	r2, [r7, #12]
 8004da4:	4313      	orrs	r3, r2
 8004da6:	60fb      	str	r3, [r7, #12]

  /* Set the timer burst mode */
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dae:	60bb      	str	r3, [r7, #8]
  hrtim_bmcr |= pTimerCfg->BurstMode;
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004db4:	68ba      	ldr	r2, [r7, #8]
 8004db6:	4313      	orrs	r3, r2
 8004db8:	60bb      	str	r3, [r7, #8]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	68fa      	ldr	r2, [r7, #12]
 8004dc0:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	68ba      	ldr	r2, [r7, #8]
 8004dc8:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 8004dcc:	bf00      	nop
 8004dce:	3714      	adds	r7, #20
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr

08004dd8 <HRTIM_TimingUnitWaveform_Config>:
  * @retval None
  */
static void  HRTIM_TimingUnitWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b08b      	sub	sp, #44	; 0x2c
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	60f8      	str	r0, [r7, #12]
 8004de0:	60b9      	str	r1, [r7, #8]
 8004de2:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681a      	ldr	r2, [r3, #0]
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	3301      	adds	r3, #1
 8004dec:	01db      	lsls	r3, r3, #7
 8004dee:	4413      	add	r3, r2
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	68fa      	ldr	r2, [r7, #12]
 8004df4:	6811      	ldr	r1, [r2, #0]
 8004df6:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	3301      	adds	r3, #1
 8004dfe:	01db      	lsls	r3, r3, #7
 8004e00:	440b      	add	r3, r1
 8004e02:	601a      	str	r2, [r3, #0]

  /* Configure timing unit (Timer A to Timer F) */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	3301      	adds	r3, #1
 8004e0c:	01db      	lsls	r3, r3, #7
 8004e0e:	4413      	add	r3, r2
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	01db      	lsls	r3, r3, #7
 8004e1c:	4413      	add	r3, r2
 8004e1e:	33e8      	adds	r3, #232	; 0xe8
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	61bb      	str	r3, [r7, #24]
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681a      	ldr	r2, [r3, #0]
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	01db      	lsls	r3, r3, #7
 8004e2c:	4413      	add	r3, r2
 8004e2e:	33e4      	adds	r3, #228	; 0xe4
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	623b      	str	r3, [r7, #32]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 8004e3c:	61fb      	str	r3, [r7, #28]

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 8004e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e40:	f023 0320 	bic.w	r3, r3, #32
 8004e44:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	695b      	ldr	r3, [r3, #20]
 8004e4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	627b      	str	r3, [r7, #36]	; 0x24

  if ((pTimerCfg->HalfModeEnable == HRTIM_HALFMODE_ENABLED) || (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_DUAL))
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	695b      	ldr	r3, [r3, #20]
 8004e54:	2b20      	cmp	r3, #32
 8004e56:	d003      	beq.n	8004e60 <HRTIM_TimingUnitWaveform_Config+0x88>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	699b      	ldr	r3, [r3, #24]
 8004e5c:	2b02      	cmp	r3, #2
 8004e5e:	d108      	bne.n	8004e72 <HRTIM_TimingUnitWaveform_Config+0x9a>
  {
    /* INTLVD bits set to 00 */
    hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD);
 8004e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e62:	f423 73c0 	bic.w	r3, r3, #384	; 0x180
 8004e66:	627b      	str	r3, [r7, #36]	; 0x24
    hrtim_timcr |= (HRTIM_TIMCR_HALF);
 8004e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e6a:	f043 0320 	orr.w	r3, r3, #32
 8004e6e:	627b      	str	r3, [r7, #36]	; 0x24
 8004e70:	e021      	b.n	8004eb6 <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_TRIPLE)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	699b      	ldr	r3, [r3, #24]
 8004e76:	2b03      	cmp	r3, #3
 8004e78:	d108      	bne.n	8004e8c <HRTIM_TimingUnitWaveform_Config+0xb4>
  {
        hrtim_timcr |= (HRTIM_TIMCR_INTLVD_0);
 8004e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e80:	627b      	str	r3, [r7, #36]	; 0x24
        hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD_1);
 8004e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e88:	627b      	str	r3, [r7, #36]	; 0x24
 8004e8a:	e014      	b.n	8004eb6 <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_QUAD)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	699b      	ldr	r3, [r3, #24]
 8004e90:	2b04      	cmp	r3, #4
 8004e92:	d108      	bne.n	8004ea6 <HRTIM_TimingUnitWaveform_Config+0xce>
  {
        hrtim_timcr |= (HRTIM_TIMCR_INTLVD_1);
 8004e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e9a:	627b      	str	r3, [r7, #36]	; 0x24
        hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD_0);
 8004e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ea2:	627b      	str	r3, [r7, #36]	; 0x24
 8004ea4:	e007      	b.n	8004eb6 <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else
  {
        hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 8004ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea8:	f023 0320 	bic.w	r3, r3, #32
 8004eac:	627b      	str	r3, [r7, #36]	; 0x24
        hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD);
 8004eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb0:	f423 73c0 	bic.w	r3, r3, #384	; 0x180
 8004eb4:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 8004eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ebc:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->StartOnSync;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	69db      	ldr	r3, [r3, #28]
 8004ec2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 8004ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ece:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6a1b      	ldr	r3, [r3, #32]
 8004ed4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 8004eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004edc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004ee0:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->DACSynchro;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 8004eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eee:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8004ef2:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ef8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004efa:	4313      	orrs	r3, r2
 8004efc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Timing unit registers update handling */
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 8004efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f00:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004f04:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateGating;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	627b      	str	r3, [r7, #36]	; 0x24

  if (pTimerCfg->UpdateGating == HRTIM_UPDATEGATING_INDEPENDENT)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d109      	bne.n	8004f2c <HRTIM_TimingUnitWaveform_Config+0x154>
  {
    /* Timing unit Re-Synchronized Update */
    hrtim_timcr &= ~(HRTIM_TIMCR_RSYNCU);
 8004f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f1a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f1e:	627b      	str	r3, [r7, #36]	; 0x24
    hrtim_timcr |= (pTimerCfg->ReSyncUpdate) << HRTIM_TIMCR_RSYNCU_Pos;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f24:	025b      	lsls	r3, r3, #9
 8004f26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	627b      	str	r3, [r7, #36]	; 0x24
  }


  /* Enable/Disable registers update on repetition */
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 8004f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004f32:	627b      	str	r3, [r7, #36]	; 0x24
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f3c:	d103      	bne.n	8004f46 <HRTIM_TimingUnitWaveform_Config+0x16e>
  {
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 8004f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f44:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Set the push-pull mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 8004f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f4c:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PushPull;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f54:	4313      	orrs	r3, r2
 8004f56:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 8004f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f5e:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f66:	4313      	orrs	r3, r2
 8004f68:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set the timer update trigger */
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 8004f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6c:	f023 73fc 	bic.w	r3, r3, #33030144	; 0x1f80000
 8004f70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f74:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
 8004f80:	69bb      	ldr	r3, [r7, #24]
 8004f82:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004f86:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f90:	69ba      	ldr	r2, [r7, #24]
 8004f92:	4313      	orrs	r3, r2
 8004f94:	61bb      	str	r3, [r7, #24]

  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 8004f96:	69bb      	ldr	r3, [r7, #24]
 8004f98:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004f9c:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= pTimerCfg->FaultLock;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa2:	69ba      	ldr	r2, [r7, #24]
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	61bb      	str	r3, [r7, #24]

    /* Enable/Disable dead time insertion at timer level */
    hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 8004fa8:	6a3b      	ldr	r3, [r7, #32]
 8004faa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004fae:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fb4:	6a3a      	ldr	r2, [r7, #32]
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	623b      	str	r3, [r7, #32]

  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if ( ((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fbe:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 8004fc2:	d004      	beq.n	8004fce <HRTIM_TimingUnitWaveform_Config+0x1f6>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fc8:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 8004fcc:	d103      	bne.n	8004fd6 <HRTIM_TimingUnitWaveform_Config+0x1fe>
       || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fd2:	2b40      	cmp	r3, #64	; 0x40
 8004fd4:	d108      	bne.n	8004fe8 <HRTIM_TimingUnitWaveform_Config+0x210>
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT| HRTIM_OUTR_DLYPRTEN);
 8004fd6:	6a3b      	ldr	r3, [r7, #32]
 8004fd8:	f423 53f0 	bic.w	r3, r3, #7680	; 0x1e00
 8004fdc:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fe2:	6a3a      	ldr	r2, [r7, #32]
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	623b      	str	r3, [r7, #32]
  }

  /* Set the BIAR mode : one bit for both outputs */
  hrtim_timoutr &= ~(HRTIM_OUTR_BIAR);
 8004fe8:	6a3b      	ldr	r3, [r7, #32]
 8004fea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004fee:	623b      	str	r3, [r7, #32]
  hrtim_timoutr |= (pTimerCfg->BalancedIdleAutomaticResume);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ff4:	6a3a      	ldr	r2, [r7, #32]
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	623b      	str	r3, [r7, #32]

  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ffe:	617b      	str	r3, [r7, #20]

  /* Set the timer burst mode */
  switch (TimerIdx)
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	2b05      	cmp	r3, #5
 8005004:	d850      	bhi.n	80050a8 <HRTIM_TimingUnitWaveform_Config+0x2d0>
 8005006:	a201      	add	r2, pc, #4	; (adr r2, 800500c <HRTIM_TimingUnitWaveform_Config+0x234>)
 8005008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800500c:	08005025 	.word	0x08005025
 8005010:	0800503b 	.word	0x0800503b
 8005014:	08005051 	.word	0x08005051
 8005018:	08005067 	.word	0x08005067
 800501c:	0800507d 	.word	0x0800507d
 8005020:	08005093 	.word	0x08005093
  {
  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 8005024:	69fb      	ldr	r3, [r7, #28]
 8005026:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800502a:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 1U);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005030:	005b      	lsls	r3, r3, #1
 8005032:	69fa      	ldr	r2, [r7, #28]
 8005034:	4313      	orrs	r3, r2
 8005036:	61fb      	str	r3, [r7, #28]
      break;
 8005038:	e037      	b.n	80050aa <HRTIM_TimingUnitWaveform_Config+0x2d2>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 800503a:	69fb      	ldr	r3, [r7, #28]
 800503c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005040:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 2U);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005046:	009b      	lsls	r3, r3, #2
 8005048:	69fa      	ldr	r2, [r7, #28]
 800504a:	4313      	orrs	r3, r2
 800504c:	61fb      	str	r3, [r7, #28]
      break;
 800504e:	e02c      	b.n	80050aa <HRTIM_TimingUnitWaveform_Config+0x2d2>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 8005050:	69fb      	ldr	r3, [r7, #28]
 8005052:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8005056:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 3U);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800505c:	00db      	lsls	r3, r3, #3
 800505e:	69fa      	ldr	r2, [r7, #28]
 8005060:	4313      	orrs	r3, r2
 8005062:	61fb      	str	r3, [r7, #28]
      break;
 8005064:	e021      	b.n	80050aa <HRTIM_TimingUnitWaveform_Config+0x2d2>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 8005066:	69fb      	ldr	r3, [r7, #28]
 8005068:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800506c:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 4U);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005072:	011b      	lsls	r3, r3, #4
 8005074:	69fa      	ldr	r2, [r7, #28]
 8005076:	4313      	orrs	r3, r2
 8005078:	61fb      	str	r3, [r7, #28]
      break;
 800507a:	e016      	b.n	80050aa <HRTIM_TimingUnitWaveform_Config+0x2d2>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 800507c:	69fb      	ldr	r3, [r7, #28]
 800507e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005082:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 5U);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005088:	015b      	lsls	r3, r3, #5
 800508a:	69fa      	ldr	r2, [r7, #28]
 800508c:	4313      	orrs	r3, r2
 800508e:	61fb      	str	r3, [r7, #28]
      break;
 8005090:	e00b      	b.n	80050aa <HRTIM_TimingUnitWaveform_Config+0x2d2>
    }

  case HRTIM_TIMERINDEX_TIMER_F:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TFBM);
 8005092:	69fb      	ldr	r3, [r7, #28]
 8005094:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8005098:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 6U);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800509e:	019b      	lsls	r3, r3, #6
 80050a0:	69fa      	ldr	r2, [r7, #28]
 80050a2:	4313      	orrs	r3, r2
 80050a4:	61fb      	str	r3, [r7, #28]
      break;
 80050a6:	e000      	b.n	80050aa <HRTIM_TimingUnitWaveform_Config+0x2d2>
    }

  default:
    break;
 80050a8:	bf00      	nop
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	3301      	adds	r3, #1
 80050b2:	01db      	lsls	r3, r3, #7
 80050b4:	4413      	add	r3, r2
 80050b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050b8:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	01db      	lsls	r3, r3, #7
 80050c2:	4413      	add	r3, r2
 80050c4:	33e8      	adds	r3, #232	; 0xe8
 80050c6:	69ba      	ldr	r2, [r7, #24]
 80050c8:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	01db      	lsls	r3, r3, #7
 80050d2:	4413      	add	r3, r2
 80050d4:	33e4      	adds	r3, #228	; 0xe4
 80050d6:	6a3a      	ldr	r2, [r7, #32]
 80050d8:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	01db      	lsls	r3, r3, #7
 80050e2:	4413      	add	r3, r2
 80050e4:	33d4      	adds	r3, #212	; 0xd4
 80050e6:	697a      	ldr	r2, [r7, #20]
 80050e8:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	69fa      	ldr	r2, [r7, #28]
 80050f0:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 80050f4:	bf00      	nop
 80050f6:	372c      	adds	r7, #44	; 0x2c
 80050f8:	46bd      	mov	sp, r7
 80050fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fe:	4770      	bx	lr

08005100 <HRTIM_TimingUnitWaveform_Control>:
  * @retval None
  */
static void HRTIM_TimingUnitWaveform_Control(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             HRTIM_TimerCtlTypeDef * pTimerCtl)
{
 8005100:	b480      	push	{r7}
 8005102:	b087      	sub	sp, #28
 8005104:	af00      	add	r7, sp, #0
 8005106:	60f8      	str	r0, [r7, #12]
 8005108:	60b9      	str	r1, [r7, #8]
 800510a:	607a      	str	r2, [r7, #4]
   uint32_t hrtim_timcr2;

   /* Configure timing unit (Timer A to Timer F) */
   hrtim_timcr2 = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	01db      	lsls	r3, r3, #7
 8005114:	4413      	add	r3, r2
 8005116:	33ec      	adds	r3, #236	; 0xec
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	617b      	str	r3, [r7, #20]

   /* Set the UpDown counting Mode */
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_UDM);
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	f023 0310 	bic.w	r3, r3, #16
 8005122:	617b      	str	r3, [r7, #20]
   hrtim_timcr2 |= (pTimerCtl->UpDownMode << HRTIM_TIMCR2_UDM_Pos) ;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	011b      	lsls	r3, r3, #4
 800512a:	697a      	ldr	r2, [r7, #20]
 800512c:	4313      	orrs	r3, r2
 800512e:	617b      	str	r3, [r7, #20]

   /* Set the TrigHalf Mode : requires the counter to be disabled */
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_TRGHLF);
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005136:	617b      	str	r3, [r7, #20]
   hrtim_timcr2 |= pTimerCtl->TrigHalf;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	697a      	ldr	r2, [r7, #20]
 800513e:	4313      	orrs	r3, r2
 8005140:	617b      	str	r3, [r7, #20]

   /* define the compare event operating mode */
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_GTCMP1);
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005148:	617b      	str	r3, [r7, #20]
   hrtim_timcr2 |= pTimerCtl->GreaterCMP1;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	68db      	ldr	r3, [r3, #12]
 800514e:	697a      	ldr	r2, [r7, #20]
 8005150:	4313      	orrs	r3, r2
 8005152:	617b      	str	r3, [r7, #20]

   /* define the compare event operating mode */
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_GTCMP3);
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800515a:	617b      	str	r3, [r7, #20]
   hrtim_timcr2 |= pTimerCtl->GreaterCMP3;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	697a      	ldr	r2, [r7, #20]
 8005162:	4313      	orrs	r3, r2
 8005164:	617b      	str	r3, [r7, #20]

   if (pTimerCtl->DualChannelDacEnable == HRTIM_TIMER_DCDE_ENABLED)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	699b      	ldr	r3, [r3, #24]
 800516a:	2b01      	cmp	r3, #1
 800516c:	d11a      	bne.n	80051a4 <HRTIM_TimingUnitWaveform_Control+0xa4>
   {
      /* Set the DualChannel DAC Reset trigger : requires DCDE enabled */
      hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDR);
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	f023 0304 	bic.w	r3, r3, #4
 8005174:	617b      	str	r3, [r7, #20]
      hrtim_timcr2 |= pTimerCtl->DualChannelDacReset;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	691b      	ldr	r3, [r3, #16]
 800517a:	697a      	ldr	r2, [r7, #20]
 800517c:	4313      	orrs	r3, r2
 800517e:	617b      	str	r3, [r7, #20]

      /* Set the DualChannel DAC Step trigger : requires DCDE enabled */
      hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDS);
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	f023 0302 	bic.w	r3, r3, #2
 8005186:	617b      	str	r3, [r7, #20]
      hrtim_timcr2 |= pTimerCtl->DualChannelDacStep;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	695b      	ldr	r3, [r3, #20]
 800518c:	697a      	ldr	r2, [r7, #20]
 800518e:	4313      	orrs	r3, r2
 8005190:	617b      	str	r3, [r7, #20]

      /* Enable the DualChannel DAC trigger */
      hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDE);
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	f023 0301 	bic.w	r3, r3, #1
 8005198:	617b      	str	r3, [r7, #20]
      hrtim_timcr2 |= pTimerCtl->DualChannelDacEnable;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	699b      	ldr	r3, [r3, #24]
 800519e:	697a      	ldr	r2, [r7, #20]
 80051a0:	4313      	orrs	r3, r2
 80051a2:	617b      	str	r3, [r7, #20]
   }
   /* Update the HRTIM registers */
   hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2  = hrtim_timcr2;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	01db      	lsls	r3, r3, #7
 80051ac:	4413      	add	r3, r2
 80051ae:	33ec      	adds	r3, #236	; 0xec
 80051b0:	697a      	ldr	r2, [r7, #20]
 80051b2:	601a      	str	r2, [r3, #0]

}
 80051b4:	bf00      	nop
 80051b6:	371c      	adds	r7, #28
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr

080051c0 <HRTIM_OutputConfig>:
  */
static void  HRTIM_OutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                uint32_t TimerIdx,
                                uint32_t Output,
                                HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b089      	sub	sp, #36	; 0x24
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	60f8      	str	r0, [r7, #12]
 80051c8:	60b9      	str	r1, [r7, #8]
 80051ca:	607a      	str	r2, [r7, #4]
 80051cc:	603b      	str	r3, [r7, #0]
  uint32_t hrtim_outr;
  uint32_t hrtim_dtr;

  uint32_t shift = 0U;
 80051ce:	2300      	movs	r3, #0
 80051d0:	61bb      	str	r3, [r7, #24]

  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681a      	ldr	r2, [r3, #0]
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	01db      	lsls	r3, r3, #7
 80051da:	4413      	add	r3, r2
 80051dc:	33e4      	adds	r3, #228	; 0xe4
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	61fb      	str	r3, [r7, #28]
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681a      	ldr	r2, [r3, #0]
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	01db      	lsls	r3, r3, #7
 80051ea:	4413      	add	r3, r2
 80051ec:	33b8      	adds	r3, #184	; 0xb8
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	617b      	str	r3, [r7, #20]

  switch (Output)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2b20      	cmp	r3, #32
 80051f6:	d037      	beq.n	8005268 <HRTIM_OutputConfig+0xa8>
 80051f8:	2b20      	cmp	r3, #32
 80051fa:	d80d      	bhi.n	8005218 <HRTIM_OutputConfig+0x58>
 80051fc:	2b04      	cmp	r3, #4
 80051fe:	d020      	beq.n	8005242 <HRTIM_OutputConfig+0x82>
 8005200:	2b04      	cmp	r3, #4
 8005202:	d804      	bhi.n	800520e <HRTIM_OutputConfig+0x4e>
 8005204:	2b01      	cmp	r3, #1
 8005206:	d01c      	beq.n	8005242 <HRTIM_OutputConfig+0x82>
 8005208:	2b02      	cmp	r3, #2
 800520a:	d02d      	beq.n	8005268 <HRTIM_OutputConfig+0xa8>
      shift = 16U;
      break;
    }

  default:
    break;
 800520c:	e041      	b.n	8005292 <HRTIM_OutputConfig+0xd2>
  switch (Output)
 800520e:	2b08      	cmp	r3, #8
 8005210:	d02a      	beq.n	8005268 <HRTIM_OutputConfig+0xa8>
 8005212:	2b10      	cmp	r3, #16
 8005214:	d015      	beq.n	8005242 <HRTIM_OutputConfig+0x82>
    break;
 8005216:	e03c      	b.n	8005292 <HRTIM_OutputConfig+0xd2>
  switch (Output)
 8005218:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800521c:	d011      	beq.n	8005242 <HRTIM_OutputConfig+0x82>
 800521e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005222:	d804      	bhi.n	800522e <HRTIM_OutputConfig+0x6e>
 8005224:	2b40      	cmp	r3, #64	; 0x40
 8005226:	d00c      	beq.n	8005242 <HRTIM_OutputConfig+0x82>
 8005228:	2b80      	cmp	r3, #128	; 0x80
 800522a:	d01d      	beq.n	8005268 <HRTIM_OutputConfig+0xa8>
    break;
 800522c:	e031      	b.n	8005292 <HRTIM_OutputConfig+0xd2>
  switch (Output)
 800522e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005232:	d006      	beq.n	8005242 <HRTIM_OutputConfig+0x82>
 8005234:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005238:	d016      	beq.n	8005268 <HRTIM_OutputConfig+0xa8>
 800523a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800523e:	d013      	beq.n	8005268 <HRTIM_OutputConfig+0xa8>
    break;
 8005240:	e027      	b.n	8005292 <HRTIM_OutputConfig+0xd2>
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R = pOutputCfg->SetSource;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	6819      	ldr	r1, [r3, #0]
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	685a      	ldr	r2, [r3, #4]
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	01db      	lsls	r3, r3, #7
 800524e:	440b      	add	r3, r1
 8005250:	33bc      	adds	r3, #188	; 0xbc
 8005252:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R = pOutputCfg->ResetSource;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	6819      	ldr	r1, [r3, #0]
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	689a      	ldr	r2, [r3, #8]
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	01db      	lsls	r3, r3, #7
 8005260:	440b      	add	r3, r1
 8005262:	33c0      	adds	r3, #192	; 0xc0
 8005264:	601a      	str	r2, [r3, #0]
      break;
 8005266:	e014      	b.n	8005292 <HRTIM_OutputConfig+0xd2>
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R = pOutputCfg->SetSource;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	6819      	ldr	r1, [r3, #0]
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	685a      	ldr	r2, [r3, #4]
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	01db      	lsls	r3, r3, #7
 8005274:	440b      	add	r3, r1
 8005276:	33c4      	adds	r3, #196	; 0xc4
 8005278:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R = pOutputCfg->ResetSource;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	6819      	ldr	r1, [r3, #0]
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	689a      	ldr	r2, [r3, #8]
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	01db      	lsls	r3, r3, #7
 8005286:	440b      	add	r3, r1
 8005288:	33c8      	adds	r3, #200	; 0xc8
 800528a:	601a      	str	r2, [r3, #0]
      shift = 16U;
 800528c:	2310      	movs	r3, #16
 800528e:	61bb      	str	r3, [r7, #24]
      break;
 8005290:	bf00      	nop
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
                   HRTIM_OUTR_IDLM1 |
                   HRTIM_OUTR_IDLES1|
                   HRTIM_OUTR_FAULT1|
                   HRTIM_OUTR_CHP1 |
                   HRTIM_OUTR_DIDL1) << shift);
 8005292:	22fe      	movs	r2, #254	; 0xfe
 8005294:	69bb      	ldr	r3, [r7, #24]
 8005296:	fa02 f303 	lsl.w	r3, r2, r3
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
 800529a:	43db      	mvns	r3, r3
 800529c:	69fa      	ldr	r2, [r7, #28]
 800529e:	4013      	ands	r3, r2
 80052a0:	61fb      	str	r3, [r7, #28]

  /* Set the polarity */
  hrtim_outr |= (pOutputCfg->Polarity << shift);
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	681a      	ldr	r2, [r3, #0]
 80052a6:	69bb      	ldr	r3, [r7, #24]
 80052a8:	fa02 f303 	lsl.w	r3, r2, r3
 80052ac:	69fa      	ldr	r2, [r7, #28]
 80052ae:	4313      	orrs	r3, r2
 80052b0:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE mode */
  hrtim_outr |= (pOutputCfg->IdleMode << shift);
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	68da      	ldr	r2, [r3, #12]
 80052b6:	69bb      	ldr	r3, [r7, #24]
 80052b8:	fa02 f303 	lsl.w	r3, r2, r3
 80052bc:	69fa      	ldr	r2, [r7, #28]
 80052be:	4313      	orrs	r3, r2
 80052c0:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE state */
  hrtim_outr |= (pOutputCfg->IdleLevel << shift);
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	691a      	ldr	r2, [r3, #16]
 80052c6:	69bb      	ldr	r3, [r7, #24]
 80052c8:	fa02 f303 	lsl.w	r3, r2, r3
 80052cc:	69fa      	ldr	r2, [r7, #28]
 80052ce:	4313      	orrs	r3, r2
 80052d0:	61fb      	str	r3, [r7, #28]

  /* Set the FAULT state */
  hrtim_outr |= (pOutputCfg->FaultLevel << shift);
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	695a      	ldr	r2, [r3, #20]
 80052d6:	69bb      	ldr	r3, [r7, #24]
 80052d8:	fa02 f303 	lsl.w	r3, r2, r3
 80052dc:	69fa      	ldr	r2, [r7, #28]
 80052de:	4313      	orrs	r3, r2
 80052e0:	61fb      	str	r3, [r7, #28]

  /* Set the chopper mode */
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	699a      	ldr	r2, [r3, #24]
 80052e6:	69bb      	ldr	r3, [r7, #24]
 80052e8:	fa02 f303 	lsl.w	r3, r2, r3
 80052ec:	69fa      	ldr	r2, [r7, #28]
 80052ee:	4313      	orrs	r3, r2
 80052f0:	61fb      	str	r3, [r7, #28]
     state during a burst mode operation is allowed only under the following
     conditions:
     - the outputs is active during the burst mode (IDLES=1U)
     - positive deadtimes (SDTR/SDTF set to 0U)
  */
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	691b      	ldr	r3, [r3, #16]
 80052f6:	2b08      	cmp	r3, #8
 80052f8:	d111      	bne.n	800531e <HRTIM_OutputConfig+0x15e>
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8005300:	2b00      	cmp	r3, #0
 8005302:	d10c      	bne.n	800531e <HRTIM_OutputConfig+0x15e>
      ((hrtim_dtr & HRTIM_DTR_SDTF) == (uint32_t)RESET))
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 800530a:	2b00      	cmp	r3, #0
 800530c:	d107      	bne.n	800531e <HRTIM_OutputConfig+0x15e>
  {
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	69da      	ldr	r2, [r3, #28]
 8005312:	69bb      	ldr	r3, [r7, #24]
 8005314:	fa02 f303 	lsl.w	r3, r2, r3
 8005318:	69fa      	ldr	r2, [r7, #28]
 800531a:	4313      	orrs	r3, r2
 800531c:	61fb      	str	r3, [r7, #28]
  }

  /* Update HRTIM register */
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	01db      	lsls	r3, r3, #7
 8005326:	4413      	add	r3, r2
 8005328:	33e4      	adds	r3, #228	; 0xe4
 800532a:	69fa      	ldr	r2, [r7, #28]
 800532c:	601a      	str	r2, [r3, #0]
}
 800532e:	bf00      	nop
 8005330:	3724      	adds	r7, #36	; 0x24
 8005332:	46bd      	mov	sp, r7
 8005334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005338:	4770      	bx	lr
	...

0800533c <HRTIM_ForceRegistersUpdate>:
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef * hhrtim,
                                       uint32_t TimerIdx)
{
 800533c:	b480      	push	{r7}
 800533e:	b083      	sub	sp, #12
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
 8005344:	6039      	str	r1, [r7, #0]
  switch (TimerIdx)
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	2b06      	cmp	r3, #6
 800534a:	d85e      	bhi.n	800540a <HRTIM_ForceRegistersUpdate+0xce>
 800534c:	a201      	add	r2, pc, #4	; (adr r2, 8005354 <HRTIM_ForceRegistersUpdate+0x18>)
 800534e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005352:	bf00      	nop
 8005354:	08005387 	.word	0x08005387
 8005358:	0800539d 	.word	0x0800539d
 800535c:	080053b3 	.word	0x080053b3
 8005360:	080053c9 	.word	0x080053c9
 8005364:	080053df 	.word	0x080053df
 8005368:	080053f5 	.word	0x080053f5
 800536c:	08005371 	.word	0x08005371
  {
  case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f042 0201 	orr.w	r2, r2, #1
 8005380:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8005384:	e042      	b.n	800540c <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f042 0202 	orr.w	r2, r2, #2
 8005396:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 800539a:	e037      	b.n	800540c <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f042 0204 	orr.w	r2, r2, #4
 80053ac:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 80053b0:	e02c      	b.n	800540c <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f042 0208 	orr.w	r2, r2, #8
 80053c2:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 80053c6:	e021      	b.n	800540c <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f042 0210 	orr.w	r2, r2, #16
 80053d8:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 80053dc:	e016      	b.n	800540c <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f042 0220 	orr.w	r2, r2, #32
 80053ee:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 80053f2:	e00b      	b.n	800540c <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_F:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TFSWU;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005404:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8005408:	e000      	b.n	800540c <HRTIM_ForceRegistersUpdate+0xd0>
    }

  default:
    break;
 800540a:	bf00      	nop
  }
}
 800540c:	bf00      	nop
 800540e:	370c      	adds	r7, #12
 8005410:	46bd      	mov	sp, r7
 8005412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005416:	4770      	bx	lr

08005418 <HRTIM_HRTIM_ISR>:
  * @brief  HRTIM interrupts service routine
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
static void HRTIM_HRTIM_ISR(HRTIM_HandleTypeDef * hhrtim)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b082      	sub	sp, #8
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  /* Fault 1 event */
  if(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_FLAG_FLT1) != (uint32_t)RESET)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 8005428:	f003 0301 	and.w	r3, r3, #1
 800542c:	2b01      	cmp	r3, #1
 800542e:	d101      	bne.n	8005434 <HRTIM_HRTIM_ISR+0x1c>
 8005430:	2301      	movs	r3, #1
 8005432:	e000      	b.n	8005436 <HRTIM_HRTIM_ISR+0x1e>
 8005434:	2300      	movs	r3, #0
 8005436:	2b00      	cmp	r3, #0
 8005438:	d00f      	beq.n	800545a <HRTIM_HRTIM_ISR+0x42>
  {
    if(__HAL_HRTIM_GET_ITSTATUS(hhrtim, HRTIM_IT_FLT1) != RESET)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 8005442:	f003 0301 	and.w	r3, r3, #1
 8005446:	2b01      	cmp	r3, #1
 8005448:	d107      	bne.n	800545a <HRTIM_HRTIM_ISR+0x42>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT1);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	2201      	movs	r2, #1
 8005450:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault1Callback(hhrtim);
#else
      HAL_HRTIM_Fault1Callback(hhrtim);
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	f7ff fab5 	bl	80049c4 <HAL_HRTIM_Fault1Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 2 event */
  if(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_FLAG_FLT2) != (uint32_t)RESET)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 8005462:	f003 0302 	and.w	r3, r3, #2
 8005466:	2b02      	cmp	r3, #2
 8005468:	d101      	bne.n	800546e <HRTIM_HRTIM_ISR+0x56>
 800546a:	2301      	movs	r3, #1
 800546c:	e000      	b.n	8005470 <HRTIM_HRTIM_ISR+0x58>
 800546e:	2300      	movs	r3, #0
 8005470:	2b00      	cmp	r3, #0
 8005472:	d00f      	beq.n	8005494 <HRTIM_HRTIM_ISR+0x7c>
  {
    if(__HAL_HRTIM_GET_ITSTATUS(hhrtim, HRTIM_IT_FLT2) != RESET)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 800547c:	f003 0302 	and.w	r3, r3, #2
 8005480:	2b02      	cmp	r3, #2
 8005482:	d107      	bne.n	8005494 <HRTIM_HRTIM_ISR+0x7c>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT2);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	2202      	movs	r2, #2
 800548a:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault2Callback(hhrtim);
#else
      HAL_HRTIM_Fault2Callback(hhrtim);
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f7ff faa2 	bl	80049d8 <HAL_HRTIM_Fault2Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 3 event */
  if(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_FLAG_FLT3) != (uint32_t)RESET)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 800549c:	f003 0304 	and.w	r3, r3, #4
 80054a0:	2b04      	cmp	r3, #4
 80054a2:	d101      	bne.n	80054a8 <HRTIM_HRTIM_ISR+0x90>
 80054a4:	2301      	movs	r3, #1
 80054a6:	e000      	b.n	80054aa <HRTIM_HRTIM_ISR+0x92>
 80054a8:	2300      	movs	r3, #0
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d00f      	beq.n	80054ce <HRTIM_HRTIM_ISR+0xb6>
  {
    if(__HAL_HRTIM_GET_ITSTATUS(hhrtim, HRTIM_IT_FLT3) != RESET)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 80054b6:	f003 0304 	and.w	r3, r3, #4
 80054ba:	2b04      	cmp	r3, #4
 80054bc:	d107      	bne.n	80054ce <HRTIM_HRTIM_ISR+0xb6>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT3);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	2204      	movs	r2, #4
 80054c4:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault3Callback(hhrtim);
#else
      HAL_HRTIM_Fault3Callback(hhrtim);
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	f7ff fa8f 	bl	80049ec <HAL_HRTIM_Fault3Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 4 event */
  if(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_FLAG_FLT4) != (uint32_t)RESET)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 80054d6:	f003 0308 	and.w	r3, r3, #8
 80054da:	2b08      	cmp	r3, #8
 80054dc:	d101      	bne.n	80054e2 <HRTIM_HRTIM_ISR+0xca>
 80054de:	2301      	movs	r3, #1
 80054e0:	e000      	b.n	80054e4 <HRTIM_HRTIM_ISR+0xcc>
 80054e2:	2300      	movs	r3, #0
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d00f      	beq.n	8005508 <HRTIM_HRTIM_ISR+0xf0>
  {
    if(__HAL_HRTIM_GET_ITSTATUS(hhrtim, HRTIM_IT_FLT4) != RESET)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 80054f0:	f003 0308 	and.w	r3, r3, #8
 80054f4:	2b08      	cmp	r3, #8
 80054f6:	d107      	bne.n	8005508 <HRTIM_HRTIM_ISR+0xf0>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT4);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	2208      	movs	r2, #8
 80054fe:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault4Callback(hhrtim);
#else
      HAL_HRTIM_Fault4Callback(hhrtim);
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f7ff fa7c 	bl	8004a00 <HAL_HRTIM_Fault4Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 5 event */
  if(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_FLAG_FLT5) != (uint32_t)RESET)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 8005510:	f003 0310 	and.w	r3, r3, #16
 8005514:	2b10      	cmp	r3, #16
 8005516:	d101      	bne.n	800551c <HRTIM_HRTIM_ISR+0x104>
 8005518:	2301      	movs	r3, #1
 800551a:	e000      	b.n	800551e <HRTIM_HRTIM_ISR+0x106>
 800551c:	2300      	movs	r3, #0
 800551e:	2b00      	cmp	r3, #0
 8005520:	d00f      	beq.n	8005542 <HRTIM_HRTIM_ISR+0x12a>
  {
    if(__HAL_HRTIM_GET_ITSTATUS(hhrtim, HRTIM_IT_FLT5) != RESET)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 800552a:	f003 0310 	and.w	r3, r3, #16
 800552e:	2b10      	cmp	r3, #16
 8005530:	d107      	bne.n	8005542 <HRTIM_HRTIM_ISR+0x12a>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT5);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	2210      	movs	r2, #16
 8005538:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 5 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault5Callback(hhrtim);
#else
      HAL_HRTIM_Fault5Callback(hhrtim);
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	f7ff fa69 	bl	8004a14 <HAL_HRTIM_Fault5Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 6 event */
  if(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_FLAG_FLT6) != (uint32_t)RESET)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 800554a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800554e:	2b40      	cmp	r3, #64	; 0x40
 8005550:	d101      	bne.n	8005556 <HRTIM_HRTIM_ISR+0x13e>
 8005552:	2301      	movs	r3, #1
 8005554:	e000      	b.n	8005558 <HRTIM_HRTIM_ISR+0x140>
 8005556:	2300      	movs	r3, #0
 8005558:	2b00      	cmp	r3, #0
 800555a:	d00f      	beq.n	800557c <HRTIM_HRTIM_ISR+0x164>
  {
    if(__HAL_HRTIM_GET_ITSTATUS(hhrtim, HRTIM_IT_FLT6) != RESET)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 8005564:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005568:	2b40      	cmp	r3, #64	; 0x40
 800556a:	d107      	bne.n	800557c <HRTIM_HRTIM_ISR+0x164>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT6);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	2240      	movs	r2, #64	; 0x40
 8005572:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 6 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault6Callback(hhrtim);
#else
      HAL_HRTIM_Fault6Callback(hhrtim);
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f7ff fa56 	bl	8004a28 <HAL_HRTIM_Fault6Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* System fault event */
  if(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_FLAG_SYSFLT) != (uint32_t)RESET)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 8005584:	f003 0320 	and.w	r3, r3, #32
 8005588:	2b20      	cmp	r3, #32
 800558a:	d101      	bne.n	8005590 <HRTIM_HRTIM_ISR+0x178>
 800558c:	2301      	movs	r3, #1
 800558e:	e000      	b.n	8005592 <HRTIM_HRTIM_ISR+0x17a>
 8005590:	2300      	movs	r3, #0
 8005592:	2b00      	cmp	r3, #0
 8005594:	d00f      	beq.n	80055b6 <HRTIM_HRTIM_ISR+0x19e>
  {
    if(__HAL_HRTIM_GET_ITSTATUS(hhrtim, HRTIM_IT_SYSFLT) != RESET)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 800559e:	f003 0320 	and.w	r3, r3, #32
 80055a2:	2b20      	cmp	r3, #32
 80055a4:	d107      	bne.n	80055b6 <HRTIM_HRTIM_ISR+0x19e>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_SYSFLT);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	2220      	movs	r2, #32
 80055ac:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke System fault event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->SystemFaultCallback(hhrtim);
#else
      HAL_HRTIM_SystemFaultCallback(hhrtim);
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f7ff fa43 	bl	8004a3c <HAL_HRTIM_SystemFaultCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 80055b6:	bf00      	nop
 80055b8:	3708      	adds	r7, #8
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}

080055be <HRTIM_Master_ISR>:
* @brief  Master timer interrupts service routine
* @param  hhrtim pointer to HAL HRTIM handle
* @retval None
*/
static void HRTIM_Master_ISR(HRTIM_HandleTypeDef * hhrtim)
{
 80055be:	b580      	push	{r7, lr}
 80055c0:	b082      	sub	sp, #8
 80055c2:	af00      	add	r7, sp, #0
 80055c4:	6078      	str	r0, [r7, #4]
  /* DLL calibration ready event */
  if(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_FLAG_DLLRDY) != (uint32_t)RESET)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 80055ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055d6:	d101      	bne.n	80055dc <HRTIM_Master_ISR+0x1e>
 80055d8:	2301      	movs	r3, #1
 80055da:	e000      	b.n	80055de <HRTIM_Master_ISR+0x20>
 80055dc:	2300      	movs	r3, #0
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d019      	beq.n	8005616 <HRTIM_Master_ISR+0x58>
  {
    if(__HAL_HRTIM_GET_ITSTATUS(hhrtim, HRTIM_IT_DLLRDY) != RESET)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 80055ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055f2:	d110      	bne.n	8005616 <HRTIM_Master_ISR+0x58>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_DLLRDY);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80055fc:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Set HRTIM State */
      hhrtim->State = HAL_HRTIM_STATE_READY;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2201      	movs	r2, #1
 8005604:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

      /* Process unlocked */
      __HAL_UNLOCK(hhrtim);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2200      	movs	r2, #0
 800560c:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

      /* Invoke System fault event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->DLLCalibrationReadyCallback(hhrtim);
#else
      HAL_HRTIM_DLLCalibrationReadyCallback(hhrtim);
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	f7ff fa1d 	bl	8004a50 <HAL_HRTIM_DLLCalibrationReadyCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Burst mode period event */
  if(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_FLAG_BMPER) != (uint32_t)RESET)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 800561e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005622:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005626:	d101      	bne.n	800562c <HRTIM_Master_ISR+0x6e>
 8005628:	2301      	movs	r3, #1
 800562a:	e000      	b.n	800562e <HRTIM_Master_ISR+0x70>
 800562c:	2300      	movs	r3, #0
 800562e:	2b00      	cmp	r3, #0
 8005630:	d011      	beq.n	8005656 <HRTIM_Master_ISR+0x98>
  {
    if(__HAL_HRTIM_GET_ITSTATUS(hhrtim, HRTIM_IT_BMPER) != RESET)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 800563a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800563e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005642:	d108      	bne.n	8005656 <HRTIM_Master_ISR+0x98>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_BMPER);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800564c:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Burst mode period event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->BurstModePeriodCallback(hhrtim);
#else
      HAL_HRTIM_BurstModePeriodCallback(hhrtim);
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	f7ff fa07 	bl	8004a64 <HAL_HRTIM_BurstModePeriodCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 1 event */
  if(__HAL_HRTIM_MASTER_GET_FLAG(hhrtim, HRTIM_MASTER_FLAG_MCMP1) != (uint32_t)RESET)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	f003 0301 	and.w	r3, r3, #1
 8005660:	2b01      	cmp	r3, #1
 8005662:	d101      	bne.n	8005668 <HRTIM_Master_ISR+0xaa>
 8005664:	2301      	movs	r3, #1
 8005666:	e000      	b.n	800566a <HRTIM_Master_ISR+0xac>
 8005668:	2300      	movs	r3, #0
 800566a:	2b00      	cmp	r3, #0
 800566c:	d00e      	beq.n	800568c <HRTIM_Master_ISR+0xce>
  {
    if(__HAL_HRTIM_MASTER_GET_ITSTATUS(hhrtim, HRTIM_MASTER_IT_MCMP1) != RESET)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	68db      	ldr	r3, [r3, #12]
 8005674:	f003 0301 	and.w	r3, r3, #1
 8005678:	2b01      	cmp	r3, #1
 800567a:	d107      	bne.n	800568c <HRTIM_Master_ISR+0xce>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP1);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	2201      	movs	r2, #1
 8005682:	609a      	str	r2, [r3, #8]

      /* Invoke compare 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare1EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare1EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8005684:	2106      	movs	r1, #6
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f7ff fa16 	bl	8004ab8 <HAL_HRTIM_Compare1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 2 event */
  if(__HAL_HRTIM_MASTER_GET_FLAG(hhrtim, HRTIM_MASTER_FLAG_MCMP2) != (uint32_t)RESET)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	f003 0302 	and.w	r3, r3, #2
 8005696:	2b02      	cmp	r3, #2
 8005698:	d101      	bne.n	800569e <HRTIM_Master_ISR+0xe0>
 800569a:	2301      	movs	r3, #1
 800569c:	e000      	b.n	80056a0 <HRTIM_Master_ISR+0xe2>
 800569e:	2300      	movs	r3, #0
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d00e      	beq.n	80056c2 <HRTIM_Master_ISR+0x104>
  {
    if(__HAL_HRTIM_MASTER_GET_ITSTATUS(hhrtim, HRTIM_MASTER_IT_MCMP2) != RESET)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	68db      	ldr	r3, [r3, #12]
 80056aa:	f003 0302 	and.w	r3, r3, #2
 80056ae:	2b02      	cmp	r3, #2
 80056b0:	d107      	bne.n	80056c2 <HRTIM_Master_ISR+0x104>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP2);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	2202      	movs	r2, #2
 80056b8:	609a      	str	r2, [r3, #8]

      /* Invoke compare 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare2EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare2EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 80056ba:	2106      	movs	r1, #6
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f7ff fa06 	bl	8004ace <HAL_HRTIM_Compare2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 3 event */
  if(__HAL_HRTIM_MASTER_GET_FLAG(hhrtim, HRTIM_MASTER_FLAG_MCMP3) != (uint32_t)RESET)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	f003 0304 	and.w	r3, r3, #4
 80056cc:	2b04      	cmp	r3, #4
 80056ce:	d101      	bne.n	80056d4 <HRTIM_Master_ISR+0x116>
 80056d0:	2301      	movs	r3, #1
 80056d2:	e000      	b.n	80056d6 <HRTIM_Master_ISR+0x118>
 80056d4:	2300      	movs	r3, #0
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d00e      	beq.n	80056f8 <HRTIM_Master_ISR+0x13a>
  {
    if(__HAL_HRTIM_MASTER_GET_ITSTATUS(hhrtim, HRTIM_MASTER_IT_MCMP3) != RESET)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	68db      	ldr	r3, [r3, #12]
 80056e0:	f003 0304 	and.w	r3, r3, #4
 80056e4:	2b04      	cmp	r3, #4
 80056e6:	d107      	bne.n	80056f8 <HRTIM_Master_ISR+0x13a>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP3);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	2204      	movs	r2, #4
 80056ee:	609a      	str	r2, [r3, #8]

      /* Invoke compare 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare3EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare3EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 80056f0:	2106      	movs	r1, #6
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f7ff f9f6 	bl	8004ae4 <HAL_HRTIM_Compare3EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 4 event */
  if(__HAL_HRTIM_MASTER_GET_FLAG(hhrtim, HRTIM_MASTER_FLAG_MCMP4) != (uint32_t)RESET)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	f003 0308 	and.w	r3, r3, #8
 8005702:	2b08      	cmp	r3, #8
 8005704:	d101      	bne.n	800570a <HRTIM_Master_ISR+0x14c>
 8005706:	2301      	movs	r3, #1
 8005708:	e000      	b.n	800570c <HRTIM_Master_ISR+0x14e>
 800570a:	2300      	movs	r3, #0
 800570c:	2b00      	cmp	r3, #0
 800570e:	d00e      	beq.n	800572e <HRTIM_Master_ISR+0x170>
  {
    if(__HAL_HRTIM_MASTER_GET_ITSTATUS(hhrtim, HRTIM_MASTER_IT_MCMP4) != RESET)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	68db      	ldr	r3, [r3, #12]
 8005716:	f003 0308 	and.w	r3, r3, #8
 800571a:	2b08      	cmp	r3, #8
 800571c:	d107      	bne.n	800572e <HRTIM_Master_ISR+0x170>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP4);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	2208      	movs	r2, #8
 8005724:	609a      	str	r2, [r3, #8]

      /* Invoke compare 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare4EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare4EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8005726:	2106      	movs	r1, #6
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f7ff f9e6 	bl	8004afa <HAL_HRTIM_Compare4EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer repetition event */
  if(__HAL_HRTIM_MASTER_GET_FLAG(hhrtim, HRTIM_MASTER_FLAG_MREP) != (uint32_t)RESET)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	f003 0310 	and.w	r3, r3, #16
 8005738:	2b10      	cmp	r3, #16
 800573a:	d101      	bne.n	8005740 <HRTIM_Master_ISR+0x182>
 800573c:	2301      	movs	r3, #1
 800573e:	e000      	b.n	8005742 <HRTIM_Master_ISR+0x184>
 8005740:	2300      	movs	r3, #0
 8005742:	2b00      	cmp	r3, #0
 8005744:	d00e      	beq.n	8005764 <HRTIM_Master_ISR+0x1a6>
  {
    if(__HAL_HRTIM_MASTER_GET_ITSTATUS(hhrtim, HRTIM_MASTER_IT_MREP) != RESET)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	68db      	ldr	r3, [r3, #12]
 800574c:	f003 0310 	and.w	r3, r3, #16
 8005750:	2b10      	cmp	r3, #16
 8005752:	d107      	bne.n	8005764 <HRTIM_Master_ISR+0x1a6>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MREP);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	2210      	movs	r2, #16
 800575a:	609a      	str	r2, [r3, #8]

      /* Invoke repetition event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RepetitionEventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_RepetitionEventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 800575c:	2106      	movs	r1, #6
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f7ff f99f 	bl	8004aa2 <HAL_HRTIM_RepetitionEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Synchronization input event */
  if(__HAL_HRTIM_MASTER_GET_FLAG(hhrtim, HRTIM_MASTER_FLAG_SYNC) != (uint32_t)RESET)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	f003 0320 	and.w	r3, r3, #32
 800576e:	2b20      	cmp	r3, #32
 8005770:	d101      	bne.n	8005776 <HRTIM_Master_ISR+0x1b8>
 8005772:	2301      	movs	r3, #1
 8005774:	e000      	b.n	8005778 <HRTIM_Master_ISR+0x1ba>
 8005776:	2300      	movs	r3, #0
 8005778:	2b00      	cmp	r3, #0
 800577a:	d00d      	beq.n	8005798 <HRTIM_Master_ISR+0x1da>
  {
    if(__HAL_HRTIM_MASTER_GET_ITSTATUS(hhrtim, HRTIM_MASTER_IT_SYNC) != RESET)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	68db      	ldr	r3, [r3, #12]
 8005782:	f003 0320 	and.w	r3, r3, #32
 8005786:	2b20      	cmp	r3, #32
 8005788:	d106      	bne.n	8005798 <HRTIM_Master_ISR+0x1da>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_SYNC);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	2220      	movs	r2, #32
 8005790:	609a      	str	r2, [r3, #8]

      /* Invoke synchronization event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->SynchronizationEventCallback(hhrtim);
#else
      HAL_HRTIM_SynchronizationEventCallback(hhrtim);
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f7ff f970 	bl	8004a78 <HAL_HRTIM_SynchronizationEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer registers update event */
  if(__HAL_HRTIM_MASTER_GET_FLAG(hhrtim, HRTIM_MASTER_FLAG_MUPD) != (uint32_t)RESET)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057a2:	2b40      	cmp	r3, #64	; 0x40
 80057a4:	d101      	bne.n	80057aa <HRTIM_Master_ISR+0x1ec>
 80057a6:	2301      	movs	r3, #1
 80057a8:	e000      	b.n	80057ac <HRTIM_Master_ISR+0x1ee>
 80057aa:	2300      	movs	r3, #0
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d00e      	beq.n	80057ce <HRTIM_Master_ISR+0x210>
  {
    if(__HAL_HRTIM_MASTER_GET_ITSTATUS(hhrtim, HRTIM_MASTER_IT_MUPD) != RESET)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	68db      	ldr	r3, [r3, #12]
 80057b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057ba:	2b40      	cmp	r3, #64	; 0x40
 80057bc:	d107      	bne.n	80057ce <HRTIM_Master_ISR+0x210>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MUPD);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	2240      	movs	r2, #64	; 0x40
 80057c4:	609a      	str	r2, [r3, #8]

      /* Invoke registers update event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RegistersUpdateCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_RegistersUpdateCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 80057c6:	2106      	movs	r1, #6
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	f7ff f95f 	bl	8004a8c <HAL_HRTIM_RegistersUpdateCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 80057ce:	bf00      	nop
 80057d0:	3708      	adds	r7, #8
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}

080057d6 <HRTIM_Timer_ISR>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
*/
static void HRTIM_Timer_ISR(HRTIM_HandleTypeDef * hhrtim,
                     uint32_t TimerIdx)
{
 80057d6:	b580      	push	{r7, lr}
 80057d8:	b082      	sub	sp, #8
 80057da:	af00      	add	r7, sp, #0
 80057dc:	6078      	str	r0, [r7, #4]
 80057de:	6039      	str	r1, [r7, #0]
  /* Timer compare 1 event */
  if(__HAL_HRTIM_TIMER_GET_FLAG(hhrtim, TimerIdx, HRTIM_TIM_FLAG_CMP1) != (uint32_t)RESET)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681a      	ldr	r2, [r3, #0]
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	3301      	adds	r3, #1
 80057e8:	01db      	lsls	r3, r3, #7
 80057ea:	4413      	add	r3, r2
 80057ec:	3304      	adds	r3, #4
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f003 0301 	and.w	r3, r3, #1
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d101      	bne.n	80057fc <HRTIM_Timer_ISR+0x26>
 80057f8:	2301      	movs	r3, #1
 80057fa:	e000      	b.n	80057fe <HRTIM_Timer_ISR+0x28>
 80057fc:	2300      	movs	r3, #0
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d016      	beq.n	8005830 <HRTIM_Timer_ISR+0x5a>
  {
    if(__HAL_HRTIM_TIMER_GET_ITSTATUS(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP1) != RESET)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681a      	ldr	r2, [r3, #0]
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	01db      	lsls	r3, r3, #7
 800580a:	4413      	add	r3, r2
 800580c:	338c      	adds	r3, #140	; 0x8c
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f003 0301 	and.w	r3, r3, #1
 8005814:	2b01      	cmp	r3, #1
 8005816:	d10b      	bne.n	8005830 <HRTIM_Timer_ISR+0x5a>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP1);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681a      	ldr	r2, [r3, #0]
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	01db      	lsls	r3, r3, #7
 8005820:	4413      	add	r3, r2
 8005822:	3388      	adds	r3, #136	; 0x88
 8005824:	2201      	movs	r2, #1
 8005826:	601a      	str	r2, [r3, #0]

      /* Invoke compare 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare1EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare1EventCallback(hhrtim, TimerIdx);
 8005828:	6839      	ldr	r1, [r7, #0]
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f7ff f944 	bl	8004ab8 <HAL_HRTIM_Compare1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 2 event */
  if(__HAL_HRTIM_TIMER_GET_FLAG(hhrtim, TimerIdx, HRTIM_TIM_FLAG_CMP2) != (uint32_t)RESET)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681a      	ldr	r2, [r3, #0]
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	3301      	adds	r3, #1
 8005838:	01db      	lsls	r3, r3, #7
 800583a:	4413      	add	r3, r2
 800583c:	3304      	adds	r3, #4
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f003 0302 	and.w	r3, r3, #2
 8005844:	2b02      	cmp	r3, #2
 8005846:	d101      	bne.n	800584c <HRTIM_Timer_ISR+0x76>
 8005848:	2301      	movs	r3, #1
 800584a:	e000      	b.n	800584e <HRTIM_Timer_ISR+0x78>
 800584c:	2300      	movs	r3, #0
 800584e:	2b00      	cmp	r3, #0
 8005850:	d016      	beq.n	8005880 <HRTIM_Timer_ISR+0xaa>
  {
    if(__HAL_HRTIM_TIMER_GET_ITSTATUS(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP2) != RESET)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	01db      	lsls	r3, r3, #7
 800585a:	4413      	add	r3, r2
 800585c:	338c      	adds	r3, #140	; 0x8c
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f003 0302 	and.w	r3, r3, #2
 8005864:	2b02      	cmp	r3, #2
 8005866:	d10b      	bne.n	8005880 <HRTIM_Timer_ISR+0xaa>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP2);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	01db      	lsls	r3, r3, #7
 8005870:	4413      	add	r3, r2
 8005872:	3388      	adds	r3, #136	; 0x88
 8005874:	2202      	movs	r2, #2
 8005876:	601a      	str	r2, [r3, #0]

      /* Invoke compare 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare2EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare2EventCallback(hhrtim, TimerIdx);
 8005878:	6839      	ldr	r1, [r7, #0]
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f7ff f927 	bl	8004ace <HAL_HRTIM_Compare2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 3 event */
  if(__HAL_HRTIM_TIMER_GET_FLAG(hhrtim, TimerIdx, HRTIM_TIM_FLAG_CMP3) != (uint32_t)RESET)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681a      	ldr	r2, [r3, #0]
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	3301      	adds	r3, #1
 8005888:	01db      	lsls	r3, r3, #7
 800588a:	4413      	add	r3, r2
 800588c:	3304      	adds	r3, #4
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f003 0304 	and.w	r3, r3, #4
 8005894:	2b04      	cmp	r3, #4
 8005896:	d101      	bne.n	800589c <HRTIM_Timer_ISR+0xc6>
 8005898:	2301      	movs	r3, #1
 800589a:	e000      	b.n	800589e <HRTIM_Timer_ISR+0xc8>
 800589c:	2300      	movs	r3, #0
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d016      	beq.n	80058d0 <HRTIM_Timer_ISR+0xfa>
  {
    if(__HAL_HRTIM_TIMER_GET_ITSTATUS(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP3) != RESET)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681a      	ldr	r2, [r3, #0]
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	01db      	lsls	r3, r3, #7
 80058aa:	4413      	add	r3, r2
 80058ac:	338c      	adds	r3, #140	; 0x8c
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f003 0304 	and.w	r3, r3, #4
 80058b4:	2b04      	cmp	r3, #4
 80058b6:	d10b      	bne.n	80058d0 <HRTIM_Timer_ISR+0xfa>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP3);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	01db      	lsls	r3, r3, #7
 80058c0:	4413      	add	r3, r2
 80058c2:	3388      	adds	r3, #136	; 0x88
 80058c4:	2204      	movs	r2, #4
 80058c6:	601a      	str	r2, [r3, #0]

      /* Invoke compare 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare3EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare3EventCallback(hhrtim, TimerIdx);
 80058c8:	6839      	ldr	r1, [r7, #0]
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	f7ff f90a 	bl	8004ae4 <HAL_HRTIM_Compare3EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 4 event */
  if(__HAL_HRTIM_TIMER_GET_FLAG(hhrtim, TimerIdx, HRTIM_TIM_FLAG_CMP4) != (uint32_t)RESET)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	3301      	adds	r3, #1
 80058d8:	01db      	lsls	r3, r3, #7
 80058da:	4413      	add	r3, r2
 80058dc:	3304      	adds	r3, #4
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f003 0308 	and.w	r3, r3, #8
 80058e4:	2b08      	cmp	r3, #8
 80058e6:	d101      	bne.n	80058ec <HRTIM_Timer_ISR+0x116>
 80058e8:	2301      	movs	r3, #1
 80058ea:	e000      	b.n	80058ee <HRTIM_Timer_ISR+0x118>
 80058ec:	2300      	movs	r3, #0
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d016      	beq.n	8005920 <HRTIM_Timer_ISR+0x14a>
  {
    if(__HAL_HRTIM_TIMER_GET_ITSTATUS(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP4) != RESET)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681a      	ldr	r2, [r3, #0]
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	01db      	lsls	r3, r3, #7
 80058fa:	4413      	add	r3, r2
 80058fc:	338c      	adds	r3, #140	; 0x8c
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f003 0308 	and.w	r3, r3, #8
 8005904:	2b08      	cmp	r3, #8
 8005906:	d10b      	bne.n	8005920 <HRTIM_Timer_ISR+0x14a>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP4);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	01db      	lsls	r3, r3, #7
 8005910:	4413      	add	r3, r2
 8005912:	3388      	adds	r3, #136	; 0x88
 8005914:	2208      	movs	r2, #8
 8005916:	601a      	str	r2, [r3, #0]

      /* Invoke compare 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare4EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare4EventCallback(hhrtim, TimerIdx);
 8005918:	6839      	ldr	r1, [r7, #0]
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f7ff f8ed 	bl	8004afa <HAL_HRTIM_Compare4EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer repetition event */
  if(__HAL_HRTIM_TIMER_GET_FLAG(hhrtim, TimerIdx, HRTIM_TIM_FLAG_REP) != (uint32_t)RESET)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681a      	ldr	r2, [r3, #0]
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	3301      	adds	r3, #1
 8005928:	01db      	lsls	r3, r3, #7
 800592a:	4413      	add	r3, r2
 800592c:	3304      	adds	r3, #4
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f003 0310 	and.w	r3, r3, #16
 8005934:	2b10      	cmp	r3, #16
 8005936:	d101      	bne.n	800593c <HRTIM_Timer_ISR+0x166>
 8005938:	2301      	movs	r3, #1
 800593a:	e000      	b.n	800593e <HRTIM_Timer_ISR+0x168>
 800593c:	2300      	movs	r3, #0
 800593e:	2b00      	cmp	r3, #0
 8005940:	d016      	beq.n	8005970 <HRTIM_Timer_ISR+0x19a>
  {
    if(__HAL_HRTIM_TIMER_GET_ITSTATUS(hhrtim, TimerIdx, HRTIM_TIM_IT_REP) != RESET)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681a      	ldr	r2, [r3, #0]
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	01db      	lsls	r3, r3, #7
 800594a:	4413      	add	r3, r2
 800594c:	338c      	adds	r3, #140	; 0x8c
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f003 0310 	and.w	r3, r3, #16
 8005954:	2b10      	cmp	r3, #16
 8005956:	d10b      	bne.n	8005970 <HRTIM_Timer_ISR+0x19a>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_REP);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681a      	ldr	r2, [r3, #0]
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	01db      	lsls	r3, r3, #7
 8005960:	4413      	add	r3, r2
 8005962:	3388      	adds	r3, #136	; 0x88
 8005964:	2210      	movs	r2, #16
 8005966:	601a      	str	r2, [r3, #0]

      /* Invoke repetition event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RepetitionEventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_RepetitionEventCallback(hhrtim, TimerIdx);
 8005968:	6839      	ldr	r1, [r7, #0]
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f7ff f899 	bl	8004aa2 <HAL_HRTIM_RepetitionEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer registers update event */
  if(__HAL_HRTIM_TIMER_GET_FLAG(hhrtim, TimerIdx, HRTIM_TIM_FLAG_UPD) != (uint32_t)RESET)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681a      	ldr	r2, [r3, #0]
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	3301      	adds	r3, #1
 8005978:	01db      	lsls	r3, r3, #7
 800597a:	4413      	add	r3, r2
 800597c:	3304      	adds	r3, #4
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005984:	2b40      	cmp	r3, #64	; 0x40
 8005986:	d101      	bne.n	800598c <HRTIM_Timer_ISR+0x1b6>
 8005988:	2301      	movs	r3, #1
 800598a:	e000      	b.n	800598e <HRTIM_Timer_ISR+0x1b8>
 800598c:	2300      	movs	r3, #0
 800598e:	2b00      	cmp	r3, #0
 8005990:	d016      	beq.n	80059c0 <HRTIM_Timer_ISR+0x1ea>
  {
    if(__HAL_HRTIM_TIMER_GET_ITSTATUS(hhrtim, TimerIdx, HRTIM_TIM_IT_UPD) != RESET)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681a      	ldr	r2, [r3, #0]
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	01db      	lsls	r3, r3, #7
 800599a:	4413      	add	r3, r2
 800599c:	338c      	adds	r3, #140	; 0x8c
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059a4:	2b40      	cmp	r3, #64	; 0x40
 80059a6:	d10b      	bne.n	80059c0 <HRTIM_Timer_ISR+0x1ea>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_UPD);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	01db      	lsls	r3, r3, #7
 80059b0:	4413      	add	r3, r2
 80059b2:	3388      	adds	r3, #136	; 0x88
 80059b4:	2240      	movs	r2, #64	; 0x40
 80059b6:	601a      	str	r2, [r3, #0]

      /* Invoke registers update event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RegistersUpdateCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_RegistersUpdateCallback(hhrtim, TimerIdx);
 80059b8:	6839      	ldr	r1, [r7, #0]
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f7ff f866 	bl	8004a8c <HAL_HRTIM_RegistersUpdateCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer capture 1 event */
  if(__HAL_HRTIM_TIMER_GET_FLAG(hhrtim, TimerIdx, HRTIM_TIM_FLAG_CPT1) != (uint32_t)RESET)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681a      	ldr	r2, [r3, #0]
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	3301      	adds	r3, #1
 80059c8:	01db      	lsls	r3, r3, #7
 80059ca:	4413      	add	r3, r2
 80059cc:	3304      	adds	r3, #4
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059d4:	2b80      	cmp	r3, #128	; 0x80
 80059d6:	d101      	bne.n	80059dc <HRTIM_Timer_ISR+0x206>
 80059d8:	2301      	movs	r3, #1
 80059da:	e000      	b.n	80059de <HRTIM_Timer_ISR+0x208>
 80059dc:	2300      	movs	r3, #0
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d016      	beq.n	8005a10 <HRTIM_Timer_ISR+0x23a>
  {
    if(__HAL_HRTIM_TIMER_GET_ITSTATUS(hhrtim, TimerIdx, HRTIM_TIM_IT_CPT1) != RESET)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681a      	ldr	r2, [r3, #0]
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	01db      	lsls	r3, r3, #7
 80059ea:	4413      	add	r3, r2
 80059ec:	338c      	adds	r3, #140	; 0x8c
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059f4:	2b80      	cmp	r3, #128	; 0x80
 80059f6:	d10b      	bne.n	8005a10 <HRTIM_Timer_ISR+0x23a>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CPT1);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	01db      	lsls	r3, r3, #7
 8005a00:	4413      	add	r3, r2
 8005a02:	3388      	adds	r3, #136	; 0x88
 8005a04:	2280      	movs	r2, #128	; 0x80
 8005a06:	601a      	str	r2, [r3, #0]

      /* Invoke capture 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Capture1EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Capture1EventCallback(hhrtim, TimerIdx);
 8005a08:	6839      	ldr	r1, [r7, #0]
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f7ff f880 	bl	8004b10 <HAL_HRTIM_Capture1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer capture 2 event */
  if(__HAL_HRTIM_TIMER_GET_FLAG(hhrtim, TimerIdx, HRTIM_TIM_FLAG_CPT2) != (uint32_t)RESET)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681a      	ldr	r2, [r3, #0]
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	3301      	adds	r3, #1
 8005a18:	01db      	lsls	r3, r3, #7
 8005a1a:	4413      	add	r3, r2
 8005a1c:	3304      	adds	r3, #4
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a28:	d101      	bne.n	8005a2e <HRTIM_Timer_ISR+0x258>
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	e000      	b.n	8005a30 <HRTIM_Timer_ISR+0x25a>
 8005a2e:	2300      	movs	r3, #0
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d018      	beq.n	8005a66 <HRTIM_Timer_ISR+0x290>
  {
    if(__HAL_HRTIM_TIMER_GET_ITSTATUS(hhrtim, TimerIdx, HRTIM_TIM_IT_CPT2) != RESET)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681a      	ldr	r2, [r3, #0]
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	01db      	lsls	r3, r3, #7
 8005a3c:	4413      	add	r3, r2
 8005a3e:	338c      	adds	r3, #140	; 0x8c
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a4a:	d10c      	bne.n	8005a66 <HRTIM_Timer_ISR+0x290>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CPT2);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681a      	ldr	r2, [r3, #0]
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	01db      	lsls	r3, r3, #7
 8005a54:	4413      	add	r3, r2
 8005a56:	3388      	adds	r3, #136	; 0x88
 8005a58:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a5c:	601a      	str	r2, [r3, #0]

      /* Invoke capture 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Capture2EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Capture2EventCallback(hhrtim, TimerIdx);
 8005a5e:	6839      	ldr	r1, [r7, #0]
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f7ff f860 	bl	8004b26 <HAL_HRTIM_Capture2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 1 set event */
  if(__HAL_HRTIM_TIMER_GET_FLAG(hhrtim, TimerIdx, HRTIM_TIM_FLAG_SET1) != (uint32_t)RESET)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	3301      	adds	r3, #1
 8005a6e:	01db      	lsls	r3, r3, #7
 8005a70:	4413      	add	r3, r2
 8005a72:	3304      	adds	r3, #4
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a7e:	d101      	bne.n	8005a84 <HRTIM_Timer_ISR+0x2ae>
 8005a80:	2301      	movs	r3, #1
 8005a82:	e000      	b.n	8005a86 <HRTIM_Timer_ISR+0x2b0>
 8005a84:	2300      	movs	r3, #0
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d018      	beq.n	8005abc <HRTIM_Timer_ISR+0x2e6>
  {
    if(__HAL_HRTIM_TIMER_GET_ITSTATUS(hhrtim, TimerIdx, HRTIM_TIM_IT_SET1) != RESET)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681a      	ldr	r2, [r3, #0]
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	01db      	lsls	r3, r3, #7
 8005a92:	4413      	add	r3, r2
 8005a94:	338c      	adds	r3, #140	; 0x8c
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005aa0:	d10c      	bne.n	8005abc <HRTIM_Timer_ISR+0x2e6>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_SET1);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681a      	ldr	r2, [r3, #0]
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	01db      	lsls	r3, r3, #7
 8005aaa:	4413      	add	r3, r2
 8005aac:	3388      	adds	r3, #136	; 0x88
 8005aae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ab2:	601a      	str	r2, [r3, #0]

      /* Invoke output 1 set event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output1SetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output1SetCallback(hhrtim, TimerIdx);
 8005ab4:	6839      	ldr	r1, [r7, #0]
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f7ff f856 	bl	8004b68 <HAL_HRTIM_Output1SetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 1 reset event */
  if(__HAL_HRTIM_TIMER_GET_FLAG(hhrtim, TimerIdx, HRTIM_TIM_FLAG_RST1) != (uint32_t)RESET)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681a      	ldr	r2, [r3, #0]
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	3301      	adds	r3, #1
 8005ac4:	01db      	lsls	r3, r3, #7
 8005ac6:	4413      	add	r3, r2
 8005ac8:	3304      	adds	r3, #4
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ad0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ad4:	d101      	bne.n	8005ada <HRTIM_Timer_ISR+0x304>
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	e000      	b.n	8005adc <HRTIM_Timer_ISR+0x306>
 8005ada:	2300      	movs	r3, #0
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d018      	beq.n	8005b12 <HRTIM_Timer_ISR+0x33c>
  {
    if(__HAL_HRTIM_TIMER_GET_ITSTATUS(hhrtim, TimerIdx, HRTIM_TIM_IT_RST1) != RESET)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681a      	ldr	r2, [r3, #0]
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	01db      	lsls	r3, r3, #7
 8005ae8:	4413      	add	r3, r2
 8005aea:	338c      	adds	r3, #140	; 0x8c
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005af2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005af6:	d10c      	bne.n	8005b12 <HRTIM_Timer_ISR+0x33c>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST1);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681a      	ldr	r2, [r3, #0]
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	01db      	lsls	r3, r3, #7
 8005b00:	4413      	add	r3, r2
 8005b02:	3388      	adds	r3, #136	; 0x88
 8005b04:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005b08:	601a      	str	r2, [r3, #0]

      /* Invoke output 1 reset event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output1ResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output1ResetCallback(hhrtim, TimerIdx);
 8005b0a:	6839      	ldr	r1, [r7, #0]
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f7ff f836 	bl	8004b7e <HAL_HRTIM_Output1ResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 2 set event */
  if(__HAL_HRTIM_TIMER_GET_FLAG(hhrtim, TimerIdx, HRTIM_TIM_FLAG_SET2) != (uint32_t)RESET)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681a      	ldr	r2, [r3, #0]
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	3301      	adds	r3, #1
 8005b1a:	01db      	lsls	r3, r3, #7
 8005b1c:	4413      	add	r3, r2
 8005b1e:	3304      	adds	r3, #4
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b2a:	d101      	bne.n	8005b30 <HRTIM_Timer_ISR+0x35a>
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	e000      	b.n	8005b32 <HRTIM_Timer_ISR+0x35c>
 8005b30:	2300      	movs	r3, #0
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d018      	beq.n	8005b68 <HRTIM_Timer_ISR+0x392>
  {
    if(__HAL_HRTIM_TIMER_GET_ITSTATUS(hhrtim, TimerIdx, HRTIM_TIM_IT_SET2) != RESET)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681a      	ldr	r2, [r3, #0]
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	01db      	lsls	r3, r3, #7
 8005b3e:	4413      	add	r3, r2
 8005b40:	338c      	adds	r3, #140	; 0x8c
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b4c:	d10c      	bne.n	8005b68 <HRTIM_Timer_ISR+0x392>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_SET2);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681a      	ldr	r2, [r3, #0]
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	01db      	lsls	r3, r3, #7
 8005b56:	4413      	add	r3, r2
 8005b58:	3388      	adds	r3, #136	; 0x88
 8005b5a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b5e:	601a      	str	r2, [r3, #0]

      /* Invoke output 2 set event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output2SetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output2SetCallback(hhrtim, TimerIdx);
 8005b60:	6839      	ldr	r1, [r7, #0]
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f7ff f816 	bl	8004b94 <HAL_HRTIM_Output2SetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 2 reset event */
  if(__HAL_HRTIM_TIMER_GET_FLAG(hhrtim, TimerIdx, HRTIM_TIM_FLAG_RST2) != (uint32_t)RESET)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	3301      	adds	r3, #1
 8005b70:	01db      	lsls	r3, r3, #7
 8005b72:	4413      	add	r3, r2
 8005b74:	3304      	adds	r3, #4
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b80:	d101      	bne.n	8005b86 <HRTIM_Timer_ISR+0x3b0>
 8005b82:	2301      	movs	r3, #1
 8005b84:	e000      	b.n	8005b88 <HRTIM_Timer_ISR+0x3b2>
 8005b86:	2300      	movs	r3, #0
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d018      	beq.n	8005bbe <HRTIM_Timer_ISR+0x3e8>
  {
    if(__HAL_HRTIM_TIMER_GET_ITSTATUS(hhrtim, TimerIdx, HRTIM_TIM_IT_RST2) != RESET)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681a      	ldr	r2, [r3, #0]
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	01db      	lsls	r3, r3, #7
 8005b94:	4413      	add	r3, r2
 8005b96:	338c      	adds	r3, #140	; 0x8c
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ba2:	d10c      	bne.n	8005bbe <HRTIM_Timer_ISR+0x3e8>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST2);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681a      	ldr	r2, [r3, #0]
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	01db      	lsls	r3, r3, #7
 8005bac:	4413      	add	r3, r2
 8005bae:	3388      	adds	r3, #136	; 0x88
 8005bb0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005bb4:	601a      	str	r2, [r3, #0]

      /* Invoke output 2 reset event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output2ResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output2ResetCallback(hhrtim, TimerIdx);
 8005bb6:	6839      	ldr	r1, [r7, #0]
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f7fe fff6 	bl	8004baa <HAL_HRTIM_Output2ResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer reset event */
  if(__HAL_HRTIM_TIMER_GET_FLAG(hhrtim, TimerIdx, HRTIM_TIM_FLAG_RST) != (uint32_t)RESET)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681a      	ldr	r2, [r3, #0]
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	3301      	adds	r3, #1
 8005bc6:	01db      	lsls	r3, r3, #7
 8005bc8:	4413      	add	r3, r2
 8005bca:	3304      	adds	r3, #4
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005bd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bd6:	d101      	bne.n	8005bdc <HRTIM_Timer_ISR+0x406>
 8005bd8:	2301      	movs	r3, #1
 8005bda:	e000      	b.n	8005bde <HRTIM_Timer_ISR+0x408>
 8005bdc:	2300      	movs	r3, #0
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d018      	beq.n	8005c14 <HRTIM_Timer_ISR+0x43e>
  {
    if(__HAL_HRTIM_TIMER_GET_ITSTATUS(hhrtim, TimerIdx, HRTIM_TIM_IT_RST) != RESET)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681a      	ldr	r2, [r3, #0]
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	01db      	lsls	r3, r3, #7
 8005bea:	4413      	add	r3, r2
 8005bec:	338c      	adds	r3, #140	; 0x8c
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005bf4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bf8:	d10c      	bne.n	8005c14 <HRTIM_Timer_ISR+0x43e>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681a      	ldr	r2, [r3, #0]
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	01db      	lsls	r3, r3, #7
 8005c02:	4413      	add	r3, r2
 8005c04:	3388      	adds	r3, #136	; 0x88
 8005c06:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005c0a:	601a      	str	r2, [r3, #0]

      /* Invoke timer reset callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->CounterResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_CounterResetCallback(hhrtim, TimerIdx);
 8005c0c:	6839      	ldr	r1, [r7, #0]
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f7fe ff9f 	bl	8004b52 <HAL_HRTIM_CounterResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Delayed protection event */
  if(__HAL_HRTIM_TIMER_GET_FLAG(hhrtim, TimerIdx, HRTIM_TIM_FLAG_DLYPRT) != (uint32_t)RESET)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681a      	ldr	r2, [r3, #0]
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	3301      	adds	r3, #1
 8005c1c:	01db      	lsls	r3, r3, #7
 8005c1e:	4413      	add	r3, r2
 8005c20:	3304      	adds	r3, #4
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c28:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c2c:	d101      	bne.n	8005c32 <HRTIM_Timer_ISR+0x45c>
 8005c2e:	2301      	movs	r3, #1
 8005c30:	e000      	b.n	8005c34 <HRTIM_Timer_ISR+0x45e>
 8005c32:	2300      	movs	r3, #0
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d018      	beq.n	8005c6a <HRTIM_Timer_ISR+0x494>
  {
    if(__HAL_HRTIM_TIMER_GET_ITSTATUS(hhrtim, TimerIdx, HRTIM_TIM_IT_DLYPRT) != RESET)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681a      	ldr	r2, [r3, #0]
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	01db      	lsls	r3, r3, #7
 8005c40:	4413      	add	r3, r2
 8005c42:	338c      	adds	r3, #140	; 0x8c
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c4a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c4e:	d10c      	bne.n	8005c6a <HRTIM_Timer_ISR+0x494>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_DLYPRT);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681a      	ldr	r2, [r3, #0]
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	01db      	lsls	r3, r3, #7
 8005c58:	4413      	add	r3, r2
 8005c5a:	3388      	adds	r3, #136	; 0x88
 8005c5c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005c60:	601a      	str	r2, [r3, #0]

      /* Invoke delayed protection callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->DelayedProtectionCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_DelayedProtectionCallback(hhrtim, TimerIdx);
 8005c62:	6839      	ldr	r1, [r7, #0]
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f7fe ff69 	bl	8004b3c <HAL_HRTIM_DelayedProtectionCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c6a:	bf00      	nop
 8005c6c:	3708      	adds	r7, #8
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}
	...

08005c74 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b085      	sub	sp, #20
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d141      	bne.n	8005d06 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005c82:	4b4b      	ldr	r3, [pc, #300]	; (8005db0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005c8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c8e:	d131      	bne.n	8005cf4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005c90:	4b47      	ldr	r3, [pc, #284]	; (8005db0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c96:	4a46      	ldr	r2, [pc, #280]	; (8005db0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c9c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005ca0:	4b43      	ldr	r3, [pc, #268]	; (8005db0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005ca8:	4a41      	ldr	r2, [pc, #260]	; (8005db0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005caa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005cae:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005cb0:	4b40      	ldr	r3, [pc, #256]	; (8005db4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	2232      	movs	r2, #50	; 0x32
 8005cb6:	fb02 f303 	mul.w	r3, r2, r3
 8005cba:	4a3f      	ldr	r2, [pc, #252]	; (8005db8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005cbc:	fba2 2303 	umull	r2, r3, r2, r3
 8005cc0:	0c9b      	lsrs	r3, r3, #18
 8005cc2:	3301      	adds	r3, #1
 8005cc4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005cc6:	e002      	b.n	8005cce <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	3b01      	subs	r3, #1
 8005ccc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005cce:	4b38      	ldr	r3, [pc, #224]	; (8005db0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cd0:	695b      	ldr	r3, [r3, #20]
 8005cd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cda:	d102      	bne.n	8005ce2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d1f2      	bne.n	8005cc8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005ce2:	4b33      	ldr	r3, [pc, #204]	; (8005db0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ce4:	695b      	ldr	r3, [r3, #20]
 8005ce6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cee:	d158      	bne.n	8005da2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005cf0:	2303      	movs	r3, #3
 8005cf2:	e057      	b.n	8005da4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005cf4:	4b2e      	ldr	r3, [pc, #184]	; (8005db0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cf6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005cfa:	4a2d      	ldr	r2, [pc, #180]	; (8005db0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cfc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d00:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005d04:	e04d      	b.n	8005da2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d0c:	d141      	bne.n	8005d92 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005d0e:	4b28      	ldr	r3, [pc, #160]	; (8005db0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005d16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d1a:	d131      	bne.n	8005d80 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005d1c:	4b24      	ldr	r3, [pc, #144]	; (8005db0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d22:	4a23      	ldr	r2, [pc, #140]	; (8005db0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d28:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005d2c:	4b20      	ldr	r3, [pc, #128]	; (8005db0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005d34:	4a1e      	ldr	r2, [pc, #120]	; (8005db0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005d3a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005d3c:	4b1d      	ldr	r3, [pc, #116]	; (8005db4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	2232      	movs	r2, #50	; 0x32
 8005d42:	fb02 f303 	mul.w	r3, r2, r3
 8005d46:	4a1c      	ldr	r2, [pc, #112]	; (8005db8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005d48:	fba2 2303 	umull	r2, r3, r2, r3
 8005d4c:	0c9b      	lsrs	r3, r3, #18
 8005d4e:	3301      	adds	r3, #1
 8005d50:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005d52:	e002      	b.n	8005d5a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	3b01      	subs	r3, #1
 8005d58:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005d5a:	4b15      	ldr	r3, [pc, #84]	; (8005db0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d5c:	695b      	ldr	r3, [r3, #20]
 8005d5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d66:	d102      	bne.n	8005d6e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d1f2      	bne.n	8005d54 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005d6e:	4b10      	ldr	r3, [pc, #64]	; (8005db0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d70:	695b      	ldr	r3, [r3, #20]
 8005d72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d7a:	d112      	bne.n	8005da2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005d7c:	2303      	movs	r3, #3
 8005d7e:	e011      	b.n	8005da4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005d80:	4b0b      	ldr	r3, [pc, #44]	; (8005db0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d86:	4a0a      	ldr	r2, [pc, #40]	; (8005db0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d8c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005d90:	e007      	b.n	8005da2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005d92:	4b07      	ldr	r3, [pc, #28]	; (8005db0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005d9a:	4a05      	ldr	r2, [pc, #20]	; (8005db0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d9c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005da0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005da2:	2300      	movs	r3, #0
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	3714      	adds	r7, #20
 8005da8:	46bd      	mov	sp, r7
 8005daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dae:	4770      	bx	lr
 8005db0:	40007000 	.word	0x40007000
 8005db4:	20000000 	.word	0x20000000
 8005db8:	431bde83 	.word	0x431bde83

08005dbc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005dc0:	4b05      	ldr	r3, [pc, #20]	; (8005dd8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005dc2:	689b      	ldr	r3, [r3, #8]
 8005dc4:	4a04      	ldr	r2, [pc, #16]	; (8005dd8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005dc6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005dca:	6093      	str	r3, [r2, #8]
}
 8005dcc:	bf00      	nop
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd4:	4770      	bx	lr
 8005dd6:	bf00      	nop
 8005dd8:	40007000 	.word	0x40007000

08005ddc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b088      	sub	sp, #32
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d101      	bne.n	8005dee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005dea:	2301      	movs	r3, #1
 8005dec:	e308      	b.n	8006400 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f003 0301 	and.w	r3, r3, #1
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d075      	beq.n	8005ee6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005dfa:	4ba3      	ldr	r3, [pc, #652]	; (8006088 <HAL_RCC_OscConfig+0x2ac>)
 8005dfc:	689b      	ldr	r3, [r3, #8]
 8005dfe:	f003 030c 	and.w	r3, r3, #12
 8005e02:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005e04:	4ba0      	ldr	r3, [pc, #640]	; (8006088 <HAL_RCC_OscConfig+0x2ac>)
 8005e06:	68db      	ldr	r3, [r3, #12]
 8005e08:	f003 0303 	and.w	r3, r3, #3
 8005e0c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005e0e:	69bb      	ldr	r3, [r7, #24]
 8005e10:	2b0c      	cmp	r3, #12
 8005e12:	d102      	bne.n	8005e1a <HAL_RCC_OscConfig+0x3e>
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	2b03      	cmp	r3, #3
 8005e18:	d002      	beq.n	8005e20 <HAL_RCC_OscConfig+0x44>
 8005e1a:	69bb      	ldr	r3, [r7, #24]
 8005e1c:	2b08      	cmp	r3, #8
 8005e1e:	d10b      	bne.n	8005e38 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e20:	4b99      	ldr	r3, [pc, #612]	; (8006088 <HAL_RCC_OscConfig+0x2ac>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d05b      	beq.n	8005ee4 <HAL_RCC_OscConfig+0x108>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d157      	bne.n	8005ee4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005e34:	2301      	movs	r3, #1
 8005e36:	e2e3      	b.n	8006400 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e40:	d106      	bne.n	8005e50 <HAL_RCC_OscConfig+0x74>
 8005e42:	4b91      	ldr	r3, [pc, #580]	; (8006088 <HAL_RCC_OscConfig+0x2ac>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a90      	ldr	r2, [pc, #576]	; (8006088 <HAL_RCC_OscConfig+0x2ac>)
 8005e48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e4c:	6013      	str	r3, [r2, #0]
 8005e4e:	e01d      	b.n	8005e8c <HAL_RCC_OscConfig+0xb0>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005e58:	d10c      	bne.n	8005e74 <HAL_RCC_OscConfig+0x98>
 8005e5a:	4b8b      	ldr	r3, [pc, #556]	; (8006088 <HAL_RCC_OscConfig+0x2ac>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a8a      	ldr	r2, [pc, #552]	; (8006088 <HAL_RCC_OscConfig+0x2ac>)
 8005e60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e64:	6013      	str	r3, [r2, #0]
 8005e66:	4b88      	ldr	r3, [pc, #544]	; (8006088 <HAL_RCC_OscConfig+0x2ac>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a87      	ldr	r2, [pc, #540]	; (8006088 <HAL_RCC_OscConfig+0x2ac>)
 8005e6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e70:	6013      	str	r3, [r2, #0]
 8005e72:	e00b      	b.n	8005e8c <HAL_RCC_OscConfig+0xb0>
 8005e74:	4b84      	ldr	r3, [pc, #528]	; (8006088 <HAL_RCC_OscConfig+0x2ac>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a83      	ldr	r2, [pc, #524]	; (8006088 <HAL_RCC_OscConfig+0x2ac>)
 8005e7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e7e:	6013      	str	r3, [r2, #0]
 8005e80:	4b81      	ldr	r3, [pc, #516]	; (8006088 <HAL_RCC_OscConfig+0x2ac>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a80      	ldr	r2, [pc, #512]	; (8006088 <HAL_RCC_OscConfig+0x2ac>)
 8005e86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d013      	beq.n	8005ebc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e94:	f7fb f946 	bl	8001124 <HAL_GetTick>
 8005e98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005e9a:	e008      	b.n	8005eae <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e9c:	f7fb f942 	bl	8001124 <HAL_GetTick>
 8005ea0:	4602      	mov	r2, r0
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	1ad3      	subs	r3, r2, r3
 8005ea6:	2b64      	cmp	r3, #100	; 0x64
 8005ea8:	d901      	bls.n	8005eae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005eaa:	2303      	movs	r3, #3
 8005eac:	e2a8      	b.n	8006400 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005eae:	4b76      	ldr	r3, [pc, #472]	; (8006088 <HAL_RCC_OscConfig+0x2ac>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d0f0      	beq.n	8005e9c <HAL_RCC_OscConfig+0xc0>
 8005eba:	e014      	b.n	8005ee6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ebc:	f7fb f932 	bl	8001124 <HAL_GetTick>
 8005ec0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005ec2:	e008      	b.n	8005ed6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ec4:	f7fb f92e 	bl	8001124 <HAL_GetTick>
 8005ec8:	4602      	mov	r2, r0
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	1ad3      	subs	r3, r2, r3
 8005ece:	2b64      	cmp	r3, #100	; 0x64
 8005ed0:	d901      	bls.n	8005ed6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005ed2:	2303      	movs	r3, #3
 8005ed4:	e294      	b.n	8006400 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005ed6:	4b6c      	ldr	r3, [pc, #432]	; (8006088 <HAL_RCC_OscConfig+0x2ac>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d1f0      	bne.n	8005ec4 <HAL_RCC_OscConfig+0xe8>
 8005ee2:	e000      	b.n	8005ee6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ee4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f003 0302 	and.w	r3, r3, #2
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d075      	beq.n	8005fde <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ef2:	4b65      	ldr	r3, [pc, #404]	; (8006088 <HAL_RCC_OscConfig+0x2ac>)
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	f003 030c 	and.w	r3, r3, #12
 8005efa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005efc:	4b62      	ldr	r3, [pc, #392]	; (8006088 <HAL_RCC_OscConfig+0x2ac>)
 8005efe:	68db      	ldr	r3, [r3, #12]
 8005f00:	f003 0303 	and.w	r3, r3, #3
 8005f04:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005f06:	69bb      	ldr	r3, [r7, #24]
 8005f08:	2b0c      	cmp	r3, #12
 8005f0a:	d102      	bne.n	8005f12 <HAL_RCC_OscConfig+0x136>
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	2b02      	cmp	r3, #2
 8005f10:	d002      	beq.n	8005f18 <HAL_RCC_OscConfig+0x13c>
 8005f12:	69bb      	ldr	r3, [r7, #24]
 8005f14:	2b04      	cmp	r3, #4
 8005f16:	d11f      	bne.n	8005f58 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f18:	4b5b      	ldr	r3, [pc, #364]	; (8006088 <HAL_RCC_OscConfig+0x2ac>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d005      	beq.n	8005f30 <HAL_RCC_OscConfig+0x154>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	68db      	ldr	r3, [r3, #12]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d101      	bne.n	8005f30 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	e267      	b.n	8006400 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f30:	4b55      	ldr	r3, [pc, #340]	; (8006088 <HAL_RCC_OscConfig+0x2ac>)
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	691b      	ldr	r3, [r3, #16]
 8005f3c:	061b      	lsls	r3, r3, #24
 8005f3e:	4952      	ldr	r1, [pc, #328]	; (8006088 <HAL_RCC_OscConfig+0x2ac>)
 8005f40:	4313      	orrs	r3, r2
 8005f42:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005f44:	4b51      	ldr	r3, [pc, #324]	; (800608c <HAL_RCC_OscConfig+0x2b0>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4618      	mov	r0, r3
 8005f4a:	f7fb f89f 	bl	800108c <HAL_InitTick>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d043      	beq.n	8005fdc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005f54:	2301      	movs	r3, #1
 8005f56:	e253      	b.n	8006400 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	68db      	ldr	r3, [r3, #12]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d023      	beq.n	8005fa8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f60:	4b49      	ldr	r3, [pc, #292]	; (8006088 <HAL_RCC_OscConfig+0x2ac>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a48      	ldr	r2, [pc, #288]	; (8006088 <HAL_RCC_OscConfig+0x2ac>)
 8005f66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f6c:	f7fb f8da 	bl	8001124 <HAL_GetTick>
 8005f70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005f72:	e008      	b.n	8005f86 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f74:	f7fb f8d6 	bl	8001124 <HAL_GetTick>
 8005f78:	4602      	mov	r2, r0
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	1ad3      	subs	r3, r2, r3
 8005f7e:	2b02      	cmp	r3, #2
 8005f80:	d901      	bls.n	8005f86 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005f82:	2303      	movs	r3, #3
 8005f84:	e23c      	b.n	8006400 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005f86:	4b40      	ldr	r3, [pc, #256]	; (8006088 <HAL_RCC_OscConfig+0x2ac>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d0f0      	beq.n	8005f74 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f92:	4b3d      	ldr	r3, [pc, #244]	; (8006088 <HAL_RCC_OscConfig+0x2ac>)
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	691b      	ldr	r3, [r3, #16]
 8005f9e:	061b      	lsls	r3, r3, #24
 8005fa0:	4939      	ldr	r1, [pc, #228]	; (8006088 <HAL_RCC_OscConfig+0x2ac>)
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	604b      	str	r3, [r1, #4]
 8005fa6:	e01a      	b.n	8005fde <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005fa8:	4b37      	ldr	r3, [pc, #220]	; (8006088 <HAL_RCC_OscConfig+0x2ac>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a36      	ldr	r2, [pc, #216]	; (8006088 <HAL_RCC_OscConfig+0x2ac>)
 8005fae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005fb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fb4:	f7fb f8b6 	bl	8001124 <HAL_GetTick>
 8005fb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005fba:	e008      	b.n	8005fce <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005fbc:	f7fb f8b2 	bl	8001124 <HAL_GetTick>
 8005fc0:	4602      	mov	r2, r0
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	1ad3      	subs	r3, r2, r3
 8005fc6:	2b02      	cmp	r3, #2
 8005fc8:	d901      	bls.n	8005fce <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005fca:	2303      	movs	r3, #3
 8005fcc:	e218      	b.n	8006400 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005fce:	4b2e      	ldr	r3, [pc, #184]	; (8006088 <HAL_RCC_OscConfig+0x2ac>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d1f0      	bne.n	8005fbc <HAL_RCC_OscConfig+0x1e0>
 8005fda:	e000      	b.n	8005fde <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005fdc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f003 0308 	and.w	r3, r3, #8
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d03c      	beq.n	8006064 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	695b      	ldr	r3, [r3, #20]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d01c      	beq.n	800602c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ff2:	4b25      	ldr	r3, [pc, #148]	; (8006088 <HAL_RCC_OscConfig+0x2ac>)
 8005ff4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ff8:	4a23      	ldr	r2, [pc, #140]	; (8006088 <HAL_RCC_OscConfig+0x2ac>)
 8005ffa:	f043 0301 	orr.w	r3, r3, #1
 8005ffe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006002:	f7fb f88f 	bl	8001124 <HAL_GetTick>
 8006006:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006008:	e008      	b.n	800601c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800600a:	f7fb f88b 	bl	8001124 <HAL_GetTick>
 800600e:	4602      	mov	r2, r0
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	1ad3      	subs	r3, r2, r3
 8006014:	2b02      	cmp	r3, #2
 8006016:	d901      	bls.n	800601c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006018:	2303      	movs	r3, #3
 800601a:	e1f1      	b.n	8006400 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800601c:	4b1a      	ldr	r3, [pc, #104]	; (8006088 <HAL_RCC_OscConfig+0x2ac>)
 800601e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006022:	f003 0302 	and.w	r3, r3, #2
 8006026:	2b00      	cmp	r3, #0
 8006028:	d0ef      	beq.n	800600a <HAL_RCC_OscConfig+0x22e>
 800602a:	e01b      	b.n	8006064 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800602c:	4b16      	ldr	r3, [pc, #88]	; (8006088 <HAL_RCC_OscConfig+0x2ac>)
 800602e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006032:	4a15      	ldr	r2, [pc, #84]	; (8006088 <HAL_RCC_OscConfig+0x2ac>)
 8006034:	f023 0301 	bic.w	r3, r3, #1
 8006038:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800603c:	f7fb f872 	bl	8001124 <HAL_GetTick>
 8006040:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006042:	e008      	b.n	8006056 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006044:	f7fb f86e 	bl	8001124 <HAL_GetTick>
 8006048:	4602      	mov	r2, r0
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	1ad3      	subs	r3, r2, r3
 800604e:	2b02      	cmp	r3, #2
 8006050:	d901      	bls.n	8006056 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8006052:	2303      	movs	r3, #3
 8006054:	e1d4      	b.n	8006400 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006056:	4b0c      	ldr	r3, [pc, #48]	; (8006088 <HAL_RCC_OscConfig+0x2ac>)
 8006058:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800605c:	f003 0302 	and.w	r3, r3, #2
 8006060:	2b00      	cmp	r3, #0
 8006062:	d1ef      	bne.n	8006044 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f003 0304 	and.w	r3, r3, #4
 800606c:	2b00      	cmp	r3, #0
 800606e:	f000 80ab 	beq.w	80061c8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006072:	2300      	movs	r3, #0
 8006074:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006076:	4b04      	ldr	r3, [pc, #16]	; (8006088 <HAL_RCC_OscConfig+0x2ac>)
 8006078:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800607a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800607e:	2b00      	cmp	r3, #0
 8006080:	d106      	bne.n	8006090 <HAL_RCC_OscConfig+0x2b4>
 8006082:	2301      	movs	r3, #1
 8006084:	e005      	b.n	8006092 <HAL_RCC_OscConfig+0x2b6>
 8006086:	bf00      	nop
 8006088:	40021000 	.word	0x40021000
 800608c:	20000004 	.word	0x20000004
 8006090:	2300      	movs	r3, #0
 8006092:	2b00      	cmp	r3, #0
 8006094:	d00d      	beq.n	80060b2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006096:	4baf      	ldr	r3, [pc, #700]	; (8006354 <HAL_RCC_OscConfig+0x578>)
 8006098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800609a:	4aae      	ldr	r2, [pc, #696]	; (8006354 <HAL_RCC_OscConfig+0x578>)
 800609c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060a0:	6593      	str	r3, [r2, #88]	; 0x58
 80060a2:	4bac      	ldr	r3, [pc, #688]	; (8006354 <HAL_RCC_OscConfig+0x578>)
 80060a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060aa:	60fb      	str	r3, [r7, #12]
 80060ac:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80060ae:	2301      	movs	r3, #1
 80060b0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80060b2:	4ba9      	ldr	r3, [pc, #676]	; (8006358 <HAL_RCC_OscConfig+0x57c>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d118      	bne.n	80060f0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80060be:	4ba6      	ldr	r3, [pc, #664]	; (8006358 <HAL_RCC_OscConfig+0x57c>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4aa5      	ldr	r2, [pc, #660]	; (8006358 <HAL_RCC_OscConfig+0x57c>)
 80060c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80060ca:	f7fb f82b 	bl	8001124 <HAL_GetTick>
 80060ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80060d0:	e008      	b.n	80060e4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060d2:	f7fb f827 	bl	8001124 <HAL_GetTick>
 80060d6:	4602      	mov	r2, r0
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	1ad3      	subs	r3, r2, r3
 80060dc:	2b02      	cmp	r3, #2
 80060de:	d901      	bls.n	80060e4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80060e0:	2303      	movs	r3, #3
 80060e2:	e18d      	b.n	8006400 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80060e4:	4b9c      	ldr	r3, [pc, #624]	; (8006358 <HAL_RCC_OscConfig+0x57c>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d0f0      	beq.n	80060d2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	689b      	ldr	r3, [r3, #8]
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	d108      	bne.n	800610a <HAL_RCC_OscConfig+0x32e>
 80060f8:	4b96      	ldr	r3, [pc, #600]	; (8006354 <HAL_RCC_OscConfig+0x578>)
 80060fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060fe:	4a95      	ldr	r2, [pc, #596]	; (8006354 <HAL_RCC_OscConfig+0x578>)
 8006100:	f043 0301 	orr.w	r3, r3, #1
 8006104:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006108:	e024      	b.n	8006154 <HAL_RCC_OscConfig+0x378>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	689b      	ldr	r3, [r3, #8]
 800610e:	2b05      	cmp	r3, #5
 8006110:	d110      	bne.n	8006134 <HAL_RCC_OscConfig+0x358>
 8006112:	4b90      	ldr	r3, [pc, #576]	; (8006354 <HAL_RCC_OscConfig+0x578>)
 8006114:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006118:	4a8e      	ldr	r2, [pc, #568]	; (8006354 <HAL_RCC_OscConfig+0x578>)
 800611a:	f043 0304 	orr.w	r3, r3, #4
 800611e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006122:	4b8c      	ldr	r3, [pc, #560]	; (8006354 <HAL_RCC_OscConfig+0x578>)
 8006124:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006128:	4a8a      	ldr	r2, [pc, #552]	; (8006354 <HAL_RCC_OscConfig+0x578>)
 800612a:	f043 0301 	orr.w	r3, r3, #1
 800612e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006132:	e00f      	b.n	8006154 <HAL_RCC_OscConfig+0x378>
 8006134:	4b87      	ldr	r3, [pc, #540]	; (8006354 <HAL_RCC_OscConfig+0x578>)
 8006136:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800613a:	4a86      	ldr	r2, [pc, #536]	; (8006354 <HAL_RCC_OscConfig+0x578>)
 800613c:	f023 0301 	bic.w	r3, r3, #1
 8006140:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006144:	4b83      	ldr	r3, [pc, #524]	; (8006354 <HAL_RCC_OscConfig+0x578>)
 8006146:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800614a:	4a82      	ldr	r2, [pc, #520]	; (8006354 <HAL_RCC_OscConfig+0x578>)
 800614c:	f023 0304 	bic.w	r3, r3, #4
 8006150:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	689b      	ldr	r3, [r3, #8]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d016      	beq.n	800618a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800615c:	f7fa ffe2 	bl	8001124 <HAL_GetTick>
 8006160:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006162:	e00a      	b.n	800617a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006164:	f7fa ffde 	bl	8001124 <HAL_GetTick>
 8006168:	4602      	mov	r2, r0
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	1ad3      	subs	r3, r2, r3
 800616e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006172:	4293      	cmp	r3, r2
 8006174:	d901      	bls.n	800617a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006176:	2303      	movs	r3, #3
 8006178:	e142      	b.n	8006400 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800617a:	4b76      	ldr	r3, [pc, #472]	; (8006354 <HAL_RCC_OscConfig+0x578>)
 800617c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006180:	f003 0302 	and.w	r3, r3, #2
 8006184:	2b00      	cmp	r3, #0
 8006186:	d0ed      	beq.n	8006164 <HAL_RCC_OscConfig+0x388>
 8006188:	e015      	b.n	80061b6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800618a:	f7fa ffcb 	bl	8001124 <HAL_GetTick>
 800618e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006190:	e00a      	b.n	80061a8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006192:	f7fa ffc7 	bl	8001124 <HAL_GetTick>
 8006196:	4602      	mov	r2, r0
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	1ad3      	subs	r3, r2, r3
 800619c:	f241 3288 	movw	r2, #5000	; 0x1388
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d901      	bls.n	80061a8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80061a4:	2303      	movs	r3, #3
 80061a6:	e12b      	b.n	8006400 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80061a8:	4b6a      	ldr	r3, [pc, #424]	; (8006354 <HAL_RCC_OscConfig+0x578>)
 80061aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061ae:	f003 0302 	and.w	r3, r3, #2
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d1ed      	bne.n	8006192 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80061b6:	7ffb      	ldrb	r3, [r7, #31]
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	d105      	bne.n	80061c8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80061bc:	4b65      	ldr	r3, [pc, #404]	; (8006354 <HAL_RCC_OscConfig+0x578>)
 80061be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061c0:	4a64      	ldr	r2, [pc, #400]	; (8006354 <HAL_RCC_OscConfig+0x578>)
 80061c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80061c6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f003 0320 	and.w	r3, r3, #32
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d03c      	beq.n	800624e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	699b      	ldr	r3, [r3, #24]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d01c      	beq.n	8006216 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80061dc:	4b5d      	ldr	r3, [pc, #372]	; (8006354 <HAL_RCC_OscConfig+0x578>)
 80061de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80061e2:	4a5c      	ldr	r2, [pc, #368]	; (8006354 <HAL_RCC_OscConfig+0x578>)
 80061e4:	f043 0301 	orr.w	r3, r3, #1
 80061e8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061ec:	f7fa ff9a 	bl	8001124 <HAL_GetTick>
 80061f0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80061f2:	e008      	b.n	8006206 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80061f4:	f7fa ff96 	bl	8001124 <HAL_GetTick>
 80061f8:	4602      	mov	r2, r0
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	1ad3      	subs	r3, r2, r3
 80061fe:	2b02      	cmp	r3, #2
 8006200:	d901      	bls.n	8006206 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8006202:	2303      	movs	r3, #3
 8006204:	e0fc      	b.n	8006400 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006206:	4b53      	ldr	r3, [pc, #332]	; (8006354 <HAL_RCC_OscConfig+0x578>)
 8006208:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800620c:	f003 0302 	and.w	r3, r3, #2
 8006210:	2b00      	cmp	r3, #0
 8006212:	d0ef      	beq.n	80061f4 <HAL_RCC_OscConfig+0x418>
 8006214:	e01b      	b.n	800624e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006216:	4b4f      	ldr	r3, [pc, #316]	; (8006354 <HAL_RCC_OscConfig+0x578>)
 8006218:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800621c:	4a4d      	ldr	r2, [pc, #308]	; (8006354 <HAL_RCC_OscConfig+0x578>)
 800621e:	f023 0301 	bic.w	r3, r3, #1
 8006222:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006226:	f7fa ff7d 	bl	8001124 <HAL_GetTick>
 800622a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800622c:	e008      	b.n	8006240 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800622e:	f7fa ff79 	bl	8001124 <HAL_GetTick>
 8006232:	4602      	mov	r2, r0
 8006234:	693b      	ldr	r3, [r7, #16]
 8006236:	1ad3      	subs	r3, r2, r3
 8006238:	2b02      	cmp	r3, #2
 800623a:	d901      	bls.n	8006240 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800623c:	2303      	movs	r3, #3
 800623e:	e0df      	b.n	8006400 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006240:	4b44      	ldr	r3, [pc, #272]	; (8006354 <HAL_RCC_OscConfig+0x578>)
 8006242:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006246:	f003 0302 	and.w	r3, r3, #2
 800624a:	2b00      	cmp	r3, #0
 800624c:	d1ef      	bne.n	800622e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	69db      	ldr	r3, [r3, #28]
 8006252:	2b00      	cmp	r3, #0
 8006254:	f000 80d3 	beq.w	80063fe <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006258:	4b3e      	ldr	r3, [pc, #248]	; (8006354 <HAL_RCC_OscConfig+0x578>)
 800625a:	689b      	ldr	r3, [r3, #8]
 800625c:	f003 030c 	and.w	r3, r3, #12
 8006260:	2b0c      	cmp	r3, #12
 8006262:	f000 808d 	beq.w	8006380 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	69db      	ldr	r3, [r3, #28]
 800626a:	2b02      	cmp	r3, #2
 800626c:	d15a      	bne.n	8006324 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800626e:	4b39      	ldr	r3, [pc, #228]	; (8006354 <HAL_RCC_OscConfig+0x578>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a38      	ldr	r2, [pc, #224]	; (8006354 <HAL_RCC_OscConfig+0x578>)
 8006274:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006278:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800627a:	f7fa ff53 	bl	8001124 <HAL_GetTick>
 800627e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006280:	e008      	b.n	8006294 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006282:	f7fa ff4f 	bl	8001124 <HAL_GetTick>
 8006286:	4602      	mov	r2, r0
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	1ad3      	subs	r3, r2, r3
 800628c:	2b02      	cmp	r3, #2
 800628e:	d901      	bls.n	8006294 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8006290:	2303      	movs	r3, #3
 8006292:	e0b5      	b.n	8006400 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006294:	4b2f      	ldr	r3, [pc, #188]	; (8006354 <HAL_RCC_OscConfig+0x578>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800629c:	2b00      	cmp	r3, #0
 800629e:	d1f0      	bne.n	8006282 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80062a0:	4b2c      	ldr	r3, [pc, #176]	; (8006354 <HAL_RCC_OscConfig+0x578>)
 80062a2:	68da      	ldr	r2, [r3, #12]
 80062a4:	4b2d      	ldr	r3, [pc, #180]	; (800635c <HAL_RCC_OscConfig+0x580>)
 80062a6:	4013      	ands	r3, r2
 80062a8:	687a      	ldr	r2, [r7, #4]
 80062aa:	6a11      	ldr	r1, [r2, #32]
 80062ac:	687a      	ldr	r2, [r7, #4]
 80062ae:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80062b0:	3a01      	subs	r2, #1
 80062b2:	0112      	lsls	r2, r2, #4
 80062b4:	4311      	orrs	r1, r2
 80062b6:	687a      	ldr	r2, [r7, #4]
 80062b8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80062ba:	0212      	lsls	r2, r2, #8
 80062bc:	4311      	orrs	r1, r2
 80062be:	687a      	ldr	r2, [r7, #4]
 80062c0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80062c2:	0852      	lsrs	r2, r2, #1
 80062c4:	3a01      	subs	r2, #1
 80062c6:	0552      	lsls	r2, r2, #21
 80062c8:	4311      	orrs	r1, r2
 80062ca:	687a      	ldr	r2, [r7, #4]
 80062cc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80062ce:	0852      	lsrs	r2, r2, #1
 80062d0:	3a01      	subs	r2, #1
 80062d2:	0652      	lsls	r2, r2, #25
 80062d4:	4311      	orrs	r1, r2
 80062d6:	687a      	ldr	r2, [r7, #4]
 80062d8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80062da:	06d2      	lsls	r2, r2, #27
 80062dc:	430a      	orrs	r2, r1
 80062de:	491d      	ldr	r1, [pc, #116]	; (8006354 <HAL_RCC_OscConfig+0x578>)
 80062e0:	4313      	orrs	r3, r2
 80062e2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80062e4:	4b1b      	ldr	r3, [pc, #108]	; (8006354 <HAL_RCC_OscConfig+0x578>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a1a      	ldr	r2, [pc, #104]	; (8006354 <HAL_RCC_OscConfig+0x578>)
 80062ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80062ee:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80062f0:	4b18      	ldr	r3, [pc, #96]	; (8006354 <HAL_RCC_OscConfig+0x578>)
 80062f2:	68db      	ldr	r3, [r3, #12]
 80062f4:	4a17      	ldr	r2, [pc, #92]	; (8006354 <HAL_RCC_OscConfig+0x578>)
 80062f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80062fa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062fc:	f7fa ff12 	bl	8001124 <HAL_GetTick>
 8006300:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006302:	e008      	b.n	8006316 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006304:	f7fa ff0e 	bl	8001124 <HAL_GetTick>
 8006308:	4602      	mov	r2, r0
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	1ad3      	subs	r3, r2, r3
 800630e:	2b02      	cmp	r3, #2
 8006310:	d901      	bls.n	8006316 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8006312:	2303      	movs	r3, #3
 8006314:	e074      	b.n	8006400 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006316:	4b0f      	ldr	r3, [pc, #60]	; (8006354 <HAL_RCC_OscConfig+0x578>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800631e:	2b00      	cmp	r3, #0
 8006320:	d0f0      	beq.n	8006304 <HAL_RCC_OscConfig+0x528>
 8006322:	e06c      	b.n	80063fe <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006324:	4b0b      	ldr	r3, [pc, #44]	; (8006354 <HAL_RCC_OscConfig+0x578>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a0a      	ldr	r2, [pc, #40]	; (8006354 <HAL_RCC_OscConfig+0x578>)
 800632a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800632e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8006330:	4b08      	ldr	r3, [pc, #32]	; (8006354 <HAL_RCC_OscConfig+0x578>)
 8006332:	68db      	ldr	r3, [r3, #12]
 8006334:	4a07      	ldr	r2, [pc, #28]	; (8006354 <HAL_RCC_OscConfig+0x578>)
 8006336:	f023 0303 	bic.w	r3, r3, #3
 800633a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800633c:	4b05      	ldr	r3, [pc, #20]	; (8006354 <HAL_RCC_OscConfig+0x578>)
 800633e:	68db      	ldr	r3, [r3, #12]
 8006340:	4a04      	ldr	r2, [pc, #16]	; (8006354 <HAL_RCC_OscConfig+0x578>)
 8006342:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8006346:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800634a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800634c:	f7fa feea 	bl	8001124 <HAL_GetTick>
 8006350:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006352:	e00e      	b.n	8006372 <HAL_RCC_OscConfig+0x596>
 8006354:	40021000 	.word	0x40021000
 8006358:	40007000 	.word	0x40007000
 800635c:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006360:	f7fa fee0 	bl	8001124 <HAL_GetTick>
 8006364:	4602      	mov	r2, r0
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	1ad3      	subs	r3, r2, r3
 800636a:	2b02      	cmp	r3, #2
 800636c:	d901      	bls.n	8006372 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800636e:	2303      	movs	r3, #3
 8006370:	e046      	b.n	8006400 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006372:	4b25      	ldr	r3, [pc, #148]	; (8006408 <HAL_RCC_OscConfig+0x62c>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800637a:	2b00      	cmp	r3, #0
 800637c:	d1f0      	bne.n	8006360 <HAL_RCC_OscConfig+0x584>
 800637e:	e03e      	b.n	80063fe <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	69db      	ldr	r3, [r3, #28]
 8006384:	2b01      	cmp	r3, #1
 8006386:	d101      	bne.n	800638c <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8006388:	2301      	movs	r3, #1
 800638a:	e039      	b.n	8006400 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800638c:	4b1e      	ldr	r3, [pc, #120]	; (8006408 <HAL_RCC_OscConfig+0x62c>)
 800638e:	68db      	ldr	r3, [r3, #12]
 8006390:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	f003 0203 	and.w	r2, r3, #3
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6a1b      	ldr	r3, [r3, #32]
 800639c:	429a      	cmp	r2, r3
 800639e:	d12c      	bne.n	80063fa <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063aa:	3b01      	subs	r3, #1
 80063ac:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063ae:	429a      	cmp	r2, r3
 80063b0:	d123      	bne.n	80063fa <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063bc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80063be:	429a      	cmp	r2, r3
 80063c0:	d11b      	bne.n	80063fa <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063cc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80063ce:	429a      	cmp	r2, r3
 80063d0:	d113      	bne.n	80063fa <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063dc:	085b      	lsrs	r3, r3, #1
 80063de:	3b01      	subs	r3, #1
 80063e0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80063e2:	429a      	cmp	r2, r3
 80063e4:	d109      	bne.n	80063fa <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063f0:	085b      	lsrs	r3, r3, #1
 80063f2:	3b01      	subs	r3, #1
 80063f4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80063f6:	429a      	cmp	r2, r3
 80063f8:	d001      	beq.n	80063fe <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 80063fa:	2301      	movs	r3, #1
 80063fc:	e000      	b.n	8006400 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 80063fe:	2300      	movs	r3, #0
}
 8006400:	4618      	mov	r0, r3
 8006402:	3720      	adds	r7, #32
 8006404:	46bd      	mov	sp, r7
 8006406:	bd80      	pop	{r7, pc}
 8006408:	40021000 	.word	0x40021000

0800640c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b086      	sub	sp, #24
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
 8006414:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006416:	2300      	movs	r3, #0
 8006418:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d101      	bne.n	8006424 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006420:	2301      	movs	r3, #1
 8006422:	e11e      	b.n	8006662 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006424:	4b91      	ldr	r3, [pc, #580]	; (800666c <HAL_RCC_ClockConfig+0x260>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f003 030f 	and.w	r3, r3, #15
 800642c:	683a      	ldr	r2, [r7, #0]
 800642e:	429a      	cmp	r2, r3
 8006430:	d910      	bls.n	8006454 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006432:	4b8e      	ldr	r3, [pc, #568]	; (800666c <HAL_RCC_ClockConfig+0x260>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f023 020f 	bic.w	r2, r3, #15
 800643a:	498c      	ldr	r1, [pc, #560]	; (800666c <HAL_RCC_ClockConfig+0x260>)
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	4313      	orrs	r3, r2
 8006440:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006442:	4b8a      	ldr	r3, [pc, #552]	; (800666c <HAL_RCC_ClockConfig+0x260>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f003 030f 	and.w	r3, r3, #15
 800644a:	683a      	ldr	r2, [r7, #0]
 800644c:	429a      	cmp	r2, r3
 800644e:	d001      	beq.n	8006454 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006450:	2301      	movs	r3, #1
 8006452:	e106      	b.n	8006662 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f003 0301 	and.w	r3, r3, #1
 800645c:	2b00      	cmp	r3, #0
 800645e:	d073      	beq.n	8006548 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	2b03      	cmp	r3, #3
 8006466:	d129      	bne.n	80064bc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006468:	4b81      	ldr	r3, [pc, #516]	; (8006670 <HAL_RCC_ClockConfig+0x264>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006470:	2b00      	cmp	r3, #0
 8006472:	d101      	bne.n	8006478 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006474:	2301      	movs	r3, #1
 8006476:	e0f4      	b.n	8006662 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006478:	f000 f99e 	bl	80067b8 <RCC_GetSysClockFreqFromPLLSource>
 800647c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	4a7c      	ldr	r2, [pc, #496]	; (8006674 <HAL_RCC_ClockConfig+0x268>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d93f      	bls.n	8006506 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006486:	4b7a      	ldr	r3, [pc, #488]	; (8006670 <HAL_RCC_ClockConfig+0x264>)
 8006488:	689b      	ldr	r3, [r3, #8]
 800648a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800648e:	2b00      	cmp	r3, #0
 8006490:	d009      	beq.n	80064a6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800649a:	2b00      	cmp	r3, #0
 800649c:	d033      	beq.n	8006506 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d12f      	bne.n	8006506 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80064a6:	4b72      	ldr	r3, [pc, #456]	; (8006670 <HAL_RCC_ClockConfig+0x264>)
 80064a8:	689b      	ldr	r3, [r3, #8]
 80064aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80064ae:	4a70      	ldr	r2, [pc, #448]	; (8006670 <HAL_RCC_ClockConfig+0x264>)
 80064b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064b4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80064b6:	2380      	movs	r3, #128	; 0x80
 80064b8:	617b      	str	r3, [r7, #20]
 80064ba:	e024      	b.n	8006506 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	685b      	ldr	r3, [r3, #4]
 80064c0:	2b02      	cmp	r3, #2
 80064c2:	d107      	bne.n	80064d4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80064c4:	4b6a      	ldr	r3, [pc, #424]	; (8006670 <HAL_RCC_ClockConfig+0x264>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d109      	bne.n	80064e4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80064d0:	2301      	movs	r3, #1
 80064d2:	e0c6      	b.n	8006662 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80064d4:	4b66      	ldr	r3, [pc, #408]	; (8006670 <HAL_RCC_ClockConfig+0x264>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d101      	bne.n	80064e4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80064e0:	2301      	movs	r3, #1
 80064e2:	e0be      	b.n	8006662 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80064e4:	f000 f8ce 	bl	8006684 <HAL_RCC_GetSysClockFreq>
 80064e8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	4a61      	ldr	r2, [pc, #388]	; (8006674 <HAL_RCC_ClockConfig+0x268>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d909      	bls.n	8006506 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80064f2:	4b5f      	ldr	r3, [pc, #380]	; (8006670 <HAL_RCC_ClockConfig+0x264>)
 80064f4:	689b      	ldr	r3, [r3, #8]
 80064f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80064fa:	4a5d      	ldr	r2, [pc, #372]	; (8006670 <HAL_RCC_ClockConfig+0x264>)
 80064fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006500:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006502:	2380      	movs	r3, #128	; 0x80
 8006504:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006506:	4b5a      	ldr	r3, [pc, #360]	; (8006670 <HAL_RCC_ClockConfig+0x264>)
 8006508:	689b      	ldr	r3, [r3, #8]
 800650a:	f023 0203 	bic.w	r2, r3, #3
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	685b      	ldr	r3, [r3, #4]
 8006512:	4957      	ldr	r1, [pc, #348]	; (8006670 <HAL_RCC_ClockConfig+0x264>)
 8006514:	4313      	orrs	r3, r2
 8006516:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006518:	f7fa fe04 	bl	8001124 <HAL_GetTick>
 800651c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800651e:	e00a      	b.n	8006536 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006520:	f7fa fe00 	bl	8001124 <HAL_GetTick>
 8006524:	4602      	mov	r2, r0
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	1ad3      	subs	r3, r2, r3
 800652a:	f241 3288 	movw	r2, #5000	; 0x1388
 800652e:	4293      	cmp	r3, r2
 8006530:	d901      	bls.n	8006536 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006532:	2303      	movs	r3, #3
 8006534:	e095      	b.n	8006662 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006536:	4b4e      	ldr	r3, [pc, #312]	; (8006670 <HAL_RCC_ClockConfig+0x264>)
 8006538:	689b      	ldr	r3, [r3, #8]
 800653a:	f003 020c 	and.w	r2, r3, #12
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	009b      	lsls	r3, r3, #2
 8006544:	429a      	cmp	r2, r3
 8006546:	d1eb      	bne.n	8006520 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f003 0302 	and.w	r3, r3, #2
 8006550:	2b00      	cmp	r3, #0
 8006552:	d023      	beq.n	800659c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f003 0304 	and.w	r3, r3, #4
 800655c:	2b00      	cmp	r3, #0
 800655e:	d005      	beq.n	800656c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006560:	4b43      	ldr	r3, [pc, #268]	; (8006670 <HAL_RCC_ClockConfig+0x264>)
 8006562:	689b      	ldr	r3, [r3, #8]
 8006564:	4a42      	ldr	r2, [pc, #264]	; (8006670 <HAL_RCC_ClockConfig+0x264>)
 8006566:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800656a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f003 0308 	and.w	r3, r3, #8
 8006574:	2b00      	cmp	r3, #0
 8006576:	d007      	beq.n	8006588 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006578:	4b3d      	ldr	r3, [pc, #244]	; (8006670 <HAL_RCC_ClockConfig+0x264>)
 800657a:	689b      	ldr	r3, [r3, #8]
 800657c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006580:	4a3b      	ldr	r2, [pc, #236]	; (8006670 <HAL_RCC_ClockConfig+0x264>)
 8006582:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006586:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006588:	4b39      	ldr	r3, [pc, #228]	; (8006670 <HAL_RCC_ClockConfig+0x264>)
 800658a:	689b      	ldr	r3, [r3, #8]
 800658c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	689b      	ldr	r3, [r3, #8]
 8006594:	4936      	ldr	r1, [pc, #216]	; (8006670 <HAL_RCC_ClockConfig+0x264>)
 8006596:	4313      	orrs	r3, r2
 8006598:	608b      	str	r3, [r1, #8]
 800659a:	e008      	b.n	80065ae <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	2b80      	cmp	r3, #128	; 0x80
 80065a0:	d105      	bne.n	80065ae <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80065a2:	4b33      	ldr	r3, [pc, #204]	; (8006670 <HAL_RCC_ClockConfig+0x264>)
 80065a4:	689b      	ldr	r3, [r3, #8]
 80065a6:	4a32      	ldr	r2, [pc, #200]	; (8006670 <HAL_RCC_ClockConfig+0x264>)
 80065a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80065ac:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80065ae:	4b2f      	ldr	r3, [pc, #188]	; (800666c <HAL_RCC_ClockConfig+0x260>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f003 030f 	and.w	r3, r3, #15
 80065b6:	683a      	ldr	r2, [r7, #0]
 80065b8:	429a      	cmp	r2, r3
 80065ba:	d21d      	bcs.n	80065f8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065bc:	4b2b      	ldr	r3, [pc, #172]	; (800666c <HAL_RCC_ClockConfig+0x260>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f023 020f 	bic.w	r2, r3, #15
 80065c4:	4929      	ldr	r1, [pc, #164]	; (800666c <HAL_RCC_ClockConfig+0x260>)
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	4313      	orrs	r3, r2
 80065ca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80065cc:	f7fa fdaa 	bl	8001124 <HAL_GetTick>
 80065d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80065d2:	e00a      	b.n	80065ea <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80065d4:	f7fa fda6 	bl	8001124 <HAL_GetTick>
 80065d8:	4602      	mov	r2, r0
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	1ad3      	subs	r3, r2, r3
 80065de:	f241 3288 	movw	r2, #5000	; 0x1388
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d901      	bls.n	80065ea <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80065e6:	2303      	movs	r3, #3
 80065e8:	e03b      	b.n	8006662 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80065ea:	4b20      	ldr	r3, [pc, #128]	; (800666c <HAL_RCC_ClockConfig+0x260>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f003 030f 	and.w	r3, r3, #15
 80065f2:	683a      	ldr	r2, [r7, #0]
 80065f4:	429a      	cmp	r2, r3
 80065f6:	d1ed      	bne.n	80065d4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f003 0304 	and.w	r3, r3, #4
 8006600:	2b00      	cmp	r3, #0
 8006602:	d008      	beq.n	8006616 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006604:	4b1a      	ldr	r3, [pc, #104]	; (8006670 <HAL_RCC_ClockConfig+0x264>)
 8006606:	689b      	ldr	r3, [r3, #8]
 8006608:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	68db      	ldr	r3, [r3, #12]
 8006610:	4917      	ldr	r1, [pc, #92]	; (8006670 <HAL_RCC_ClockConfig+0x264>)
 8006612:	4313      	orrs	r3, r2
 8006614:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f003 0308 	and.w	r3, r3, #8
 800661e:	2b00      	cmp	r3, #0
 8006620:	d009      	beq.n	8006636 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006622:	4b13      	ldr	r3, [pc, #76]	; (8006670 <HAL_RCC_ClockConfig+0x264>)
 8006624:	689b      	ldr	r3, [r3, #8]
 8006626:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	691b      	ldr	r3, [r3, #16]
 800662e:	00db      	lsls	r3, r3, #3
 8006630:	490f      	ldr	r1, [pc, #60]	; (8006670 <HAL_RCC_ClockConfig+0x264>)
 8006632:	4313      	orrs	r3, r2
 8006634:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006636:	f000 f825 	bl	8006684 <HAL_RCC_GetSysClockFreq>
 800663a:	4601      	mov	r1, r0
 800663c:	4b0c      	ldr	r3, [pc, #48]	; (8006670 <HAL_RCC_ClockConfig+0x264>)
 800663e:	689b      	ldr	r3, [r3, #8]
 8006640:	091b      	lsrs	r3, r3, #4
 8006642:	f003 030f 	and.w	r3, r3, #15
 8006646:	4a0c      	ldr	r2, [pc, #48]	; (8006678 <HAL_RCC_ClockConfig+0x26c>)
 8006648:	5cd3      	ldrb	r3, [r2, r3]
 800664a:	f003 031f 	and.w	r3, r3, #31
 800664e:	fa21 f303 	lsr.w	r3, r1, r3
 8006652:	4a0a      	ldr	r2, [pc, #40]	; (800667c <HAL_RCC_ClockConfig+0x270>)
 8006654:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006656:	4b0a      	ldr	r3, [pc, #40]	; (8006680 <HAL_RCC_ClockConfig+0x274>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4618      	mov	r0, r3
 800665c:	f7fa fd16 	bl	800108c <HAL_InitTick>
 8006660:	4603      	mov	r3, r0
}
 8006662:	4618      	mov	r0, r3
 8006664:	3718      	adds	r7, #24
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}
 800666a:	bf00      	nop
 800666c:	40022000 	.word	0x40022000
 8006670:	40021000 	.word	0x40021000
 8006674:	04c4b400 	.word	0x04c4b400
 8006678:	080078b0 	.word	0x080078b0
 800667c:	20000000 	.word	0x20000000
 8006680:	20000004 	.word	0x20000004

08006684 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006684:	b480      	push	{r7}
 8006686:	b087      	sub	sp, #28
 8006688:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800668a:	4b2c      	ldr	r3, [pc, #176]	; (800673c <HAL_RCC_GetSysClockFreq+0xb8>)
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	f003 030c 	and.w	r3, r3, #12
 8006692:	2b04      	cmp	r3, #4
 8006694:	d102      	bne.n	800669c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006696:	4b2a      	ldr	r3, [pc, #168]	; (8006740 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006698:	613b      	str	r3, [r7, #16]
 800669a:	e047      	b.n	800672c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800669c:	4b27      	ldr	r3, [pc, #156]	; (800673c <HAL_RCC_GetSysClockFreq+0xb8>)
 800669e:	689b      	ldr	r3, [r3, #8]
 80066a0:	f003 030c 	and.w	r3, r3, #12
 80066a4:	2b08      	cmp	r3, #8
 80066a6:	d102      	bne.n	80066ae <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80066a8:	4b26      	ldr	r3, [pc, #152]	; (8006744 <HAL_RCC_GetSysClockFreq+0xc0>)
 80066aa:	613b      	str	r3, [r7, #16]
 80066ac:	e03e      	b.n	800672c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80066ae:	4b23      	ldr	r3, [pc, #140]	; (800673c <HAL_RCC_GetSysClockFreq+0xb8>)
 80066b0:	689b      	ldr	r3, [r3, #8]
 80066b2:	f003 030c 	and.w	r3, r3, #12
 80066b6:	2b0c      	cmp	r3, #12
 80066b8:	d136      	bne.n	8006728 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80066ba:	4b20      	ldr	r3, [pc, #128]	; (800673c <HAL_RCC_GetSysClockFreq+0xb8>)
 80066bc:	68db      	ldr	r3, [r3, #12]
 80066be:	f003 0303 	and.w	r3, r3, #3
 80066c2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80066c4:	4b1d      	ldr	r3, [pc, #116]	; (800673c <HAL_RCC_GetSysClockFreq+0xb8>)
 80066c6:	68db      	ldr	r3, [r3, #12]
 80066c8:	091b      	lsrs	r3, r3, #4
 80066ca:	f003 030f 	and.w	r3, r3, #15
 80066ce:	3301      	adds	r3, #1
 80066d0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	2b03      	cmp	r3, #3
 80066d6:	d10c      	bne.n	80066f2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80066d8:	4a1a      	ldr	r2, [pc, #104]	; (8006744 <HAL_RCC_GetSysClockFreq+0xc0>)
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80066e0:	4a16      	ldr	r2, [pc, #88]	; (800673c <HAL_RCC_GetSysClockFreq+0xb8>)
 80066e2:	68d2      	ldr	r2, [r2, #12]
 80066e4:	0a12      	lsrs	r2, r2, #8
 80066e6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80066ea:	fb02 f303 	mul.w	r3, r2, r3
 80066ee:	617b      	str	r3, [r7, #20]
      break;
 80066f0:	e00c      	b.n	800670c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80066f2:	4a13      	ldr	r2, [pc, #76]	; (8006740 <HAL_RCC_GetSysClockFreq+0xbc>)
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80066fa:	4a10      	ldr	r2, [pc, #64]	; (800673c <HAL_RCC_GetSysClockFreq+0xb8>)
 80066fc:	68d2      	ldr	r2, [r2, #12]
 80066fe:	0a12      	lsrs	r2, r2, #8
 8006700:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006704:	fb02 f303 	mul.w	r3, r2, r3
 8006708:	617b      	str	r3, [r7, #20]
      break;
 800670a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800670c:	4b0b      	ldr	r3, [pc, #44]	; (800673c <HAL_RCC_GetSysClockFreq+0xb8>)
 800670e:	68db      	ldr	r3, [r3, #12]
 8006710:	0e5b      	lsrs	r3, r3, #25
 8006712:	f003 0303 	and.w	r3, r3, #3
 8006716:	3301      	adds	r3, #1
 8006718:	005b      	lsls	r3, r3, #1
 800671a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800671c:	697a      	ldr	r2, [r7, #20]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	fbb2 f3f3 	udiv	r3, r2, r3
 8006724:	613b      	str	r3, [r7, #16]
 8006726:	e001      	b.n	800672c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006728:	2300      	movs	r3, #0
 800672a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800672c:	693b      	ldr	r3, [r7, #16]
}
 800672e:	4618      	mov	r0, r3
 8006730:	371c      	adds	r7, #28
 8006732:	46bd      	mov	sp, r7
 8006734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006738:	4770      	bx	lr
 800673a:	bf00      	nop
 800673c:	40021000 	.word	0x40021000
 8006740:	00f42400 	.word	0x00f42400
 8006744:	016e3600 	.word	0x016e3600

08006748 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006748:	b480      	push	{r7}
 800674a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800674c:	4b03      	ldr	r3, [pc, #12]	; (800675c <HAL_RCC_GetHCLKFreq+0x14>)
 800674e:	681b      	ldr	r3, [r3, #0]
}
 8006750:	4618      	mov	r0, r3
 8006752:	46bd      	mov	sp, r7
 8006754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006758:	4770      	bx	lr
 800675a:	bf00      	nop
 800675c:	20000000 	.word	0x20000000

08006760 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006764:	f7ff fff0 	bl	8006748 <HAL_RCC_GetHCLKFreq>
 8006768:	4601      	mov	r1, r0
 800676a:	4b06      	ldr	r3, [pc, #24]	; (8006784 <HAL_RCC_GetPCLK1Freq+0x24>)
 800676c:	689b      	ldr	r3, [r3, #8]
 800676e:	0a1b      	lsrs	r3, r3, #8
 8006770:	f003 0307 	and.w	r3, r3, #7
 8006774:	4a04      	ldr	r2, [pc, #16]	; (8006788 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006776:	5cd3      	ldrb	r3, [r2, r3]
 8006778:	f003 031f 	and.w	r3, r3, #31
 800677c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006780:	4618      	mov	r0, r3
 8006782:	bd80      	pop	{r7, pc}
 8006784:	40021000 	.word	0x40021000
 8006788:	080078c0 	.word	0x080078c0

0800678c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006790:	f7ff ffda 	bl	8006748 <HAL_RCC_GetHCLKFreq>
 8006794:	4601      	mov	r1, r0
 8006796:	4b06      	ldr	r3, [pc, #24]	; (80067b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006798:	689b      	ldr	r3, [r3, #8]
 800679a:	0adb      	lsrs	r3, r3, #11
 800679c:	f003 0307 	and.w	r3, r3, #7
 80067a0:	4a04      	ldr	r2, [pc, #16]	; (80067b4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80067a2:	5cd3      	ldrb	r3, [r2, r3]
 80067a4:	f003 031f 	and.w	r3, r3, #31
 80067a8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	bd80      	pop	{r7, pc}
 80067b0:	40021000 	.word	0x40021000
 80067b4:	080078c0 	.word	0x080078c0

080067b8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80067b8:	b480      	push	{r7}
 80067ba:	b087      	sub	sp, #28
 80067bc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80067be:	4b1e      	ldr	r3, [pc, #120]	; (8006838 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80067c0:	68db      	ldr	r3, [r3, #12]
 80067c2:	f003 0303 	and.w	r3, r3, #3
 80067c6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80067c8:	4b1b      	ldr	r3, [pc, #108]	; (8006838 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80067ca:	68db      	ldr	r3, [r3, #12]
 80067cc:	091b      	lsrs	r3, r3, #4
 80067ce:	f003 030f 	and.w	r3, r3, #15
 80067d2:	3301      	adds	r3, #1
 80067d4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80067d6:	693b      	ldr	r3, [r7, #16]
 80067d8:	2b03      	cmp	r3, #3
 80067da:	d10c      	bne.n	80067f6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80067dc:	4a17      	ldr	r2, [pc, #92]	; (800683c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80067e4:	4a14      	ldr	r2, [pc, #80]	; (8006838 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80067e6:	68d2      	ldr	r2, [r2, #12]
 80067e8:	0a12      	lsrs	r2, r2, #8
 80067ea:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80067ee:	fb02 f303 	mul.w	r3, r2, r3
 80067f2:	617b      	str	r3, [r7, #20]
    break;
 80067f4:	e00c      	b.n	8006810 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80067f6:	4a12      	ldr	r2, [pc, #72]	; (8006840 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80067fe:	4a0e      	ldr	r2, [pc, #56]	; (8006838 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006800:	68d2      	ldr	r2, [r2, #12]
 8006802:	0a12      	lsrs	r2, r2, #8
 8006804:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006808:	fb02 f303 	mul.w	r3, r2, r3
 800680c:	617b      	str	r3, [r7, #20]
    break;
 800680e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006810:	4b09      	ldr	r3, [pc, #36]	; (8006838 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006812:	68db      	ldr	r3, [r3, #12]
 8006814:	0e5b      	lsrs	r3, r3, #25
 8006816:	f003 0303 	and.w	r3, r3, #3
 800681a:	3301      	adds	r3, #1
 800681c:	005b      	lsls	r3, r3, #1
 800681e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006820:	697a      	ldr	r2, [r7, #20]
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	fbb2 f3f3 	udiv	r3, r2, r3
 8006828:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800682a:	687b      	ldr	r3, [r7, #4]
}
 800682c:	4618      	mov	r0, r3
 800682e:	371c      	adds	r7, #28
 8006830:	46bd      	mov	sp, r7
 8006832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006836:	4770      	bx	lr
 8006838:	40021000 	.word	0x40021000
 800683c:	016e3600 	.word	0x016e3600
 8006840:	00f42400 	.word	0x00f42400

08006844 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b086      	sub	sp, #24
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800684c:	2300      	movs	r3, #0
 800684e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006850:	2300      	movs	r3, #0
 8006852:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800685c:	2b00      	cmp	r3, #0
 800685e:	f000 8098 	beq.w	8006992 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006862:	2300      	movs	r3, #0
 8006864:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006866:	4b43      	ldr	r3, [pc, #268]	; (8006974 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006868:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800686a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800686e:	2b00      	cmp	r3, #0
 8006870:	d10d      	bne.n	800688e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006872:	4b40      	ldr	r3, [pc, #256]	; (8006974 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006876:	4a3f      	ldr	r2, [pc, #252]	; (8006974 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006878:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800687c:	6593      	str	r3, [r2, #88]	; 0x58
 800687e:	4b3d      	ldr	r3, [pc, #244]	; (8006974 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006882:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006886:	60bb      	str	r3, [r7, #8]
 8006888:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800688a:	2301      	movs	r3, #1
 800688c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800688e:	4b3a      	ldr	r3, [pc, #232]	; (8006978 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4a39      	ldr	r2, [pc, #228]	; (8006978 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006894:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006898:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800689a:	f7fa fc43 	bl	8001124 <HAL_GetTick>
 800689e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80068a0:	e009      	b.n	80068b6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068a2:	f7fa fc3f 	bl	8001124 <HAL_GetTick>
 80068a6:	4602      	mov	r2, r0
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	1ad3      	subs	r3, r2, r3
 80068ac:	2b02      	cmp	r3, #2
 80068ae:	d902      	bls.n	80068b6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80068b0:	2303      	movs	r3, #3
 80068b2:	74fb      	strb	r3, [r7, #19]
        break;
 80068b4:	e005      	b.n	80068c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80068b6:	4b30      	ldr	r3, [pc, #192]	; (8006978 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d0ef      	beq.n	80068a2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80068c2:	7cfb      	ldrb	r3, [r7, #19]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d159      	bne.n	800697c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80068c8:	4b2a      	ldr	r3, [pc, #168]	; (8006974 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80068ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068d2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d01e      	beq.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068de:	697a      	ldr	r2, [r7, #20]
 80068e0:	429a      	cmp	r2, r3
 80068e2:	d019      	beq.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80068e4:	4b23      	ldr	r3, [pc, #140]	; (8006974 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80068e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068ee:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80068f0:	4b20      	ldr	r3, [pc, #128]	; (8006974 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80068f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068f6:	4a1f      	ldr	r2, [pc, #124]	; (8006974 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80068f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006900:	4b1c      	ldr	r3, [pc, #112]	; (8006974 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006902:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006906:	4a1b      	ldr	r2, [pc, #108]	; (8006974 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006908:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800690c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006910:	4a18      	ldr	r2, [pc, #96]	; (8006974 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	f003 0301 	and.w	r3, r3, #1
 800691e:	2b00      	cmp	r3, #0
 8006920:	d016      	beq.n	8006950 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006922:	f7fa fbff 	bl	8001124 <HAL_GetTick>
 8006926:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006928:	e00b      	b.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800692a:	f7fa fbfb 	bl	8001124 <HAL_GetTick>
 800692e:	4602      	mov	r2, r0
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	1ad3      	subs	r3, r2, r3
 8006934:	f241 3288 	movw	r2, #5000	; 0x1388
 8006938:	4293      	cmp	r3, r2
 800693a:	d902      	bls.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800693c:	2303      	movs	r3, #3
 800693e:	74fb      	strb	r3, [r7, #19]
            break;
 8006940:	e006      	b.n	8006950 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006942:	4b0c      	ldr	r3, [pc, #48]	; (8006974 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006944:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006948:	f003 0302 	and.w	r3, r3, #2
 800694c:	2b00      	cmp	r3, #0
 800694e:	d0ec      	beq.n	800692a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006950:	7cfb      	ldrb	r3, [r7, #19]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d10b      	bne.n	800696e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006956:	4b07      	ldr	r3, [pc, #28]	; (8006974 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006958:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800695c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006964:	4903      	ldr	r1, [pc, #12]	; (8006974 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006966:	4313      	orrs	r3, r2
 8006968:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800696c:	e008      	b.n	8006980 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800696e:	7cfb      	ldrb	r3, [r7, #19]
 8006970:	74bb      	strb	r3, [r7, #18]
 8006972:	e005      	b.n	8006980 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006974:	40021000 	.word	0x40021000
 8006978:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800697c:	7cfb      	ldrb	r3, [r7, #19]
 800697e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006980:	7c7b      	ldrb	r3, [r7, #17]
 8006982:	2b01      	cmp	r3, #1
 8006984:	d105      	bne.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006986:	4baf      	ldr	r3, [pc, #700]	; (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800698a:	4aae      	ldr	r2, [pc, #696]	; (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800698c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006990:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f003 0301 	and.w	r3, r3, #1
 800699a:	2b00      	cmp	r3, #0
 800699c:	d00a      	beq.n	80069b4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800699e:	4ba9      	ldr	r3, [pc, #676]	; (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80069a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069a4:	f023 0203 	bic.w	r2, r3, #3
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	685b      	ldr	r3, [r3, #4]
 80069ac:	49a5      	ldr	r1, [pc, #660]	; (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80069ae:	4313      	orrs	r3, r2
 80069b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f003 0302 	and.w	r3, r3, #2
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d00a      	beq.n	80069d6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80069c0:	4ba0      	ldr	r3, [pc, #640]	; (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80069c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069c6:	f023 020c 	bic.w	r2, r3, #12
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	689b      	ldr	r3, [r3, #8]
 80069ce:	499d      	ldr	r1, [pc, #628]	; (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80069d0:	4313      	orrs	r3, r2
 80069d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f003 0304 	and.w	r3, r3, #4
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d00a      	beq.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80069e2:	4b98      	ldr	r3, [pc, #608]	; (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80069e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069e8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	68db      	ldr	r3, [r3, #12]
 80069f0:	4994      	ldr	r1, [pc, #592]	; (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80069f2:	4313      	orrs	r3, r2
 80069f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f003 0308 	and.w	r3, r3, #8
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d00a      	beq.n	8006a1a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006a04:	4b8f      	ldr	r3, [pc, #572]	; (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a0a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	691b      	ldr	r3, [r3, #16]
 8006a12:	498c      	ldr	r1, [pc, #560]	; (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006a14:	4313      	orrs	r3, r2
 8006a16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f003 0310 	and.w	r3, r3, #16
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d00a      	beq.n	8006a3c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006a26:	4b87      	ldr	r3, [pc, #540]	; (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a2c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	695b      	ldr	r3, [r3, #20]
 8006a34:	4983      	ldr	r1, [pc, #524]	; (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006a36:	4313      	orrs	r3, r2
 8006a38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f003 0320 	and.w	r3, r3, #32
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d00a      	beq.n	8006a5e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006a48:	4b7e      	ldr	r3, [pc, #504]	; (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a4e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	699b      	ldr	r3, [r3, #24]
 8006a56:	497b      	ldr	r1, [pc, #492]	; (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d00a      	beq.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006a6a:	4b76      	ldr	r3, [pc, #472]	; (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006a6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a70:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	69db      	ldr	r3, [r3, #28]
 8006a78:	4972      	ldr	r1, [pc, #456]	; (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d00a      	beq.n	8006aa2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006a8c:	4b6d      	ldr	r3, [pc, #436]	; (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a92:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6a1b      	ldr	r3, [r3, #32]
 8006a9a:	496a      	ldr	r1, [pc, #424]	; (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006a9c:	4313      	orrs	r3, r2
 8006a9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d00a      	beq.n	8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006aae:	4b65      	ldr	r3, [pc, #404]	; (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006ab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ab4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006abc:	4961      	ldr	r1, [pc, #388]	; (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d00a      	beq.n	8006ae6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006ad0:	4b5c      	ldr	r3, [pc, #368]	; (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006ad2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006ad6:	f023 0203 	bic.w	r2, r3, #3
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ade:	4959      	ldr	r1, [pc, #356]	; (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006ae0:	4313      	orrs	r3, r2
 8006ae2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d00a      	beq.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006af2:	4b54      	ldr	r3, [pc, #336]	; (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006af4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006af8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b00:	4950      	ldr	r1, [pc, #320]	; (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006b02:	4313      	orrs	r3, r2
 8006b04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d015      	beq.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006b14:	4b4b      	ldr	r3, [pc, #300]	; (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b1a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b22:	4948      	ldr	r1, [pc, #288]	; (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006b24:	4313      	orrs	r3, r2
 8006b26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b32:	d105      	bne.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006b34:	4b43      	ldr	r3, [pc, #268]	; (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006b36:	68db      	ldr	r3, [r3, #12]
 8006b38:	4a42      	ldr	r2, [pc, #264]	; (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006b3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006b3e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d015      	beq.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006b4c:	4b3d      	ldr	r3, [pc, #244]	; (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b52:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b5a:	493a      	ldr	r1, [pc, #232]	; (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006b6a:	d105      	bne.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006b6c:	4b35      	ldr	r3, [pc, #212]	; (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006b6e:	68db      	ldr	r3, [r3, #12]
 8006b70:	4a34      	ldr	r2, [pc, #208]	; (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006b72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006b76:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d015      	beq.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006b84:	4b2f      	ldr	r3, [pc, #188]	; (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b8a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b92:	492c      	ldr	r1, [pc, #176]	; (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006b94:	4313      	orrs	r3, r2
 8006b96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b9e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006ba2:	d105      	bne.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006ba4:	4b27      	ldr	r3, [pc, #156]	; (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006ba6:	68db      	ldr	r3, [r3, #12]
 8006ba8:	4a26      	ldr	r2, [pc, #152]	; (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006baa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006bae:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d015      	beq.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006bbc:	4b21      	ldr	r3, [pc, #132]	; (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bc2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bca:	491e      	ldr	r1, [pc, #120]	; (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006bcc:	4313      	orrs	r3, r2
 8006bce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bd6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006bda:	d105      	bne.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006bdc:	4b19      	ldr	r3, [pc, #100]	; (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006bde:	68db      	ldr	r3, [r3, #12]
 8006be0:	4a18      	ldr	r2, [pc, #96]	; (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006be2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006be6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d015      	beq.n	8006c20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006bf4:	4b13      	ldr	r3, [pc, #76]	; (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bfa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c02:	4910      	ldr	r1, [pc, #64]	; (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006c04:	4313      	orrs	r3, r2
 8006c06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c0e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c12:	d105      	bne.n	8006c20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006c14:	4b0b      	ldr	r3, [pc, #44]	; (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006c16:	68db      	ldr	r3, [r3, #12]
 8006c18:	4a0a      	ldr	r2, [pc, #40]	; (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006c1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006c1e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d018      	beq.n	8006c5e <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006c2c:	4b05      	ldr	r3, [pc, #20]	; (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c32:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c3a:	4902      	ldr	r1, [pc, #8]	; (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006c42:	e001      	b.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8006c44:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c4c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006c50:	d105      	bne.n	8006c5e <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006c52:	4b21      	ldr	r3, [pc, #132]	; (8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8006c54:	68db      	ldr	r3, [r3, #12]
 8006c56:	4a20      	ldr	r2, [pc, #128]	; (8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8006c58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c5c:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d015      	beq.n	8006c96 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006c6a:	4b1b      	ldr	r3, [pc, #108]	; (8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8006c6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c70:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c78:	4917      	ldr	r1, [pc, #92]	; (8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c88:	d105      	bne.n	8006c96 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006c8a:	4b13      	ldr	r3, [pc, #76]	; (8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8006c8c:	68db      	ldr	r3, [r3, #12]
 8006c8e:	4a12      	ldr	r2, [pc, #72]	; (8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8006c90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c94:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d015      	beq.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006ca2:	4b0d      	ldr	r3, [pc, #52]	; (8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8006ca4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006ca8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cb0:	4909      	ldr	r1, [pc, #36]	; (8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8006cb2:	4313      	orrs	r3, r2
 8006cb4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cbc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006cc0:	d105      	bne.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006cc2:	4b05      	ldr	r3, [pc, #20]	; (8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8006cc4:	68db      	ldr	r3, [r3, #12]
 8006cc6:	4a04      	ldr	r2, [pc, #16]	; (8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8006cc8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006ccc:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006cce:	7cbb      	ldrb	r3, [r7, #18]
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	3718      	adds	r7, #24
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}
 8006cd8:	40021000 	.word	0x40021000

08006cdc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b082      	sub	sp, #8
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d101      	bne.n	8006cee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006cea:	2301      	movs	r3, #1
 8006cec:	e042      	b.n	8006d74 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d106      	bne.n	8006d06 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f7fa f8df 	bl	8000ec4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2224      	movs	r2, #36	; 0x24
 8006d0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	681a      	ldr	r2, [r3, #0]
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f022 0201 	bic.w	r2, r2, #1
 8006d1c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f000 f82c 	bl	8006d7c <UART_SetConfig>
 8006d24:	4603      	mov	r3, r0
 8006d26:	2b01      	cmp	r3, #1
 8006d28:	d101      	bne.n	8006d2e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	e022      	b.n	8006d74 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d002      	beq.n	8006d3c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f000 faf2 	bl	8007320 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	685a      	ldr	r2, [r3, #4]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006d4a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	689a      	ldr	r2, [r3, #8]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006d5a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	681a      	ldr	r2, [r3, #0]
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f042 0201 	orr.w	r2, r2, #1
 8006d6a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f000 fb79 	bl	8007464 <UART_CheckIdleState>
 8006d72:	4603      	mov	r3, r0
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	3708      	adds	r7, #8
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bd80      	pop	{r7, pc}

08006d7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d7c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8006d80:	b088      	sub	sp, #32
 8006d82:	af00      	add	r7, sp, #0
 8006d84:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006d86:	2300      	movs	r3, #0
 8006d88:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	689a      	ldr	r2, [r3, #8]
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	691b      	ldr	r3, [r3, #16]
 8006d92:	431a      	orrs	r2, r3
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	695b      	ldr	r3, [r3, #20]
 8006d98:	431a      	orrs	r2, r3
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	69db      	ldr	r3, [r3, #28]
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)huart->FifoMode;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006da6:	69fa      	ldr	r2, [r7, #28]
 8006da8:	4313      	orrs	r3, r2
 8006daa:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	681a      	ldr	r2, [r3, #0]
 8006db2:	4bb1      	ldr	r3, [pc, #708]	; (8007078 <UART_SetConfig+0x2fc>)
 8006db4:	4013      	ands	r3, r2
 8006db6:	687a      	ldr	r2, [r7, #4]
 8006db8:	6812      	ldr	r2, [r2, #0]
 8006dba:	69f9      	ldr	r1, [r7, #28]
 8006dbc:	430b      	orrs	r3, r1
 8006dbe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	685b      	ldr	r3, [r3, #4]
 8006dc6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	68da      	ldr	r2, [r3, #12]
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	430a      	orrs	r2, r1
 8006dd4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	699b      	ldr	r3, [r3, #24]
 8006dda:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4aa6      	ldr	r2, [pc, #664]	; (800707c <UART_SetConfig+0x300>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d004      	beq.n	8006df0 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6a1b      	ldr	r3, [r3, #32]
 8006dea:	69fa      	ldr	r2, [r7, #28]
 8006dec:	4313      	orrs	r3, r2
 8006dee:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	689b      	ldr	r3, [r3, #8]
 8006df6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006dfa:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006dfe:	687a      	ldr	r2, [r7, #4]
 8006e00:	6812      	ldr	r2, [r2, #0]
 8006e02:	69f9      	ldr	r1, [r7, #28]
 8006e04:	430b      	orrs	r3, r1
 8006e06:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e0e:	f023 010f 	bic.w	r1, r3, #15
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	430a      	orrs	r2, r1
 8006e1c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4a97      	ldr	r2, [pc, #604]	; (8007080 <UART_SetConfig+0x304>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d121      	bne.n	8006e6c <UART_SetConfig+0xf0>
 8006e28:	4b96      	ldr	r3, [pc, #600]	; (8007084 <UART_SetConfig+0x308>)
 8006e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e2e:	f003 0303 	and.w	r3, r3, #3
 8006e32:	2b03      	cmp	r3, #3
 8006e34:	d816      	bhi.n	8006e64 <UART_SetConfig+0xe8>
 8006e36:	a201      	add	r2, pc, #4	; (adr r2, 8006e3c <UART_SetConfig+0xc0>)
 8006e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e3c:	08006e4d 	.word	0x08006e4d
 8006e40:	08006e59 	.word	0x08006e59
 8006e44:	08006e53 	.word	0x08006e53
 8006e48:	08006e5f 	.word	0x08006e5f
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	76fb      	strb	r3, [r7, #27]
 8006e50:	e0e8      	b.n	8007024 <UART_SetConfig+0x2a8>
 8006e52:	2302      	movs	r3, #2
 8006e54:	76fb      	strb	r3, [r7, #27]
 8006e56:	e0e5      	b.n	8007024 <UART_SetConfig+0x2a8>
 8006e58:	2304      	movs	r3, #4
 8006e5a:	76fb      	strb	r3, [r7, #27]
 8006e5c:	e0e2      	b.n	8007024 <UART_SetConfig+0x2a8>
 8006e5e:	2308      	movs	r3, #8
 8006e60:	76fb      	strb	r3, [r7, #27]
 8006e62:	e0df      	b.n	8007024 <UART_SetConfig+0x2a8>
 8006e64:	2310      	movs	r3, #16
 8006e66:	76fb      	strb	r3, [r7, #27]
 8006e68:	bf00      	nop
 8006e6a:	e0db      	b.n	8007024 <UART_SetConfig+0x2a8>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4a85      	ldr	r2, [pc, #532]	; (8007088 <UART_SetConfig+0x30c>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d134      	bne.n	8006ee0 <UART_SetConfig+0x164>
 8006e76:	4b83      	ldr	r3, [pc, #524]	; (8007084 <UART_SetConfig+0x308>)
 8006e78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e7c:	f003 030c 	and.w	r3, r3, #12
 8006e80:	2b0c      	cmp	r3, #12
 8006e82:	d829      	bhi.n	8006ed8 <UART_SetConfig+0x15c>
 8006e84:	a201      	add	r2, pc, #4	; (adr r2, 8006e8c <UART_SetConfig+0x110>)
 8006e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e8a:	bf00      	nop
 8006e8c:	08006ec1 	.word	0x08006ec1
 8006e90:	08006ed9 	.word	0x08006ed9
 8006e94:	08006ed9 	.word	0x08006ed9
 8006e98:	08006ed9 	.word	0x08006ed9
 8006e9c:	08006ecd 	.word	0x08006ecd
 8006ea0:	08006ed9 	.word	0x08006ed9
 8006ea4:	08006ed9 	.word	0x08006ed9
 8006ea8:	08006ed9 	.word	0x08006ed9
 8006eac:	08006ec7 	.word	0x08006ec7
 8006eb0:	08006ed9 	.word	0x08006ed9
 8006eb4:	08006ed9 	.word	0x08006ed9
 8006eb8:	08006ed9 	.word	0x08006ed9
 8006ebc:	08006ed3 	.word	0x08006ed3
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	76fb      	strb	r3, [r7, #27]
 8006ec4:	e0ae      	b.n	8007024 <UART_SetConfig+0x2a8>
 8006ec6:	2302      	movs	r3, #2
 8006ec8:	76fb      	strb	r3, [r7, #27]
 8006eca:	e0ab      	b.n	8007024 <UART_SetConfig+0x2a8>
 8006ecc:	2304      	movs	r3, #4
 8006ece:	76fb      	strb	r3, [r7, #27]
 8006ed0:	e0a8      	b.n	8007024 <UART_SetConfig+0x2a8>
 8006ed2:	2308      	movs	r3, #8
 8006ed4:	76fb      	strb	r3, [r7, #27]
 8006ed6:	e0a5      	b.n	8007024 <UART_SetConfig+0x2a8>
 8006ed8:	2310      	movs	r3, #16
 8006eda:	76fb      	strb	r3, [r7, #27]
 8006edc:	bf00      	nop
 8006ede:	e0a1      	b.n	8007024 <UART_SetConfig+0x2a8>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4a69      	ldr	r2, [pc, #420]	; (800708c <UART_SetConfig+0x310>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d120      	bne.n	8006f2c <UART_SetConfig+0x1b0>
 8006eea:	4b66      	ldr	r3, [pc, #408]	; (8007084 <UART_SetConfig+0x308>)
 8006eec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ef0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006ef4:	2b10      	cmp	r3, #16
 8006ef6:	d00f      	beq.n	8006f18 <UART_SetConfig+0x19c>
 8006ef8:	2b10      	cmp	r3, #16
 8006efa:	d802      	bhi.n	8006f02 <UART_SetConfig+0x186>
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d005      	beq.n	8006f0c <UART_SetConfig+0x190>
 8006f00:	e010      	b.n	8006f24 <UART_SetConfig+0x1a8>
 8006f02:	2b20      	cmp	r3, #32
 8006f04:	d005      	beq.n	8006f12 <UART_SetConfig+0x196>
 8006f06:	2b30      	cmp	r3, #48	; 0x30
 8006f08:	d009      	beq.n	8006f1e <UART_SetConfig+0x1a2>
 8006f0a:	e00b      	b.n	8006f24 <UART_SetConfig+0x1a8>
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	76fb      	strb	r3, [r7, #27]
 8006f10:	e088      	b.n	8007024 <UART_SetConfig+0x2a8>
 8006f12:	2302      	movs	r3, #2
 8006f14:	76fb      	strb	r3, [r7, #27]
 8006f16:	e085      	b.n	8007024 <UART_SetConfig+0x2a8>
 8006f18:	2304      	movs	r3, #4
 8006f1a:	76fb      	strb	r3, [r7, #27]
 8006f1c:	e082      	b.n	8007024 <UART_SetConfig+0x2a8>
 8006f1e:	2308      	movs	r3, #8
 8006f20:	76fb      	strb	r3, [r7, #27]
 8006f22:	e07f      	b.n	8007024 <UART_SetConfig+0x2a8>
 8006f24:	2310      	movs	r3, #16
 8006f26:	76fb      	strb	r3, [r7, #27]
 8006f28:	bf00      	nop
 8006f2a:	e07b      	b.n	8007024 <UART_SetConfig+0x2a8>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a57      	ldr	r2, [pc, #348]	; (8007090 <UART_SetConfig+0x314>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d120      	bne.n	8006f78 <UART_SetConfig+0x1fc>
 8006f36:	4b53      	ldr	r3, [pc, #332]	; (8007084 <UART_SetConfig+0x308>)
 8006f38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f3c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006f40:	2b40      	cmp	r3, #64	; 0x40
 8006f42:	d00f      	beq.n	8006f64 <UART_SetConfig+0x1e8>
 8006f44:	2b40      	cmp	r3, #64	; 0x40
 8006f46:	d802      	bhi.n	8006f4e <UART_SetConfig+0x1d2>
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d005      	beq.n	8006f58 <UART_SetConfig+0x1dc>
 8006f4c:	e010      	b.n	8006f70 <UART_SetConfig+0x1f4>
 8006f4e:	2b80      	cmp	r3, #128	; 0x80
 8006f50:	d005      	beq.n	8006f5e <UART_SetConfig+0x1e2>
 8006f52:	2bc0      	cmp	r3, #192	; 0xc0
 8006f54:	d009      	beq.n	8006f6a <UART_SetConfig+0x1ee>
 8006f56:	e00b      	b.n	8006f70 <UART_SetConfig+0x1f4>
 8006f58:	2300      	movs	r3, #0
 8006f5a:	76fb      	strb	r3, [r7, #27]
 8006f5c:	e062      	b.n	8007024 <UART_SetConfig+0x2a8>
 8006f5e:	2302      	movs	r3, #2
 8006f60:	76fb      	strb	r3, [r7, #27]
 8006f62:	e05f      	b.n	8007024 <UART_SetConfig+0x2a8>
 8006f64:	2304      	movs	r3, #4
 8006f66:	76fb      	strb	r3, [r7, #27]
 8006f68:	e05c      	b.n	8007024 <UART_SetConfig+0x2a8>
 8006f6a:	2308      	movs	r3, #8
 8006f6c:	76fb      	strb	r3, [r7, #27]
 8006f6e:	e059      	b.n	8007024 <UART_SetConfig+0x2a8>
 8006f70:	2310      	movs	r3, #16
 8006f72:	76fb      	strb	r3, [r7, #27]
 8006f74:	bf00      	nop
 8006f76:	e055      	b.n	8007024 <UART_SetConfig+0x2a8>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4a45      	ldr	r2, [pc, #276]	; (8007094 <UART_SetConfig+0x318>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d124      	bne.n	8006fcc <UART_SetConfig+0x250>
 8006f82:	4b40      	ldr	r3, [pc, #256]	; (8007084 <UART_SetConfig+0x308>)
 8006f84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f90:	d012      	beq.n	8006fb8 <UART_SetConfig+0x23c>
 8006f92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f96:	d802      	bhi.n	8006f9e <UART_SetConfig+0x222>
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d007      	beq.n	8006fac <UART_SetConfig+0x230>
 8006f9c:	e012      	b.n	8006fc4 <UART_SetConfig+0x248>
 8006f9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006fa2:	d006      	beq.n	8006fb2 <UART_SetConfig+0x236>
 8006fa4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006fa8:	d009      	beq.n	8006fbe <UART_SetConfig+0x242>
 8006faa:	e00b      	b.n	8006fc4 <UART_SetConfig+0x248>
 8006fac:	2300      	movs	r3, #0
 8006fae:	76fb      	strb	r3, [r7, #27]
 8006fb0:	e038      	b.n	8007024 <UART_SetConfig+0x2a8>
 8006fb2:	2302      	movs	r3, #2
 8006fb4:	76fb      	strb	r3, [r7, #27]
 8006fb6:	e035      	b.n	8007024 <UART_SetConfig+0x2a8>
 8006fb8:	2304      	movs	r3, #4
 8006fba:	76fb      	strb	r3, [r7, #27]
 8006fbc:	e032      	b.n	8007024 <UART_SetConfig+0x2a8>
 8006fbe:	2308      	movs	r3, #8
 8006fc0:	76fb      	strb	r3, [r7, #27]
 8006fc2:	e02f      	b.n	8007024 <UART_SetConfig+0x2a8>
 8006fc4:	2310      	movs	r3, #16
 8006fc6:	76fb      	strb	r3, [r7, #27]
 8006fc8:	bf00      	nop
 8006fca:	e02b      	b.n	8007024 <UART_SetConfig+0x2a8>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a2a      	ldr	r2, [pc, #168]	; (800707c <UART_SetConfig+0x300>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d124      	bne.n	8007020 <UART_SetConfig+0x2a4>
 8006fd6:	4b2b      	ldr	r3, [pc, #172]	; (8007084 <UART_SetConfig+0x308>)
 8006fd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fdc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006fe0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fe4:	d012      	beq.n	800700c <UART_SetConfig+0x290>
 8006fe6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fea:	d802      	bhi.n	8006ff2 <UART_SetConfig+0x276>
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d007      	beq.n	8007000 <UART_SetConfig+0x284>
 8006ff0:	e012      	b.n	8007018 <UART_SetConfig+0x29c>
 8006ff2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ff6:	d006      	beq.n	8007006 <UART_SetConfig+0x28a>
 8006ff8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006ffc:	d009      	beq.n	8007012 <UART_SetConfig+0x296>
 8006ffe:	e00b      	b.n	8007018 <UART_SetConfig+0x29c>
 8007000:	2300      	movs	r3, #0
 8007002:	76fb      	strb	r3, [r7, #27]
 8007004:	e00e      	b.n	8007024 <UART_SetConfig+0x2a8>
 8007006:	2302      	movs	r3, #2
 8007008:	76fb      	strb	r3, [r7, #27]
 800700a:	e00b      	b.n	8007024 <UART_SetConfig+0x2a8>
 800700c:	2304      	movs	r3, #4
 800700e:	76fb      	strb	r3, [r7, #27]
 8007010:	e008      	b.n	8007024 <UART_SetConfig+0x2a8>
 8007012:	2308      	movs	r3, #8
 8007014:	76fb      	strb	r3, [r7, #27]
 8007016:	e005      	b.n	8007024 <UART_SetConfig+0x2a8>
 8007018:	2310      	movs	r3, #16
 800701a:	76fb      	strb	r3, [r7, #27]
 800701c:	bf00      	nop
 800701e:	e001      	b.n	8007024 <UART_SetConfig+0x2a8>
 8007020:	2310      	movs	r3, #16
 8007022:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4a14      	ldr	r2, [pc, #80]	; (800707c <UART_SetConfig+0x300>)
 800702a:	4293      	cmp	r3, r2
 800702c:	f040 80a1 	bne.w	8007172 <UART_SetConfig+0x3f6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007030:	7efb      	ldrb	r3, [r7, #27]
 8007032:	2b08      	cmp	r3, #8
 8007034:	d836      	bhi.n	80070a4 <UART_SetConfig+0x328>
 8007036:	a201      	add	r2, pc, #4	; (adr r2, 800703c <UART_SetConfig+0x2c0>)
 8007038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800703c:	08007061 	.word	0x08007061
 8007040:	080070a5 	.word	0x080070a5
 8007044:	08007069 	.word	0x08007069
 8007048:	080070a5 	.word	0x080070a5
 800704c:	0800706f 	.word	0x0800706f
 8007050:	080070a5 	.word	0x080070a5
 8007054:	080070a5 	.word	0x080070a5
 8007058:	080070a5 	.word	0x080070a5
 800705c:	0800709d 	.word	0x0800709d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007060:	f7ff fb7e 	bl	8006760 <HAL_RCC_GetPCLK1Freq>
 8007064:	6178      	str	r0, [r7, #20]
        break;
 8007066:	e022      	b.n	80070ae <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007068:	4b0b      	ldr	r3, [pc, #44]	; (8007098 <UART_SetConfig+0x31c>)
 800706a:	617b      	str	r3, [r7, #20]
        break;
 800706c:	e01f      	b.n	80070ae <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800706e:	f7ff fb09 	bl	8006684 <HAL_RCC_GetSysClockFreq>
 8007072:	6178      	str	r0, [r7, #20]
        break;
 8007074:	e01b      	b.n	80070ae <UART_SetConfig+0x332>
 8007076:	bf00      	nop
 8007078:	cfff69f3 	.word	0xcfff69f3
 800707c:	40008000 	.word	0x40008000
 8007080:	40013800 	.word	0x40013800
 8007084:	40021000 	.word	0x40021000
 8007088:	40004400 	.word	0x40004400
 800708c:	40004800 	.word	0x40004800
 8007090:	40004c00 	.word	0x40004c00
 8007094:	40005000 	.word	0x40005000
 8007098:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800709c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80070a0:	617b      	str	r3, [r7, #20]
        break;
 80070a2:	e004      	b.n	80070ae <UART_SetConfig+0x332>
      default:
        pclk = 0U;
 80070a4:	2300      	movs	r3, #0
 80070a6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80070a8:	2301      	movs	r3, #1
 80070aa:	76bb      	strb	r3, [r7, #26]
        break;
 80070ac:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	f000 811d 	beq.w	80072f0 <UART_SetConfig+0x574>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ba:	4a97      	ldr	r2, [pc, #604]	; (8007318 <UART_SetConfig+0x59c>)
 80070bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80070c0:	461a      	mov	r2, r3
 80070c2:	697b      	ldr	r3, [r7, #20]
 80070c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80070c8:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	685a      	ldr	r2, [r3, #4]
 80070ce:	4613      	mov	r3, r2
 80070d0:	005b      	lsls	r3, r3, #1
 80070d2:	4413      	add	r3, r2
 80070d4:	68ba      	ldr	r2, [r7, #8]
 80070d6:	429a      	cmp	r2, r3
 80070d8:	d305      	bcc.n	80070e6 <UART_SetConfig+0x36a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	685b      	ldr	r3, [r3, #4]
 80070de:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80070e0:	68ba      	ldr	r2, [r7, #8]
 80070e2:	429a      	cmp	r2, r3
 80070e4:	d902      	bls.n	80070ec <UART_SetConfig+0x370>
      {
        ret = HAL_ERROR;
 80070e6:	2301      	movs	r3, #1
 80070e8:	76bb      	strb	r3, [r7, #26]
 80070ea:	e101      	b.n	80072f0 <UART_SetConfig+0x574>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80070ec:	697b      	ldr	r3, [r7, #20]
 80070ee:	4618      	mov	r0, r3
 80070f0:	f04f 0100 	mov.w	r1, #0
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070f8:	4a87      	ldr	r2, [pc, #540]	; (8007318 <UART_SetConfig+0x59c>)
 80070fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80070fe:	b29b      	uxth	r3, r3
 8007100:	f04f 0400 	mov.w	r4, #0
 8007104:	461a      	mov	r2, r3
 8007106:	4623      	mov	r3, r4
 8007108:	f7f9 f886 	bl	8000218 <__aeabi_uldivmod>
 800710c:	4603      	mov	r3, r0
 800710e:	460c      	mov	r4, r1
 8007110:	4619      	mov	r1, r3
 8007112:	4622      	mov	r2, r4
 8007114:	f04f 0300 	mov.w	r3, #0
 8007118:	f04f 0400 	mov.w	r4, #0
 800711c:	0214      	lsls	r4, r2, #8
 800711e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8007122:	020b      	lsls	r3, r1, #8
 8007124:	687a      	ldr	r2, [r7, #4]
 8007126:	6852      	ldr	r2, [r2, #4]
 8007128:	0852      	lsrs	r2, r2, #1
 800712a:	4611      	mov	r1, r2
 800712c:	f04f 0200 	mov.w	r2, #0
 8007130:	eb13 0b01 	adds.w	fp, r3, r1
 8007134:	eb44 0c02 	adc.w	ip, r4, r2
 8007138:	4658      	mov	r0, fp
 800713a:	4661      	mov	r1, ip
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	685b      	ldr	r3, [r3, #4]
 8007140:	f04f 0400 	mov.w	r4, #0
 8007144:	461a      	mov	r2, r3
 8007146:	4623      	mov	r3, r4
 8007148:	f7f9 f866 	bl	8000218 <__aeabi_uldivmod>
 800714c:	4603      	mov	r3, r0
 800714e:	460c      	mov	r4, r1
 8007150:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007152:	693b      	ldr	r3, [r7, #16]
 8007154:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007158:	d308      	bcc.n	800716c <UART_SetConfig+0x3f0>
 800715a:	693b      	ldr	r3, [r7, #16]
 800715c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007160:	d204      	bcs.n	800716c <UART_SetConfig+0x3f0>
        {
          huart->Instance->BRR = usartdiv;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	693a      	ldr	r2, [r7, #16]
 8007168:	60da      	str	r2, [r3, #12]
 800716a:	e0c1      	b.n	80072f0 <UART_SetConfig+0x574>
        }
        else
        {
          ret = HAL_ERROR;
 800716c:	2301      	movs	r3, #1
 800716e:	76bb      	strb	r3, [r7, #26]
 8007170:	e0be      	b.n	80072f0 <UART_SetConfig+0x574>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	69db      	ldr	r3, [r3, #28]
 8007176:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800717a:	d164      	bne.n	8007246 <UART_SetConfig+0x4ca>
  {
    switch (clocksource)
 800717c:	7efb      	ldrb	r3, [r7, #27]
 800717e:	2b08      	cmp	r3, #8
 8007180:	d827      	bhi.n	80071d2 <UART_SetConfig+0x456>
 8007182:	a201      	add	r2, pc, #4	; (adr r2, 8007188 <UART_SetConfig+0x40c>)
 8007184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007188:	080071ad 	.word	0x080071ad
 800718c:	080071b5 	.word	0x080071b5
 8007190:	080071bd 	.word	0x080071bd
 8007194:	080071d3 	.word	0x080071d3
 8007198:	080071c3 	.word	0x080071c3
 800719c:	080071d3 	.word	0x080071d3
 80071a0:	080071d3 	.word	0x080071d3
 80071a4:	080071d3 	.word	0x080071d3
 80071a8:	080071cb 	.word	0x080071cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80071ac:	f7ff fad8 	bl	8006760 <HAL_RCC_GetPCLK1Freq>
 80071b0:	6178      	str	r0, [r7, #20]
        break;
 80071b2:	e013      	b.n	80071dc <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80071b4:	f7ff faea 	bl	800678c <HAL_RCC_GetPCLK2Freq>
 80071b8:	6178      	str	r0, [r7, #20]
        break;
 80071ba:	e00f      	b.n	80071dc <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80071bc:	4b57      	ldr	r3, [pc, #348]	; (800731c <UART_SetConfig+0x5a0>)
 80071be:	617b      	str	r3, [r7, #20]
        break;
 80071c0:	e00c      	b.n	80071dc <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80071c2:	f7ff fa5f 	bl	8006684 <HAL_RCC_GetSysClockFreq>
 80071c6:	6178      	str	r0, [r7, #20]
        break;
 80071c8:	e008      	b.n	80071dc <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80071ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80071ce:	617b      	str	r3, [r7, #20]
        break;
 80071d0:	e004      	b.n	80071dc <UART_SetConfig+0x460>
      default:
        pclk = 0U;
 80071d2:	2300      	movs	r3, #0
 80071d4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80071d6:	2301      	movs	r3, #1
 80071d8:	76bb      	strb	r3, [r7, #26]
        break;
 80071da:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80071dc:	697b      	ldr	r3, [r7, #20]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	f000 8086 	beq.w	80072f0 <UART_SetConfig+0x574>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071e8:	4a4b      	ldr	r2, [pc, #300]	; (8007318 <UART_SetConfig+0x59c>)
 80071ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80071ee:	461a      	mov	r2, r3
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80071f6:	005a      	lsls	r2, r3, #1
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	685b      	ldr	r3, [r3, #4]
 80071fc:	085b      	lsrs	r3, r3, #1
 80071fe:	441a      	add	r2, r3
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	685b      	ldr	r3, [r3, #4]
 8007204:	fbb2 f3f3 	udiv	r3, r2, r3
 8007208:	b29b      	uxth	r3, r3
 800720a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800720c:	693b      	ldr	r3, [r7, #16]
 800720e:	2b0f      	cmp	r3, #15
 8007210:	d916      	bls.n	8007240 <UART_SetConfig+0x4c4>
 8007212:	693b      	ldr	r3, [r7, #16]
 8007214:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007218:	d212      	bcs.n	8007240 <UART_SetConfig+0x4c4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800721a:	693b      	ldr	r3, [r7, #16]
 800721c:	b29b      	uxth	r3, r3
 800721e:	f023 030f 	bic.w	r3, r3, #15
 8007222:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007224:	693b      	ldr	r3, [r7, #16]
 8007226:	085b      	lsrs	r3, r3, #1
 8007228:	b29b      	uxth	r3, r3
 800722a:	f003 0307 	and.w	r3, r3, #7
 800722e:	b29a      	uxth	r2, r3
 8007230:	89fb      	ldrh	r3, [r7, #14]
 8007232:	4313      	orrs	r3, r2
 8007234:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	89fa      	ldrh	r2, [r7, #14]
 800723c:	60da      	str	r2, [r3, #12]
 800723e:	e057      	b.n	80072f0 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 8007240:	2301      	movs	r3, #1
 8007242:	76bb      	strb	r3, [r7, #26]
 8007244:	e054      	b.n	80072f0 <UART_SetConfig+0x574>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007246:	7efb      	ldrb	r3, [r7, #27]
 8007248:	2b08      	cmp	r3, #8
 800724a:	d828      	bhi.n	800729e <UART_SetConfig+0x522>
 800724c:	a201      	add	r2, pc, #4	; (adr r2, 8007254 <UART_SetConfig+0x4d8>)
 800724e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007252:	bf00      	nop
 8007254:	08007279 	.word	0x08007279
 8007258:	08007281 	.word	0x08007281
 800725c:	08007289 	.word	0x08007289
 8007260:	0800729f 	.word	0x0800729f
 8007264:	0800728f 	.word	0x0800728f
 8007268:	0800729f 	.word	0x0800729f
 800726c:	0800729f 	.word	0x0800729f
 8007270:	0800729f 	.word	0x0800729f
 8007274:	08007297 	.word	0x08007297
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007278:	f7ff fa72 	bl	8006760 <HAL_RCC_GetPCLK1Freq>
 800727c:	6178      	str	r0, [r7, #20]
        break;
 800727e:	e013      	b.n	80072a8 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007280:	f7ff fa84 	bl	800678c <HAL_RCC_GetPCLK2Freq>
 8007284:	6178      	str	r0, [r7, #20]
        break;
 8007286:	e00f      	b.n	80072a8 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007288:	4b24      	ldr	r3, [pc, #144]	; (800731c <UART_SetConfig+0x5a0>)
 800728a:	617b      	str	r3, [r7, #20]
        break;
 800728c:	e00c      	b.n	80072a8 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800728e:	f7ff f9f9 	bl	8006684 <HAL_RCC_GetSysClockFreq>
 8007292:	6178      	str	r0, [r7, #20]
        break;
 8007294:	e008      	b.n	80072a8 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007296:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800729a:	617b      	str	r3, [r7, #20]
        break;
 800729c:	e004      	b.n	80072a8 <UART_SetConfig+0x52c>
      default:
        pclk = 0U;
 800729e:	2300      	movs	r3, #0
 80072a0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80072a2:	2301      	movs	r3, #1
 80072a4:	76bb      	strb	r3, [r7, #26]
        break;
 80072a6:	bf00      	nop
    }

    if (pclk != 0U)
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d020      	beq.n	80072f0 <UART_SetConfig+0x574>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072b2:	4a19      	ldr	r2, [pc, #100]	; (8007318 <UART_SetConfig+0x59c>)
 80072b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80072b8:	461a      	mov	r2, r3
 80072ba:	697b      	ldr	r3, [r7, #20]
 80072bc:	fbb3 f2f2 	udiv	r2, r3, r2
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	685b      	ldr	r3, [r3, #4]
 80072c4:	085b      	lsrs	r3, r3, #1
 80072c6:	441a      	add	r2, r3
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	685b      	ldr	r3, [r3, #4]
 80072cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80072d0:	b29b      	uxth	r3, r3
 80072d2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80072d4:	693b      	ldr	r3, [r7, #16]
 80072d6:	2b0f      	cmp	r3, #15
 80072d8:	d908      	bls.n	80072ec <UART_SetConfig+0x570>
 80072da:	693b      	ldr	r3, [r7, #16]
 80072dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072e0:	d204      	bcs.n	80072ec <UART_SetConfig+0x570>
      {
        huart->Instance->BRR = usartdiv;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	693a      	ldr	r2, [r7, #16]
 80072e8:	60da      	str	r2, [r3, #12]
 80072ea:	e001      	b.n	80072f0 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 80072ec:	2301      	movs	r3, #1
 80072ee:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2201      	movs	r2, #1
 80072f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2201      	movs	r2, #1
 80072fc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2200      	movs	r2, #0
 8007304:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2200      	movs	r2, #0
 800730a:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800730c:	7ebb      	ldrb	r3, [r7, #26]
}
 800730e:	4618      	mov	r0, r3
 8007310:	3720      	adds	r7, #32
 8007312:	46bd      	mov	sp, r7
 8007314:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8007318:	080078c8 	.word	0x080078c8
 800731c:	00f42400 	.word	0x00f42400

08007320 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007320:	b480      	push	{r7}
 8007322:	b083      	sub	sp, #12
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800732c:	f003 0301 	and.w	r3, r3, #1
 8007330:	2b00      	cmp	r3, #0
 8007332:	d00a      	beq.n	800734a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	685b      	ldr	r3, [r3, #4]
 800733a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	430a      	orrs	r2, r1
 8007348:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800734e:	f003 0302 	and.w	r3, r3, #2
 8007352:	2b00      	cmp	r3, #0
 8007354:	d00a      	beq.n	800736c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	685b      	ldr	r3, [r3, #4]
 800735c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	430a      	orrs	r2, r1
 800736a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007370:	f003 0304 	and.w	r3, r3, #4
 8007374:	2b00      	cmp	r3, #0
 8007376:	d00a      	beq.n	800738e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	685b      	ldr	r3, [r3, #4]
 800737e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	430a      	orrs	r2, r1
 800738c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007392:	f003 0308 	and.w	r3, r3, #8
 8007396:	2b00      	cmp	r3, #0
 8007398:	d00a      	beq.n	80073b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	685b      	ldr	r3, [r3, #4]
 80073a0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	430a      	orrs	r2, r1
 80073ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073b4:	f003 0310 	and.w	r3, r3, #16
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d00a      	beq.n	80073d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	689b      	ldr	r3, [r3, #8]
 80073c2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	430a      	orrs	r2, r1
 80073d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073d6:	f003 0320 	and.w	r3, r3, #32
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d00a      	beq.n	80073f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	689b      	ldr	r3, [r3, #8]
 80073e4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	430a      	orrs	r2, r1
 80073f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d01a      	beq.n	8007436 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	685b      	ldr	r3, [r3, #4]
 8007406:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	430a      	orrs	r2, r1
 8007414:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800741a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800741e:	d10a      	bne.n	8007436 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	685b      	ldr	r3, [r3, #4]
 8007426:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	430a      	orrs	r2, r1
 8007434:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800743a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800743e:	2b00      	cmp	r3, #0
 8007440:	d00a      	beq.n	8007458 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	685b      	ldr	r3, [r3, #4]
 8007448:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	430a      	orrs	r2, r1
 8007456:	605a      	str	r2, [r3, #4]
  }
}
 8007458:	bf00      	nop
 800745a:	370c      	adds	r7, #12
 800745c:	46bd      	mov	sp, r7
 800745e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007462:	4770      	bx	lr

08007464 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b086      	sub	sp, #24
 8007468:	af02      	add	r7, sp, #8
 800746a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2200      	movs	r2, #0
 8007470:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007474:	f7f9 fe56 	bl	8001124 <HAL_GetTick>
 8007478:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f003 0308 	and.w	r3, r3, #8
 8007484:	2b08      	cmp	r3, #8
 8007486:	d10e      	bne.n	80074a6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007488:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800748c:	9300      	str	r3, [sp, #0]
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	2200      	movs	r2, #0
 8007492:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f000 f82c 	bl	80074f4 <UART_WaitOnFlagUntilTimeout>
 800749c:	4603      	mov	r3, r0
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d001      	beq.n	80074a6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80074a2:	2303      	movs	r3, #3
 80074a4:	e022      	b.n	80074ec <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f003 0304 	and.w	r3, r3, #4
 80074b0:	2b04      	cmp	r3, #4
 80074b2:	d10e      	bne.n	80074d2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80074b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80074b8:	9300      	str	r3, [sp, #0]
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	2200      	movs	r2, #0
 80074be:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f000 f816 	bl	80074f4 <UART_WaitOnFlagUntilTimeout>
 80074c8:	4603      	mov	r3, r0
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d001      	beq.n	80074d2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80074ce:	2303      	movs	r3, #3
 80074d0:	e00c      	b.n	80074ec <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2220      	movs	r2, #32
 80074d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2220      	movs	r2, #32
 80074de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2200      	movs	r2, #0
 80074e6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80074ea:	2300      	movs	r3, #0
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	3710      	adds	r7, #16
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bd80      	pop	{r7, pc}

080074f4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b084      	sub	sp, #16
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	60f8      	str	r0, [r7, #12]
 80074fc:	60b9      	str	r1, [r7, #8]
 80074fe:	603b      	str	r3, [r7, #0]
 8007500:	4613      	mov	r3, r2
 8007502:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007504:	e062      	b.n	80075cc <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007506:	69bb      	ldr	r3, [r7, #24]
 8007508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800750c:	d05e      	beq.n	80075cc <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800750e:	f7f9 fe09 	bl	8001124 <HAL_GetTick>
 8007512:	4602      	mov	r2, r0
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	1ad3      	subs	r3, r2, r3
 8007518:	69ba      	ldr	r2, [r7, #24]
 800751a:	429a      	cmp	r2, r3
 800751c:	d302      	bcc.n	8007524 <UART_WaitOnFlagUntilTimeout+0x30>
 800751e:	69bb      	ldr	r3, [r7, #24]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d11d      	bne.n	8007560 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	681a      	ldr	r2, [r3, #0]
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007532:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	689a      	ldr	r2, [r3, #8]
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f022 0201 	bic.w	r2, r2, #1
 8007542:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	2220      	movs	r2, #32
 8007548:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	2220      	movs	r2, #32
 8007550:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	2200      	movs	r2, #0
 8007558:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800755c:	2303      	movs	r3, #3
 800755e:	e045      	b.n	80075ec <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f003 0304 	and.w	r3, r3, #4
 800756a:	2b00      	cmp	r3, #0
 800756c:	d02e      	beq.n	80075cc <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	69db      	ldr	r3, [r3, #28]
 8007574:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007578:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800757c:	d126      	bne.n	80075cc <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007586:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	681a      	ldr	r2, [r3, #0]
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007596:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	689a      	ldr	r2, [r3, #8]
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f022 0201 	bic.w	r2, r2, #1
 80075a6:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	2220      	movs	r2, #32
 80075ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	2220      	movs	r2, #32
 80075b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	2220      	movs	r2, #32
 80075bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	2200      	movs	r2, #0
 80075c4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 80075c8:	2303      	movs	r3, #3
 80075ca:	e00f      	b.n	80075ec <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	69da      	ldr	r2, [r3, #28]
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	4013      	ands	r3, r2
 80075d6:	68ba      	ldr	r2, [r7, #8]
 80075d8:	429a      	cmp	r2, r3
 80075da:	bf0c      	ite	eq
 80075dc:	2301      	moveq	r3, #1
 80075de:	2300      	movne	r3, #0
 80075e0:	b2db      	uxtb	r3, r3
 80075e2:	461a      	mov	r2, r3
 80075e4:	79fb      	ldrb	r3, [r7, #7]
 80075e6:	429a      	cmp	r2, r3
 80075e8:	d08d      	beq.n	8007506 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80075ea:	2300      	movs	r3, #0
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	3710      	adds	r7, #16
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}

080075f4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80075f4:	b480      	push	{r7}
 80075f6:	b085      	sub	sp, #20
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007602:	2b01      	cmp	r3, #1
 8007604:	d101      	bne.n	800760a <HAL_UARTEx_DisableFifoMode+0x16>
 8007606:	2302      	movs	r3, #2
 8007608:	e027      	b.n	800765a <HAL_UARTEx_DisableFifoMode+0x66>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2201      	movs	r2, #1
 800760e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2224      	movs	r2, #36	; 0x24
 8007616:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	681a      	ldr	r2, [r3, #0]
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f022 0201 	bic.w	r2, r2, #1
 8007630:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007638:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2200      	movs	r2, #0
 800763e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	68fa      	ldr	r2, [r7, #12]
 8007646:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2220      	movs	r2, #32
 800764c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2200      	movs	r2, #0
 8007654:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007658:	2300      	movs	r3, #0
}
 800765a:	4618      	mov	r0, r3
 800765c:	3714      	adds	r7, #20
 800765e:	46bd      	mov	sp, r7
 8007660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007664:	4770      	bx	lr

08007666 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007666:	b580      	push	{r7, lr}
 8007668:	b084      	sub	sp, #16
 800766a:	af00      	add	r7, sp, #0
 800766c:	6078      	str	r0, [r7, #4]
 800766e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007676:	2b01      	cmp	r3, #1
 8007678:	d101      	bne.n	800767e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800767a:	2302      	movs	r3, #2
 800767c:	e02d      	b.n	80076da <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2201      	movs	r2, #1
 8007682:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2224      	movs	r2, #36	; 0x24
 800768a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	681a      	ldr	r2, [r3, #0]
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f022 0201 	bic.w	r2, r2, #1
 80076a4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	689b      	ldr	r3, [r3, #8]
 80076ac:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	683a      	ldr	r2, [r7, #0]
 80076b6:	430a      	orrs	r2, r1
 80076b8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f000 f850 	bl	8007760 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	68fa      	ldr	r2, [r7, #12]
 80076c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2220      	movs	r2, #32
 80076cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2200      	movs	r2, #0
 80076d4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80076d8:	2300      	movs	r3, #0
}
 80076da:	4618      	mov	r0, r3
 80076dc:	3710      	adds	r7, #16
 80076de:	46bd      	mov	sp, r7
 80076e0:	bd80      	pop	{r7, pc}

080076e2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80076e2:	b580      	push	{r7, lr}
 80076e4:	b084      	sub	sp, #16
 80076e6:	af00      	add	r7, sp, #0
 80076e8:	6078      	str	r0, [r7, #4]
 80076ea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80076f2:	2b01      	cmp	r3, #1
 80076f4:	d101      	bne.n	80076fa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80076f6:	2302      	movs	r3, #2
 80076f8:	e02d      	b.n	8007756 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2201      	movs	r2, #1
 80076fe:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2224      	movs	r2, #36	; 0x24
 8007706:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	681a      	ldr	r2, [r3, #0]
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f022 0201 	bic.w	r2, r2, #1
 8007720:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	689b      	ldr	r3, [r3, #8]
 8007728:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	683a      	ldr	r2, [r7, #0]
 8007732:	430a      	orrs	r2, r1
 8007734:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f000 f812 	bl	8007760 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	68fa      	ldr	r2, [r7, #12]
 8007742:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2220      	movs	r2, #32
 8007748:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2200      	movs	r2, #0
 8007750:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007754:	2300      	movs	r3, #0
}
 8007756:	4618      	mov	r0, r3
 8007758:	3710      	adds	r7, #16
 800775a:	46bd      	mov	sp, r7
 800775c:	bd80      	pop	{r7, pc}
	...

08007760 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007760:	b480      	push	{r7}
 8007762:	b089      	sub	sp, #36	; 0x24
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8007768:	4a2f      	ldr	r2, [pc, #188]	; (8007828 <UARTEx_SetNbDataToProcess+0xc8>)
 800776a:	f107 0314 	add.w	r3, r7, #20
 800776e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007772:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8007776:	4a2d      	ldr	r2, [pc, #180]	; (800782c <UARTEx_SetNbDataToProcess+0xcc>)
 8007778:	f107 030c 	add.w	r3, r7, #12
 800777c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007780:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007788:	2b00      	cmp	r3, #0
 800778a:	d108      	bne.n	800779e <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2201      	movs	r2, #1
 8007790:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2201      	movs	r2, #1
 8007798:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800779c:	e03d      	b.n	800781a <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800779e:	2308      	movs	r3, #8
 80077a0:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80077a2:	2308      	movs	r3, #8
 80077a4:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	689b      	ldr	r3, [r3, #8]
 80077ac:	0e5b      	lsrs	r3, r3, #25
 80077ae:	b2db      	uxtb	r3, r3
 80077b0:	f003 0307 	and.w	r3, r3, #7
 80077b4:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	689b      	ldr	r3, [r3, #8]
 80077bc:	0f5b      	lsrs	r3, r3, #29
 80077be:	b2db      	uxtb	r3, r3
 80077c0:	f003 0307 	and.w	r3, r3, #7
 80077c4:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80077c6:	7fbb      	ldrb	r3, [r7, #30]
 80077c8:	7f3a      	ldrb	r2, [r7, #28]
 80077ca:	f107 0120 	add.w	r1, r7, #32
 80077ce:	440a      	add	r2, r1
 80077d0:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80077d4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80077d8:	7f3a      	ldrb	r2, [r7, #28]
 80077da:	f107 0120 	add.w	r1, r7, #32
 80077de:	440a      	add	r2, r1
 80077e0:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80077e4:	fb93 f3f2 	sdiv	r3, r3, r2
 80077e8:	b29a      	uxth	r2, r3
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80077f0:	7ffb      	ldrb	r3, [r7, #31]
 80077f2:	7f7a      	ldrb	r2, [r7, #29]
 80077f4:	f107 0120 	add.w	r1, r7, #32
 80077f8:	440a      	add	r2, r1
 80077fa:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80077fe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007802:	7f7a      	ldrb	r2, [r7, #29]
 8007804:	f107 0120 	add.w	r1, r7, #32
 8007808:	440a      	add	r2, r1
 800780a:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800780e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007812:	b29a      	uxth	r2, r3
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800781a:	bf00      	nop
 800781c:	3724      	adds	r7, #36	; 0x24
 800781e:	46bd      	mov	sp, r7
 8007820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007824:	4770      	bx	lr
 8007826:	bf00      	nop
 8007828:	080078a0 	.word	0x080078a0
 800782c:	080078a8 	.word	0x080078a8

08007830 <__libc_init_array>:
 8007830:	b570      	push	{r4, r5, r6, lr}
 8007832:	4e0d      	ldr	r6, [pc, #52]	; (8007868 <__libc_init_array+0x38>)
 8007834:	4c0d      	ldr	r4, [pc, #52]	; (800786c <__libc_init_array+0x3c>)
 8007836:	1ba4      	subs	r4, r4, r6
 8007838:	10a4      	asrs	r4, r4, #2
 800783a:	2500      	movs	r5, #0
 800783c:	42a5      	cmp	r5, r4
 800783e:	d109      	bne.n	8007854 <__libc_init_array+0x24>
 8007840:	4e0b      	ldr	r6, [pc, #44]	; (8007870 <__libc_init_array+0x40>)
 8007842:	4c0c      	ldr	r4, [pc, #48]	; (8007874 <__libc_init_array+0x44>)
 8007844:	f000 f820 	bl	8007888 <_init>
 8007848:	1ba4      	subs	r4, r4, r6
 800784a:	10a4      	asrs	r4, r4, #2
 800784c:	2500      	movs	r5, #0
 800784e:	42a5      	cmp	r5, r4
 8007850:	d105      	bne.n	800785e <__libc_init_array+0x2e>
 8007852:	bd70      	pop	{r4, r5, r6, pc}
 8007854:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007858:	4798      	blx	r3
 800785a:	3501      	adds	r5, #1
 800785c:	e7ee      	b.n	800783c <__libc_init_array+0xc>
 800785e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007862:	4798      	blx	r3
 8007864:	3501      	adds	r5, #1
 8007866:	e7f2      	b.n	800784e <__libc_init_array+0x1e>
 8007868:	080078e8 	.word	0x080078e8
 800786c:	080078e8 	.word	0x080078e8
 8007870:	080078e8 	.word	0x080078e8
 8007874:	080078ec 	.word	0x080078ec

08007878 <memset>:
 8007878:	4402      	add	r2, r0
 800787a:	4603      	mov	r3, r0
 800787c:	4293      	cmp	r3, r2
 800787e:	d100      	bne.n	8007882 <memset+0xa>
 8007880:	4770      	bx	lr
 8007882:	f803 1b01 	strb.w	r1, [r3], #1
 8007886:	e7f9      	b.n	800787c <memset+0x4>

08007888 <_init>:
 8007888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800788a:	bf00      	nop
 800788c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800788e:	bc08      	pop	{r3}
 8007890:	469e      	mov	lr, r3
 8007892:	4770      	bx	lr

08007894 <_fini>:
 8007894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007896:	bf00      	nop
 8007898:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800789a:	bc08      	pop	{r3}
 800789c:	469e      	mov	lr, r3
 800789e:	4770      	bx	lr
