
RcMPPT32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d54  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08004edc  08004edc  00014edc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f14  08004f14  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004f14  08004f14  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004f14  08004f14  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f14  08004f14  00014f14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f18  08004f18  00014f18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004f1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e8  2000000c  08004f28  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002f4  08004f28  000202f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013ac8  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000220a  00000000  00000000  00033b04  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001248  00000000  00000000  00035d10  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001130  00000000  00000000  00036f58  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001e818  00000000  00000000  00038088  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ed19  00000000  00000000  000568a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000bff45  00000000  00000000  000655b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001254fe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f58  00000000  00000000  0012557c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004ec4 	.word	0x08004ec4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004ec4 	.word	0x08004ec4

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 feea 	bl	8000fa4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f814 	bl	80001fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 fb88 	bl	80008e8 <MX_GPIO_Init>
  MX_ADC1_Init();
 80001d8:	f000 f874 	bl	80002c4 <MX_ADC1_Init>
  MX_ADC2_Init();
 80001dc:	f000 f8e2 	bl	80003a4 <MX_ADC2_Init>
  MX_CAN_Init();
 80001e0:	f000 f93e 	bl	8000460 <MX_CAN_Init>
  MX_HRTIM1_Init();
 80001e4:	f000 f970 	bl	80004c8 <MX_HRTIM1_Init>
  MX_I2C1_Init();
 80001e8:	f000 fa48 	bl	800067c <MX_I2C1_Init>
  MX_RTC_Init();
 80001ec:	f000 fa86 	bl	80006fc <MX_RTC_Init>
  MX_SPI1_Init();
 80001f0:	f000 fb10 	bl	8000814 <MX_SPI1_Init>
  MX_USART3_Init();
 80001f4:	f000 fb4c 	bl	8000890 <MX_USART3_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001f8:	e7fe      	b.n	80001f8 <main+0x30>
	...

080001fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b096      	sub	sp, #88	; 0x58
 8000200:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000202:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000206:	2228      	movs	r2, #40	; 0x28
 8000208:	2100      	movs	r1, #0
 800020a:	4618      	mov	r0, r3
 800020c:	f004 fe52 	bl	8004eb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000210:	f107 031c 	add.w	r3, r7, #28
 8000214:	2200      	movs	r2, #0
 8000216:	601a      	str	r2, [r3, #0]
 8000218:	605a      	str	r2, [r3, #4]
 800021a:	609a      	str	r2, [r3, #8]
 800021c:	60da      	str	r2, [r3, #12]
 800021e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000220:	463b      	mov	r3, r7
 8000222:	2200      	movs	r2, #0
 8000224:	601a      	str	r2, [r3, #0]
 8000226:	605a      	str	r2, [r3, #4]
 8000228:	609a      	str	r2, [r3, #8]
 800022a:	60da      	str	r2, [r3, #12]
 800022c:	611a      	str	r2, [r3, #16]
 800022e:	615a      	str	r2, [r3, #20]
 8000230:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000232:	230a      	movs	r3, #10
 8000234:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000236:	2301      	movs	r3, #1
 8000238:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800023a:	2310      	movs	r3, #16
 800023c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800023e:	2301      	movs	r3, #1
 8000240:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000242:	2302      	movs	r3, #2
 8000244:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000246:	2300      	movs	r3, #0
 8000248:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 800024a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800024e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000250:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000254:	4618      	mov	r0, r3
 8000256:	f002 fdc1 	bl	8002ddc <HAL_RCC_OscConfig>
 800025a:	4603      	mov	r3, r0
 800025c:	2b00      	cmp	r3, #0
 800025e:	d001      	beq.n	8000264 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000260:	f000 fb7e 	bl	8000960 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000264:	230f      	movs	r3, #15
 8000266:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000268:	2300      	movs	r3, #0
 800026a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800026c:	2300      	movs	r3, #0
 800026e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000270:	2300      	movs	r3, #0
 8000272:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000274:	2300      	movs	r3, #0
 8000276:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000278:	f107 031c 	add.w	r3, r7, #28
 800027c:	2100      	movs	r1, #0
 800027e:	4618      	mov	r0, r3
 8000280:	f003 fcb4 	bl	8003bec <HAL_RCC_ClockConfig>
 8000284:	4603      	mov	r3, r0
 8000286:	2b00      	cmp	r3, #0
 8000288:	d001      	beq.n	800028e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800028a:	f000 fb69 	bl	8000960 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_HRTIM1|RCC_PERIPHCLK_I2C1
 800028e:	4b0c      	ldr	r3, [pc, #48]	; (80002c0 <SystemClock_Config+0xc4>)
 8000290:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000292:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000296:	613b      	str	r3, [r7, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000298:	2300      	movs	r3, #0
 800029a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800029c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80002a0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Hrtim1ClockSelection = RCC_HRTIM1CLK_HCLK;
 80002a2:	2300      	movs	r3, #0
 80002a4:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002a6:	463b      	mov	r3, r7
 80002a8:	4618      	mov	r0, r3
 80002aa:	f003 fed5 	bl	8004058 <HAL_RCCEx_PeriphCLKConfig>
 80002ae:	4603      	mov	r3, r0
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d001      	beq.n	80002b8 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80002b4:	f000 fb54 	bl	8000960 <Error_Handler>
  }
}
 80002b8:	bf00      	nop
 80002ba:	3758      	adds	r7, #88	; 0x58
 80002bc:	46bd      	mov	sp, r7
 80002be:	bd80      	pop	{r7, pc}
 80002c0:	000140a0 	.word	0x000140a0

080002c4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b08a      	sub	sp, #40	; 0x28
 80002c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80002ca:	f107 031c 	add.w	r3, r7, #28
 80002ce:	2200      	movs	r2, #0
 80002d0:	601a      	str	r2, [r3, #0]
 80002d2:	605a      	str	r2, [r3, #4]
 80002d4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80002d6:	1d3b      	adds	r3, r7, #4
 80002d8:	2200      	movs	r2, #0
 80002da:	601a      	str	r2, [r3, #0]
 80002dc:	605a      	str	r2, [r3, #4]
 80002de:	609a      	str	r2, [r3, #8]
 80002e0:	60da      	str	r2, [r3, #12]
 80002e2:	611a      	str	r2, [r3, #16]
 80002e4:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80002e6:	4b2e      	ldr	r3, [pc, #184]	; (80003a0 <MX_ADC1_Init+0xdc>)
 80002e8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80002ec:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80002ee:	4b2c      	ldr	r3, [pc, #176]	; (80003a0 <MX_ADC1_Init+0xdc>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80002f4:	4b2a      	ldr	r3, [pc, #168]	; (80003a0 <MX_ADC1_Init+0xdc>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80002fa:	4b29      	ldr	r3, [pc, #164]	; (80003a0 <MX_ADC1_Init+0xdc>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000300:	4b27      	ldr	r3, [pc, #156]	; (80003a0 <MX_ADC1_Init+0xdc>)
 8000302:	2200      	movs	r2, #0
 8000304:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000306:	4b26      	ldr	r3, [pc, #152]	; (80003a0 <MX_ADC1_Init+0xdc>)
 8000308:	2200      	movs	r2, #0
 800030a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800030e:	4b24      	ldr	r3, [pc, #144]	; (80003a0 <MX_ADC1_Init+0xdc>)
 8000310:	2200      	movs	r2, #0
 8000312:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000314:	4b22      	ldr	r3, [pc, #136]	; (80003a0 <MX_ADC1_Init+0xdc>)
 8000316:	2201      	movs	r2, #1
 8000318:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800031a:	4b21      	ldr	r3, [pc, #132]	; (80003a0 <MX_ADC1_Init+0xdc>)
 800031c:	2200      	movs	r2, #0
 800031e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000320:	4b1f      	ldr	r3, [pc, #124]	; (80003a0 <MX_ADC1_Init+0xdc>)
 8000322:	2201      	movs	r2, #1
 8000324:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000326:	4b1e      	ldr	r3, [pc, #120]	; (80003a0 <MX_ADC1_Init+0xdc>)
 8000328:	2200      	movs	r2, #0
 800032a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800032e:	4b1c      	ldr	r3, [pc, #112]	; (80003a0 <MX_ADC1_Init+0xdc>)
 8000330:	2204      	movs	r2, #4
 8000332:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000334:	4b1a      	ldr	r3, [pc, #104]	; (80003a0 <MX_ADC1_Init+0xdc>)
 8000336:	2200      	movs	r2, #0
 8000338:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800033a:	4b19      	ldr	r3, [pc, #100]	; (80003a0 <MX_ADC1_Init+0xdc>)
 800033c:	2200      	movs	r2, #0
 800033e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000340:	4817      	ldr	r0, [pc, #92]	; (80003a0 <MX_ADC1_Init+0xdc>)
 8000342:	f000 fe95 	bl	8001070 <HAL_ADC_Init>
 8000346:	4603      	mov	r3, r0
 8000348:	2b00      	cmp	r3, #0
 800034a:	d001      	beq.n	8000350 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 800034c:	f000 fb08 	bl	8000960 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000350:	2300      	movs	r3, #0
 8000352:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000354:	f107 031c 	add.w	r3, r7, #28
 8000358:	4619      	mov	r1, r3
 800035a:	4811      	ldr	r0, [pc, #68]	; (80003a0 <MX_ADC1_Init+0xdc>)
 800035c:	f001 fadc 	bl	8001918 <HAL_ADCEx_MultiModeConfigChannel>
 8000360:	4603      	mov	r3, r0
 8000362:	2b00      	cmp	r3, #0
 8000364:	d001      	beq.n	800036a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000366:	f000 fafb 	bl	8000960 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800036a:	2301      	movs	r3, #1
 800036c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800036e:	2301      	movs	r3, #1
 8000370:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000372:	2301      	movs	r3, #1
 8000374:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000376:	2300      	movs	r3, #0
 8000378:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800037a:	2300      	movs	r3, #0
 800037c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800037e:	2300      	movs	r3, #0
 8000380:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000382:	1d3b      	adds	r3, r7, #4
 8000384:	4619      	mov	r1, r3
 8000386:	4806      	ldr	r0, [pc, #24]	; (80003a0 <MX_ADC1_Init+0xdc>)
 8000388:	f001 f804 	bl	8001394 <HAL_ADC_ConfigChannel>
 800038c:	4603      	mov	r3, r0
 800038e:	2b00      	cmp	r3, #0
 8000390:	d001      	beq.n	8000396 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000392:	f000 fae5 	bl	8000960 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000396:	bf00      	nop
 8000398:	3728      	adds	r7, #40	; 0x28
 800039a:	46bd      	mov	sp, r7
 800039c:	bd80      	pop	{r7, pc}
 800039e:	bf00      	nop
 80003a0:	200000f0 	.word	0x200000f0

080003a4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b086      	sub	sp, #24
 80003a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80003aa:	463b      	mov	r3, r7
 80003ac:	2200      	movs	r2, #0
 80003ae:	601a      	str	r2, [r3, #0]
 80003b0:	605a      	str	r2, [r3, #4]
 80003b2:	609a      	str	r2, [r3, #8]
 80003b4:	60da      	str	r2, [r3, #12]
 80003b6:	611a      	str	r2, [r3, #16]
 80003b8:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 80003ba:	4b27      	ldr	r3, [pc, #156]	; (8000458 <MX_ADC2_Init+0xb4>)
 80003bc:	4a27      	ldr	r2, [pc, #156]	; (800045c <MX_ADC2_Init+0xb8>)
 80003be:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80003c0:	4b25      	ldr	r3, [pc, #148]	; (8000458 <MX_ADC2_Init+0xb4>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80003c6:	4b24      	ldr	r3, [pc, #144]	; (8000458 <MX_ADC2_Init+0xb4>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80003cc:	4b22      	ldr	r3, [pc, #136]	; (8000458 <MX_ADC2_Init+0xb4>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80003d2:	4b21      	ldr	r3, [pc, #132]	; (8000458 <MX_ADC2_Init+0xb4>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80003d8:	4b1f      	ldr	r3, [pc, #124]	; (8000458 <MX_ADC2_Init+0xb4>)
 80003da:	2200      	movs	r2, #0
 80003dc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80003e0:	4b1d      	ldr	r3, [pc, #116]	; (8000458 <MX_ADC2_Init+0xb4>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003e6:	4b1c      	ldr	r3, [pc, #112]	; (8000458 <MX_ADC2_Init+0xb4>)
 80003e8:	2201      	movs	r2, #1
 80003ea:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003ec:	4b1a      	ldr	r3, [pc, #104]	; (8000458 <MX_ADC2_Init+0xb4>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80003f2:	4b19      	ldr	r3, [pc, #100]	; (8000458 <MX_ADC2_Init+0xb4>)
 80003f4:	2201      	movs	r2, #1
 80003f6:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80003f8:	4b17      	ldr	r3, [pc, #92]	; (8000458 <MX_ADC2_Init+0xb4>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000400:	4b15      	ldr	r3, [pc, #84]	; (8000458 <MX_ADC2_Init+0xb4>)
 8000402:	2204      	movs	r2, #4
 8000404:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000406:	4b14      	ldr	r3, [pc, #80]	; (8000458 <MX_ADC2_Init+0xb4>)
 8000408:	2200      	movs	r2, #0
 800040a:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800040c:	4b12      	ldr	r3, [pc, #72]	; (8000458 <MX_ADC2_Init+0xb4>)
 800040e:	2200      	movs	r2, #0
 8000410:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000412:	4811      	ldr	r0, [pc, #68]	; (8000458 <MX_ADC2_Init+0xb4>)
 8000414:	f000 fe2c 	bl	8001070 <HAL_ADC_Init>
 8000418:	4603      	mov	r3, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d001      	beq.n	8000422 <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 800041e:	f000 fa9f 	bl	8000960 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000422:	2301      	movs	r3, #1
 8000424:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000426:	2301      	movs	r3, #1
 8000428:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800042a:	2300      	movs	r3, #0
 800042c:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800042e:	2300      	movs	r3, #0
 8000430:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000432:	2300      	movs	r3, #0
 8000434:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000436:	2300      	movs	r3, #0
 8000438:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800043a:	463b      	mov	r3, r7
 800043c:	4619      	mov	r1, r3
 800043e:	4806      	ldr	r0, [pc, #24]	; (8000458 <MX_ADC2_Init+0xb4>)
 8000440:	f000 ffa8 	bl	8001394 <HAL_ADC_ConfigChannel>
 8000444:	4603      	mov	r3, r0
 8000446:	2b00      	cmp	r3, #0
 8000448:	d001      	beq.n	800044e <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 800044a:	f000 fa89 	bl	8000960 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800044e:	bf00      	nop
 8000450:	3718      	adds	r7, #24
 8000452:	46bd      	mov	sp, r7
 8000454:	bd80      	pop	{r7, pc}
 8000456:	bf00      	nop
 8000458:	2000002c 	.word	0x2000002c
 800045c:	50000100 	.word	0x50000100

08000460 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000464:	4b16      	ldr	r3, [pc, #88]	; (80004c0 <MX_CAN_Init+0x60>)
 8000466:	4a17      	ldr	r2, [pc, #92]	; (80004c4 <MX_CAN_Init+0x64>)
 8000468:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 800046a:	4b15      	ldr	r3, [pc, #84]	; (80004c0 <MX_CAN_Init+0x60>)
 800046c:	2210      	movs	r2, #16
 800046e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000470:	4b13      	ldr	r3, [pc, #76]	; (80004c0 <MX_CAN_Init+0x60>)
 8000472:	2200      	movs	r2, #0
 8000474:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000476:	4b12      	ldr	r3, [pc, #72]	; (80004c0 <MX_CAN_Init+0x60>)
 8000478:	2200      	movs	r2, #0
 800047a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 800047c:	4b10      	ldr	r3, [pc, #64]	; (80004c0 <MX_CAN_Init+0x60>)
 800047e:	2200      	movs	r2, #0
 8000480:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000482:	4b0f      	ldr	r3, [pc, #60]	; (80004c0 <MX_CAN_Init+0x60>)
 8000484:	2200      	movs	r2, #0
 8000486:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000488:	4b0d      	ldr	r3, [pc, #52]	; (80004c0 <MX_CAN_Init+0x60>)
 800048a:	2200      	movs	r2, #0
 800048c:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800048e:	4b0c      	ldr	r3, [pc, #48]	; (80004c0 <MX_CAN_Init+0x60>)
 8000490:	2200      	movs	r2, #0
 8000492:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000494:	4b0a      	ldr	r3, [pc, #40]	; (80004c0 <MX_CAN_Init+0x60>)
 8000496:	2200      	movs	r2, #0
 8000498:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800049a:	4b09      	ldr	r3, [pc, #36]	; (80004c0 <MX_CAN_Init+0x60>)
 800049c:	2200      	movs	r2, #0
 800049e:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80004a0:	4b07      	ldr	r3, [pc, #28]	; (80004c0 <MX_CAN_Init+0x60>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80004a6:	4b06      	ldr	r3, [pc, #24]	; (80004c0 <MX_CAN_Init+0x60>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80004ac:	4804      	ldr	r0, [pc, #16]	; (80004c0 <MX_CAN_Init+0x60>)
 80004ae:	f001 fb58 	bl	8001b62 <HAL_CAN_Init>
 80004b2:	4603      	mov	r3, r0
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d001      	beq.n	80004bc <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 80004b8:	f000 fa52 	bl	8000960 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80004bc:	bf00      	nop
 80004be:	bd80      	pop	{r7, pc}
 80004c0:	200000c8 	.word	0x200000c8
 80004c4:	40006400 	.word	0x40006400

080004c8 <MX_HRTIM1_Init>:
  * @brief HRTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_HRTIM1_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b0a2      	sub	sp, #136	; 0x88
 80004cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HRTIM1_Init 0 */

  /* USER CODE END HRTIM1_Init 0 */

  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 80004ce:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80004d2:	2200      	movs	r2, #0
 80004d4:	601a      	str	r2, [r3, #0]
 80004d6:	605a      	str	r2, [r3, #4]
 80004d8:	609a      	str	r2, [r3, #8]
 80004da:	60da      	str	r2, [r3, #12]
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 80004dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004e0:	2254      	movs	r2, #84	; 0x54
 80004e2:	2100      	movs	r1, #0
 80004e4:	4618      	mov	r0, r3
 80004e6:	f004 fce5 	bl	8004eb4 <memset>
  HRTIM_OutputCfgTypeDef pOutputCfg = {0};
 80004ea:	1d3b      	adds	r3, r7, #4
 80004ec:	2220      	movs	r2, #32
 80004ee:	2100      	movs	r1, #0
 80004f0:	4618      	mov	r0, r3
 80004f2:	f004 fcdf 	bl	8004eb4 <memset>

  /* USER CODE BEGIN HRTIM1_Init 1 */

  /* USER CODE END HRTIM1_Init 1 */
  hhrtim1.Instance = HRTIM1;
 80004f6:	4b5f      	ldr	r3, [pc, #380]	; (8000674 <MX_HRTIM1_Init+0x1ac>)
 80004f8:	4a5f      	ldr	r2, [pc, #380]	; (8000678 <MX_HRTIM1_Init+0x1b0>)
 80004fa:	601a      	str	r2, [r3, #0]
  hhrtim1.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 80004fc:	4b5d      	ldr	r3, [pc, #372]	; (8000674 <MX_HRTIM1_Init+0x1ac>)
 80004fe:	2200      	movs	r2, #0
 8000500:	605a      	str	r2, [r3, #4]
  hhrtim1.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 8000502:	4b5c      	ldr	r3, [pc, #368]	; (8000674 <MX_HRTIM1_Init+0x1ac>)
 8000504:	2200      	movs	r2, #0
 8000506:	609a      	str	r2, [r3, #8]
  if (HAL_HRTIM_Init(&hhrtim1) != HAL_OK)
 8000508:	485a      	ldr	r0, [pc, #360]	; (8000674 <MX_HRTIM1_Init+0x1ac>)
 800050a:	f001 fe7d 	bl	8002208 <HAL_HRTIM_Init>
 800050e:	4603      	mov	r3, r0
 8000510:	2b00      	cmp	r3, #0
 8000512:	d001      	beq.n	8000518 <MX_HRTIM1_Init+0x50>
  {
    Error_Handler();
 8000514:	f000 fa24 	bl	8000960 <Error_Handler>
  }
  pTimeBaseCfg.Period = 0xFFFD;
 8000518:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 800051c:	67bb      	str	r3, [r7, #120]	; 0x78
  pTimeBaseCfg.RepetitionCounter = 0x00;
 800051e:	2300      	movs	r3, #0
 8000520:	67fb      	str	r3, [r7, #124]	; 0x7c
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_DIV1;
 8000522:	2305      	movs	r3, #5
 8000524:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 8000528:	2308      	movs	r3, #8
 800052a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimeBaseCfg) != HAL_OK)
 800052e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000532:	461a      	mov	r2, r3
 8000534:	2100      	movs	r1, #0
 8000536:	484f      	ldr	r0, [pc, #316]	; (8000674 <MX_HRTIM1_Init+0x1ac>)
 8000538:	f001 ff32 	bl	80023a0 <HAL_HRTIM_TimeBaseConfig>
 800053c:	4603      	mov	r3, r0
 800053e:	2b00      	cmp	r3, #0
 8000540:	d001      	beq.n	8000546 <MX_HRTIM1_Init+0x7e>
  {
    Error_Handler();
 8000542:	f000 fa0d 	bl	8000960 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_NONE;
 8000546:	2300      	movs	r3, #0
 8000548:	627b      	str	r3, [r7, #36]	; 0x24
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
 800054a:	2300      	movs	r3, #0
 800054c:	62bb      	str	r3, [r7, #40]	; 0x28
  pTimerCfg.DMASrcAddress = 0x0000;
 800054e:	2300      	movs	r3, #0
 8000550:	62fb      	str	r3, [r7, #44]	; 0x2c
  pTimerCfg.DMADstAddress = 0x0000;
 8000552:	2300      	movs	r3, #0
 8000554:	633b      	str	r3, [r7, #48]	; 0x30
  pTimerCfg.DMASize = 0x1;
 8000556:	2301      	movs	r3, #1
 8000558:	637b      	str	r3, [r7, #52]	; 0x34
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 800055a:	2300      	movs	r3, #0
 800055c:	63bb      	str	r3, [r7, #56]	; 0x38
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 800055e:	2300      	movs	r3, #0
 8000560:	63fb      	str	r3, [r7, #60]	; 0x3c
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 8000562:	2300      	movs	r3, #0
 8000564:	643b      	str	r3, [r7, #64]	; 0x40
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 8000566:	2300      	movs	r3, #0
 8000568:	647b      	str	r3, [r7, #68]	; 0x44
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_DISABLED;
 800056a:	2300      	movs	r3, #0
 800056c:	64bb      	str	r3, [r7, #72]	; 0x48
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 800056e:	2300      	movs	r3, #0
 8000570:	64fb      	str	r3, [r7, #76]	; 0x4c
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 8000572:	2300      	movs	r3, #0
 8000574:	653b      	str	r3, [r7, #80]	; 0x50
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 8000576:	2300      	movs	r3, #0
 8000578:	657b      	str	r3, [r7, #84]	; 0x54
  pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 800057a:	2300      	movs	r3, #0
 800057c:	65bb      	str	r3, [r7, #88]	; 0x58
  pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_NONE;
 800057e:	2300      	movs	r3, #0
 8000580:	65fb      	str	r3, [r7, #92]	; 0x5c
  pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 8000582:	2300      	movs	r3, #0
 8000584:	663b      	str	r3, [r7, #96]	; 0x60
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_DISABLED;
 8000586:	2300      	movs	r3, #0
 8000588:	667b      	str	r3, [r7, #100]	; 0x64
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED;
 800058a:	2300      	movs	r3, #0
 800058c:	66bb      	str	r3, [r7, #104]	; 0x68
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_NONE;
 800058e:	2300      	movs	r3, #0
 8000590:	66fb      	str	r3, [r7, #108]	; 0x6c
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_NONE;
 8000592:	2300      	movs	r3, #0
 8000594:	673b      	str	r3, [r7, #112]	; 0x70
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_DISABLED;
 8000596:	2300      	movs	r3, #0
 8000598:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimerCfg) != HAL_OK)
 800059a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800059e:	461a      	mov	r2, r3
 80005a0:	2100      	movs	r1, #0
 80005a2:	4834      	ldr	r0, [pc, #208]	; (8000674 <MX_HRTIM1_Init+0x1ac>)
 80005a4:	f001 ff24 	bl	80023f0 <HAL_HRTIM_WaveformTimerConfig>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <MX_HRTIM1_Init+0xea>
  {
    Error_Handler();
 80005ae:	f000 f9d7 	bl	8000960 <Error_Handler>
  }
  pTimerCfg.DMASrcAddress = 0x0000;
 80005b2:	2300      	movs	r3, #0
 80005b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  pTimerCfg.DMADstAddress = 0x0000;
 80005b6:	2300      	movs	r3, #0
 80005b8:	633b      	str	r3, [r7, #48]	; 0x30
  pTimerCfg.DMASize = 0x1;
 80005ba:	2301      	movs	r3, #1
 80005bc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, &pTimerCfg) != HAL_OK)
 80005be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005c2:	461a      	mov	r2, r3
 80005c4:	2101      	movs	r1, #1
 80005c6:	482b      	ldr	r0, [pc, #172]	; (8000674 <MX_HRTIM1_Init+0x1ac>)
 80005c8:	f001 ff12 	bl	80023f0 <HAL_HRTIM_WaveformTimerConfig>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <MX_HRTIM1_Init+0x10e>
  {
    Error_Handler();
 80005d2:	f000 f9c5 	bl	8000960 <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 80005d6:	2300      	movs	r3, #0
 80005d8:	607b      	str	r3, [r7, #4]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_NONE;
 80005da:	2300      	movs	r3, #0
 80005dc:	60bb      	str	r3, [r7, #8]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_NONE;
 80005de:	2300      	movs	r3, #0
 80005e0:	60fb      	str	r3, [r7, #12]
  pOutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 80005e2:	2300      	movs	r3, #0
 80005e4:	613b      	str	r3, [r7, #16]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 80005e6:	2300      	movs	r3, #0
 80005e8:	617b      	str	r3, [r7, #20]
  pOutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
 80005ea:	2300      	movs	r3, #0
 80005ec:	61bb      	str	r3, [r7, #24]
  pOutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 80005ee:	2300      	movs	r3, #0
 80005f0:	61fb      	str	r3, [r7, #28]
  pOutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 80005f2:	2300      	movs	r3, #0
 80005f4:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA1, &pOutputCfg) != HAL_OK)
 80005f6:	1d3b      	adds	r3, r7, #4
 80005f8:	2201      	movs	r2, #1
 80005fa:	2100      	movs	r1, #0
 80005fc:	481d      	ldr	r0, [pc, #116]	; (8000674 <MX_HRTIM1_Init+0x1ac>)
 80005fe:	f001 ff69 	bl	80024d4 <HAL_HRTIM_WaveformOutputConfig>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <MX_HRTIM1_Init+0x144>
  {
    Error_Handler();
 8000608:	f000 f9aa 	bl	8000960 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, HRTIM_OUTPUT_TB1, &pOutputCfg) != HAL_OK)
 800060c:	1d3b      	adds	r3, r7, #4
 800060e:	2204      	movs	r2, #4
 8000610:	2101      	movs	r1, #1
 8000612:	4818      	ldr	r0, [pc, #96]	; (8000674 <MX_HRTIM1_Init+0x1ac>)
 8000614:	f001 ff5e 	bl	80024d4 <HAL_HRTIM_WaveformOutputConfig>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <MX_HRTIM1_Init+0x15a>
  {
    Error_Handler();
 800061e:	f000 f99f 	bl	8000960 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA2, &pOutputCfg) != HAL_OK)
 8000622:	1d3b      	adds	r3, r7, #4
 8000624:	2202      	movs	r2, #2
 8000626:	2100      	movs	r1, #0
 8000628:	4812      	ldr	r0, [pc, #72]	; (8000674 <MX_HRTIM1_Init+0x1ac>)
 800062a:	f001 ff53 	bl	80024d4 <HAL_HRTIM_WaveformOutputConfig>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <MX_HRTIM1_Init+0x170>
  {
    Error_Handler();
 8000634:	f000 f994 	bl	8000960 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, HRTIM_OUTPUT_TB2, &pOutputCfg) != HAL_OK)
 8000638:	1d3b      	adds	r3, r7, #4
 800063a:	2208      	movs	r2, #8
 800063c:	2101      	movs	r1, #1
 800063e:	480d      	ldr	r0, [pc, #52]	; (8000674 <MX_HRTIM1_Init+0x1ac>)
 8000640:	f001 ff48 	bl	80024d4 <HAL_HRTIM_WaveformOutputConfig>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <MX_HRTIM1_Init+0x186>
  {
    Error_Handler();
 800064a:	f000 f989 	bl	8000960 <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, &pTimeBaseCfg) != HAL_OK)
 800064e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000652:	461a      	mov	r2, r3
 8000654:	2101      	movs	r1, #1
 8000656:	4807      	ldr	r0, [pc, #28]	; (8000674 <MX_HRTIM1_Init+0x1ac>)
 8000658:	f001 fea2 	bl	80023a0 <HAL_HRTIM_TimeBaseConfig>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <MX_HRTIM1_Init+0x19e>
  {
    Error_Handler();
 8000662:	f000 f97d 	bl	8000960 <Error_Handler>
  }
  /* USER CODE BEGIN HRTIM1_Init 2 */

  /* USER CODE END HRTIM1_Init 2 */
  HAL_HRTIM_MspPostInit(&hhrtim1);
 8000666:	4803      	ldr	r0, [pc, #12]	; (8000674 <MX_HRTIM1_Init+0x1ac>)
 8000668:	f000 faca 	bl	8000c00 <HAL_HRTIM_MspPostInit>

}
 800066c:	bf00      	nop
 800066e:	3788      	adds	r7, #136	; 0x88
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	20000190 	.word	0x20000190
 8000678:	40017400 	.word	0x40017400

0800067c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000680:	4b1b      	ldr	r3, [pc, #108]	; (80006f0 <MX_I2C1_Init+0x74>)
 8000682:	4a1c      	ldr	r2, [pc, #112]	; (80006f4 <MX_I2C1_Init+0x78>)
 8000684:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000686:	4b1a      	ldr	r3, [pc, #104]	; (80006f0 <MX_I2C1_Init+0x74>)
 8000688:	4a1b      	ldr	r2, [pc, #108]	; (80006f8 <MX_I2C1_Init+0x7c>)
 800068a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800068c:	4b18      	ldr	r3, [pc, #96]	; (80006f0 <MX_I2C1_Init+0x74>)
 800068e:	2200      	movs	r2, #0
 8000690:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000692:	4b17      	ldr	r3, [pc, #92]	; (80006f0 <MX_I2C1_Init+0x74>)
 8000694:	2201      	movs	r2, #1
 8000696:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000698:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <MX_I2C1_Init+0x74>)
 800069a:	2200      	movs	r2, #0
 800069c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800069e:	4b14      	ldr	r3, [pc, #80]	; (80006f0 <MX_I2C1_Init+0x74>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006a4:	4b12      	ldr	r3, [pc, #72]	; (80006f0 <MX_I2C1_Init+0x74>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006aa:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <MX_I2C1_Init+0x74>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006b0:	4b0f      	ldr	r3, [pc, #60]	; (80006f0 <MX_I2C1_Init+0x74>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006b6:	480e      	ldr	r0, [pc, #56]	; (80006f0 <MX_I2C1_Init+0x74>)
 80006b8:	f002 fa6a 	bl	8002b90 <HAL_I2C_Init>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80006c2:	f000 f94d 	bl	8000960 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006c6:	2100      	movs	r1, #0
 80006c8:	4809      	ldr	r0, [pc, #36]	; (80006f0 <MX_I2C1_Init+0x74>)
 80006ca:	f002 faf0 	bl	8002cae <HAL_I2CEx_ConfigAnalogFilter>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80006d4:	f000 f944 	bl	8000960 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006d8:	2100      	movs	r1, #0
 80006da:	4805      	ldr	r0, [pc, #20]	; (80006f0 <MX_I2C1_Init+0x74>)
 80006dc:	f002 fb32 	bl	8002d44 <HAL_I2CEx_ConfigDigitalFilter>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80006e6:	f000 f93b 	bl	8000960 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006ea:	bf00      	nop
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	2000007c 	.word	0x2000007c
 80006f4:	40005400 	.word	0x40005400
 80006f8:	2000090e 	.word	0x2000090e

080006fc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b090      	sub	sp, #64	; 0x40
 8000700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000702:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000706:	2200      	movs	r2, #0
 8000708:	601a      	str	r2, [r3, #0]
 800070a:	605a      	str	r2, [r3, #4]
 800070c:	609a      	str	r2, [r3, #8]
 800070e:	60da      	str	r2, [r3, #12]
 8000710:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000712:	2300      	movs	r3, #0
 8000714:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8000716:	463b      	mov	r3, r7
 8000718:	2228      	movs	r2, #40	; 0x28
 800071a:	2100      	movs	r1, #0
 800071c:	4618      	mov	r0, r3
 800071e:	f004 fbc9 	bl	8004eb4 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000722:	4b3a      	ldr	r3, [pc, #232]	; (800080c <MX_RTC_Init+0x110>)
 8000724:	4a3a      	ldr	r2, [pc, #232]	; (8000810 <MX_RTC_Init+0x114>)
 8000726:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000728:	4b38      	ldr	r3, [pc, #224]	; (800080c <MX_RTC_Init+0x110>)
 800072a:	2200      	movs	r2, #0
 800072c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800072e:	4b37      	ldr	r3, [pc, #220]	; (800080c <MX_RTC_Init+0x110>)
 8000730:	227f      	movs	r2, #127	; 0x7f
 8000732:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000734:	4b35      	ldr	r3, [pc, #212]	; (800080c <MX_RTC_Init+0x110>)
 8000736:	22ff      	movs	r2, #255	; 0xff
 8000738:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800073a:	4b34      	ldr	r3, [pc, #208]	; (800080c <MX_RTC_Init+0x110>)
 800073c:	2200      	movs	r2, #0
 800073e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000740:	4b32      	ldr	r3, [pc, #200]	; (800080c <MX_RTC_Init+0x110>)
 8000742:	2200      	movs	r2, #0
 8000744:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000746:	4b31      	ldr	r3, [pc, #196]	; (800080c <MX_RTC_Init+0x110>)
 8000748:	2200      	movs	r2, #0
 800074a:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800074c:	482f      	ldr	r0, [pc, #188]	; (800080c <MX_RTC_Init+0x110>)
 800074e:	f003 fdb9 	bl	80042c4 <HAL_RTC_Init>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8000758:	f000 f902 	bl	8000960 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800075c:	2300      	movs	r3, #0
 800075e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 8000762:	2300      	movs	r3, #0
 8000764:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 8000768:	2300      	movs	r3, #0
 800076a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800076e:	2300      	movs	r3, #0
 8000770:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000772:	2300      	movs	r3, #0
 8000774:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000776:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800077a:	2201      	movs	r2, #1
 800077c:	4619      	mov	r1, r3
 800077e:	4823      	ldr	r0, [pc, #140]	; (800080c <MX_RTC_Init+0x110>)
 8000780:	f003 fe31 	bl	80043e6 <HAL_RTC_SetTime>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_RTC_Init+0x92>
  {
    Error_Handler();
 800078a:	f000 f8e9 	bl	8000960 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800078e:	2301      	movs	r3, #1
 8000790:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8000794:	2301      	movs	r3, #1
 8000796:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 800079a:	2301      	movs	r3, #1
 800079c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 80007a0:	2300      	movs	r3, #0
 80007a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80007a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007aa:	2201      	movs	r2, #1
 80007ac:	4619      	mov	r1, r3
 80007ae:	4817      	ldr	r0, [pc, #92]	; (800080c <MX_RTC_Init+0x110>)
 80007b0:	f003 fed6 	bl	8004560 <HAL_RTC_SetDate>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 80007ba:	f000 f8d1 	bl	8000960 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80007be:	2300      	movs	r3, #0
 80007c0:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80007c2:	2300      	movs	r3, #0
 80007c4:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 80007c6:	2300      	movs	r3, #0
 80007c8:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80007ca:	2300      	movs	r3, #0
 80007cc:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80007ce:	2300      	movs	r3, #0
 80007d0:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80007d2:	2300      	movs	r3, #0
 80007d4:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80007d6:	2300      	movs	r3, #0
 80007d8:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80007da:	2300      	movs	r3, #0
 80007dc:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80007de:	2300      	movs	r3, #0
 80007e0:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 80007e2:	2301      	movs	r3, #1
 80007e4:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 80007e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007ec:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80007ee:	463b      	mov	r3, r7
 80007f0:	2201      	movs	r2, #1
 80007f2:	4619      	mov	r1, r3
 80007f4:	4805      	ldr	r0, [pc, #20]	; (800080c <MX_RTC_Init+0x110>)
 80007f6:	f003 ff5a 	bl	80046ae <HAL_RTC_SetAlarm>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8000800:	f000 f8ae 	bl	8000960 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000804:	bf00      	nop
 8000806:	3740      	adds	r7, #64	; 0x40
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	2000026c 	.word	0x2000026c
 8000810:	40002800 	.word	0x40002800

08000814 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000818:	4b1b      	ldr	r3, [pc, #108]	; (8000888 <MX_SPI1_Init+0x74>)
 800081a:	4a1c      	ldr	r2, [pc, #112]	; (800088c <MX_SPI1_Init+0x78>)
 800081c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800081e:	4b1a      	ldr	r3, [pc, #104]	; (8000888 <MX_SPI1_Init+0x74>)
 8000820:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000824:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000826:	4b18      	ldr	r3, [pc, #96]	; (8000888 <MX_SPI1_Init+0x74>)
 8000828:	2200      	movs	r2, #0
 800082a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800082c:	4b16      	ldr	r3, [pc, #88]	; (8000888 <MX_SPI1_Init+0x74>)
 800082e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000832:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000834:	4b14      	ldr	r3, [pc, #80]	; (8000888 <MX_SPI1_Init+0x74>)
 8000836:	2200      	movs	r2, #0
 8000838:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800083a:	4b13      	ldr	r3, [pc, #76]	; (8000888 <MX_SPI1_Init+0x74>)
 800083c:	2200      	movs	r2, #0
 800083e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000840:	4b11      	ldr	r3, [pc, #68]	; (8000888 <MX_SPI1_Init+0x74>)
 8000842:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000846:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000848:	4b0f      	ldr	r3, [pc, #60]	; (8000888 <MX_SPI1_Init+0x74>)
 800084a:	2200      	movs	r2, #0
 800084c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800084e:	4b0e      	ldr	r3, [pc, #56]	; (8000888 <MX_SPI1_Init+0x74>)
 8000850:	2200      	movs	r2, #0
 8000852:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000854:	4b0c      	ldr	r3, [pc, #48]	; (8000888 <MX_SPI1_Init+0x74>)
 8000856:	2200      	movs	r2, #0
 8000858:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800085a:	4b0b      	ldr	r3, [pc, #44]	; (8000888 <MX_SPI1_Init+0x74>)
 800085c:	2200      	movs	r2, #0
 800085e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000860:	4b09      	ldr	r3, [pc, #36]	; (8000888 <MX_SPI1_Init+0x74>)
 8000862:	2207      	movs	r2, #7
 8000864:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000866:	4b08      	ldr	r3, [pc, #32]	; (8000888 <MX_SPI1_Init+0x74>)
 8000868:	2200      	movs	r2, #0
 800086a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800086c:	4b06      	ldr	r3, [pc, #24]	; (8000888 <MX_SPI1_Init+0x74>)
 800086e:	2208      	movs	r2, #8
 8000870:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000872:	4805      	ldr	r0, [pc, #20]	; (8000888 <MX_SPI1_Init+0x74>)
 8000874:	f004 f8a5 	bl	80049c2 <HAL_SPI_Init>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800087e:	f000 f86f 	bl	8000960 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000882:	bf00      	nop
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	2000028c 	.word	0x2000028c
 800088c:	40013000 	.word	0x40013000

08000890 <MX_USART3_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  husart3.Instance = USART3;
 8000894:	4b12      	ldr	r3, [pc, #72]	; (80008e0 <MX_USART3_Init+0x50>)
 8000896:	4a13      	ldr	r2, [pc, #76]	; (80008e4 <MX_USART3_Init+0x54>)
 8000898:	601a      	str	r2, [r3, #0]
  husart3.Init.BaudRate = 38400;
 800089a:	4b11      	ldr	r3, [pc, #68]	; (80008e0 <MX_USART3_Init+0x50>)
 800089c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80008a0:	605a      	str	r2, [r3, #4]
  husart3.Init.WordLength = USART_WORDLENGTH_8B;
 80008a2:	4b0f      	ldr	r3, [pc, #60]	; (80008e0 <MX_USART3_Init+0x50>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	609a      	str	r2, [r3, #8]
  husart3.Init.StopBits = USART_STOPBITS_1;
 80008a8:	4b0d      	ldr	r3, [pc, #52]	; (80008e0 <MX_USART3_Init+0x50>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	60da      	str	r2, [r3, #12]
  husart3.Init.Parity = USART_PARITY_NONE;
 80008ae:	4b0c      	ldr	r3, [pc, #48]	; (80008e0 <MX_USART3_Init+0x50>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	611a      	str	r2, [r3, #16]
  husart3.Init.Mode = USART_MODE_TX_RX;
 80008b4:	4b0a      	ldr	r3, [pc, #40]	; (80008e0 <MX_USART3_Init+0x50>)
 80008b6:	220c      	movs	r2, #12
 80008b8:	615a      	str	r2, [r3, #20]
  husart3.Init.CLKPolarity = USART_POLARITY_LOW;
 80008ba:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <MX_USART3_Init+0x50>)
 80008bc:	2200      	movs	r2, #0
 80008be:	619a      	str	r2, [r3, #24]
  husart3.Init.CLKPhase = USART_PHASE_1EDGE;
 80008c0:	4b07      	ldr	r3, [pc, #28]	; (80008e0 <MX_USART3_Init+0x50>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	61da      	str	r2, [r3, #28]
  husart3.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 80008c6:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <MX_USART3_Init+0x50>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart3) != HAL_OK)
 80008cc:	4804      	ldr	r0, [pc, #16]	; (80008e0 <MX_USART3_Init+0x50>)
 80008ce:	f004 f902 	bl	8004ad6 <HAL_USART_Init>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_USART3_Init+0x4c>
  {
    Error_Handler();
 80008d8:	f000 f842 	bl	8000960 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008dc:	bf00      	nop
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	20000140 	.word	0x20000140
 80008e4:	40004800 	.word	0x40004800

080008e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b085      	sub	sp, #20
 80008ec:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ee:	4b1b      	ldr	r3, [pc, #108]	; (800095c <MX_GPIO_Init+0x74>)
 80008f0:	695b      	ldr	r3, [r3, #20]
 80008f2:	4a1a      	ldr	r2, [pc, #104]	; (800095c <MX_GPIO_Init+0x74>)
 80008f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80008f8:	6153      	str	r3, [r2, #20]
 80008fa:	4b18      	ldr	r3, [pc, #96]	; (800095c <MX_GPIO_Init+0x74>)
 80008fc:	695b      	ldr	r3, [r3, #20]
 80008fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000902:	60fb      	str	r3, [r7, #12]
 8000904:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000906:	4b15      	ldr	r3, [pc, #84]	; (800095c <MX_GPIO_Init+0x74>)
 8000908:	695b      	ldr	r3, [r3, #20]
 800090a:	4a14      	ldr	r2, [pc, #80]	; (800095c <MX_GPIO_Init+0x74>)
 800090c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000910:	6153      	str	r3, [r2, #20]
 8000912:	4b12      	ldr	r3, [pc, #72]	; (800095c <MX_GPIO_Init+0x74>)
 8000914:	695b      	ldr	r3, [r3, #20]
 8000916:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800091a:	60bb      	str	r3, [r7, #8]
 800091c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800091e:	4b0f      	ldr	r3, [pc, #60]	; (800095c <MX_GPIO_Init+0x74>)
 8000920:	695b      	ldr	r3, [r3, #20]
 8000922:	4a0e      	ldr	r2, [pc, #56]	; (800095c <MX_GPIO_Init+0x74>)
 8000924:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000928:	6153      	str	r3, [r2, #20]
 800092a:	4b0c      	ldr	r3, [pc, #48]	; (800095c <MX_GPIO_Init+0x74>)
 800092c:	695b      	ldr	r3, [r3, #20]
 800092e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000932:	607b      	str	r3, [r7, #4]
 8000934:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000936:	4b09      	ldr	r3, [pc, #36]	; (800095c <MX_GPIO_Init+0x74>)
 8000938:	695b      	ldr	r3, [r3, #20]
 800093a:	4a08      	ldr	r2, [pc, #32]	; (800095c <MX_GPIO_Init+0x74>)
 800093c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000940:	6153      	str	r3, [r2, #20]
 8000942:	4b06      	ldr	r3, [pc, #24]	; (800095c <MX_GPIO_Init+0x74>)
 8000944:	695b      	ldr	r3, [r3, #20]
 8000946:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800094a:	603b      	str	r3, [r7, #0]
 800094c:	683b      	ldr	r3, [r7, #0]

}
 800094e:	bf00      	nop
 8000950:	3714      	adds	r7, #20
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop
 800095c:	40021000 	.word	0x40021000

08000960 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000964:	bf00      	nop
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr
	...

08000970 <HAL_MspInit>:
void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef *hhrtim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000970:	b480      	push	{r7}
 8000972:	b083      	sub	sp, #12
 8000974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000976:	4b0f      	ldr	r3, [pc, #60]	; (80009b4 <HAL_MspInit+0x44>)
 8000978:	699b      	ldr	r3, [r3, #24]
 800097a:	4a0e      	ldr	r2, [pc, #56]	; (80009b4 <HAL_MspInit+0x44>)
 800097c:	f043 0301 	orr.w	r3, r3, #1
 8000980:	6193      	str	r3, [r2, #24]
 8000982:	4b0c      	ldr	r3, [pc, #48]	; (80009b4 <HAL_MspInit+0x44>)
 8000984:	699b      	ldr	r3, [r3, #24]
 8000986:	f003 0301 	and.w	r3, r3, #1
 800098a:	607b      	str	r3, [r7, #4]
 800098c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800098e:	4b09      	ldr	r3, [pc, #36]	; (80009b4 <HAL_MspInit+0x44>)
 8000990:	69db      	ldr	r3, [r3, #28]
 8000992:	4a08      	ldr	r2, [pc, #32]	; (80009b4 <HAL_MspInit+0x44>)
 8000994:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000998:	61d3      	str	r3, [r2, #28]
 800099a:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <HAL_MspInit+0x44>)
 800099c:	69db      	ldr	r3, [r3, #28]
 800099e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009a2:	603b      	str	r3, [r7, #0]
 80009a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009a6:	bf00      	nop
 80009a8:	370c      	adds	r7, #12
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	40021000 	.word	0x40021000

080009b8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b08c      	sub	sp, #48	; 0x30
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c0:	f107 031c 	add.w	r3, r7, #28
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
 80009c8:	605a      	str	r2, [r3, #4]
 80009ca:	609a      	str	r2, [r3, #8]
 80009cc:	60da      	str	r2, [r3, #12]
 80009ce:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80009d8:	d12e      	bne.n	8000a38 <HAL_ADC_MspInit+0x80>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80009da:	4b33      	ldr	r3, [pc, #204]	; (8000aa8 <HAL_ADC_MspInit+0xf0>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	3301      	adds	r3, #1
 80009e0:	4a31      	ldr	r2, [pc, #196]	; (8000aa8 <HAL_ADC_MspInit+0xf0>)
 80009e2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80009e4:	4b30      	ldr	r3, [pc, #192]	; (8000aa8 <HAL_ADC_MspInit+0xf0>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	2b01      	cmp	r3, #1
 80009ea:	d10b      	bne.n	8000a04 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80009ec:	4b2f      	ldr	r3, [pc, #188]	; (8000aac <HAL_ADC_MspInit+0xf4>)
 80009ee:	695b      	ldr	r3, [r3, #20]
 80009f0:	4a2e      	ldr	r2, [pc, #184]	; (8000aac <HAL_ADC_MspInit+0xf4>)
 80009f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009f6:	6153      	str	r3, [r2, #20]
 80009f8:	4b2c      	ldr	r3, [pc, #176]	; (8000aac <HAL_ADC_MspInit+0xf4>)
 80009fa:	695b      	ldr	r3, [r3, #20]
 80009fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a00:	61bb      	str	r3, [r7, #24]
 8000a02:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a04:	4b29      	ldr	r3, [pc, #164]	; (8000aac <HAL_ADC_MspInit+0xf4>)
 8000a06:	695b      	ldr	r3, [r3, #20]
 8000a08:	4a28      	ldr	r2, [pc, #160]	; (8000aac <HAL_ADC_MspInit+0xf4>)
 8000a0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a0e:	6153      	str	r3, [r2, #20]
 8000a10:	4b26      	ldr	r3, [pc, #152]	; (8000aac <HAL_ADC_MspInit+0xf4>)
 8000a12:	695b      	ldr	r3, [r3, #20]
 8000a14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a18:	617b      	str	r3, [r7, #20]
 8000a1a:	697b      	ldr	r3, [r7, #20]
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000a1c:	230f      	movs	r3, #15
 8000a1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a20:	2303      	movs	r3, #3
 8000a22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a28:	f107 031c 	add.w	r3, r7, #28
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a32:	f001 fa77 	bl	8001f24 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000a36:	e032      	b.n	8000a9e <HAL_ADC_MspInit+0xe6>
  else if(hadc->Instance==ADC2)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a1c      	ldr	r2, [pc, #112]	; (8000ab0 <HAL_ADC_MspInit+0xf8>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d12d      	bne.n	8000a9e <HAL_ADC_MspInit+0xe6>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000a42:	4b19      	ldr	r3, [pc, #100]	; (8000aa8 <HAL_ADC_MspInit+0xf0>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	3301      	adds	r3, #1
 8000a48:	4a17      	ldr	r2, [pc, #92]	; (8000aa8 <HAL_ADC_MspInit+0xf0>)
 8000a4a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000a4c:	4b16      	ldr	r3, [pc, #88]	; (8000aa8 <HAL_ADC_MspInit+0xf0>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	2b01      	cmp	r3, #1
 8000a52:	d10b      	bne.n	8000a6c <HAL_ADC_MspInit+0xb4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000a54:	4b15      	ldr	r3, [pc, #84]	; (8000aac <HAL_ADC_MspInit+0xf4>)
 8000a56:	695b      	ldr	r3, [r3, #20]
 8000a58:	4a14      	ldr	r2, [pc, #80]	; (8000aac <HAL_ADC_MspInit+0xf4>)
 8000a5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a5e:	6153      	str	r3, [r2, #20]
 8000a60:	4b12      	ldr	r3, [pc, #72]	; (8000aac <HAL_ADC_MspInit+0xf4>)
 8000a62:	695b      	ldr	r3, [r3, #20]
 8000a64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a68:	613b      	str	r3, [r7, #16]
 8000a6a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6c:	4b0f      	ldr	r3, [pc, #60]	; (8000aac <HAL_ADC_MspInit+0xf4>)
 8000a6e:	695b      	ldr	r3, [r3, #20]
 8000a70:	4a0e      	ldr	r2, [pc, #56]	; (8000aac <HAL_ADC_MspInit+0xf4>)
 8000a72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a76:	6153      	str	r3, [r2, #20]
 8000a78:	4b0c      	ldr	r3, [pc, #48]	; (8000aac <HAL_ADC_MspInit+0xf4>)
 8000a7a:	695b      	ldr	r3, [r3, #20]
 8000a7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a80:	60fb      	str	r3, [r7, #12]
 8000a82:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000a84:	2330      	movs	r3, #48	; 0x30
 8000a86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a88:	2303      	movs	r3, #3
 8000a8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a90:	f107 031c 	add.w	r3, r7, #28
 8000a94:	4619      	mov	r1, r3
 8000a96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a9a:	f001 fa43 	bl	8001f24 <HAL_GPIO_Init>
}
 8000a9e:	bf00      	nop
 8000aa0:	3730      	adds	r7, #48	; 0x30
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	20000028 	.word	0x20000028
 8000aac:	40021000 	.word	0x40021000
 8000ab0:	50000100 	.word	0x50000100

08000ab4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b08a      	sub	sp, #40	; 0x28
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000abc:	f107 0314 	add.w	r3, r7, #20
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	605a      	str	r2, [r3, #4]
 8000ac6:	609a      	str	r2, [r3, #8]
 8000ac8:	60da      	str	r2, [r3, #12]
 8000aca:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a26      	ldr	r2, [pc, #152]	; (8000b6c <HAL_CAN_MspInit+0xb8>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d146      	bne.n	8000b64 <HAL_CAN_MspInit+0xb0>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000ad6:	4b26      	ldr	r3, [pc, #152]	; (8000b70 <HAL_CAN_MspInit+0xbc>)
 8000ad8:	69db      	ldr	r3, [r3, #28]
 8000ada:	4a25      	ldr	r2, [pc, #148]	; (8000b70 <HAL_CAN_MspInit+0xbc>)
 8000adc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ae0:	61d3      	str	r3, [r2, #28]
 8000ae2:	4b23      	ldr	r3, [pc, #140]	; (8000b70 <HAL_CAN_MspInit+0xbc>)
 8000ae4:	69db      	ldr	r3, [r3, #28]
 8000ae6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000aea:	613b      	str	r3, [r7, #16]
 8000aec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aee:	4b20      	ldr	r3, [pc, #128]	; (8000b70 <HAL_CAN_MspInit+0xbc>)
 8000af0:	695b      	ldr	r3, [r3, #20]
 8000af2:	4a1f      	ldr	r2, [pc, #124]	; (8000b70 <HAL_CAN_MspInit+0xbc>)
 8000af4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000af8:	6153      	str	r3, [r2, #20]
 8000afa:	4b1d      	ldr	r3, [pc, #116]	; (8000b70 <HAL_CAN_MspInit+0xbc>)
 8000afc:	695b      	ldr	r3, [r3, #20]
 8000afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b02:	60fb      	str	r3, [r7, #12]
 8000b04:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b06:	4b1a      	ldr	r3, [pc, #104]	; (8000b70 <HAL_CAN_MspInit+0xbc>)
 8000b08:	695b      	ldr	r3, [r3, #20]
 8000b0a:	4a19      	ldr	r2, [pc, #100]	; (8000b70 <HAL_CAN_MspInit+0xbc>)
 8000b0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b10:	6153      	str	r3, [r2, #20]
 8000b12:	4b17      	ldr	r3, [pc, #92]	; (8000b70 <HAL_CAN_MspInit+0xbc>)
 8000b14:	695b      	ldr	r3, [r3, #20]
 8000b16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b1a:	60bb      	str	r3, [r7, #8]
 8000b1c:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA12     ------> CAN_TX
    PB8     ------> CAN_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000b1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b24:	2302      	movs	r3, #2
 8000b26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b2c:	2303      	movs	r3, #3
 8000b2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8000b30:	2309      	movs	r3, #9
 8000b32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b34:	f107 0314 	add.w	r3, r7, #20
 8000b38:	4619      	mov	r1, r3
 8000b3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b3e:	f001 f9f1 	bl	8001f24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000b42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b48:	2302      	movs	r3, #2
 8000b4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b50:	2303      	movs	r3, #3
 8000b52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8000b54:	2309      	movs	r3, #9
 8000b56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b58:	f107 0314 	add.w	r3, r7, #20
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	4805      	ldr	r0, [pc, #20]	; (8000b74 <HAL_CAN_MspInit+0xc0>)
 8000b60:	f001 f9e0 	bl	8001f24 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8000b64:	bf00      	nop
 8000b66:	3728      	adds	r7, #40	; 0x28
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	40006400 	.word	0x40006400
 8000b70:	40021000 	.word	0x40021000
 8000b74:	48000400 	.word	0x48000400

08000b78 <HAL_HRTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hhrtim: HRTIM handle pointer
* @retval None
*/
void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hhrtim)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b08a      	sub	sp, #40	; 0x28
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b80:	f107 0314 	add.w	r3, r7, #20
 8000b84:	2200      	movs	r2, #0
 8000b86:	601a      	str	r2, [r3, #0]
 8000b88:	605a      	str	r2, [r3, #4]
 8000b8a:	609a      	str	r2, [r3, #8]
 8000b8c:	60da      	str	r2, [r3, #12]
 8000b8e:	611a      	str	r2, [r3, #16]
  if(hhrtim->Instance==HRTIM1)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a17      	ldr	r2, [pc, #92]	; (8000bf4 <HAL_HRTIM_MspInit+0x7c>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d127      	bne.n	8000bea <HAL_HRTIM_MspInit+0x72>
  {
  /* USER CODE BEGIN HRTIM1_MspInit 0 */

  /* USER CODE END HRTIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 8000b9a:	4b17      	ldr	r3, [pc, #92]	; (8000bf8 <HAL_HRTIM_MspInit+0x80>)
 8000b9c:	699b      	ldr	r3, [r3, #24]
 8000b9e:	4a16      	ldr	r2, [pc, #88]	; (8000bf8 <HAL_HRTIM_MspInit+0x80>)
 8000ba0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000ba4:	6193      	str	r3, [r2, #24]
 8000ba6:	4b14      	ldr	r3, [pc, #80]	; (8000bf8 <HAL_HRTIM_MspInit+0x80>)
 8000ba8:	699b      	ldr	r3, [r3, #24]
 8000baa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000bae:	613b      	str	r3, [r7, #16]
 8000bb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bb2:	4b11      	ldr	r3, [pc, #68]	; (8000bf8 <HAL_HRTIM_MspInit+0x80>)
 8000bb4:	695b      	ldr	r3, [r3, #20]
 8000bb6:	4a10      	ldr	r2, [pc, #64]	; (8000bf8 <HAL_HRTIM_MspInit+0x80>)
 8000bb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bbc:	6153      	str	r3, [r2, #20]
 8000bbe:	4b0e      	ldr	r3, [pc, #56]	; (8000bf8 <HAL_HRTIM_MspInit+0x80>)
 8000bc0:	695b      	ldr	r3, [r3, #20]
 8000bc2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000bc6:	60fb      	str	r3, [r7, #12]
 8000bc8:	68fb      	ldr	r3, [r7, #12]
    /**HRTIM1 GPIO Configuration
    PB2     ------> HRTIM1_SCIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000bca:	2304      	movs	r3, #4
 8000bcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bce:	2302      	movs	r3, #2
 8000bd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 8000bda:	230d      	movs	r3, #13
 8000bdc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bde:	f107 0314 	add.w	r3, r7, #20
 8000be2:	4619      	mov	r1, r3
 8000be4:	4805      	ldr	r0, [pc, #20]	; (8000bfc <HAL_HRTIM_MspInit+0x84>)
 8000be6:	f001 f99d 	bl	8001f24 <HAL_GPIO_Init>
  /* USER CODE BEGIN HRTIM1_MspInit 1 */

  /* USER CODE END HRTIM1_MspInit 1 */
  }

}
 8000bea:	bf00      	nop
 8000bec:	3728      	adds	r7, #40	; 0x28
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	40017400 	.word	0x40017400
 8000bf8:	40021000 	.word	0x40021000
 8000bfc:	48000400 	.word	0x48000400

08000c00 <HAL_HRTIM_MspPostInit>:

void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef* hhrtim)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b08a      	sub	sp, #40	; 0x28
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c08:	f107 0314 	add.w	r3, r7, #20
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	601a      	str	r2, [r3, #0]
 8000c10:	605a      	str	r2, [r3, #4]
 8000c12:	609a      	str	r2, [r3, #8]
 8000c14:	60da      	str	r2, [r3, #12]
 8000c16:	611a      	str	r2, [r3, #16]
  if(hhrtim->Instance==HRTIM1)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a20      	ldr	r2, [pc, #128]	; (8000ca0 <HAL_HRTIM_MspPostInit+0xa0>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d139      	bne.n	8000c96 <HAL_HRTIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN HRTIM1_MspPostInit 0 */

  /* USER CODE END HRTIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c22:	4b20      	ldr	r3, [pc, #128]	; (8000ca4 <HAL_HRTIM_MspPostInit+0xa4>)
 8000c24:	695b      	ldr	r3, [r3, #20]
 8000c26:	4a1f      	ldr	r2, [pc, #124]	; (8000ca4 <HAL_HRTIM_MspPostInit+0xa4>)
 8000c28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c2c:	6153      	str	r3, [r2, #20]
 8000c2e:	4b1d      	ldr	r3, [pc, #116]	; (8000ca4 <HAL_HRTIM_MspPostInit+0xa4>)
 8000c30:	695b      	ldr	r3, [r3, #20]
 8000c32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c36:	613b      	str	r3, [r7, #16]
 8000c38:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3a:	4b1a      	ldr	r3, [pc, #104]	; (8000ca4 <HAL_HRTIM_MspPostInit+0xa4>)
 8000c3c:	695b      	ldr	r3, [r3, #20]
 8000c3e:	4a19      	ldr	r2, [pc, #100]	; (8000ca4 <HAL_HRTIM_MspPostInit+0xa4>)
 8000c40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c44:	6153      	str	r3, [r2, #20]
 8000c46:	4b17      	ldr	r3, [pc, #92]	; (8000ca4 <HAL_HRTIM_MspPostInit+0xa4>)
 8000c48:	695b      	ldr	r3, [r3, #20]
 8000c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c4e:	60fb      	str	r3, [r7, #12]
 8000c50:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> HRTIM1_CHA1
    PA9     ------> HRTIM1_CHA2
    PA10     ------> HRTIM1_CHB1
    PA11     ------> HRTIM1_CHB2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000c52:	2302      	movs	r3, #2
 8000c54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c56:	2302      	movs	r3, #2
 8000c58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c5e:	2303      	movs	r3, #3
 8000c60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 8000c62:	230d      	movs	r3, #13
 8000c64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c66:	f107 0314 	add.w	r3, r7, #20
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	480e      	ldr	r0, [pc, #56]	; (8000ca8 <HAL_HRTIM_MspPostInit+0xa8>)
 8000c6e:	f001 f959 	bl	8001f24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8000c72:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000c76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c78:	2302      	movs	r3, #2
 8000c7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c80:	2303      	movs	r3, #3
 8000c82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 8000c84:	230d      	movs	r3, #13
 8000c86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c88:	f107 0314 	add.w	r3, r7, #20
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c92:	f001 f947 	bl	8001f24 <HAL_GPIO_Init>
  /* USER CODE BEGIN HRTIM1_MspPostInit 1 */

  /* USER CODE END HRTIM1_MspPostInit 1 */
  }

}
 8000c96:	bf00      	nop
 8000c98:	3728      	adds	r7, #40	; 0x28
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	40017400 	.word	0x40017400
 8000ca4:	40021000 	.word	0x40021000
 8000ca8:	48000400 	.word	0x48000400

08000cac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b08a      	sub	sp, #40	; 0x28
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb4:	f107 0314 	add.w	r3, r7, #20
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
 8000cbc:	605a      	str	r2, [r3, #4]
 8000cbe:	609a      	str	r2, [r3, #8]
 8000cc0:	60da      	str	r2, [r3, #12]
 8000cc2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a17      	ldr	r2, [pc, #92]	; (8000d28 <HAL_I2C_MspInit+0x7c>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d127      	bne.n	8000d1e <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cce:	4b17      	ldr	r3, [pc, #92]	; (8000d2c <HAL_I2C_MspInit+0x80>)
 8000cd0:	695b      	ldr	r3, [r3, #20]
 8000cd2:	4a16      	ldr	r2, [pc, #88]	; (8000d2c <HAL_I2C_MspInit+0x80>)
 8000cd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cd8:	6153      	str	r3, [r2, #20]
 8000cda:	4b14      	ldr	r3, [pc, #80]	; (8000d2c <HAL_I2C_MspInit+0x80>)
 8000cdc:	695b      	ldr	r3, [r3, #20]
 8000cde:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ce2:	613b      	str	r3, [r7, #16]
 8000ce4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ce6:	23c0      	movs	r3, #192	; 0xc0
 8000ce8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cea:	2312      	movs	r3, #18
 8000cec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cf2:	2303      	movs	r3, #3
 8000cf4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cf6:	2304      	movs	r3, #4
 8000cf8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cfa:	f107 0314 	add.w	r3, r7, #20
 8000cfe:	4619      	mov	r1, r3
 8000d00:	480b      	ldr	r0, [pc, #44]	; (8000d30 <HAL_I2C_MspInit+0x84>)
 8000d02:	f001 f90f 	bl	8001f24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d06:	4b09      	ldr	r3, [pc, #36]	; (8000d2c <HAL_I2C_MspInit+0x80>)
 8000d08:	69db      	ldr	r3, [r3, #28]
 8000d0a:	4a08      	ldr	r2, [pc, #32]	; (8000d2c <HAL_I2C_MspInit+0x80>)
 8000d0c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d10:	61d3      	str	r3, [r2, #28]
 8000d12:	4b06      	ldr	r3, [pc, #24]	; (8000d2c <HAL_I2C_MspInit+0x80>)
 8000d14:	69db      	ldr	r3, [r3, #28]
 8000d16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d1a:	60fb      	str	r3, [r7, #12]
 8000d1c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d1e:	bf00      	nop
 8000d20:	3728      	adds	r7, #40	; 0x28
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40005400 	.word	0x40005400
 8000d2c:	40021000 	.word	0x40021000
 8000d30:	48000400 	.word	0x48000400

08000d34 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b085      	sub	sp, #20
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a0d      	ldr	r2, [pc, #52]	; (8000d78 <HAL_RTC_MspInit+0x44>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d111      	bne.n	8000d6a <HAL_RTC_MspInit+0x36>
 8000d46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d4a:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	fa93 f3a3 	rbit	r3, r3
 8000d52:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000d54:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000d56:	fab3 f383 	clz	r3, r3
 8000d5a:	b2db      	uxtb	r3, r3
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	4b07      	ldr	r3, [pc, #28]	; (8000d7c <HAL_RTC_MspInit+0x48>)
 8000d60:	4413      	add	r3, r2
 8000d62:	009b      	lsls	r3, r3, #2
 8000d64:	461a      	mov	r2, r3
 8000d66:	2301      	movs	r3, #1
 8000d68:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000d6a:	bf00      	nop
 8000d6c:	3714      	adds	r7, #20
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	40002800 	.word	0x40002800
 8000d7c:	10908100 	.word	0x10908100

08000d80 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b08a      	sub	sp, #40	; 0x28
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d88:	f107 0314 	add.w	r3, r7, #20
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	605a      	str	r2, [r3, #4]
 8000d92:	609a      	str	r2, [r3, #8]
 8000d94:	60da      	str	r2, [r3, #12]
 8000d96:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a25      	ldr	r2, [pc, #148]	; (8000e34 <HAL_SPI_MspInit+0xb4>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d144      	bne.n	8000e2c <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000da2:	4b25      	ldr	r3, [pc, #148]	; (8000e38 <HAL_SPI_MspInit+0xb8>)
 8000da4:	699b      	ldr	r3, [r3, #24]
 8000da6:	4a24      	ldr	r2, [pc, #144]	; (8000e38 <HAL_SPI_MspInit+0xb8>)
 8000da8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000dac:	6193      	str	r3, [r2, #24]
 8000dae:	4b22      	ldr	r3, [pc, #136]	; (8000e38 <HAL_SPI_MspInit+0xb8>)
 8000db0:	699b      	ldr	r3, [r3, #24]
 8000db2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000db6:	613b      	str	r3, [r7, #16]
 8000db8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dba:	4b1f      	ldr	r3, [pc, #124]	; (8000e38 <HAL_SPI_MspInit+0xb8>)
 8000dbc:	695b      	ldr	r3, [r3, #20]
 8000dbe:	4a1e      	ldr	r2, [pc, #120]	; (8000e38 <HAL_SPI_MspInit+0xb8>)
 8000dc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dc4:	6153      	str	r3, [r2, #20]
 8000dc6:	4b1c      	ldr	r3, [pc, #112]	; (8000e38 <HAL_SPI_MspInit+0xb8>)
 8000dc8:	695b      	ldr	r3, [r3, #20]
 8000dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dce:	60fb      	str	r3, [r7, #12]
 8000dd0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd2:	4b19      	ldr	r3, [pc, #100]	; (8000e38 <HAL_SPI_MspInit+0xb8>)
 8000dd4:	695b      	ldr	r3, [r3, #20]
 8000dd6:	4a18      	ldr	r2, [pc, #96]	; (8000e38 <HAL_SPI_MspInit+0xb8>)
 8000dd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ddc:	6153      	str	r3, [r2, #20]
 8000dde:	4b16      	ldr	r3, [pc, #88]	; (8000e38 <HAL_SPI_MspInit+0xb8>)
 8000de0:	695b      	ldr	r3, [r3, #20]
 8000de2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000de6:	60bb      	str	r3, [r7, #8]
 8000de8:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000dea:	23c0      	movs	r3, #192	; 0xc0
 8000dec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dee:	2302      	movs	r3, #2
 8000df0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df2:	2300      	movs	r3, #0
 8000df4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000df6:	2303      	movs	r3, #3
 8000df8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000dfa:	2305      	movs	r3, #5
 8000dfc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dfe:	f107 0314 	add.w	r3, r7, #20
 8000e02:	4619      	mov	r1, r3
 8000e04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e08:	f001 f88c 	bl	8001f24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e0c:	2308      	movs	r3, #8
 8000e0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e10:	2302      	movs	r3, #2
 8000e12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e14:	2300      	movs	r3, #0
 8000e16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e18:	2303      	movs	r3, #3
 8000e1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e1c:	2305      	movs	r3, #5
 8000e1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e20:	f107 0314 	add.w	r3, r7, #20
 8000e24:	4619      	mov	r1, r3
 8000e26:	4805      	ldr	r0, [pc, #20]	; (8000e3c <HAL_SPI_MspInit+0xbc>)
 8000e28:	f001 f87c 	bl	8001f24 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000e2c:	bf00      	nop
 8000e2e:	3728      	adds	r7, #40	; 0x28
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	40013000 	.word	0x40013000
 8000e38:	40021000 	.word	0x40021000
 8000e3c:	48000400 	.word	0x48000400

08000e40 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b08a      	sub	sp, #40	; 0x28
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e48:	f107 0314 	add.w	r3, r7, #20
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	605a      	str	r2, [r3, #4]
 8000e52:	609a      	str	r2, [r3, #8]
 8000e54:	60da      	str	r2, [r3, #12]
 8000e56:	611a      	str	r2, [r3, #16]
  if(husart->Instance==USART3)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a17      	ldr	r2, [pc, #92]	; (8000ebc <HAL_USART_MspInit+0x7c>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d128      	bne.n	8000eb4 <HAL_USART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e62:	4b17      	ldr	r3, [pc, #92]	; (8000ec0 <HAL_USART_MspInit+0x80>)
 8000e64:	69db      	ldr	r3, [r3, #28]
 8000e66:	4a16      	ldr	r2, [pc, #88]	; (8000ec0 <HAL_USART_MspInit+0x80>)
 8000e68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e6c:	61d3      	str	r3, [r2, #28]
 8000e6e:	4b14      	ldr	r3, [pc, #80]	; (8000ec0 <HAL_USART_MspInit+0x80>)
 8000e70:	69db      	ldr	r3, [r3, #28]
 8000e72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e76:	613b      	str	r3, [r7, #16]
 8000e78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e7a:	4b11      	ldr	r3, [pc, #68]	; (8000ec0 <HAL_USART_MspInit+0x80>)
 8000e7c:	695b      	ldr	r3, [r3, #20]
 8000e7e:	4a10      	ldr	r2, [pc, #64]	; (8000ec0 <HAL_USART_MspInit+0x80>)
 8000e80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e84:	6153      	str	r3, [r2, #20]
 8000e86:	4b0e      	ldr	r3, [pc, #56]	; (8000ec0 <HAL_USART_MspInit+0x80>)
 8000e88:	695b      	ldr	r3, [r3, #20]
 8000e8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e8e:	60fb      	str	r3, [r7, #12]
 8000e90:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    PB12     ------> USART3_CK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000e92:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000e96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e98:	2302      	movs	r3, #2
 8000e9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ea0:	2303      	movs	r3, #3
 8000ea2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ea4:	2307      	movs	r3, #7
 8000ea6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ea8:	f107 0314 	add.w	r3, r7, #20
 8000eac:	4619      	mov	r1, r3
 8000eae:	4805      	ldr	r0, [pc, #20]	; (8000ec4 <HAL_USART_MspInit+0x84>)
 8000eb0:	f001 f838 	bl	8001f24 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000eb4:	bf00      	nop
 8000eb6:	3728      	adds	r7, #40	; 0x28
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	40004800 	.word	0x40004800
 8000ec0:	40021000 	.word	0x40021000
 8000ec4:	48000400 	.word	0x48000400

08000ec8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ecc:	bf00      	nop
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr

08000ed6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eda:	e7fe      	b.n	8000eda <HardFault_Handler+0x4>

08000edc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ee0:	e7fe      	b.n	8000ee0 <MemManage_Handler+0x4>

08000ee2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ee6:	e7fe      	b.n	8000ee6 <BusFault_Handler+0x4>

08000ee8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eec:	e7fe      	b.n	8000eec <UsageFault_Handler+0x4>

08000eee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eee:	b480      	push	{r7}
 8000ef0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ef2:	bf00      	nop
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr

08000efc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f00:	bf00      	nop
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr

08000f0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f0a:	b480      	push	{r7}
 8000f0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f0e:	bf00      	nop
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr

08000f18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f1c:	f000 f888 	bl	8001030 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f20:	bf00      	nop
 8000f22:	bd80      	pop	{r7, pc}

08000f24 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f28:	4b08      	ldr	r3, [pc, #32]	; (8000f4c <SystemInit+0x28>)
 8000f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f2e:	4a07      	ldr	r2, [pc, #28]	; (8000f4c <SystemInit+0x28>)
 8000f30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f38:	4b04      	ldr	r3, [pc, #16]	; (8000f4c <SystemInit+0x28>)
 8000f3a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f3e:	609a      	str	r2, [r3, #8]
#endif
}
 8000f40:	bf00      	nop
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	e000ed00 	.word	0xe000ed00

08000f50 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000f50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f88 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000f54:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000f56:	e003      	b.n	8000f60 <LoopCopyDataInit>

08000f58 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000f58:	4b0c      	ldr	r3, [pc, #48]	; (8000f8c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000f5a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000f5c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000f5e:	3104      	adds	r1, #4

08000f60 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000f60:	480b      	ldr	r0, [pc, #44]	; (8000f90 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000f62:	4b0c      	ldr	r3, [pc, #48]	; (8000f94 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000f64:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000f66:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000f68:	d3f6      	bcc.n	8000f58 <CopyDataInit>
	ldr	r2, =_sbss
 8000f6a:	4a0b      	ldr	r2, [pc, #44]	; (8000f98 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000f6c:	e002      	b.n	8000f74 <LoopFillZerobss>

08000f6e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000f6e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000f70:	f842 3b04 	str.w	r3, [r2], #4

08000f74 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000f74:	4b09      	ldr	r3, [pc, #36]	; (8000f9c <LoopForever+0x16>)
	cmp	r2, r3
 8000f76:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000f78:	d3f9      	bcc.n	8000f6e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f7a:	f7ff ffd3 	bl	8000f24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f7e:	f003 ff75 	bl	8004e6c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f82:	f7ff f921 	bl	80001c8 <main>

08000f86 <LoopForever>:

LoopForever:
    b LoopForever
 8000f86:	e7fe      	b.n	8000f86 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000f88:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8000f8c:	08004f1c 	.word	0x08004f1c
	ldr	r0, =_sdata
 8000f90:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000f94:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000f98:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000f9c:	200002f4 	.word	0x200002f4

08000fa0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fa0:	e7fe      	b.n	8000fa0 <ADC1_2_IRQHandler>
	...

08000fa4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fa8:	4b08      	ldr	r3, [pc, #32]	; (8000fcc <HAL_Init+0x28>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a07      	ldr	r2, [pc, #28]	; (8000fcc <HAL_Init+0x28>)
 8000fae:	f043 0310 	orr.w	r3, r3, #16
 8000fb2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fb4:	2003      	movs	r0, #3
 8000fb6:	f000 ff81 	bl	8001ebc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fba:	2000      	movs	r0, #0
 8000fbc:	f000 f808 	bl	8000fd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fc0:	f7ff fcd6 	bl	8000970 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fc4:	2300      	movs	r3, #0
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	40022000 	.word	0x40022000

08000fd0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fd8:	4b12      	ldr	r3, [pc, #72]	; (8001024 <HAL_InitTick+0x54>)
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	4b12      	ldr	r3, [pc, #72]	; (8001028 <HAL_InitTick+0x58>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fe6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f000 ff8b 	bl	8001f0a <HAL_SYSTICK_Config>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	e00e      	b.n	800101c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2b0f      	cmp	r3, #15
 8001002:	d80a      	bhi.n	800101a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001004:	2200      	movs	r2, #0
 8001006:	6879      	ldr	r1, [r7, #4]
 8001008:	f04f 30ff 	mov.w	r0, #4294967295
 800100c:	f000 ff61 	bl	8001ed2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001010:	4a06      	ldr	r2, [pc, #24]	; (800102c <HAL_InitTick+0x5c>)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001016:	2300      	movs	r3, #0
 8001018:	e000      	b.n	800101c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800101a:	2301      	movs	r3, #1
}
 800101c:	4618      	mov	r0, r3
 800101e:	3708      	adds	r7, #8
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	20000000 	.word	0x20000000
 8001028:	20000008 	.word	0x20000008
 800102c:	20000004 	.word	0x20000004

08001030 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001034:	4b06      	ldr	r3, [pc, #24]	; (8001050 <HAL_IncTick+0x20>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	461a      	mov	r2, r3
 800103a:	4b06      	ldr	r3, [pc, #24]	; (8001054 <HAL_IncTick+0x24>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4413      	add	r3, r2
 8001040:	4a04      	ldr	r2, [pc, #16]	; (8001054 <HAL_IncTick+0x24>)
 8001042:	6013      	str	r3, [r2, #0]
}
 8001044:	bf00      	nop
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	20000008 	.word	0x20000008
 8001054:	200002f0 	.word	0x200002f0

08001058 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  return uwTick;  
 800105c:	4b03      	ldr	r3, [pc, #12]	; (800106c <HAL_GetTick+0x14>)
 800105e:	681b      	ldr	r3, [r3, #0]
}
 8001060:	4618      	mov	r0, r3
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	200002f0 	.word	0x200002f0

08001070 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b09a      	sub	sp, #104	; 0x68
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001078:	2300      	movs	r3, #0
 800107a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800107e:	2300      	movs	r3, #0
 8001080:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001082:	2300      	movs	r3, #0
 8001084:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d101      	bne.n	8001090 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 800108c:	2301      	movs	r3, #1
 800108e:	e172      	b.n	8001376 <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	691b      	ldr	r3, [r3, #16]
 8001094:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109a:	f003 0310 	and.w	r3, r3, #16
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d176      	bne.n	8001190 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d152      	bne.n	8001150 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2200      	movs	r2, #0
 80010ae:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2200      	movs	r2, #0
 80010b4:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2200      	movs	r2, #0
 80010ba:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2200      	movs	r2, #0
 80010c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010c4:	6878      	ldr	r0, [r7, #4]
 80010c6:	f7ff fc77 	bl	80009b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	689b      	ldr	r3, [r3, #8]
 80010d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d13b      	bne.n	8001150 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80010d8:	6878      	ldr	r0, [r7, #4]
 80010da:	f000 fce3 	bl	8001aa4 <ADC_Disable>
 80010de:	4603      	mov	r3, r0
 80010e0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e8:	f003 0310 	and.w	r3, r3, #16
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d12f      	bne.n	8001150 <HAL_ADC_Init+0xe0>
 80010f0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d12b      	bne.n	8001150 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001100:	f023 0302 	bic.w	r3, r3, #2
 8001104:	f043 0202 	orr.w	r2, r3, #2
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	689a      	ldr	r2, [r3, #8]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800111a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	689a      	ldr	r2, [r3, #8]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800112a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800112c:	4b94      	ldr	r3, [pc, #592]	; (8001380 <HAL_ADC_Init+0x310>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a94      	ldr	r2, [pc, #592]	; (8001384 <HAL_ADC_Init+0x314>)
 8001132:	fba2 2303 	umull	r2, r3, r2, r3
 8001136:	0c9a      	lsrs	r2, r3, #18
 8001138:	4613      	mov	r3, r2
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	4413      	add	r3, r2
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001142:	e002      	b.n	800114a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	3b01      	subs	r3, #1
 8001148:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800114a:	68bb      	ldr	r3, [r7, #8]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d1f9      	bne.n	8001144 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800115a:	2b00      	cmp	r3, #0
 800115c:	d007      	beq.n	800116e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001168:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800116c:	d110      	bne.n	8001190 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001172:	f023 0312 	bic.w	r3, r3, #18
 8001176:	f043 0210 	orr.w	r2, r3, #16
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001182:	f043 0201 	orr.w	r2, r3, #1
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800118a:	2301      	movs	r3, #1
 800118c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001194:	f003 0310 	and.w	r3, r3, #16
 8001198:	2b00      	cmp	r3, #0
 800119a:	f040 80df 	bne.w	800135c <HAL_ADC_Init+0x2ec>
 800119e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	f040 80da 	bne.w	800135c <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	f040 80d2 	bne.w	800135c <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011bc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80011c0:	f043 0202 	orr.w	r2, r3, #2
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80011c8:	4b6f      	ldr	r3, [pc, #444]	; (8001388 <HAL_ADC_Init+0x318>)
 80011ca:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80011d4:	d102      	bne.n	80011dc <HAL_ADC_Init+0x16c>
 80011d6:	4b6d      	ldr	r3, [pc, #436]	; (800138c <HAL_ADC_Init+0x31c>)
 80011d8:	60fb      	str	r3, [r7, #12]
 80011da:	e002      	b.n	80011e2 <HAL_ADC_Init+0x172>
 80011dc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80011e0:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	f003 0303 	and.w	r3, r3, #3
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d108      	bne.n	8001202 <HAL_ADC_Init+0x192>
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f003 0301 	and.w	r3, r3, #1
 80011fa:	2b01      	cmp	r3, #1
 80011fc:	d101      	bne.n	8001202 <HAL_ADC_Init+0x192>
 80011fe:	2301      	movs	r3, #1
 8001200:	e000      	b.n	8001204 <HAL_ADC_Init+0x194>
 8001202:	2300      	movs	r3, #0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d11c      	bne.n	8001242 <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001208:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800120a:	2b00      	cmp	r3, #0
 800120c:	d010      	beq.n	8001230 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	f003 0303 	and.w	r3, r3, #3
 8001216:	2b01      	cmp	r3, #1
 8001218:	d107      	bne.n	800122a <HAL_ADC_Init+0x1ba>
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f003 0301 	and.w	r3, r3, #1
 8001222:	2b01      	cmp	r3, #1
 8001224:	d101      	bne.n	800122a <HAL_ADC_Init+0x1ba>
 8001226:	2301      	movs	r3, #1
 8001228:	e000      	b.n	800122c <HAL_ADC_Init+0x1bc>
 800122a:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800122c:	2b00      	cmp	r3, #0
 800122e:	d108      	bne.n	8001242 <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001230:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	431a      	orrs	r2, r3
 800123e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001240:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	7e5b      	ldrb	r3, [r3, #25]
 8001246:	035b      	lsls	r3, r3, #13
 8001248:	687a      	ldr	r2, [r7, #4]
 800124a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800124c:	2a01      	cmp	r2, #1
 800124e:	d002      	beq.n	8001256 <HAL_ADC_Init+0x1e6>
 8001250:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001254:	e000      	b.n	8001258 <HAL_ADC_Init+0x1e8>
 8001256:	2200      	movs	r2, #0
 8001258:	431a      	orrs	r2, r3
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	68db      	ldr	r3, [r3, #12]
 800125e:	431a      	orrs	r2, r3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	689b      	ldr	r3, [r3, #8]
 8001264:	4313      	orrs	r3, r2
 8001266:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001268:	4313      	orrs	r3, r2
 800126a:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001272:	2b01      	cmp	r3, #1
 8001274:	d11b      	bne.n	80012ae <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	7e5b      	ldrb	r3, [r3, #25]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d109      	bne.n	8001292 <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001282:	3b01      	subs	r3, #1
 8001284:	045a      	lsls	r2, r3, #17
 8001286:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001288:	4313      	orrs	r3, r2
 800128a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800128e:	663b      	str	r3, [r7, #96]	; 0x60
 8001290:	e00d      	b.n	80012ae <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001296:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800129a:	f043 0220 	orr.w	r2, r3, #32
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a6:	f043 0201 	orr.w	r2, r3, #1
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	d007      	beq.n	80012c6 <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012be:	4313      	orrs	r3, r2
 80012c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80012c2:	4313      	orrs	r3, r2
 80012c4:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	689b      	ldr	r3, [r3, #8]
 80012cc:	f003 030c 	and.w	r3, r3, #12
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d114      	bne.n	80012fe <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	68db      	ldr	r3, [r3, #12]
 80012da:	687a      	ldr	r2, [r7, #4]
 80012dc:	6812      	ldr	r2, [r2, #0]
 80012de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80012e2:	f023 0302 	bic.w	r3, r3, #2
 80012e6:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	7e1b      	ldrb	r3, [r3, #24]
 80012ec:	039a      	lsls	r2, r3, #14
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80012f4:	005b      	lsls	r3, r3, #1
 80012f6:	4313      	orrs	r3, r2
 80012f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80012fa:	4313      	orrs	r3, r2
 80012fc:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	68da      	ldr	r2, [r3, #12]
 8001304:	4b22      	ldr	r3, [pc, #136]	; (8001390 <HAL_ADC_Init+0x320>)
 8001306:	4013      	ands	r3, r2
 8001308:	687a      	ldr	r2, [r7, #4]
 800130a:	6812      	ldr	r2, [r2, #0]
 800130c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800130e:	430b      	orrs	r3, r1
 8001310:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	691b      	ldr	r3, [r3, #16]
 8001316:	2b01      	cmp	r3, #1
 8001318:	d10c      	bne.n	8001334 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001320:	f023 010f 	bic.w	r1, r3, #15
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	69db      	ldr	r3, [r3, #28]
 8001328:	1e5a      	subs	r2, r3, #1
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	430a      	orrs	r2, r1
 8001330:	631a      	str	r2, [r3, #48]	; 0x30
 8001332:	e007      	b.n	8001344 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f022 020f 	bic.w	r2, r2, #15
 8001342:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2200      	movs	r2, #0
 8001348:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134e:	f023 0303 	bic.w	r3, r3, #3
 8001352:	f043 0201 	orr.w	r2, r3, #1
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	641a      	str	r2, [r3, #64]	; 0x40
 800135a:	e00a      	b.n	8001372 <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001360:	f023 0312 	bic.w	r3, r3, #18
 8001364:	f043 0210 	orr.w	r2, r3, #16
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800136c:	2301      	movs	r3, #1
 800136e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001372:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001376:	4618      	mov	r0, r3
 8001378:	3768      	adds	r7, #104	; 0x68
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	20000000 	.word	0x20000000
 8001384:	431bde83 	.word	0x431bde83
 8001388:	50000300 	.word	0x50000300
 800138c:	50000100 	.word	0x50000100
 8001390:	fff0c007 	.word	0xfff0c007

08001394 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001394:	b480      	push	{r7}
 8001396:	b09b      	sub	sp, #108	; 0x6c
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800139e:	2300      	movs	r3, #0
 80013a0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80013a4:	2300      	movs	r3, #0
 80013a6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	d101      	bne.n	80013b6 <HAL_ADC_ConfigChannel+0x22>
 80013b2:	2302      	movs	r3, #2
 80013b4:	e2a5      	b.n	8001902 <HAL_ADC_ConfigChannel+0x56e>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2201      	movs	r2, #1
 80013ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	f003 0304 	and.w	r3, r3, #4
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	f040 8289 	bne.w	80018e0 <HAL_ADC_ConfigChannel+0x54c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	2b04      	cmp	r3, #4
 80013d4:	d81c      	bhi.n	8001410 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685a      	ldr	r2, [r3, #4]
 80013e0:	4613      	mov	r3, r2
 80013e2:	005b      	lsls	r3, r3, #1
 80013e4:	4413      	add	r3, r2
 80013e6:	005b      	lsls	r3, r3, #1
 80013e8:	461a      	mov	r2, r3
 80013ea:	231f      	movs	r3, #31
 80013ec:	4093      	lsls	r3, r2
 80013ee:	43db      	mvns	r3, r3
 80013f0:	4019      	ands	r1, r3
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	6818      	ldr	r0, [r3, #0]
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	685a      	ldr	r2, [r3, #4]
 80013fa:	4613      	mov	r3, r2
 80013fc:	005b      	lsls	r3, r3, #1
 80013fe:	4413      	add	r3, r2
 8001400:	005b      	lsls	r3, r3, #1
 8001402:	fa00 f203 	lsl.w	r2, r0, r3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	430a      	orrs	r2, r1
 800140c:	631a      	str	r2, [r3, #48]	; 0x30
 800140e:	e063      	b.n	80014d8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	2b09      	cmp	r3, #9
 8001416:	d81e      	bhi.n	8001456 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	685a      	ldr	r2, [r3, #4]
 8001422:	4613      	mov	r3, r2
 8001424:	005b      	lsls	r3, r3, #1
 8001426:	4413      	add	r3, r2
 8001428:	005b      	lsls	r3, r3, #1
 800142a:	3b1e      	subs	r3, #30
 800142c:	221f      	movs	r2, #31
 800142e:	fa02 f303 	lsl.w	r3, r2, r3
 8001432:	43db      	mvns	r3, r3
 8001434:	4019      	ands	r1, r3
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	6818      	ldr	r0, [r3, #0]
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	685a      	ldr	r2, [r3, #4]
 800143e:	4613      	mov	r3, r2
 8001440:	005b      	lsls	r3, r3, #1
 8001442:	4413      	add	r3, r2
 8001444:	005b      	lsls	r3, r3, #1
 8001446:	3b1e      	subs	r3, #30
 8001448:	fa00 f203 	lsl.w	r2, r0, r3
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	430a      	orrs	r2, r1
 8001452:	635a      	str	r2, [r3, #52]	; 0x34
 8001454:	e040      	b.n	80014d8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	2b0e      	cmp	r3, #14
 800145c:	d81e      	bhi.n	800149c <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685a      	ldr	r2, [r3, #4]
 8001468:	4613      	mov	r3, r2
 800146a:	005b      	lsls	r3, r3, #1
 800146c:	4413      	add	r3, r2
 800146e:	005b      	lsls	r3, r3, #1
 8001470:	3b3c      	subs	r3, #60	; 0x3c
 8001472:	221f      	movs	r2, #31
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	43db      	mvns	r3, r3
 800147a:	4019      	ands	r1, r3
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	6818      	ldr	r0, [r3, #0]
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685a      	ldr	r2, [r3, #4]
 8001484:	4613      	mov	r3, r2
 8001486:	005b      	lsls	r3, r3, #1
 8001488:	4413      	add	r3, r2
 800148a:	005b      	lsls	r3, r3, #1
 800148c:	3b3c      	subs	r3, #60	; 0x3c
 800148e:	fa00 f203 	lsl.w	r2, r0, r3
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	430a      	orrs	r2, r1
 8001498:	639a      	str	r2, [r3, #56]	; 0x38
 800149a:	e01d      	b.n	80014d8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	685a      	ldr	r2, [r3, #4]
 80014a6:	4613      	mov	r3, r2
 80014a8:	005b      	lsls	r3, r3, #1
 80014aa:	4413      	add	r3, r2
 80014ac:	005b      	lsls	r3, r3, #1
 80014ae:	3b5a      	subs	r3, #90	; 0x5a
 80014b0:	221f      	movs	r2, #31
 80014b2:	fa02 f303 	lsl.w	r3, r2, r3
 80014b6:	43db      	mvns	r3, r3
 80014b8:	4019      	ands	r1, r3
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	6818      	ldr	r0, [r3, #0]
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	685a      	ldr	r2, [r3, #4]
 80014c2:	4613      	mov	r3, r2
 80014c4:	005b      	lsls	r3, r3, #1
 80014c6:	4413      	add	r3, r2
 80014c8:	005b      	lsls	r3, r3, #1
 80014ca:	3b5a      	subs	r3, #90	; 0x5a
 80014cc:	fa00 f203 	lsl.w	r2, r0, r3
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	430a      	orrs	r2, r1
 80014d6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	f003 030c 	and.w	r3, r3, #12
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	f040 80e5 	bne.w	80016b2 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2b09      	cmp	r3, #9
 80014ee:	d91c      	bls.n	800152a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	6999      	ldr	r1, [r3, #24]
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	4613      	mov	r3, r2
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	4413      	add	r3, r2
 8001500:	3b1e      	subs	r3, #30
 8001502:	2207      	movs	r2, #7
 8001504:	fa02 f303 	lsl.w	r3, r2, r3
 8001508:	43db      	mvns	r3, r3
 800150a:	4019      	ands	r1, r3
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	6898      	ldr	r0, [r3, #8]
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	4613      	mov	r3, r2
 8001516:	005b      	lsls	r3, r3, #1
 8001518:	4413      	add	r3, r2
 800151a:	3b1e      	subs	r3, #30
 800151c:	fa00 f203 	lsl.w	r2, r0, r3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	430a      	orrs	r2, r1
 8001526:	619a      	str	r2, [r3, #24]
 8001528:	e019      	b.n	800155e <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	6959      	ldr	r1, [r3, #20]
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	4613      	mov	r3, r2
 8001536:	005b      	lsls	r3, r3, #1
 8001538:	4413      	add	r3, r2
 800153a:	2207      	movs	r2, #7
 800153c:	fa02 f303 	lsl.w	r3, r2, r3
 8001540:	43db      	mvns	r3, r3
 8001542:	4019      	ands	r1, r3
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	6898      	ldr	r0, [r3, #8]
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	4613      	mov	r3, r2
 800154e:	005b      	lsls	r3, r3, #1
 8001550:	4413      	add	r3, r2
 8001552:	fa00 f203 	lsl.w	r2, r0, r3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	430a      	orrs	r2, r1
 800155c:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	695a      	ldr	r2, [r3, #20]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	08db      	lsrs	r3, r3, #3
 800156a:	f003 0303 	and.w	r3, r3, #3
 800156e:	005b      	lsls	r3, r3, #1
 8001570:	fa02 f303 	lsl.w	r3, r2, r3
 8001574:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	691b      	ldr	r3, [r3, #16]
 800157a:	3b01      	subs	r3, #1
 800157c:	2b03      	cmp	r3, #3
 800157e:	d84f      	bhi.n	8001620 <HAL_ADC_ConfigChannel+0x28c>
 8001580:	a201      	add	r2, pc, #4	; (adr r2, 8001588 <HAL_ADC_ConfigChannel+0x1f4>)
 8001582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001586:	bf00      	nop
 8001588:	08001599 	.word	0x08001599
 800158c:	080015bb 	.word	0x080015bb
 8001590:	080015dd 	.word	0x080015dd
 8001594:	080015ff 	.word	0x080015ff
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800159e:	4b9e      	ldr	r3, [pc, #632]	; (8001818 <HAL_ADC_ConfigChannel+0x484>)
 80015a0:	4013      	ands	r3, r2
 80015a2:	683a      	ldr	r2, [r7, #0]
 80015a4:	6812      	ldr	r2, [r2, #0]
 80015a6:	0691      	lsls	r1, r2, #26
 80015a8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80015aa:	430a      	orrs	r2, r1
 80015ac:	431a      	orrs	r2, r3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80015b6:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80015b8:	e07e      	b.n	80016b8 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80015c0:	4b95      	ldr	r3, [pc, #596]	; (8001818 <HAL_ADC_ConfigChannel+0x484>)
 80015c2:	4013      	ands	r3, r2
 80015c4:	683a      	ldr	r2, [r7, #0]
 80015c6:	6812      	ldr	r2, [r2, #0]
 80015c8:	0691      	lsls	r1, r2, #26
 80015ca:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80015cc:	430a      	orrs	r2, r1
 80015ce:	431a      	orrs	r2, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80015d8:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80015da:	e06d      	b.n	80016b8 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80015e2:	4b8d      	ldr	r3, [pc, #564]	; (8001818 <HAL_ADC_ConfigChannel+0x484>)
 80015e4:	4013      	ands	r3, r2
 80015e6:	683a      	ldr	r2, [r7, #0]
 80015e8:	6812      	ldr	r2, [r2, #0]
 80015ea:	0691      	lsls	r1, r2, #26
 80015ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80015ee:	430a      	orrs	r2, r1
 80015f0:	431a      	orrs	r2, r3
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80015fa:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80015fc:	e05c      	b.n	80016b8 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001604:	4b84      	ldr	r3, [pc, #528]	; (8001818 <HAL_ADC_ConfigChannel+0x484>)
 8001606:	4013      	ands	r3, r2
 8001608:	683a      	ldr	r2, [r7, #0]
 800160a:	6812      	ldr	r2, [r2, #0]
 800160c:	0691      	lsls	r1, r2, #26
 800160e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001610:	430a      	orrs	r2, r1
 8001612:	431a      	orrs	r2, r3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800161c:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800161e:	e04b      	b.n	80016b8 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001626:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	069b      	lsls	r3, r3, #26
 8001630:	429a      	cmp	r2, r3
 8001632:	d107      	bne.n	8001644 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001642:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800164a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	069b      	lsls	r3, r3, #26
 8001654:	429a      	cmp	r2, r3
 8001656:	d107      	bne.n	8001668 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001666:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800166e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	069b      	lsls	r3, r3, #26
 8001678:	429a      	cmp	r2, r3
 800167a:	d107      	bne.n	800168c <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800168a:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001692:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	069b      	lsls	r3, r3, #26
 800169c:	429a      	cmp	r2, r3
 800169e:	d10a      	bne.n	80016b6 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80016ae:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80016b0:	e001      	b.n	80016b6 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80016b2:	bf00      	nop
 80016b4:	e000      	b.n	80016b8 <HAL_ADC_ConfigChannel+0x324>
      break;
 80016b6:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	f003 0303 	and.w	r3, r3, #3
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d108      	bne.n	80016d8 <HAL_ADC_ConfigChannel+0x344>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 0301 	and.w	r3, r3, #1
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d101      	bne.n	80016d8 <HAL_ADC_ConfigChannel+0x344>
 80016d4:	2301      	movs	r3, #1
 80016d6:	e000      	b.n	80016da <HAL_ADC_ConfigChannel+0x346>
 80016d8:	2300      	movs	r3, #0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	f040 810b 	bne.w	80018f6 <HAL_ADC_ConfigChannel+0x562>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d00f      	beq.n	8001708 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	2201      	movs	r2, #1
 80016f6:	fa02 f303 	lsl.w	r3, r2, r3
 80016fa:	43da      	mvns	r2, r3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	400a      	ands	r2, r1
 8001702:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001706:	e049      	b.n	800179c <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	2201      	movs	r2, #1
 8001716:	409a      	lsls	r2, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	430a      	orrs	r2, r1
 800171e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	2b09      	cmp	r3, #9
 8001728:	d91c      	bls.n	8001764 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	6999      	ldr	r1, [r3, #24]
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	4613      	mov	r3, r2
 8001736:	005b      	lsls	r3, r3, #1
 8001738:	4413      	add	r3, r2
 800173a:	3b1b      	subs	r3, #27
 800173c:	2207      	movs	r2, #7
 800173e:	fa02 f303 	lsl.w	r3, r2, r3
 8001742:	43db      	mvns	r3, r3
 8001744:	4019      	ands	r1, r3
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	6898      	ldr	r0, [r3, #8]
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	4613      	mov	r3, r2
 8001750:	005b      	lsls	r3, r3, #1
 8001752:	4413      	add	r3, r2
 8001754:	3b1b      	subs	r3, #27
 8001756:	fa00 f203 	lsl.w	r2, r0, r3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	430a      	orrs	r2, r1
 8001760:	619a      	str	r2, [r3, #24]
 8001762:	e01b      	b.n	800179c <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	6959      	ldr	r1, [r3, #20]
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	1c5a      	adds	r2, r3, #1
 8001770:	4613      	mov	r3, r2
 8001772:	005b      	lsls	r3, r3, #1
 8001774:	4413      	add	r3, r2
 8001776:	2207      	movs	r2, #7
 8001778:	fa02 f303 	lsl.w	r3, r2, r3
 800177c:	43db      	mvns	r3, r3
 800177e:	4019      	ands	r1, r3
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	6898      	ldr	r0, [r3, #8]
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	1c5a      	adds	r2, r3, #1
 800178a:	4613      	mov	r3, r2
 800178c:	005b      	lsls	r3, r3, #1
 800178e:	4413      	add	r3, r2
 8001790:	fa00 f203 	lsl.w	r2, r0, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	430a      	orrs	r2, r1
 800179a:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800179c:	4b1f      	ldr	r3, [pc, #124]	; (800181c <HAL_ADC_ConfigChannel+0x488>)
 800179e:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	2b10      	cmp	r3, #16
 80017a6:	d105      	bne.n	80017b4 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80017a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d015      	beq.n	80017e0 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80017b8:	2b11      	cmp	r3, #17
 80017ba:	d105      	bne.n	80017c8 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80017bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d00b      	beq.n	80017e0 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80017cc:	2b12      	cmp	r3, #18
 80017ce:	f040 8092 	bne.w	80018f6 <HAL_ADC_ConfigChannel+0x562>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80017d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80017da:	2b00      	cmp	r3, #0
 80017dc:	f040 808b 	bne.w	80018f6 <HAL_ADC_ConfigChannel+0x562>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80017e8:	d102      	bne.n	80017f0 <HAL_ADC_ConfigChannel+0x45c>
 80017ea:	4b0d      	ldr	r3, [pc, #52]	; (8001820 <HAL_ADC_ConfigChannel+0x48c>)
 80017ec:	60fb      	str	r3, [r7, #12]
 80017ee:	e002      	b.n	80017f6 <HAL_ADC_ConfigChannel+0x462>
 80017f0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80017f4:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	f003 0303 	and.w	r3, r3, #3
 8001800:	2b01      	cmp	r3, #1
 8001802:	d10f      	bne.n	8001824 <HAL_ADC_ConfigChannel+0x490>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 0301 	and.w	r3, r3, #1
 800180e:	2b01      	cmp	r3, #1
 8001810:	d108      	bne.n	8001824 <HAL_ADC_ConfigChannel+0x490>
 8001812:	2301      	movs	r3, #1
 8001814:	e007      	b.n	8001826 <HAL_ADC_ConfigChannel+0x492>
 8001816:	bf00      	nop
 8001818:	83fff000 	.word	0x83fff000
 800181c:	50000300 	.word	0x50000300
 8001820:	50000100 	.word	0x50000100
 8001824:	2300      	movs	r3, #0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d150      	bne.n	80018cc <HAL_ADC_ConfigChannel+0x538>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800182a:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800182c:	2b00      	cmp	r3, #0
 800182e:	d010      	beq.n	8001852 <HAL_ADC_ConfigChannel+0x4be>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	f003 0303 	and.w	r3, r3, #3
 8001838:	2b01      	cmp	r3, #1
 800183a:	d107      	bne.n	800184c <HAL_ADC_ConfigChannel+0x4b8>
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 0301 	and.w	r3, r3, #1
 8001844:	2b01      	cmp	r3, #1
 8001846:	d101      	bne.n	800184c <HAL_ADC_ConfigChannel+0x4b8>
 8001848:	2301      	movs	r3, #1
 800184a:	e000      	b.n	800184e <HAL_ADC_ConfigChannel+0x4ba>
 800184c:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800184e:	2b00      	cmp	r3, #0
 8001850:	d13c      	bne.n	80018cc <HAL_ADC_ConfigChannel+0x538>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	2b10      	cmp	r3, #16
 8001858:	d11d      	bne.n	8001896 <HAL_ADC_ConfigChannel+0x502>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001862:	d118      	bne.n	8001896 <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001864:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800186c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800186e:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001870:	4b27      	ldr	r3, [pc, #156]	; (8001910 <HAL_ADC_ConfigChannel+0x57c>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a27      	ldr	r2, [pc, #156]	; (8001914 <HAL_ADC_ConfigChannel+0x580>)
 8001876:	fba2 2303 	umull	r2, r3, r2, r3
 800187a:	0c9a      	lsrs	r2, r3, #18
 800187c:	4613      	mov	r3, r2
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	4413      	add	r3, r2
 8001882:	005b      	lsls	r3, r3, #1
 8001884:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001886:	e002      	b.n	800188e <HAL_ADC_ConfigChannel+0x4fa>
          {
            wait_loop_index--;
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	3b01      	subs	r3, #1
 800188c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d1f9      	bne.n	8001888 <HAL_ADC_ConfigChannel+0x4f4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001894:	e02e      	b.n	80018f4 <HAL_ADC_ConfigChannel+0x560>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	2b11      	cmp	r3, #17
 800189c:	d10b      	bne.n	80018b6 <HAL_ADC_ConfigChannel+0x522>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80018a6:	d106      	bne.n	80018b6 <HAL_ADC_ConfigChannel+0x522>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80018a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80018b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018b2:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80018b4:	e01e      	b.n	80018f4 <HAL_ADC_ConfigChannel+0x560>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	2b12      	cmp	r3, #18
 80018bc:	d11a      	bne.n	80018f4 <HAL_ADC_ConfigChannel+0x560>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80018be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80018c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018c8:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80018ca:	e013      	b.n	80018f4 <HAL_ADC_ConfigChannel+0x560>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d0:	f043 0220 	orr.w	r2, r3, #32
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80018de:	e00a      	b.n	80018f6 <HAL_ADC_ConfigChannel+0x562>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e4:	f043 0220 	orr.w	r2, r3, #32
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80018f2:	e000      	b.n	80018f6 <HAL_ADC_ConfigChannel+0x562>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80018f4:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2200      	movs	r2, #0
 80018fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80018fe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001902:	4618      	mov	r0, r3
 8001904:	376c      	adds	r7, #108	; 0x6c
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	20000000 	.word	0x20000000
 8001914:	431bde83 	.word	0x431bde83

08001918 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001918:	b480      	push	{r7}
 800191a:	b099      	sub	sp, #100	; 0x64
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001922:	2300      	movs	r3, #0
 8001924:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001930:	d102      	bne.n	8001938 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8001932:	4b5a      	ldr	r3, [pc, #360]	; (8001a9c <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8001934:	60bb      	str	r3, [r7, #8]
 8001936:	e002      	b.n	800193e <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8001938:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800193c:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d101      	bne.n	8001948 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	e0a2      	b.n	8001a8e <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800194e:	2b01      	cmp	r3, #1
 8001950:	d101      	bne.n	8001956 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001952:	2302      	movs	r3, #2
 8001954:	e09b      	b.n	8001a8e <HAL_ADCEx_MultiModeConfigChannel+0x176>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2201      	movs	r2, #1
 800195a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	f003 0304 	and.w	r3, r3, #4
 8001968:	2b00      	cmp	r3, #0
 800196a:	d17f      	bne.n	8001a6c <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	f003 0304 	and.w	r3, r3, #4
 8001974:	2b00      	cmp	r3, #0
 8001976:	d179      	bne.n	8001a6c <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001978:	4b49      	ldr	r3, [pc, #292]	; (8001aa0 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 800197a:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d040      	beq.n	8001a06 <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001984:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	6859      	ldr	r1, [r3, #4]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001996:	035b      	lsls	r3, r3, #13
 8001998:	430b      	orrs	r3, r1
 800199a:	431a      	orrs	r2, r3
 800199c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800199e:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	f003 0303 	and.w	r3, r3, #3
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d108      	bne.n	80019c0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 0301 	and.w	r3, r3, #1
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d101      	bne.n	80019c0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80019bc:	2301      	movs	r3, #1
 80019be:	e000      	b.n	80019c2 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 80019c0:	2300      	movs	r3, #0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d15c      	bne.n	8001a80 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	f003 0303 	and.w	r3, r3, #3
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d107      	bne.n	80019e2 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 0301 	and.w	r3, r3, #1
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d101      	bne.n	80019e2 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80019de:	2301      	movs	r3, #1
 80019e0:	e000      	b.n	80019e4 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 80019e2:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d14b      	bne.n	8001a80 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80019e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80019f0:	f023 030f 	bic.w	r3, r3, #15
 80019f4:	683a      	ldr	r2, [r7, #0]
 80019f6:	6811      	ldr	r1, [r2, #0]
 80019f8:	683a      	ldr	r2, [r7, #0]
 80019fa:	6892      	ldr	r2, [r2, #8]
 80019fc:	430a      	orrs	r2, r1
 80019fe:	431a      	orrs	r2, r3
 8001a00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001a02:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001a04:	e03c      	b.n	8001a80 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001a06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001a10:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	f003 0303 	and.w	r3, r3, #3
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d108      	bne.n	8001a32 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0301 	and.w	r3, r3, #1
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d101      	bne.n	8001a32 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e000      	b.n	8001a34 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8001a32:	2300      	movs	r3, #0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d123      	bne.n	8001a80 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	f003 0303 	and.w	r3, r3, #3
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d107      	bne.n	8001a54 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 0301 	and.w	r3, r3, #1
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d101      	bne.n	8001a54 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8001a50:	2301      	movs	r3, #1
 8001a52:	e000      	b.n	8001a56 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8001a54:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d112      	bne.n	8001a80 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8001a5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001a62:	f023 030f 	bic.w	r3, r3, #15
 8001a66:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001a68:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001a6a:	e009      	b.n	8001a80 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a70:	f043 0220 	orr.w	r2, r3, #32
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8001a7e:	e000      	b.n	8001a82 <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001a80:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2200      	movs	r2, #0
 8001a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001a8a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3764      	adds	r7, #100	; 0x64
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	50000100 	.word	0x50000100
 8001aa0:	50000300 	.word	0x50000300

08001aa4 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b084      	sub	sp, #16
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001aac:	2300      	movs	r3, #0
 8001aae:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	f003 0303 	and.w	r3, r3, #3
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d108      	bne.n	8001ad0 <ADC_Disable+0x2c>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 0301 	and.w	r3, r3, #1
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d101      	bne.n	8001ad0 <ADC_Disable+0x2c>
 8001acc:	2301      	movs	r3, #1
 8001ace:	e000      	b.n	8001ad2 <ADC_Disable+0x2e>
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d040      	beq.n	8001b58 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	f003 030d 	and.w	r3, r3, #13
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d10f      	bne.n	8001b04 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	689a      	ldr	r2, [r3, #8]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f042 0202 	orr.w	r2, r2, #2
 8001af2:	609a      	str	r2, [r3, #8]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2203      	movs	r2, #3
 8001afa:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001afc:	f7ff faac 	bl	8001058 <HAL_GetTick>
 8001b00:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001b02:	e022      	b.n	8001b4a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b08:	f043 0210 	orr.w	r2, r3, #16
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b14:	f043 0201 	orr.w	r2, r3, #1
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e01c      	b.n	8001b5a <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001b20:	f7ff fa9a 	bl	8001058 <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d90d      	bls.n	8001b4a <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b32:	f043 0210 	orr.w	r2, r3, #16
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b3e:	f043 0201 	orr.w	r2, r3, #1
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e007      	b.n	8001b5a <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	f003 0301 	and.w	r3, r3, #1
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d0e3      	beq.n	8001b20 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001b58:	2300      	movs	r3, #0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3710      	adds	r7, #16
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}

08001b62 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001b62:	b580      	push	{r7, lr}
 8001b64:	b084      	sub	sp, #16
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d101      	bne.n	8001b74 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e0ed      	b.n	8001d50 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d102      	bne.n	8001b86 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f7fe ff97 	bl	8000ab4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f022 0202 	bic.w	r2, r2, #2
 8001b94:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b96:	f7ff fa5f 	bl	8001058 <HAL_GetTick>
 8001b9a:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001b9c:	e012      	b.n	8001bc4 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001b9e:	f7ff fa5b 	bl	8001058 <HAL_GetTick>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	2b0a      	cmp	r3, #10
 8001baa:	d90b      	bls.n	8001bc4 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2205      	movs	r2, #5
 8001bbc:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e0c5      	b.n	8001d50 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	f003 0302 	and.w	r3, r3, #2
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d1e5      	bne.n	8001b9e <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f042 0201 	orr.w	r2, r2, #1
 8001be0:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001be2:	f7ff fa39 	bl	8001058 <HAL_GetTick>
 8001be6:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001be8:	e012      	b.n	8001c10 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001bea:	f7ff fa35 	bl	8001058 <HAL_GetTick>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	2b0a      	cmp	r3, #10
 8001bf6:	d90b      	bls.n	8001c10 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bfc:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2205      	movs	r2, #5
 8001c08:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e09f      	b.n	8001d50 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f003 0301 	and.w	r3, r3, #1
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d0e5      	beq.n	8001bea <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	7e1b      	ldrb	r3, [r3, #24]
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d108      	bne.n	8001c38 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c34:	601a      	str	r2, [r3, #0]
 8001c36:	e007      	b.n	8001c48 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c46:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	7e5b      	ldrb	r3, [r3, #25]
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d108      	bne.n	8001c62 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c5e:	601a      	str	r2, [r3, #0]
 8001c60:	e007      	b.n	8001c72 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c70:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	7e9b      	ldrb	r3, [r3, #26]
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d108      	bne.n	8001c8c <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f042 0220 	orr.w	r2, r2, #32
 8001c88:	601a      	str	r2, [r3, #0]
 8001c8a:	e007      	b.n	8001c9c <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f022 0220 	bic.w	r2, r2, #32
 8001c9a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	7edb      	ldrb	r3, [r3, #27]
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d108      	bne.n	8001cb6 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f022 0210 	bic.w	r2, r2, #16
 8001cb2:	601a      	str	r2, [r3, #0]
 8001cb4:	e007      	b.n	8001cc6 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f042 0210 	orr.w	r2, r2, #16
 8001cc4:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	7f1b      	ldrb	r3, [r3, #28]
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d108      	bne.n	8001ce0 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f042 0208 	orr.w	r2, r2, #8
 8001cdc:	601a      	str	r2, [r3, #0]
 8001cde:	e007      	b.n	8001cf0 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f022 0208 	bic.w	r2, r2, #8
 8001cee:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	7f5b      	ldrb	r3, [r3, #29]
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d108      	bne.n	8001d0a <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f042 0204 	orr.w	r2, r2, #4
 8001d06:	601a      	str	r2, [r3, #0]
 8001d08:	e007      	b.n	8001d1a <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f022 0204 	bic.w	r2, r2, #4
 8001d18:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	689a      	ldr	r2, [r3, #8]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	68db      	ldr	r3, [r3, #12]
 8001d22:	431a      	orrs	r2, r3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	691b      	ldr	r3, [r3, #16]
 8001d28:	431a      	orrs	r2, r3
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	695b      	ldr	r3, [r3, #20]
 8001d2e:	ea42 0103 	orr.w	r1, r2, r3
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	1e5a      	subs	r2, r3, #1
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	430a      	orrs	r2, r1
 8001d3e:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2200      	movs	r2, #0
 8001d44:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2201      	movs	r2, #1
 8001d4a:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001d4e:	2300      	movs	r3, #0
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3710      	adds	r7, #16
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b085      	sub	sp, #20
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	f003 0307 	and.w	r3, r3, #7
 8001d66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d68:	4b0c      	ldr	r3, [pc, #48]	; (8001d9c <__NVIC_SetPriorityGrouping+0x44>)
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d6e:	68ba      	ldr	r2, [r7, #8]
 8001d70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d74:	4013      	ands	r3, r2
 8001d76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d8a:	4a04      	ldr	r2, [pc, #16]	; (8001d9c <__NVIC_SetPriorityGrouping+0x44>)
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	60d3      	str	r3, [r2, #12]
}
 8001d90:	bf00      	nop
 8001d92:	3714      	adds	r7, #20
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr
 8001d9c:	e000ed00 	.word	0xe000ed00

08001da0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001da4:	4b04      	ldr	r3, [pc, #16]	; (8001db8 <__NVIC_GetPriorityGrouping+0x18>)
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	0a1b      	lsrs	r3, r3, #8
 8001daa:	f003 0307 	and.w	r3, r3, #7
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr
 8001db8:	e000ed00 	.word	0xe000ed00

08001dbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	6039      	str	r1, [r7, #0]
 8001dc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	db0a      	blt.n	8001de6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	b2da      	uxtb	r2, r3
 8001dd4:	490c      	ldr	r1, [pc, #48]	; (8001e08 <__NVIC_SetPriority+0x4c>)
 8001dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dda:	0112      	lsls	r2, r2, #4
 8001ddc:	b2d2      	uxtb	r2, r2
 8001dde:	440b      	add	r3, r1
 8001de0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001de4:	e00a      	b.n	8001dfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	b2da      	uxtb	r2, r3
 8001dea:	4908      	ldr	r1, [pc, #32]	; (8001e0c <__NVIC_SetPriority+0x50>)
 8001dec:	79fb      	ldrb	r3, [r7, #7]
 8001dee:	f003 030f 	and.w	r3, r3, #15
 8001df2:	3b04      	subs	r3, #4
 8001df4:	0112      	lsls	r2, r2, #4
 8001df6:	b2d2      	uxtb	r2, r2
 8001df8:	440b      	add	r3, r1
 8001dfa:	761a      	strb	r2, [r3, #24]
}
 8001dfc:	bf00      	nop
 8001dfe:	370c      	adds	r7, #12
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr
 8001e08:	e000e100 	.word	0xe000e100
 8001e0c:	e000ed00 	.word	0xe000ed00

08001e10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b089      	sub	sp, #36	; 0x24
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	60f8      	str	r0, [r7, #12]
 8001e18:	60b9      	str	r1, [r7, #8]
 8001e1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	f003 0307 	and.w	r3, r3, #7
 8001e22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	f1c3 0307 	rsb	r3, r3, #7
 8001e2a:	2b04      	cmp	r3, #4
 8001e2c:	bf28      	it	cs
 8001e2e:	2304      	movcs	r3, #4
 8001e30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	3304      	adds	r3, #4
 8001e36:	2b06      	cmp	r3, #6
 8001e38:	d902      	bls.n	8001e40 <NVIC_EncodePriority+0x30>
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	3b03      	subs	r3, #3
 8001e3e:	e000      	b.n	8001e42 <NVIC_EncodePriority+0x32>
 8001e40:	2300      	movs	r3, #0
 8001e42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e44:	f04f 32ff 	mov.w	r2, #4294967295
 8001e48:	69bb      	ldr	r3, [r7, #24]
 8001e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4e:	43da      	mvns	r2, r3
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	401a      	ands	r2, r3
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e58:	f04f 31ff 	mov.w	r1, #4294967295
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e62:	43d9      	mvns	r1, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e68:	4313      	orrs	r3, r2
         );
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3724      	adds	r7, #36	; 0x24
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
	...

08001e78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	3b01      	subs	r3, #1
 8001e84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e88:	d301      	bcc.n	8001e8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e00f      	b.n	8001eae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e8e:	4a0a      	ldr	r2, [pc, #40]	; (8001eb8 <SysTick_Config+0x40>)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	3b01      	subs	r3, #1
 8001e94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e96:	210f      	movs	r1, #15
 8001e98:	f04f 30ff 	mov.w	r0, #4294967295
 8001e9c:	f7ff ff8e 	bl	8001dbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ea0:	4b05      	ldr	r3, [pc, #20]	; (8001eb8 <SysTick_Config+0x40>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ea6:	4b04      	ldr	r3, [pc, #16]	; (8001eb8 <SysTick_Config+0x40>)
 8001ea8:	2207      	movs	r2, #7
 8001eaa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001eac:	2300      	movs	r3, #0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	e000e010 	.word	0xe000e010

08001ebc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f7ff ff47 	bl	8001d58 <__NVIC_SetPriorityGrouping>
}
 8001eca:	bf00      	nop
 8001ecc:	3708      	adds	r7, #8
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}

08001ed2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ed2:	b580      	push	{r7, lr}
 8001ed4:	b086      	sub	sp, #24
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	4603      	mov	r3, r0
 8001eda:	60b9      	str	r1, [r7, #8]
 8001edc:	607a      	str	r2, [r7, #4]
 8001ede:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ee4:	f7ff ff5c 	bl	8001da0 <__NVIC_GetPriorityGrouping>
 8001ee8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	68b9      	ldr	r1, [r7, #8]
 8001eee:	6978      	ldr	r0, [r7, #20]
 8001ef0:	f7ff ff8e 	bl	8001e10 <NVIC_EncodePriority>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001efa:	4611      	mov	r1, r2
 8001efc:	4618      	mov	r0, r3
 8001efe:	f7ff ff5d 	bl	8001dbc <__NVIC_SetPriority>
}
 8001f02:	bf00      	nop
 8001f04:	3718      	adds	r7, #24
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}

08001f0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f0a:	b580      	push	{r7, lr}
 8001f0c:	b082      	sub	sp, #8
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f7ff ffb0 	bl	8001e78 <SysTick_Config>
 8001f18:	4603      	mov	r3, r0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3708      	adds	r7, #8
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
	...

08001f24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b087      	sub	sp, #28
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
 8001f2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f32:	e14e      	b.n	80021d2 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	2101      	movs	r1, #1
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f40:	4013      	ands	r3, r2
 8001f42:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	f000 8140 	beq.w	80021cc <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d00b      	beq.n	8001f6c <HAL_GPIO_Init+0x48>
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	2b02      	cmp	r3, #2
 8001f5a:	d007      	beq.n	8001f6c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f60:	2b11      	cmp	r3, #17
 8001f62:	d003      	beq.n	8001f6c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	2b12      	cmp	r3, #18
 8001f6a:	d130      	bne.n	8001fce <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	005b      	lsls	r3, r3, #1
 8001f76:	2203      	movs	r2, #3
 8001f78:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7c:	43db      	mvns	r3, r3
 8001f7e:	693a      	ldr	r2, [r7, #16]
 8001f80:	4013      	ands	r3, r2
 8001f82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	68da      	ldr	r2, [r3, #12]
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	005b      	lsls	r3, r3, #1
 8001f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f90:	693a      	ldr	r2, [r7, #16]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	693a      	ldr	r2, [r7, #16]
 8001f9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001faa:	43db      	mvns	r3, r3
 8001fac:	693a      	ldr	r2, [r7, #16]
 8001fae:	4013      	ands	r3, r2
 8001fb0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	091b      	lsrs	r3, r3, #4
 8001fb8:	f003 0201 	and.w	r2, r3, #1
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc2:	693a      	ldr	r2, [r7, #16]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	693a      	ldr	r2, [r7, #16]
 8001fcc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	68db      	ldr	r3, [r3, #12]
 8001fd2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	005b      	lsls	r3, r3, #1
 8001fd8:	2203      	movs	r2, #3
 8001fda:	fa02 f303 	lsl.w	r3, r2, r3
 8001fde:	43db      	mvns	r3, r3
 8001fe0:	693a      	ldr	r2, [r7, #16]
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	689a      	ldr	r2, [r3, #8]
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	005b      	lsls	r3, r3, #1
 8001fee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff2:	693a      	ldr	r2, [r7, #16]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	693a      	ldr	r2, [r7, #16]
 8001ffc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	2b02      	cmp	r3, #2
 8002004:	d003      	beq.n	800200e <HAL_GPIO_Init+0xea>
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	2b12      	cmp	r3, #18
 800200c:	d123      	bne.n	8002056 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	08da      	lsrs	r2, r3, #3
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	3208      	adds	r2, #8
 8002016:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800201a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	f003 0307 	and.w	r3, r3, #7
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	220f      	movs	r2, #15
 8002026:	fa02 f303 	lsl.w	r3, r2, r3
 800202a:	43db      	mvns	r3, r3
 800202c:	693a      	ldr	r2, [r7, #16]
 800202e:	4013      	ands	r3, r2
 8002030:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	691a      	ldr	r2, [r3, #16]
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	f003 0307 	and.w	r3, r3, #7
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	fa02 f303 	lsl.w	r3, r2, r3
 8002042:	693a      	ldr	r2, [r7, #16]
 8002044:	4313      	orrs	r3, r2
 8002046:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	08da      	lsrs	r2, r3, #3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	3208      	adds	r2, #8
 8002050:	6939      	ldr	r1, [r7, #16]
 8002052:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	005b      	lsls	r3, r3, #1
 8002060:	2203      	movs	r2, #3
 8002062:	fa02 f303 	lsl.w	r3, r2, r3
 8002066:	43db      	mvns	r3, r3
 8002068:	693a      	ldr	r2, [r7, #16]
 800206a:	4013      	ands	r3, r2
 800206c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	f003 0203 	and.w	r2, r3, #3
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	005b      	lsls	r3, r3, #1
 800207a:	fa02 f303 	lsl.w	r3, r2, r3
 800207e:	693a      	ldr	r2, [r7, #16]
 8002080:	4313      	orrs	r3, r2
 8002082:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	693a      	ldr	r2, [r7, #16]
 8002088:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002092:	2b00      	cmp	r3, #0
 8002094:	f000 809a 	beq.w	80021cc <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002098:	4b55      	ldr	r3, [pc, #340]	; (80021f0 <HAL_GPIO_Init+0x2cc>)
 800209a:	699b      	ldr	r3, [r3, #24]
 800209c:	4a54      	ldr	r2, [pc, #336]	; (80021f0 <HAL_GPIO_Init+0x2cc>)
 800209e:	f043 0301 	orr.w	r3, r3, #1
 80020a2:	6193      	str	r3, [r2, #24]
 80020a4:	4b52      	ldr	r3, [pc, #328]	; (80021f0 <HAL_GPIO_Init+0x2cc>)
 80020a6:	699b      	ldr	r3, [r3, #24]
 80020a8:	f003 0301 	and.w	r3, r3, #1
 80020ac:	60bb      	str	r3, [r7, #8]
 80020ae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80020b0:	4a50      	ldr	r2, [pc, #320]	; (80021f4 <HAL_GPIO_Init+0x2d0>)
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	089b      	lsrs	r3, r3, #2
 80020b6:	3302      	adds	r3, #2
 80020b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	f003 0303 	and.w	r3, r3, #3
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	220f      	movs	r2, #15
 80020c8:	fa02 f303 	lsl.w	r3, r2, r3
 80020cc:	43db      	mvns	r3, r3
 80020ce:	693a      	ldr	r2, [r7, #16]
 80020d0:	4013      	ands	r3, r2
 80020d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80020da:	d013      	beq.n	8002104 <HAL_GPIO_Init+0x1e0>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	4a46      	ldr	r2, [pc, #280]	; (80021f8 <HAL_GPIO_Init+0x2d4>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d00d      	beq.n	8002100 <HAL_GPIO_Init+0x1dc>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	4a45      	ldr	r2, [pc, #276]	; (80021fc <HAL_GPIO_Init+0x2d8>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d007      	beq.n	80020fc <HAL_GPIO_Init+0x1d8>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	4a44      	ldr	r2, [pc, #272]	; (8002200 <HAL_GPIO_Init+0x2dc>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d101      	bne.n	80020f8 <HAL_GPIO_Init+0x1d4>
 80020f4:	2303      	movs	r3, #3
 80020f6:	e006      	b.n	8002106 <HAL_GPIO_Init+0x1e2>
 80020f8:	2305      	movs	r3, #5
 80020fa:	e004      	b.n	8002106 <HAL_GPIO_Init+0x1e2>
 80020fc:	2302      	movs	r3, #2
 80020fe:	e002      	b.n	8002106 <HAL_GPIO_Init+0x1e2>
 8002100:	2301      	movs	r3, #1
 8002102:	e000      	b.n	8002106 <HAL_GPIO_Init+0x1e2>
 8002104:	2300      	movs	r3, #0
 8002106:	697a      	ldr	r2, [r7, #20]
 8002108:	f002 0203 	and.w	r2, r2, #3
 800210c:	0092      	lsls	r2, r2, #2
 800210e:	4093      	lsls	r3, r2
 8002110:	693a      	ldr	r2, [r7, #16]
 8002112:	4313      	orrs	r3, r2
 8002114:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002116:	4937      	ldr	r1, [pc, #220]	; (80021f4 <HAL_GPIO_Init+0x2d0>)
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	089b      	lsrs	r3, r3, #2
 800211c:	3302      	adds	r3, #2
 800211e:	693a      	ldr	r2, [r7, #16]
 8002120:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002124:	4b37      	ldr	r3, [pc, #220]	; (8002204 <HAL_GPIO_Init+0x2e0>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	43db      	mvns	r3, r3
 800212e:	693a      	ldr	r2, [r7, #16]
 8002130:	4013      	ands	r3, r2
 8002132:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800213c:	2b00      	cmp	r3, #0
 800213e:	d003      	beq.n	8002148 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002140:	693a      	ldr	r2, [r7, #16]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	4313      	orrs	r3, r2
 8002146:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002148:	4a2e      	ldr	r2, [pc, #184]	; (8002204 <HAL_GPIO_Init+0x2e0>)
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800214e:	4b2d      	ldr	r3, [pc, #180]	; (8002204 <HAL_GPIO_Init+0x2e0>)
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	43db      	mvns	r3, r3
 8002158:	693a      	ldr	r2, [r7, #16]
 800215a:	4013      	ands	r3, r2
 800215c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d003      	beq.n	8002172 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800216a:	693a      	ldr	r2, [r7, #16]
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	4313      	orrs	r3, r2
 8002170:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002172:	4a24      	ldr	r2, [pc, #144]	; (8002204 <HAL_GPIO_Init+0x2e0>)
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002178:	4b22      	ldr	r3, [pc, #136]	; (8002204 <HAL_GPIO_Init+0x2e0>)
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	43db      	mvns	r3, r3
 8002182:	693a      	ldr	r2, [r7, #16]
 8002184:	4013      	ands	r3, r2
 8002186:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002190:	2b00      	cmp	r3, #0
 8002192:	d003      	beq.n	800219c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002194:	693a      	ldr	r2, [r7, #16]
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	4313      	orrs	r3, r2
 800219a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800219c:	4a19      	ldr	r2, [pc, #100]	; (8002204 <HAL_GPIO_Init+0x2e0>)
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021a2:	4b18      	ldr	r3, [pc, #96]	; (8002204 <HAL_GPIO_Init+0x2e0>)
 80021a4:	68db      	ldr	r3, [r3, #12]
 80021a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	43db      	mvns	r3, r3
 80021ac:	693a      	ldr	r2, [r7, #16]
 80021ae:	4013      	ands	r3, r2
 80021b0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d003      	beq.n	80021c6 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80021be:	693a      	ldr	r2, [r7, #16]
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	4313      	orrs	r3, r2
 80021c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80021c6:	4a0f      	ldr	r2, [pc, #60]	; (8002204 <HAL_GPIO_Init+0x2e0>)
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	3301      	adds	r3, #1
 80021d0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	fa22 f303 	lsr.w	r3, r2, r3
 80021dc:	2b00      	cmp	r3, #0
 80021de:	f47f aea9 	bne.w	8001f34 <HAL_GPIO_Init+0x10>
  }
}
 80021e2:	bf00      	nop
 80021e4:	371c      	adds	r7, #28
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	40021000 	.word	0x40021000
 80021f4:	40010000 	.word	0x40010000
 80021f8:	48000400 	.word	0x48000400
 80021fc:	48000800 	.word	0x48000800
 8002200:	48000c00 	.word	0x48000c00
 8002204:	40010400 	.word	0x40010400

08002208 <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef * hhrtim)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b086      	sub	sp, #24
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if(hhrtim == NULL)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d101      	bne.n	800221a <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e0ba      	b.n	8002390 <HAL_HRTIM_Init+0x188>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2202      	movs	r2, #2
 800221e:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2200      	movs	r2, #0
 8002226:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2200      	movs	r2, #0
 800222e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2200      	movs	r2, #0
 800223e:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2200      	movs	r2, #0
 8002246:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2200      	movs	r2, #0
 800224e:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	f003 0301 	and.w	r3, r3, #1
 800225a:	2b00      	cmp	r3, #0
 800225c:	d02e      	beq.n	80022bc <HAL_HRTIM_Init+0xb4>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a4d      	ldr	r2, [pc, #308]	; (8002398 <HAL_HRTIM_Init+0x190>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d10b      	bne.n	8002280 <HAL_HRTIM_Init+0x78>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 8002268:	4b4c      	ldr	r3, [pc, #304]	; (800239c <HAL_HRTIM_Init+0x194>)
 800226a:	699b      	ldr	r3, [r3, #24]
 800226c:	4a4b      	ldr	r2, [pc, #300]	; (800239c <HAL_HRTIM_Init+0x194>)
 800226e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002272:	6193      	str	r3, [r2, #24]
 8002274:	4b49      	ldr	r3, [pc, #292]	; (800239c <HAL_HRTIM_Init+0x194>)
 8002276:	699b      	ldr	r3, [r3, #24]
 8002278:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800227c:	60fb      	str	r3, [r7, #12]
 800227e:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800228e:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	691b      	ldr	r3, [r3, #16]
 8002294:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002298:	693a      	ldr	r2, [r7, #16]
 800229a:	4313      	orrs	r3, r2
 800229c:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80022a4:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	695b      	ldr	r3, [r3, #20]
 80022aa:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80022ae:	693a      	ldr	r2, [r7, #16]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	693a      	ldr	r2, [r7, #16]
 80022ba:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	f7fe fc5b 	bl	8000b78 <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	f003 0302 	and.w	r3, r3, #2
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d012      	beq.n	80022f4 <HAL_HRTIM_Init+0xec>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022dc:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	68db      	ldr	r3, [r3, #12]
 80022e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022e6:	693a      	ldr	r2, [r7, #16]
 80022e8:	4313      	orrs	r3, r2
 80022ea:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	693a      	ldr	r2, [r7, #16]
 80022f2:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2201      	movs	r2, #1
 80022f8:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2200      	movs	r2, #0
 8002300:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8002304:	2300      	movs	r3, #0
 8002306:	75fb      	strb	r3, [r7, #23]
 8002308:	e03e      	b.n	8002388 <HAL_HRTIM_Init+0x180>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 800230a:	7dfa      	ldrb	r2, [r7, #23]
 800230c:	6879      	ldr	r1, [r7, #4]
 800230e:	4613      	mov	r3, r2
 8002310:	00db      	lsls	r3, r3, #3
 8002312:	1a9b      	subs	r3, r3, r2
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	440b      	add	r3, r1
 8002318:	3318      	adds	r3, #24
 800231a:	2200      	movs	r2, #0
 800231c:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 800231e:	7dfa      	ldrb	r2, [r7, #23]
 8002320:	6879      	ldr	r1, [r7, #4]
 8002322:	4613      	mov	r3, r2
 8002324:	00db      	lsls	r3, r3, #3
 8002326:	1a9b      	subs	r3, r3, r2
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	440b      	add	r3, r1
 800232c:	331c      	adds	r3, #28
 800232e:	2200      	movs	r2, #0
 8002330:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 8002332:	7dfa      	ldrb	r2, [r7, #23]
 8002334:	6879      	ldr	r1, [r7, #4]
 8002336:	4613      	mov	r3, r2
 8002338:	00db      	lsls	r3, r3, #3
 800233a:	1a9b      	subs	r3, r3, r2
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	440b      	add	r3, r1
 8002340:	3320      	adds	r3, #32
 8002342:	2200      	movs	r2, #0
 8002344:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 8002346:	7dfa      	ldrb	r2, [r7, #23]
 8002348:	6879      	ldr	r1, [r7, #4]
 800234a:	4613      	mov	r3, r2
 800234c:	00db      	lsls	r3, r3, #3
 800234e:	1a9b      	subs	r3, r3, r2
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	440b      	add	r3, r1
 8002354:	3324      	adds	r3, #36	; 0x24
 8002356:	2200      	movs	r2, #0
 8002358:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 800235a:	7dfa      	ldrb	r2, [r7, #23]
 800235c:	6879      	ldr	r1, [r7, #4]
 800235e:	4613      	mov	r3, r2
 8002360:	00db      	lsls	r3, r3, #3
 8002362:	1a9b      	subs	r3, r3, r2
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	440b      	add	r3, r1
 8002368:	3328      	adds	r3, #40	; 0x28
 800236a:	2200      	movs	r2, #0
 800236c:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 800236e:	7dfa      	ldrb	r2, [r7, #23]
 8002370:	6879      	ldr	r1, [r7, #4]
 8002372:	4613      	mov	r3, r2
 8002374:	00db      	lsls	r3, r3, #3
 8002376:	1a9b      	subs	r3, r3, r2
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	440b      	add	r3, r1
 800237c:	3330      	adds	r3, #48	; 0x30
 800237e:	2200      	movs	r2, #0
 8002380:	601a      	str	r2, [r3, #0]
       timer_idx++)
 8002382:	7dfb      	ldrb	r3, [r7, #23]
 8002384:	3301      	adds	r3, #1
 8002386:	75fb      	strb	r3, [r7, #23]
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8002388:	7dfb      	ldrb	r3, [r7, #23]
 800238a:	2b05      	cmp	r3, #5
 800238c:	d9bd      	bls.n	800230a <HAL_HRTIM_Init+0x102>
  }

  return HAL_OK;
 800238e:	2300      	movs	r3, #0
}
 8002390:	4618      	mov	r0, r3
 8002392:	3718      	adds	r7, #24
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	40017400 	.word	0x40017400
 800239c:	40021000 	.word	0x40021000

080023a0 <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b084      	sub	sp, #16
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	60f8      	str	r0, [r7, #12]
 80023a8:	60b9      	str	r1, [r7, #8]
 80023aa:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	2b02      	cmp	r3, #2
 80023b6:	d101      	bne.n	80023bc <HAL_HRTIM_TimeBaseConfig+0x1c>
  {
     return HAL_BUSY;
 80023b8:	2302      	movs	r3, #2
 80023ba:	e015      	b.n	80023e8 <HAL_HRTIM_TimeBaseConfig+0x48>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2202      	movs	r2, #2
 80023c0:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	2b05      	cmp	r3, #5
 80023c8:	d104      	bne.n	80023d4 <HAL_HRTIM_TimeBaseConfig+0x34>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 80023ca:	6879      	ldr	r1, [r7, #4]
 80023cc:	68f8      	ldr	r0, [r7, #12]
 80023ce:	f000 f8b2 	bl	8002536 <HRTIM_MasterBase_Config>
 80023d2:	e004      	b.n	80023de <HAL_HRTIM_TimeBaseConfig+0x3e>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 80023d4:	687a      	ldr	r2, [r7, #4]
 80023d6:	68b9      	ldr	r1, [r7, #8]
 80023d8:	68f8      	ldr	r0, [r7, #12]
 80023da:	f000 f8db 	bl	8002594 <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2201      	movs	r2, #1
 80023e2:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  return HAL_OK;
 80023e6:	2300      	movs	r3, #0
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3710      	adds	r7, #16
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}

080023f0 <HAL_HRTIM_WaveformTimerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b084      	sub	sp, #16
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	60b9      	str	r1, [r7, #8]
 80023fa:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_DACSYNC(pTimerCfg->DACSynchro));
  assert_param(IS_HRTIM_PRELOAD(pTimerCfg->PreloadEnable));
  assert_param(IS_HRTIM_TIMERBURSTMODE(pTimerCfg->BurstMode));
  assert_param(IS_HRTIM_UPDATEONREPETITION(pTimerCfg->RepetitionUpdate));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8002402:	b2db      	uxtb	r3, r3
 8002404:	2b02      	cmp	r3, #2
 8002406:	d101      	bne.n	800240c <HAL_HRTIM_WaveformTimerConfig+0x1c>
  {
     return HAL_BUSY;
 8002408:	2302      	movs	r3, #2
 800240a:	e05f      	b.n	80024cc <HAL_HRTIM_WaveformTimerConfig+0xdc>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8002412:	2b01      	cmp	r3, #1
 8002414:	d101      	bne.n	800241a <HAL_HRTIM_WaveformTimerConfig+0x2a>
 8002416:	2302      	movs	r3, #2
 8002418:	e058      	b.n	80024cc <HAL_HRTIM_WaveformTimerConfig+0xdc>
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2201      	movs	r2, #1
 800241e:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	2202      	movs	r2, #2
 8002426:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	2b05      	cmp	r3, #5
 800242e:	d104      	bne.n	800243a <HAL_HRTIM_WaveformTimerConfig+0x4a>
    assert_param(IS_HRTIM_UPDATEGATING_MASTER(pTimerCfg->UpdateGating));
    assert_param(IS_HRTIM_MASTER_IT(pTimerCfg->InterruptRequests));
    assert_param(IS_HRTIM_MASTER_DMA(pTimerCfg->DMARequests));

    /* Configure master timer */
    HRTIM_MasterWaveform_Config(hhrtim, pTimerCfg);
 8002430:	6879      	ldr	r1, [r7, #4]
 8002432:	68f8      	ldr	r0, [r7, #12]
 8002434:	f000 f8ee 	bl	8002614 <HRTIM_MasterWaveform_Config>
 8002438:	e004      	b.n	8002444 <HAL_HRTIM_WaveformTimerConfig+0x54>
    assert_param(IS_HRTIM_TIMUPDATETRIGGER(pTimerCfg->UpdateTrigger));
    assert_param(IS_HRTIM_TIMRESETTRIGGER(pTimerCfg->ResetTrigger));
    assert_param(IS_HRTIM_TIMUPDATEONRESET(pTimerCfg->ResetUpdate));

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Config(hhrtim, TimerIdx, pTimerCfg);
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	68b9      	ldr	r1, [r7, #8]
 800243e:	68f8      	ldr	r0, [r7, #12]
 8002440:	f000 f94e 	bl	80026e0 <HRTIM_TimingUnitWaveform_Config>
  }

  /* Update timer parameters */
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6819      	ldr	r1, [r3, #0]
 8002448:	68f8      	ldr	r0, [r7, #12]
 800244a:	68ba      	ldr	r2, [r7, #8]
 800244c:	4613      	mov	r3, r2
 800244e:	00db      	lsls	r3, r3, #3
 8002450:	1a9b      	subs	r3, r3, r2
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	4403      	add	r3, r0
 8002456:	3320      	adds	r3, #32
 8002458:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6859      	ldr	r1, [r3, #4]
 800245e:	68f8      	ldr	r0, [r7, #12]
 8002460:	68ba      	ldr	r2, [r7, #8]
 8002462:	4613      	mov	r3, r2
 8002464:	00db      	lsls	r3, r3, #3
 8002466:	1a9b      	subs	r3, r3, r2
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	4403      	add	r3, r0
 800246c:	3324      	adds	r3, #36	; 0x24
 800246e:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6899      	ldr	r1, [r3, #8]
 8002474:	68f8      	ldr	r0, [r7, #12]
 8002476:	68ba      	ldr	r2, [r7, #8]
 8002478:	4613      	mov	r3, r2
 800247a:	00db      	lsls	r3, r3, #3
 800247c:	1a9b      	subs	r3, r3, r2
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	4403      	add	r3, r0
 8002482:	3328      	adds	r3, #40	; 0x28
 8002484:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	68d9      	ldr	r1, [r3, #12]
 800248a:	68f8      	ldr	r0, [r7, #12]
 800248c:	68ba      	ldr	r2, [r7, #8]
 800248e:	4613      	mov	r3, r2
 8002490:	00db      	lsls	r3, r3, #3
 8002492:	1a9b      	subs	r3, r3, r2
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	4403      	add	r3, r0
 8002498:	332c      	adds	r3, #44	; 0x2c
 800249a:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6919      	ldr	r1, [r3, #16]
 80024a0:	68f8      	ldr	r0, [r7, #12]
 80024a2:	68ba      	ldr	r2, [r7, #8]
 80024a4:	4613      	mov	r3, r2
 80024a6:	00db      	lsls	r3, r3, #3
 80024a8:	1a9b      	subs	r3, r3, r2
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	4403      	add	r3, r0
 80024ae:	3330      	adds	r3, #48	; 0x30
 80024b0:	6019      	str	r1, [r3, #0]

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 80024b2:	68b9      	ldr	r1, [r7, #8]
 80024b4:	68f8      	ldr	r0, [r7, #12]
 80024b6:	f000 fb09 	bl	8002acc <HRTIM_ForceRegistersUpdate>

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2201      	movs	r2, #1
 80024be:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2200      	movs	r2, #0
 80024c6:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 80024ca:	2300      	movs	r3, #0
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3710      	adds	r7, #16
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <HAL_HRTIM_WaveformOutputConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                uint32_t Output,
                                                HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af00      	add	r7, sp, #0
 80024da:	60f8      	str	r0, [r7, #12]
 80024dc:	60b9      	str	r1, [r7, #8]
 80024de:	607a      	str	r2, [r7, #4]
 80024e0:	603b      	str	r3, [r7, #0]
  assert_param(IS_HRTIM_OUTPUTIDLEMODE(pOutputCfg->IdleMode));
  assert_param(IS_HRTIM_OUTPUTFAULTLEVEL(pOutputCfg->FaultLevel));
  assert_param(IS_HRTIM_OUTPUTCHOPPERMODE(pOutputCfg->ChopperModeEnable));
  assert_param(IS_HRTIM_OUTPUTBURSTMODEENTRY(pOutputCfg->BurstModeEntryDelayed));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d101      	bne.n	80024f2 <HAL_HRTIM_WaveformOutputConfig+0x1e>
  {
     return HAL_BUSY;
 80024ee:	2302      	movs	r3, #2
 80024f0:	e01d      	b.n	800252e <HAL_HRTIM_WaveformOutputConfig+0x5a>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d101      	bne.n	8002500 <HAL_HRTIM_WaveformOutputConfig+0x2c>
 80024fc:	2302      	movs	r3, #2
 80024fe:	e016      	b.n	800252e <HAL_HRTIM_WaveformOutputConfig+0x5a>
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2201      	movs	r2, #1
 8002504:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2202      	movs	r2, #2
 800250c:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Configure the timer output */
  HRTIM_OutputConfig(hhrtim,
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	68b9      	ldr	r1, [r7, #8]
 8002516:	68f8      	ldr	r0, [r7, #12]
 8002518:	f000 fa22 	bl	8002960 <HRTIM_OutputConfig>
                     TimerIdx,
                     Output,
                     pOutputCfg);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2201      	movs	r2, #1
 8002520:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2200      	movs	r2, #0
 8002528:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 800252c:	2300      	movs	r3, #0
}
 800252e:	4618      	mov	r0, r3
 8002530:	3710      	adds	r7, #16
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}

08002536 <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                     HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8002536:	b480      	push	{r7}
 8002538:	b085      	sub	sp, #20
 800253a:	af00      	add	r7, sp, #0
 800253c:	6078      	str	r0, [r7, #4]
 800253e:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	f023 0307 	bic.w	r3, r3, #7
 800254e:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	68fa      	ldr	r2, [r7, #12]
 8002556:	4313      	orrs	r3, r2
 8002558:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	f023 0318 	bic.w	r3, r3, #24
 8002560:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	68db      	ldr	r3, [r3, #12]
 8002566:	68fa      	ldr	r2, [r7, #12]
 8002568:	4313      	orrs	r3, r2
 800256a:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	68fa      	ldr	r2, [r7, #12]
 8002572:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	683a      	ldr	r2, [r7, #0]
 800257a:	6812      	ldr	r2, [r2, #0]
 800257c:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	683a      	ldr	r2, [r7, #0]
 8002584:	6852      	ldr	r2, [r2, #4]
 8002586:	619a      	str	r2, [r3, #24]
}
 8002588:	bf00      	nop
 800258a:	3714      	adds	r7, #20
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr

08002594 <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                         uint32_t TimerIdx ,
                                         HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8002594:	b480      	push	{r7}
 8002596:	b087      	sub	sp, #28
 8002598:	af00      	add	r7, sp, #0
 800259a:	60f8      	str	r0, [r7, #12]
 800259c:	60b9      	str	r1, [r7, #8]
 800259e:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	3301      	adds	r3, #1
 80025a8:	01db      	lsls	r3, r3, #7
 80025aa:	4413      	add	r3, r2
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	f023 0307 	bic.w	r3, r3, #7
 80025b6:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	697a      	ldr	r2, [r7, #20]
 80025be:	4313      	orrs	r3, r2
 80025c0:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	f023 0318 	bic.w	r3, r3, #24
 80025c8:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	697a      	ldr	r2, [r7, #20]
 80025d0:	4313      	orrs	r3, r2
 80025d2:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	3301      	adds	r3, #1
 80025dc:	01db      	lsls	r3, r3, #7
 80025de:	4413      	add	r3, r2
 80025e0:	697a      	ldr	r2, [r7, #20]
 80025e2:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	6819      	ldr	r1, [r3, #0]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	01db      	lsls	r3, r3, #7
 80025f0:	440b      	add	r3, r1
 80025f2:	3394      	adds	r3, #148	; 0x94
 80025f4:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	6819      	ldr	r1, [r3, #0]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685a      	ldr	r2, [r3, #4]
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	01db      	lsls	r3, r3, #7
 8002602:	440b      	add	r3, r1
 8002604:	3398      	adds	r3, #152	; 0x98
 8002606:	601a      	str	r2, [r3, #0]
}
 8002608:	bf00      	nop
 800260a:	371c      	adds	r7, #28
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr

08002614 <HRTIM_MasterWaveform_Config>:
  * @param  pTimerCfg pointer to the timer configuration data structure
  * @retval None
  */
static void HRTIM_MasterWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                         HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8002614:	b480      	push	{r7}
 8002616:	b085      	sub	sp, #20
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;
  uint32_t hrtim_bmcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 800262e:	60bb      	str	r3, [r7, #8]

  /* Enable/Disable the half mode */
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	f023 0320 	bic.w	r3, r3, #32
 8002636:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	695b      	ldr	r3, [r3, #20]
 800263c:	68fa      	ldr	r2, [r7, #12]
 800263e:	4313      	orrs	r3, r2
 8002640:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002648:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->StartOnSync;
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	699b      	ldr	r3, [r3, #24]
 800264e:	68fa      	ldr	r2, [r7, #12]
 8002650:	4313      	orrs	r3, r2
 8002652:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800265a:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	69db      	ldr	r3, [r3, #28]
 8002660:	68fa      	ldr	r2, [r7, #12]
 8002662:	4313      	orrs	r3, r2
 8002664:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800266c:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->DACSynchro;
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	6a1b      	ldr	r3, [r3, #32]
 8002672:	68fa      	ldr	r2, [r7, #12]
 8002674:	4313      	orrs	r3, r2
 8002676:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable preload meachanism for timer registers */
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 800267e:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002684:	68fa      	ldr	r2, [r7, #12]
 8002686:	4313      	orrs	r3, r2
 8002688:	60fb      	str	r3, [r7, #12]

  /* Master timer registers update handling */
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002690:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	68fa      	ldr	r2, [r7, #12]
 800269a:	4313      	orrs	r3, r2
 800269c:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable registers update on repetition */
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80026a4:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026aa:	68fa      	ldr	r2, [r7, #12]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	60fb      	str	r3, [r7, #12]

  /* Set the timer burst mode */
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026b6:	60bb      	str	r3, [r7, #8]
  hrtim_bmcr |= pTimerCfg->BurstMode;
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026bc:	68ba      	ldr	r2, [r7, #8]
 80026be:	4313      	orrs	r3, r2
 80026c0:	60bb      	str	r3, [r7, #8]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	68fa      	ldr	r2, [r7, #12]
 80026c8:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	68ba      	ldr	r2, [r7, #8]
 80026d0:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 80026d4:	bf00      	nop
 80026d6:	3714      	adds	r7, #20
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr

080026e0 <HRTIM_TimingUnitWaveform_Config>:
  * @retval None
  */
static void  HRTIM_TimingUnitWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b08b      	sub	sp, #44	; 0x2c
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	3301      	adds	r3, #1
 80026f4:	01db      	lsls	r3, r3, #7
 80026f6:	4413      	add	r3, r2
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	68fa      	ldr	r2, [r7, #12]
 80026fc:	6811      	ldr	r1, [r2, #0]
 80026fe:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	3301      	adds	r3, #1
 8002706:	01db      	lsls	r3, r3, #7
 8002708:	440b      	add	r3, r1
 800270a:	601a      	str	r2, [r3, #0]

  /* Configure timing unit (Timer A to Timer E) */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	3301      	adds	r3, #1
 8002714:	01db      	lsls	r3, r3, #7
 8002716:	4413      	add	r3, r2
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	01db      	lsls	r3, r3, #7
 8002724:	4413      	add	r3, r2
 8002726:	33e8      	adds	r3, #232	; 0xe8
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	61bb      	str	r3, [r7, #24]
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	01db      	lsls	r3, r3, #7
 8002734:	4413      	add	r3, r2
 8002736:	33e4      	adds	r3, #228	; 0xe4
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	623b      	str	r3, [r7, #32]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 8002744:	61fb      	str	r3, [r7, #28]

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 8002746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002748:	f023 0320 	bic.w	r3, r3, #32
 800274c:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	695b      	ldr	r3, [r3, #20]
 8002752:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002754:	4313      	orrs	r3, r2
 8002756:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 8002758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800275e:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->StartOnSync;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	699b      	ldr	r3, [r3, #24]
 8002764:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002766:	4313      	orrs	r3, r2
 8002768:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 800276a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002770:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	69db      	ldr	r3, [r3, #28]
 8002776:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002778:	4313      	orrs	r3, r2
 800277a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 800277c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002782:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->DACSynchro;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6a1b      	ldr	r3, [r3, #32]
 8002788:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800278a:	4313      	orrs	r3, r2
 800278c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable preload meachanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 800278e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002790:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8002794:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800279a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800279c:	4313      	orrs	r3, r2
 800279e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Timing unit registers update handling */
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 80027a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80027a6:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateGating;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027ae:	4313      	orrs	r3, r2
 80027b0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on repetition */
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 80027b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80027b8:	627b      	str	r3, [r7, #36]	; 0x24
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027c2:	d103      	bne.n	80027cc <HRTIM_TimingUnitWaveform_Config+0xec>
  {
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 80027c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027ca:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Set the push-pull mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 80027cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80027d2:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PushPull;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027da:	4313      	orrs	r3, r2
 80027dc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 80027de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027e4:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027ec:	4313      	orrs	r3, r2
 80027ee:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set the timer update trigger */
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 80027f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f2:	f023 73fc 	bic.w	r3, r3, #33030144	; 0x1f80000
 80027f6:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027fe:	4313      	orrs	r3, r2
 8002800:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
 8002802:	69bb      	ldr	r3, [r7, #24]
 8002804:	f023 031f 	bic.w	r3, r3, #31
 8002808:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800280e:	f003 031f 	and.w	r3, r3, #31
 8002812:	69ba      	ldr	r2, [r7, #24]
 8002814:	4313      	orrs	r3, r2
 8002816:	61bb      	str	r3, [r7, #24]

  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800281e:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= pTimerCfg->FaultLock;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002824:	69ba      	ldr	r2, [r7, #24]
 8002826:	4313      	orrs	r3, r2
 8002828:	61bb      	str	r3, [r7, #24]

  /* The deadtime cannot be used simultaneously with the push-pull mode */
  if (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_DISABLED)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800282e:	2b00      	cmp	r3, #0
 8002830:	d108      	bne.n	8002844 <HRTIM_TimingUnitWaveform_Config+0x164>
  {
    /* Enable/Disable dead time insertion at timer level */
    hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 8002832:	6a3b      	ldr	r3, [r7, #32]
 8002834:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002838:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283e:	6a3a      	ldr	r2, [r7, #32]
 8002840:	4313      	orrs	r3, r2
 8002842:	623b      	str	r3, [r7, #32]

  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if ( ((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002848:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 800284c:	d004      	beq.n	8002858 <HRTIM_TimingUnitWaveform_Config+0x178>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002852:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 8002856:	d103      	bne.n	8002860 <HRTIM_TimingUnitWaveform_Config+0x180>
       || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800285c:	2b40      	cmp	r3, #64	; 0x40
 800285e:	d108      	bne.n	8002872 <HRTIM_TimingUnitWaveform_Config+0x192>
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT| HRTIM_OUTR_DLYPRTEN);
 8002860:	6a3b      	ldr	r3, [r7, #32]
 8002862:	f423 53f0 	bic.w	r3, r3, #7680	; 0x1e00
 8002866:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800286c:	6a3a      	ldr	r2, [r7, #32]
 800286e:	4313      	orrs	r3, r2
 8002870:	623b      	str	r3, [r7, #32]
  }

  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002876:	617b      	str	r3, [r7, #20]

  /* Set the timer burst mode */
  switch (TimerIdx)
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	2b04      	cmp	r3, #4
 800287c:	d843      	bhi.n	8002906 <HRTIM_TimingUnitWaveform_Config+0x226>
 800287e:	a201      	add	r2, pc, #4	; (adr r2, 8002884 <HRTIM_TimingUnitWaveform_Config+0x1a4>)
 8002880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002884:	08002899 	.word	0x08002899
 8002888:	080028af 	.word	0x080028af
 800288c:	080028c5 	.word	0x080028c5
 8002890:	080028db 	.word	0x080028db
 8002894:	080028f1 	.word	0x080028f1
  {
  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800289e:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 1U);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a4:	005b      	lsls	r3, r3, #1
 80028a6:	69fa      	ldr	r2, [r7, #28]
 80028a8:	4313      	orrs	r3, r2
 80028aa:	61fb      	str	r3, [r7, #28]
      break;
 80028ac:	e02c      	b.n	8002908 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028b4:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 2U);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	69fa      	ldr	r2, [r7, #28]
 80028be:	4313      	orrs	r3, r2
 80028c0:	61fb      	str	r3, [r7, #28]
      break;
 80028c2:	e021      	b.n	8002908 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80028ca:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 3U);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d0:	00db      	lsls	r3, r3, #3
 80028d2:	69fa      	ldr	r2, [r7, #28]
 80028d4:	4313      	orrs	r3, r2
 80028d6:	61fb      	str	r3, [r7, #28]
      break;
 80028d8:	e016      	b.n	8002908 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80028e0:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 4U);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e6:	011b      	lsls	r3, r3, #4
 80028e8:	69fa      	ldr	r2, [r7, #28]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	61fb      	str	r3, [r7, #28]
      break;
 80028ee:	e00b      	b.n	8002908 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80028f6:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 5U);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028fc:	015b      	lsls	r3, r3, #5
 80028fe:	69fa      	ldr	r2, [r7, #28]
 8002900:	4313      	orrs	r3, r2
 8002902:	61fb      	str	r3, [r7, #28]
      break;
 8002904:	e000      	b.n	8002908 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  default:
    break;
 8002906:	bf00      	nop
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	3301      	adds	r3, #1
 8002910:	01db      	lsls	r3, r3, #7
 8002912:	4413      	add	r3, r2
 8002914:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002916:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	01db      	lsls	r3, r3, #7
 8002920:	4413      	add	r3, r2
 8002922:	33e8      	adds	r3, #232	; 0xe8
 8002924:	69ba      	ldr	r2, [r7, #24]
 8002926:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	01db      	lsls	r3, r3, #7
 8002930:	4413      	add	r3, r2
 8002932:	33e4      	adds	r3, #228	; 0xe4
 8002934:	6a3a      	ldr	r2, [r7, #32]
 8002936:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	01db      	lsls	r3, r3, #7
 8002940:	4413      	add	r3, r2
 8002942:	33d4      	adds	r3, #212	; 0xd4
 8002944:	697a      	ldr	r2, [r7, #20]
 8002946:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	69fa      	ldr	r2, [r7, #28]
 800294e:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 8002952:	bf00      	nop
 8002954:	372c      	adds	r7, #44	; 0x2c
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr
 800295e:	bf00      	nop

08002960 <HRTIM_OutputConfig>:
  */
static void  HRTIM_OutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                uint32_t TimerIdx,
                                uint32_t Output,
                                HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 8002960:	b480      	push	{r7}
 8002962:	b089      	sub	sp, #36	; 0x24
 8002964:	af00      	add	r7, sp, #0
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	60b9      	str	r1, [r7, #8]
 800296a:	607a      	str	r2, [r7, #4]
 800296c:	603b      	str	r3, [r7, #0]
  uint32_t hrtim_outr;
  uint32_t hrtim_dtr;

  uint32_t shift = 0U;
 800296e:	2300      	movs	r3, #0
 8002970:	61bb      	str	r3, [r7, #24]

  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	01db      	lsls	r3, r3, #7
 800297a:	4413      	add	r3, r2
 800297c:	33e4      	adds	r3, #228	; 0xe4
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	61fb      	str	r3, [r7, #28]
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	01db      	lsls	r3, r3, #7
 800298a:	4413      	add	r3, r2
 800298c:	33b8      	adds	r3, #184	; 0xb8
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	617b      	str	r3, [r7, #20]

  switch (Output)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2b10      	cmp	r3, #16
 8002996:	d01d      	beq.n	80029d4 <HRTIM_OutputConfig+0x74>
 8002998:	2b10      	cmp	r3, #16
 800299a:	d80b      	bhi.n	80029b4 <HRTIM_OutputConfig+0x54>
 800299c:	2b02      	cmp	r3, #2
 800299e:	d02c      	beq.n	80029fa <HRTIM_OutputConfig+0x9a>
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	d802      	bhi.n	80029aa <HRTIM_OutputConfig+0x4a>
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d015      	beq.n	80029d4 <HRTIM_OutputConfig+0x74>
      shift = 16U;
      break;
    }

  default:
    break;
 80029a8:	e03c      	b.n	8002a24 <HRTIM_OutputConfig+0xc4>
  switch (Output)
 80029aa:	2b04      	cmp	r3, #4
 80029ac:	d012      	beq.n	80029d4 <HRTIM_OutputConfig+0x74>
 80029ae:	2b08      	cmp	r3, #8
 80029b0:	d023      	beq.n	80029fa <HRTIM_OutputConfig+0x9a>
    break;
 80029b2:	e037      	b.n	8002a24 <HRTIM_OutputConfig+0xc4>
  switch (Output)
 80029b4:	2b80      	cmp	r3, #128	; 0x80
 80029b6:	d020      	beq.n	80029fa <HRTIM_OutputConfig+0x9a>
 80029b8:	2b80      	cmp	r3, #128	; 0x80
 80029ba:	d804      	bhi.n	80029c6 <HRTIM_OutputConfig+0x66>
 80029bc:	2b20      	cmp	r3, #32
 80029be:	d01c      	beq.n	80029fa <HRTIM_OutputConfig+0x9a>
 80029c0:	2b40      	cmp	r3, #64	; 0x40
 80029c2:	d007      	beq.n	80029d4 <HRTIM_OutputConfig+0x74>
    break;
 80029c4:	e02e      	b.n	8002a24 <HRTIM_OutputConfig+0xc4>
  switch (Output)
 80029c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029ca:	d003      	beq.n	80029d4 <HRTIM_OutputConfig+0x74>
 80029cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029d0:	d013      	beq.n	80029fa <HRTIM_OutputConfig+0x9a>
    break;
 80029d2:	e027      	b.n	8002a24 <HRTIM_OutputConfig+0xc4>
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R = pOutputCfg->SetSource;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	6819      	ldr	r1, [r3, #0]
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	685a      	ldr	r2, [r3, #4]
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	01db      	lsls	r3, r3, #7
 80029e0:	440b      	add	r3, r1
 80029e2:	33bc      	adds	r3, #188	; 0xbc
 80029e4:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R = pOutputCfg->ResetSource;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	6819      	ldr	r1, [r3, #0]
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	689a      	ldr	r2, [r3, #8]
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	01db      	lsls	r3, r3, #7
 80029f2:	440b      	add	r3, r1
 80029f4:	33c0      	adds	r3, #192	; 0xc0
 80029f6:	601a      	str	r2, [r3, #0]
      break;
 80029f8:	e014      	b.n	8002a24 <HRTIM_OutputConfig+0xc4>
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R = pOutputCfg->SetSource;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	6819      	ldr	r1, [r3, #0]
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	685a      	ldr	r2, [r3, #4]
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	01db      	lsls	r3, r3, #7
 8002a06:	440b      	add	r3, r1
 8002a08:	33c4      	adds	r3, #196	; 0xc4
 8002a0a:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R = pOutputCfg->ResetSource;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	6819      	ldr	r1, [r3, #0]
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	689a      	ldr	r2, [r3, #8]
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	01db      	lsls	r3, r3, #7
 8002a18:	440b      	add	r3, r1
 8002a1a:	33c8      	adds	r3, #200	; 0xc8
 8002a1c:	601a      	str	r2, [r3, #0]
      shift = 16U;
 8002a1e:	2310      	movs	r3, #16
 8002a20:	61bb      	str	r3, [r7, #24]
      break;
 8002a22:	bf00      	nop
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
                   HRTIM_OUTR_IDLM1 |
                   HRTIM_OUTR_IDLES1|
                   HRTIM_OUTR_FAULT1|
                   HRTIM_OUTR_CHP1 |
                   HRTIM_OUTR_DIDL1) << shift);
 8002a24:	22fe      	movs	r2, #254	; 0xfe
 8002a26:	69bb      	ldr	r3, [r7, #24]
 8002a28:	fa02 f303 	lsl.w	r3, r2, r3
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
 8002a2c:	43db      	mvns	r3, r3
 8002a2e:	69fa      	ldr	r2, [r7, #28]
 8002a30:	4013      	ands	r3, r2
 8002a32:	61fb      	str	r3, [r7, #28]

  /* Set the polarity */
  hrtim_outr |= (pOutputCfg->Polarity << shift);
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	69bb      	ldr	r3, [r7, #24]
 8002a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3e:	69fa      	ldr	r2, [r7, #28]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE mode */
  hrtim_outr |= (pOutputCfg->IdleMode << shift);
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	68da      	ldr	r2, [r3, #12]
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4e:	69fa      	ldr	r2, [r7, #28]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE state */
  hrtim_outr |= (pOutputCfg->IdleLevel << shift);
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	691a      	ldr	r2, [r3, #16]
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5e:	69fa      	ldr	r2, [r7, #28]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	61fb      	str	r3, [r7, #28]

  /* Set the FAULT state */
  hrtim_outr |= (pOutputCfg->FaultLevel << shift);
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	695a      	ldr	r2, [r3, #20]
 8002a68:	69bb      	ldr	r3, [r7, #24]
 8002a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6e:	69fa      	ldr	r2, [r7, #28]
 8002a70:	4313      	orrs	r3, r2
 8002a72:	61fb      	str	r3, [r7, #28]

  /* Set the chopper mode */
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	699a      	ldr	r2, [r3, #24]
 8002a78:	69bb      	ldr	r3, [r7, #24]
 8002a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7e:	69fa      	ldr	r2, [r7, #28]
 8002a80:	4313      	orrs	r3, r2
 8002a82:	61fb      	str	r3, [r7, #28]
     state during a burst mode operation is allowed only under the following
     conditions:
     - the outputs is active during the burst mode (IDLES=1U)
     - positive deadtimes (SDTR/SDTF set to 0U)
  */
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	691b      	ldr	r3, [r3, #16]
 8002a88:	2b08      	cmp	r3, #8
 8002a8a:	d111      	bne.n	8002ab0 <HRTIM_OutputConfig+0x150>
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d10c      	bne.n	8002ab0 <HRTIM_OutputConfig+0x150>
      ((hrtim_dtr & HRTIM_DTR_SDTF) == (uint32_t)RESET))
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d107      	bne.n	8002ab0 <HRTIM_OutputConfig+0x150>
  {
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	69da      	ldr	r2, [r3, #28]
 8002aa4:	69bb      	ldr	r3, [r7, #24]
 8002aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aaa:	69fa      	ldr	r2, [r7, #28]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	61fb      	str	r3, [r7, #28]
  }

  /* Update HRTIM register */
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	01db      	lsls	r3, r3, #7
 8002ab8:	4413      	add	r3, r2
 8002aba:	33e4      	adds	r3, #228	; 0xe4
 8002abc:	69fa      	ldr	r2, [r7, #28]
 8002abe:	601a      	str	r2, [r3, #0]
}
 8002ac0:	bf00      	nop
 8002ac2:	3724      	adds	r7, #36	; 0x24
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr

08002acc <HRTIM_ForceRegistersUpdate>:
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef * hhrtim,
                                       uint32_t TimerIdx)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]
  switch (TimerIdx)
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	2b05      	cmp	r3, #5
 8002ada:	d851      	bhi.n	8002b80 <HRTIM_ForceRegistersUpdate+0xb4>
 8002adc:	a201      	add	r2, pc, #4	; (adr r2, 8002ae4 <HRTIM_ForceRegistersUpdate+0x18>)
 8002ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ae2:	bf00      	nop
 8002ae4:	08002b13 	.word	0x08002b13
 8002ae8:	08002b29 	.word	0x08002b29
 8002aec:	08002b3f 	.word	0x08002b3f
 8002af0:	08002b55 	.word	0x08002b55
 8002af4:	08002b6b 	.word	0x08002b6b
 8002af8:	08002afd 	.word	0x08002afd
  {
  case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f042 0201 	orr.w	r2, r2, #1
 8002b0c:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8002b10:	e037      	b.n	8002b82 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f042 0202 	orr.w	r2, r2, #2
 8002b22:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8002b26:	e02c      	b.n	8002b82 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f042 0204 	orr.w	r2, r2, #4
 8002b38:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8002b3c:	e021      	b.n	8002b82 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f042 0208 	orr.w	r2, r2, #8
 8002b4e:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8002b52:	e016      	b.n	8002b82 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f042 0210 	orr.w	r2, r2, #16
 8002b64:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8002b68:	e00b      	b.n	8002b82 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f042 0220 	orr.w	r2, r2, #32
 8002b7a:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8002b7e:	e000      	b.n	8002b82 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  default:
    break;
 8002b80:	bf00      	nop
  }
}
 8002b82:	bf00      	nop
 8002b84:	370c      	adds	r7, #12
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr
 8002b8e:	bf00      	nop

08002b90 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b082      	sub	sp, #8
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d101      	bne.n	8002ba2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e081      	b.n	8002ca6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d106      	bne.n	8002bbc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f7fe f878 	bl	8000cac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2224      	movs	r2, #36	; 0x24
 8002bc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f022 0201 	bic.w	r2, r2, #1
 8002bd2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	685a      	ldr	r2, [r3, #4]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002be0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	689a      	ldr	r2, [r3, #8]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002bf0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d107      	bne.n	8002c0a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	689a      	ldr	r2, [r3, #8]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c06:	609a      	str	r2, [r3, #8]
 8002c08:	e006      	b.n	8002c18 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	689a      	ldr	r2, [r3, #8]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002c16:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	2b02      	cmp	r3, #2
 8002c1e:	d104      	bne.n	8002c2a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c28:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	6812      	ldr	r2, [r2, #0]
 8002c34:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002c38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c3c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	68da      	ldr	r2, [r3, #12]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c4c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	691a      	ldr	r2, [r3, #16]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	695b      	ldr	r3, [r3, #20]
 8002c56:	ea42 0103 	orr.w	r1, r2, r3
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	699b      	ldr	r3, [r3, #24]
 8002c5e:	021a      	lsls	r2, r3, #8
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	430a      	orrs	r2, r1
 8002c66:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	69d9      	ldr	r1, [r3, #28]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6a1a      	ldr	r2, [r3, #32]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	430a      	orrs	r2, r1
 8002c76:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f042 0201 	orr.w	r2, r2, #1
 8002c86:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2220      	movs	r2, #32
 8002c92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002ca4:	2300      	movs	r3, #0
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3708      	adds	r7, #8
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}

08002cae <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002cae:	b480      	push	{r7}
 8002cb0:	b083      	sub	sp, #12
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]
 8002cb6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	2b20      	cmp	r3, #32
 8002cc2:	d138      	bne.n	8002d36 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d101      	bne.n	8002cd2 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002cce:	2302      	movs	r3, #2
 8002cd0:	e032      	b.n	8002d38 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2224      	movs	r2, #36	; 0x24
 8002cde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f022 0201 	bic.w	r2, r2, #1
 8002cf0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002d00:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	6819      	ldr	r1, [r3, #0]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	683a      	ldr	r2, [r7, #0]
 8002d0e:	430a      	orrs	r2, r1
 8002d10:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f042 0201 	orr.w	r2, r2, #1
 8002d20:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2220      	movs	r2, #32
 8002d26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d32:	2300      	movs	r3, #0
 8002d34:	e000      	b.n	8002d38 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002d36:	2302      	movs	r3, #2
  }
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	370c      	adds	r7, #12
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr

08002d44 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b085      	sub	sp, #20
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	2b20      	cmp	r3, #32
 8002d58:	d139      	bne.n	8002dce <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d101      	bne.n	8002d68 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002d64:	2302      	movs	r3, #2
 8002d66:	e033      	b.n	8002dd0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2224      	movs	r2, #36	; 0x24
 8002d74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f022 0201 	bic.w	r2, r2, #1
 8002d86:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002d96:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	021b      	lsls	r3, r3, #8
 8002d9c:	68fa      	ldr	r2, [r7, #12]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	68fa      	ldr	r2, [r7, #12]
 8002da8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f042 0201 	orr.w	r2, r2, #1
 8002db8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2220      	movs	r2, #32
 8002dbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	e000      	b.n	8002dd0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002dce:	2302      	movs	r3, #2
  }
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3714      	adds	r7, #20
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr

08002ddc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	1d3b      	adds	r3, r7, #4
 8002de6:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002de8:	1d3b      	adds	r3, r7, #4
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d102      	bne.n	8002df6 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	f000 bef4 	b.w	8003bde <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002df6:	1d3b      	adds	r3, r7, #4
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0301 	and.w	r3, r3, #1
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	f000 816a 	beq.w	80030da <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002e06:	4bb3      	ldr	r3, [pc, #716]	; (80030d4 <HAL_RCC_OscConfig+0x2f8>)
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	f003 030c 	and.w	r3, r3, #12
 8002e0e:	2b04      	cmp	r3, #4
 8002e10:	d00c      	beq.n	8002e2c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002e12:	4bb0      	ldr	r3, [pc, #704]	; (80030d4 <HAL_RCC_OscConfig+0x2f8>)
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f003 030c 	and.w	r3, r3, #12
 8002e1a:	2b08      	cmp	r3, #8
 8002e1c:	d159      	bne.n	8002ed2 <HAL_RCC_OscConfig+0xf6>
 8002e1e:	4bad      	ldr	r3, [pc, #692]	; (80030d4 <HAL_RCC_OscConfig+0x2f8>)
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e2a:	d152      	bne.n	8002ed2 <HAL_RCC_OscConfig+0xf6>
 8002e2c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e30:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e34:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002e38:	fa93 f3a3 	rbit	r3, r3
 8002e3c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  return result;
 8002e40:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e44:	fab3 f383 	clz	r3, r3
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	095b      	lsrs	r3, r3, #5
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	f043 0301 	orr.w	r3, r3, #1
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d102      	bne.n	8002e5e <HAL_RCC_OscConfig+0x82>
 8002e58:	4b9e      	ldr	r3, [pc, #632]	; (80030d4 <HAL_RCC_OscConfig+0x2f8>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	e015      	b.n	8002e8a <HAL_RCC_OscConfig+0xae>
 8002e5e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e62:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e66:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002e6a:	fa93 f3a3 	rbit	r3, r3
 8002e6e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002e72:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e76:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002e7a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002e7e:	fa93 f3a3 	rbit	r3, r3
 8002e82:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002e86:	4b93      	ldr	r3, [pc, #588]	; (80030d4 <HAL_RCC_OscConfig+0x2f8>)
 8002e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002e8e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002e92:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002e96:	fa92 f2a2 	rbit	r2, r2
 8002e9a:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002e9e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002ea2:	fab2 f282 	clz	r2, r2
 8002ea6:	b2d2      	uxtb	r2, r2
 8002ea8:	f042 0220 	orr.w	r2, r2, #32
 8002eac:	b2d2      	uxtb	r2, r2
 8002eae:	f002 021f 	and.w	r2, r2, #31
 8002eb2:	2101      	movs	r1, #1
 8002eb4:	fa01 f202 	lsl.w	r2, r1, r2
 8002eb8:	4013      	ands	r3, r2
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	f000 810c 	beq.w	80030d8 <HAL_RCC_OscConfig+0x2fc>
 8002ec0:	1d3b      	adds	r3, r7, #4
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	f040 8106 	bne.w	80030d8 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	f000 be86 	b.w	8003bde <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ed2:	1d3b      	adds	r3, r7, #4
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002edc:	d106      	bne.n	8002eec <HAL_RCC_OscConfig+0x110>
 8002ede:	4b7d      	ldr	r3, [pc, #500]	; (80030d4 <HAL_RCC_OscConfig+0x2f8>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a7c      	ldr	r2, [pc, #496]	; (80030d4 <HAL_RCC_OscConfig+0x2f8>)
 8002ee4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ee8:	6013      	str	r3, [r2, #0]
 8002eea:	e030      	b.n	8002f4e <HAL_RCC_OscConfig+0x172>
 8002eec:	1d3b      	adds	r3, r7, #4
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d10c      	bne.n	8002f10 <HAL_RCC_OscConfig+0x134>
 8002ef6:	4b77      	ldr	r3, [pc, #476]	; (80030d4 <HAL_RCC_OscConfig+0x2f8>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a76      	ldr	r2, [pc, #472]	; (80030d4 <HAL_RCC_OscConfig+0x2f8>)
 8002efc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f00:	6013      	str	r3, [r2, #0]
 8002f02:	4b74      	ldr	r3, [pc, #464]	; (80030d4 <HAL_RCC_OscConfig+0x2f8>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a73      	ldr	r2, [pc, #460]	; (80030d4 <HAL_RCC_OscConfig+0x2f8>)
 8002f08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f0c:	6013      	str	r3, [r2, #0]
 8002f0e:	e01e      	b.n	8002f4e <HAL_RCC_OscConfig+0x172>
 8002f10:	1d3b      	adds	r3, r7, #4
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f1a:	d10c      	bne.n	8002f36 <HAL_RCC_OscConfig+0x15a>
 8002f1c:	4b6d      	ldr	r3, [pc, #436]	; (80030d4 <HAL_RCC_OscConfig+0x2f8>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a6c      	ldr	r2, [pc, #432]	; (80030d4 <HAL_RCC_OscConfig+0x2f8>)
 8002f22:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f26:	6013      	str	r3, [r2, #0]
 8002f28:	4b6a      	ldr	r3, [pc, #424]	; (80030d4 <HAL_RCC_OscConfig+0x2f8>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a69      	ldr	r2, [pc, #420]	; (80030d4 <HAL_RCC_OscConfig+0x2f8>)
 8002f2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f32:	6013      	str	r3, [r2, #0]
 8002f34:	e00b      	b.n	8002f4e <HAL_RCC_OscConfig+0x172>
 8002f36:	4b67      	ldr	r3, [pc, #412]	; (80030d4 <HAL_RCC_OscConfig+0x2f8>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a66      	ldr	r2, [pc, #408]	; (80030d4 <HAL_RCC_OscConfig+0x2f8>)
 8002f3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f40:	6013      	str	r3, [r2, #0]
 8002f42:	4b64      	ldr	r3, [pc, #400]	; (80030d4 <HAL_RCC_OscConfig+0x2f8>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a63      	ldr	r2, [pc, #396]	; (80030d4 <HAL_RCC_OscConfig+0x2f8>)
 8002f48:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f4c:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002f4e:	4b61      	ldr	r3, [pc, #388]	; (80030d4 <HAL_RCC_OscConfig+0x2f8>)
 8002f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f52:	f023 020f 	bic.w	r2, r3, #15
 8002f56:	1d3b      	adds	r3, r7, #4
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	495d      	ldr	r1, [pc, #372]	; (80030d4 <HAL_RCC_OscConfig+0x2f8>)
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f62:	1d3b      	adds	r3, r7, #4
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d059      	beq.n	8003020 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f6c:	f7fe f874 	bl	8001058 <HAL_GetTick>
 8002f70:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f74:	e00a      	b.n	8002f8c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f76:	f7fe f86f 	bl	8001058 <HAL_GetTick>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	2b64      	cmp	r3, #100	; 0x64
 8002f84:	d902      	bls.n	8002f8c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	f000 be29 	b.w	8003bde <HAL_RCC_OscConfig+0xe02>
 8002f8c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f90:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f94:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002f98:	fa93 f3a3 	rbit	r3, r3
 8002f9c:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002fa0:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fa4:	fab3 f383 	clz	r3, r3
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	095b      	lsrs	r3, r3, #5
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	f043 0301 	orr.w	r3, r3, #1
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d102      	bne.n	8002fbe <HAL_RCC_OscConfig+0x1e2>
 8002fb8:	4b46      	ldr	r3, [pc, #280]	; (80030d4 <HAL_RCC_OscConfig+0x2f8>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	e015      	b.n	8002fea <HAL_RCC_OscConfig+0x20e>
 8002fbe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002fc2:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fc6:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002fca:	fa93 f3a3 	rbit	r3, r3
 8002fce:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002fd2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002fd6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002fda:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002fde:	fa93 f3a3 	rbit	r3, r3
 8002fe2:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002fe6:	4b3b      	ldr	r3, [pc, #236]	; (80030d4 <HAL_RCC_OscConfig+0x2f8>)
 8002fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002fee:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002ff2:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002ff6:	fa92 f2a2 	rbit	r2, r2
 8002ffa:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002ffe:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8003002:	fab2 f282 	clz	r2, r2
 8003006:	b2d2      	uxtb	r2, r2
 8003008:	f042 0220 	orr.w	r2, r2, #32
 800300c:	b2d2      	uxtb	r2, r2
 800300e:	f002 021f 	and.w	r2, r2, #31
 8003012:	2101      	movs	r1, #1
 8003014:	fa01 f202 	lsl.w	r2, r1, r2
 8003018:	4013      	ands	r3, r2
 800301a:	2b00      	cmp	r3, #0
 800301c:	d0ab      	beq.n	8002f76 <HAL_RCC_OscConfig+0x19a>
 800301e:	e05c      	b.n	80030da <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003020:	f7fe f81a 	bl	8001058 <HAL_GetTick>
 8003024:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003028:	e00a      	b.n	8003040 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800302a:	f7fe f815 	bl	8001058 <HAL_GetTick>
 800302e:	4602      	mov	r2, r0
 8003030:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	2b64      	cmp	r3, #100	; 0x64
 8003038:	d902      	bls.n	8003040 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	f000 bdcf 	b.w	8003bde <HAL_RCC_OscConfig+0xe02>
 8003040:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003044:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003048:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800304c:	fa93 f3a3 	rbit	r3, r3
 8003050:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8003054:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003058:	fab3 f383 	clz	r3, r3
 800305c:	b2db      	uxtb	r3, r3
 800305e:	095b      	lsrs	r3, r3, #5
 8003060:	b2db      	uxtb	r3, r3
 8003062:	f043 0301 	orr.w	r3, r3, #1
 8003066:	b2db      	uxtb	r3, r3
 8003068:	2b01      	cmp	r3, #1
 800306a:	d102      	bne.n	8003072 <HAL_RCC_OscConfig+0x296>
 800306c:	4b19      	ldr	r3, [pc, #100]	; (80030d4 <HAL_RCC_OscConfig+0x2f8>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	e015      	b.n	800309e <HAL_RCC_OscConfig+0x2c2>
 8003072:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003076:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800307a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800307e:	fa93 f3a3 	rbit	r3, r3
 8003082:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003086:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800308a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800308e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003092:	fa93 f3a3 	rbit	r3, r3
 8003096:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800309a:	4b0e      	ldr	r3, [pc, #56]	; (80030d4 <HAL_RCC_OscConfig+0x2f8>)
 800309c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80030a2:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80030a6:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80030aa:	fa92 f2a2 	rbit	r2, r2
 80030ae:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80030b2:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80030b6:	fab2 f282 	clz	r2, r2
 80030ba:	b2d2      	uxtb	r2, r2
 80030bc:	f042 0220 	orr.w	r2, r2, #32
 80030c0:	b2d2      	uxtb	r2, r2
 80030c2:	f002 021f 	and.w	r2, r2, #31
 80030c6:	2101      	movs	r1, #1
 80030c8:	fa01 f202 	lsl.w	r2, r1, r2
 80030cc:	4013      	ands	r3, r2
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d1ab      	bne.n	800302a <HAL_RCC_OscConfig+0x24e>
 80030d2:	e002      	b.n	80030da <HAL_RCC_OscConfig+0x2fe>
 80030d4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030da:	1d3b      	adds	r3, r7, #4
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0302 	and.w	r3, r3, #2
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	f000 816f 	beq.w	80033c8 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80030ea:	4bd0      	ldr	r3, [pc, #832]	; (800342c <HAL_RCC_OscConfig+0x650>)
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	f003 030c 	and.w	r3, r3, #12
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d00b      	beq.n	800310e <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80030f6:	4bcd      	ldr	r3, [pc, #820]	; (800342c <HAL_RCC_OscConfig+0x650>)
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	f003 030c 	and.w	r3, r3, #12
 80030fe:	2b08      	cmp	r3, #8
 8003100:	d16c      	bne.n	80031dc <HAL_RCC_OscConfig+0x400>
 8003102:	4bca      	ldr	r3, [pc, #808]	; (800342c <HAL_RCC_OscConfig+0x650>)
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d166      	bne.n	80031dc <HAL_RCC_OscConfig+0x400>
 800310e:	2302      	movs	r3, #2
 8003110:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003114:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003118:	fa93 f3a3 	rbit	r3, r3
 800311c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003120:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003124:	fab3 f383 	clz	r3, r3
 8003128:	b2db      	uxtb	r3, r3
 800312a:	095b      	lsrs	r3, r3, #5
 800312c:	b2db      	uxtb	r3, r3
 800312e:	f043 0301 	orr.w	r3, r3, #1
 8003132:	b2db      	uxtb	r3, r3
 8003134:	2b01      	cmp	r3, #1
 8003136:	d102      	bne.n	800313e <HAL_RCC_OscConfig+0x362>
 8003138:	4bbc      	ldr	r3, [pc, #752]	; (800342c <HAL_RCC_OscConfig+0x650>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	e013      	b.n	8003166 <HAL_RCC_OscConfig+0x38a>
 800313e:	2302      	movs	r3, #2
 8003140:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003144:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003148:	fa93 f3a3 	rbit	r3, r3
 800314c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003150:	2302      	movs	r3, #2
 8003152:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003156:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800315a:	fa93 f3a3 	rbit	r3, r3
 800315e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003162:	4bb2      	ldr	r3, [pc, #712]	; (800342c <HAL_RCC_OscConfig+0x650>)
 8003164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003166:	2202      	movs	r2, #2
 8003168:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800316c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003170:	fa92 f2a2 	rbit	r2, r2
 8003174:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003178:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800317c:	fab2 f282 	clz	r2, r2
 8003180:	b2d2      	uxtb	r2, r2
 8003182:	f042 0220 	orr.w	r2, r2, #32
 8003186:	b2d2      	uxtb	r2, r2
 8003188:	f002 021f 	and.w	r2, r2, #31
 800318c:	2101      	movs	r1, #1
 800318e:	fa01 f202 	lsl.w	r2, r1, r2
 8003192:	4013      	ands	r3, r2
 8003194:	2b00      	cmp	r3, #0
 8003196:	d007      	beq.n	80031a8 <HAL_RCC_OscConfig+0x3cc>
 8003198:	1d3b      	adds	r3, r7, #4
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	691b      	ldr	r3, [r3, #16]
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d002      	beq.n	80031a8 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	f000 bd1b 	b.w	8003bde <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031a8:	4ba0      	ldr	r3, [pc, #640]	; (800342c <HAL_RCC_OscConfig+0x650>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031b0:	1d3b      	adds	r3, r7, #4
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	695b      	ldr	r3, [r3, #20]
 80031b6:	21f8      	movs	r1, #248	; 0xf8
 80031b8:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031bc:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80031c0:	fa91 f1a1 	rbit	r1, r1
 80031c4:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80031c8:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80031cc:	fab1 f181 	clz	r1, r1
 80031d0:	b2c9      	uxtb	r1, r1
 80031d2:	408b      	lsls	r3, r1
 80031d4:	4995      	ldr	r1, [pc, #596]	; (800342c <HAL_RCC_OscConfig+0x650>)
 80031d6:	4313      	orrs	r3, r2
 80031d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031da:	e0f5      	b.n	80033c8 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80031dc:	1d3b      	adds	r3, r7, #4
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	691b      	ldr	r3, [r3, #16]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	f000 8085 	beq.w	80032f2 <HAL_RCC_OscConfig+0x516>
 80031e8:	2301      	movs	r3, #1
 80031ea:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ee:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80031f2:	fa93 f3a3 	rbit	r3, r3
 80031f6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80031fa:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031fe:	fab3 f383 	clz	r3, r3
 8003202:	b2db      	uxtb	r3, r3
 8003204:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003208:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	461a      	mov	r2, r3
 8003210:	2301      	movs	r3, #1
 8003212:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003214:	f7fd ff20 	bl	8001058 <HAL_GetTick>
 8003218:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800321c:	e00a      	b.n	8003234 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800321e:	f7fd ff1b 	bl	8001058 <HAL_GetTick>
 8003222:	4602      	mov	r2, r0
 8003224:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	2b02      	cmp	r3, #2
 800322c:	d902      	bls.n	8003234 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	f000 bcd5 	b.w	8003bde <HAL_RCC_OscConfig+0xe02>
 8003234:	2302      	movs	r3, #2
 8003236:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800323a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800323e:	fa93 f3a3 	rbit	r3, r3
 8003242:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8003246:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800324a:	fab3 f383 	clz	r3, r3
 800324e:	b2db      	uxtb	r3, r3
 8003250:	095b      	lsrs	r3, r3, #5
 8003252:	b2db      	uxtb	r3, r3
 8003254:	f043 0301 	orr.w	r3, r3, #1
 8003258:	b2db      	uxtb	r3, r3
 800325a:	2b01      	cmp	r3, #1
 800325c:	d102      	bne.n	8003264 <HAL_RCC_OscConfig+0x488>
 800325e:	4b73      	ldr	r3, [pc, #460]	; (800342c <HAL_RCC_OscConfig+0x650>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	e013      	b.n	800328c <HAL_RCC_OscConfig+0x4b0>
 8003264:	2302      	movs	r3, #2
 8003266:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800326a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800326e:	fa93 f3a3 	rbit	r3, r3
 8003272:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003276:	2302      	movs	r3, #2
 8003278:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800327c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003280:	fa93 f3a3 	rbit	r3, r3
 8003284:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003288:	4b68      	ldr	r3, [pc, #416]	; (800342c <HAL_RCC_OscConfig+0x650>)
 800328a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328c:	2202      	movs	r2, #2
 800328e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8003292:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003296:	fa92 f2a2 	rbit	r2, r2
 800329a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800329e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80032a2:	fab2 f282 	clz	r2, r2
 80032a6:	b2d2      	uxtb	r2, r2
 80032a8:	f042 0220 	orr.w	r2, r2, #32
 80032ac:	b2d2      	uxtb	r2, r2
 80032ae:	f002 021f 	and.w	r2, r2, #31
 80032b2:	2101      	movs	r1, #1
 80032b4:	fa01 f202 	lsl.w	r2, r1, r2
 80032b8:	4013      	ands	r3, r2
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d0af      	beq.n	800321e <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032be:	4b5b      	ldr	r3, [pc, #364]	; (800342c <HAL_RCC_OscConfig+0x650>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032c6:	1d3b      	adds	r3, r7, #4
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	695b      	ldr	r3, [r3, #20]
 80032cc:	21f8      	movs	r1, #248	; 0xf8
 80032ce:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d2:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80032d6:	fa91 f1a1 	rbit	r1, r1
 80032da:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80032de:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80032e2:	fab1 f181 	clz	r1, r1
 80032e6:	b2c9      	uxtb	r1, r1
 80032e8:	408b      	lsls	r3, r1
 80032ea:	4950      	ldr	r1, [pc, #320]	; (800342c <HAL_RCC_OscConfig+0x650>)
 80032ec:	4313      	orrs	r3, r2
 80032ee:	600b      	str	r3, [r1, #0]
 80032f0:	e06a      	b.n	80033c8 <HAL_RCC_OscConfig+0x5ec>
 80032f2:	2301      	movs	r3, #1
 80032f4:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80032fc:	fa93 f3a3 	rbit	r3, r3
 8003300:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003304:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003308:	fab3 f383 	clz	r3, r3
 800330c:	b2db      	uxtb	r3, r3
 800330e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003312:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	461a      	mov	r2, r3
 800331a:	2300      	movs	r3, #0
 800331c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800331e:	f7fd fe9b 	bl	8001058 <HAL_GetTick>
 8003322:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003326:	e00a      	b.n	800333e <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003328:	f7fd fe96 	bl	8001058 <HAL_GetTick>
 800332c:	4602      	mov	r2, r0
 800332e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003332:	1ad3      	subs	r3, r2, r3
 8003334:	2b02      	cmp	r3, #2
 8003336:	d902      	bls.n	800333e <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8003338:	2303      	movs	r3, #3
 800333a:	f000 bc50 	b.w	8003bde <HAL_RCC_OscConfig+0xe02>
 800333e:	2302      	movs	r3, #2
 8003340:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003344:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003348:	fa93 f3a3 	rbit	r3, r3
 800334c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003350:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003354:	fab3 f383 	clz	r3, r3
 8003358:	b2db      	uxtb	r3, r3
 800335a:	095b      	lsrs	r3, r3, #5
 800335c:	b2db      	uxtb	r3, r3
 800335e:	f043 0301 	orr.w	r3, r3, #1
 8003362:	b2db      	uxtb	r3, r3
 8003364:	2b01      	cmp	r3, #1
 8003366:	d102      	bne.n	800336e <HAL_RCC_OscConfig+0x592>
 8003368:	4b30      	ldr	r3, [pc, #192]	; (800342c <HAL_RCC_OscConfig+0x650>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	e013      	b.n	8003396 <HAL_RCC_OscConfig+0x5ba>
 800336e:	2302      	movs	r3, #2
 8003370:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003374:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003378:	fa93 f3a3 	rbit	r3, r3
 800337c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003380:	2302      	movs	r3, #2
 8003382:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003386:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800338a:	fa93 f3a3 	rbit	r3, r3
 800338e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003392:	4b26      	ldr	r3, [pc, #152]	; (800342c <HAL_RCC_OscConfig+0x650>)
 8003394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003396:	2202      	movs	r2, #2
 8003398:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800339c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80033a0:	fa92 f2a2 	rbit	r2, r2
 80033a4:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80033a8:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80033ac:	fab2 f282 	clz	r2, r2
 80033b0:	b2d2      	uxtb	r2, r2
 80033b2:	f042 0220 	orr.w	r2, r2, #32
 80033b6:	b2d2      	uxtb	r2, r2
 80033b8:	f002 021f 	and.w	r2, r2, #31
 80033bc:	2101      	movs	r1, #1
 80033be:	fa01 f202 	lsl.w	r2, r1, r2
 80033c2:	4013      	ands	r3, r2
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d1af      	bne.n	8003328 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033c8:	1d3b      	adds	r3, r7, #4
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0308 	and.w	r3, r3, #8
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	f000 80da 	beq.w	800358c <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033d8:	1d3b      	adds	r3, r7, #4
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	699b      	ldr	r3, [r3, #24]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d069      	beq.n	80034b6 <HAL_RCC_OscConfig+0x6da>
 80033e2:	2301      	movs	r3, #1
 80033e4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80033ec:	fa93 f3a3 	rbit	r3, r3
 80033f0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80033f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033f8:	fab3 f383 	clz	r3, r3
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	461a      	mov	r2, r3
 8003400:	4b0b      	ldr	r3, [pc, #44]	; (8003430 <HAL_RCC_OscConfig+0x654>)
 8003402:	4413      	add	r3, r2
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	461a      	mov	r2, r3
 8003408:	2301      	movs	r3, #1
 800340a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800340c:	f7fd fe24 	bl	8001058 <HAL_GetTick>
 8003410:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003414:	e00e      	b.n	8003434 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003416:	f7fd fe1f 	bl	8001058 <HAL_GetTick>
 800341a:	4602      	mov	r2, r0
 800341c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	2b02      	cmp	r3, #2
 8003424:	d906      	bls.n	8003434 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	e3d9      	b.n	8003bde <HAL_RCC_OscConfig+0xe02>
 800342a:	bf00      	nop
 800342c:	40021000 	.word	0x40021000
 8003430:	10908120 	.word	0x10908120
 8003434:	2302      	movs	r3, #2
 8003436:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800343a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800343e:	fa93 f3a3 	rbit	r3, r3
 8003442:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003446:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800344a:	2202      	movs	r2, #2
 800344c:	601a      	str	r2, [r3, #0]
 800344e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	fa93 f2a3 	rbit	r2, r3
 8003458:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800345c:	601a      	str	r2, [r3, #0]
 800345e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003462:	2202      	movs	r2, #2
 8003464:	601a      	str	r2, [r3, #0]
 8003466:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	fa93 f2a3 	rbit	r2, r3
 8003470:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003474:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003476:	4ba5      	ldr	r3, [pc, #660]	; (800370c <HAL_RCC_OscConfig+0x930>)
 8003478:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800347a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800347e:	2102      	movs	r1, #2
 8003480:	6019      	str	r1, [r3, #0]
 8003482:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	fa93 f1a3 	rbit	r1, r3
 800348c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003490:	6019      	str	r1, [r3, #0]
  return result;
 8003492:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	fab3 f383 	clz	r3, r3
 800349c:	b2db      	uxtb	r3, r3
 800349e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	f003 031f 	and.w	r3, r3, #31
 80034a8:	2101      	movs	r1, #1
 80034aa:	fa01 f303 	lsl.w	r3, r1, r3
 80034ae:	4013      	ands	r3, r2
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d0b0      	beq.n	8003416 <HAL_RCC_OscConfig+0x63a>
 80034b4:	e06a      	b.n	800358c <HAL_RCC_OscConfig+0x7b0>
 80034b6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80034ba:	2201      	movs	r2, #1
 80034bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034be:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	fa93 f2a3 	rbit	r2, r3
 80034c8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80034cc:	601a      	str	r2, [r3, #0]
  return result;
 80034ce:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80034d2:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034d4:	fab3 f383 	clz	r3, r3
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	461a      	mov	r2, r3
 80034dc:	4b8c      	ldr	r3, [pc, #560]	; (8003710 <HAL_RCC_OscConfig+0x934>)
 80034de:	4413      	add	r3, r2
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	461a      	mov	r2, r3
 80034e4:	2300      	movs	r3, #0
 80034e6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034e8:	f7fd fdb6 	bl	8001058 <HAL_GetTick>
 80034ec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034f0:	e009      	b.n	8003506 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034f2:	f7fd fdb1 	bl	8001058 <HAL_GetTick>
 80034f6:	4602      	mov	r2, r0
 80034f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d901      	bls.n	8003506 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e36b      	b.n	8003bde <HAL_RCC_OscConfig+0xe02>
 8003506:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800350a:	2202      	movs	r2, #2
 800350c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800350e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	fa93 f2a3 	rbit	r2, r3
 8003518:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800351c:	601a      	str	r2, [r3, #0]
 800351e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003522:	2202      	movs	r2, #2
 8003524:	601a      	str	r2, [r3, #0]
 8003526:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	fa93 f2a3 	rbit	r2, r3
 8003530:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003534:	601a      	str	r2, [r3, #0]
 8003536:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800353a:	2202      	movs	r2, #2
 800353c:	601a      	str	r2, [r3, #0]
 800353e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	fa93 f2a3 	rbit	r2, r3
 8003548:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800354c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800354e:	4b6f      	ldr	r3, [pc, #444]	; (800370c <HAL_RCC_OscConfig+0x930>)
 8003550:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003552:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003556:	2102      	movs	r1, #2
 8003558:	6019      	str	r1, [r3, #0]
 800355a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	fa93 f1a3 	rbit	r1, r3
 8003564:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003568:	6019      	str	r1, [r3, #0]
  return result;
 800356a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	fab3 f383 	clz	r3, r3
 8003574:	b2db      	uxtb	r3, r3
 8003576:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800357a:	b2db      	uxtb	r3, r3
 800357c:	f003 031f 	and.w	r3, r3, #31
 8003580:	2101      	movs	r1, #1
 8003582:	fa01 f303 	lsl.w	r3, r1, r3
 8003586:	4013      	ands	r3, r2
 8003588:	2b00      	cmp	r3, #0
 800358a:	d1b2      	bne.n	80034f2 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800358c:	1d3b      	adds	r3, r7, #4
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 0304 	and.w	r3, r3, #4
 8003596:	2b00      	cmp	r3, #0
 8003598:	f000 8158 	beq.w	800384c <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 800359c:	2300      	movs	r3, #0
 800359e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035a2:	4b5a      	ldr	r3, [pc, #360]	; (800370c <HAL_RCC_OscConfig+0x930>)
 80035a4:	69db      	ldr	r3, [r3, #28]
 80035a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d112      	bne.n	80035d4 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035ae:	4b57      	ldr	r3, [pc, #348]	; (800370c <HAL_RCC_OscConfig+0x930>)
 80035b0:	69db      	ldr	r3, [r3, #28]
 80035b2:	4a56      	ldr	r2, [pc, #344]	; (800370c <HAL_RCC_OscConfig+0x930>)
 80035b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035b8:	61d3      	str	r3, [r2, #28]
 80035ba:	4b54      	ldr	r3, [pc, #336]	; (800370c <HAL_RCC_OscConfig+0x930>)
 80035bc:	69db      	ldr	r3, [r3, #28]
 80035be:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80035c2:	f107 0308 	add.w	r3, r7, #8
 80035c6:	601a      	str	r2, [r3, #0]
 80035c8:	f107 0308 	add.w	r3, r7, #8
 80035cc:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80035ce:	2301      	movs	r3, #1
 80035d0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035d4:	4b4f      	ldr	r3, [pc, #316]	; (8003714 <HAL_RCC_OscConfig+0x938>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d11a      	bne.n	8003616 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035e0:	4b4c      	ldr	r3, [pc, #304]	; (8003714 <HAL_RCC_OscConfig+0x938>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a4b      	ldr	r2, [pc, #300]	; (8003714 <HAL_RCC_OscConfig+0x938>)
 80035e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035ea:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035ec:	f7fd fd34 	bl	8001058 <HAL_GetTick>
 80035f0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035f4:	e009      	b.n	800360a <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035f6:	f7fd fd2f 	bl	8001058 <HAL_GetTick>
 80035fa:	4602      	mov	r2, r0
 80035fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	2b64      	cmp	r3, #100	; 0x64
 8003604:	d901      	bls.n	800360a <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e2e9      	b.n	8003bde <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800360a:	4b42      	ldr	r3, [pc, #264]	; (8003714 <HAL_RCC_OscConfig+0x938>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003612:	2b00      	cmp	r3, #0
 8003614:	d0ef      	beq.n	80035f6 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003616:	1d3b      	adds	r3, r7, #4
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	2b01      	cmp	r3, #1
 800361e:	d106      	bne.n	800362e <HAL_RCC_OscConfig+0x852>
 8003620:	4b3a      	ldr	r3, [pc, #232]	; (800370c <HAL_RCC_OscConfig+0x930>)
 8003622:	6a1b      	ldr	r3, [r3, #32]
 8003624:	4a39      	ldr	r2, [pc, #228]	; (800370c <HAL_RCC_OscConfig+0x930>)
 8003626:	f043 0301 	orr.w	r3, r3, #1
 800362a:	6213      	str	r3, [r2, #32]
 800362c:	e02f      	b.n	800368e <HAL_RCC_OscConfig+0x8b2>
 800362e:	1d3b      	adds	r3, r7, #4
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d10c      	bne.n	8003652 <HAL_RCC_OscConfig+0x876>
 8003638:	4b34      	ldr	r3, [pc, #208]	; (800370c <HAL_RCC_OscConfig+0x930>)
 800363a:	6a1b      	ldr	r3, [r3, #32]
 800363c:	4a33      	ldr	r2, [pc, #204]	; (800370c <HAL_RCC_OscConfig+0x930>)
 800363e:	f023 0301 	bic.w	r3, r3, #1
 8003642:	6213      	str	r3, [r2, #32]
 8003644:	4b31      	ldr	r3, [pc, #196]	; (800370c <HAL_RCC_OscConfig+0x930>)
 8003646:	6a1b      	ldr	r3, [r3, #32]
 8003648:	4a30      	ldr	r2, [pc, #192]	; (800370c <HAL_RCC_OscConfig+0x930>)
 800364a:	f023 0304 	bic.w	r3, r3, #4
 800364e:	6213      	str	r3, [r2, #32]
 8003650:	e01d      	b.n	800368e <HAL_RCC_OscConfig+0x8b2>
 8003652:	1d3b      	adds	r3, r7, #4
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	2b05      	cmp	r3, #5
 800365a:	d10c      	bne.n	8003676 <HAL_RCC_OscConfig+0x89a>
 800365c:	4b2b      	ldr	r3, [pc, #172]	; (800370c <HAL_RCC_OscConfig+0x930>)
 800365e:	6a1b      	ldr	r3, [r3, #32]
 8003660:	4a2a      	ldr	r2, [pc, #168]	; (800370c <HAL_RCC_OscConfig+0x930>)
 8003662:	f043 0304 	orr.w	r3, r3, #4
 8003666:	6213      	str	r3, [r2, #32]
 8003668:	4b28      	ldr	r3, [pc, #160]	; (800370c <HAL_RCC_OscConfig+0x930>)
 800366a:	6a1b      	ldr	r3, [r3, #32]
 800366c:	4a27      	ldr	r2, [pc, #156]	; (800370c <HAL_RCC_OscConfig+0x930>)
 800366e:	f043 0301 	orr.w	r3, r3, #1
 8003672:	6213      	str	r3, [r2, #32]
 8003674:	e00b      	b.n	800368e <HAL_RCC_OscConfig+0x8b2>
 8003676:	4b25      	ldr	r3, [pc, #148]	; (800370c <HAL_RCC_OscConfig+0x930>)
 8003678:	6a1b      	ldr	r3, [r3, #32]
 800367a:	4a24      	ldr	r2, [pc, #144]	; (800370c <HAL_RCC_OscConfig+0x930>)
 800367c:	f023 0301 	bic.w	r3, r3, #1
 8003680:	6213      	str	r3, [r2, #32]
 8003682:	4b22      	ldr	r3, [pc, #136]	; (800370c <HAL_RCC_OscConfig+0x930>)
 8003684:	6a1b      	ldr	r3, [r3, #32]
 8003686:	4a21      	ldr	r2, [pc, #132]	; (800370c <HAL_RCC_OscConfig+0x930>)
 8003688:	f023 0304 	bic.w	r3, r3, #4
 800368c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800368e:	1d3b      	adds	r3, r7, #4
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	68db      	ldr	r3, [r3, #12]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d06b      	beq.n	8003770 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003698:	f7fd fcde 	bl	8001058 <HAL_GetTick>
 800369c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036a0:	e00b      	b.n	80036ba <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036a2:	f7fd fcd9 	bl	8001058 <HAL_GetTick>
 80036a6:	4602      	mov	r2, r0
 80036a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d901      	bls.n	80036ba <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e291      	b.n	8003bde <HAL_RCC_OscConfig+0xe02>
 80036ba:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80036be:	2202      	movs	r2, #2
 80036c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	fa93 f2a3 	rbit	r2, r3
 80036cc:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80036d0:	601a      	str	r2, [r3, #0]
 80036d2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80036d6:	2202      	movs	r2, #2
 80036d8:	601a      	str	r2, [r3, #0]
 80036da:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	fa93 f2a3 	rbit	r2, r3
 80036e4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80036e8:	601a      	str	r2, [r3, #0]
  return result;
 80036ea:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80036ee:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036f0:	fab3 f383 	clz	r3, r3
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	095b      	lsrs	r3, r3, #5
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	f043 0302 	orr.w	r3, r3, #2
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	2b02      	cmp	r3, #2
 8003702:	d109      	bne.n	8003718 <HAL_RCC_OscConfig+0x93c>
 8003704:	4b01      	ldr	r3, [pc, #4]	; (800370c <HAL_RCC_OscConfig+0x930>)
 8003706:	6a1b      	ldr	r3, [r3, #32]
 8003708:	e014      	b.n	8003734 <HAL_RCC_OscConfig+0x958>
 800370a:	bf00      	nop
 800370c:	40021000 	.word	0x40021000
 8003710:	10908120 	.word	0x10908120
 8003714:	40007000 	.word	0x40007000
 8003718:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800371c:	2202      	movs	r2, #2
 800371e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003720:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	fa93 f2a3 	rbit	r2, r3
 800372a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800372e:	601a      	str	r2, [r3, #0]
 8003730:	4bbb      	ldr	r3, [pc, #748]	; (8003a20 <HAL_RCC_OscConfig+0xc44>)
 8003732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003734:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003738:	2102      	movs	r1, #2
 800373a:	6011      	str	r1, [r2, #0]
 800373c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003740:	6812      	ldr	r2, [r2, #0]
 8003742:	fa92 f1a2 	rbit	r1, r2
 8003746:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800374a:	6011      	str	r1, [r2, #0]
  return result;
 800374c:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003750:	6812      	ldr	r2, [r2, #0]
 8003752:	fab2 f282 	clz	r2, r2
 8003756:	b2d2      	uxtb	r2, r2
 8003758:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800375c:	b2d2      	uxtb	r2, r2
 800375e:	f002 021f 	and.w	r2, r2, #31
 8003762:	2101      	movs	r1, #1
 8003764:	fa01 f202 	lsl.w	r2, r1, r2
 8003768:	4013      	ands	r3, r2
 800376a:	2b00      	cmp	r3, #0
 800376c:	d099      	beq.n	80036a2 <HAL_RCC_OscConfig+0x8c6>
 800376e:	e063      	b.n	8003838 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003770:	f7fd fc72 	bl	8001058 <HAL_GetTick>
 8003774:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003778:	e00b      	b.n	8003792 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800377a:	f7fd fc6d 	bl	8001058 <HAL_GetTick>
 800377e:	4602      	mov	r2, r0
 8003780:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	f241 3288 	movw	r2, #5000	; 0x1388
 800378a:	4293      	cmp	r3, r2
 800378c:	d901      	bls.n	8003792 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	e225      	b.n	8003bde <HAL_RCC_OscConfig+0xe02>
 8003792:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003796:	2202      	movs	r2, #2
 8003798:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800379a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	fa93 f2a3 	rbit	r2, r3
 80037a4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80037a8:	601a      	str	r2, [r3, #0]
 80037aa:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80037ae:	2202      	movs	r2, #2
 80037b0:	601a      	str	r2, [r3, #0]
 80037b2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	fa93 f2a3 	rbit	r2, r3
 80037bc:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80037c0:	601a      	str	r2, [r3, #0]
  return result;
 80037c2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80037c6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037c8:	fab3 f383 	clz	r3, r3
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	095b      	lsrs	r3, r3, #5
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	f043 0302 	orr.w	r3, r3, #2
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	2b02      	cmp	r3, #2
 80037da:	d102      	bne.n	80037e2 <HAL_RCC_OscConfig+0xa06>
 80037dc:	4b90      	ldr	r3, [pc, #576]	; (8003a20 <HAL_RCC_OscConfig+0xc44>)
 80037de:	6a1b      	ldr	r3, [r3, #32]
 80037e0:	e00d      	b.n	80037fe <HAL_RCC_OscConfig+0xa22>
 80037e2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80037e6:	2202      	movs	r2, #2
 80037e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ea:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	fa93 f2a3 	rbit	r2, r3
 80037f4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80037f8:	601a      	str	r2, [r3, #0]
 80037fa:	4b89      	ldr	r3, [pc, #548]	; (8003a20 <HAL_RCC_OscConfig+0xc44>)
 80037fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fe:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003802:	2102      	movs	r1, #2
 8003804:	6011      	str	r1, [r2, #0]
 8003806:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800380a:	6812      	ldr	r2, [r2, #0]
 800380c:	fa92 f1a2 	rbit	r1, r2
 8003810:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003814:	6011      	str	r1, [r2, #0]
  return result;
 8003816:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800381a:	6812      	ldr	r2, [r2, #0]
 800381c:	fab2 f282 	clz	r2, r2
 8003820:	b2d2      	uxtb	r2, r2
 8003822:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003826:	b2d2      	uxtb	r2, r2
 8003828:	f002 021f 	and.w	r2, r2, #31
 800382c:	2101      	movs	r1, #1
 800382e:	fa01 f202 	lsl.w	r2, r1, r2
 8003832:	4013      	ands	r3, r2
 8003834:	2b00      	cmp	r3, #0
 8003836:	d1a0      	bne.n	800377a <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003838:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800383c:	2b01      	cmp	r3, #1
 800383e:	d105      	bne.n	800384c <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003840:	4b77      	ldr	r3, [pc, #476]	; (8003a20 <HAL_RCC_OscConfig+0xc44>)
 8003842:	69db      	ldr	r3, [r3, #28]
 8003844:	4a76      	ldr	r2, [pc, #472]	; (8003a20 <HAL_RCC_OscConfig+0xc44>)
 8003846:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800384a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800384c:	1d3b      	adds	r3, r7, #4
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	69db      	ldr	r3, [r3, #28]
 8003852:	2b00      	cmp	r3, #0
 8003854:	f000 81c2 	beq.w	8003bdc <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003858:	4b71      	ldr	r3, [pc, #452]	; (8003a20 <HAL_RCC_OscConfig+0xc44>)
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	f003 030c 	and.w	r3, r3, #12
 8003860:	2b08      	cmp	r3, #8
 8003862:	f000 819c 	beq.w	8003b9e <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003866:	1d3b      	adds	r3, r7, #4
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	69db      	ldr	r3, [r3, #28]
 800386c:	2b02      	cmp	r3, #2
 800386e:	f040 8114 	bne.w	8003a9a <HAL_RCC_OscConfig+0xcbe>
 8003872:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003876:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800387a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800387c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	fa93 f2a3 	rbit	r2, r3
 8003886:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800388a:	601a      	str	r2, [r3, #0]
  return result;
 800388c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003890:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003892:	fab3 f383 	clz	r3, r3
 8003896:	b2db      	uxtb	r3, r3
 8003898:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800389c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	461a      	mov	r2, r3
 80038a4:	2300      	movs	r3, #0
 80038a6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038a8:	f7fd fbd6 	bl	8001058 <HAL_GetTick>
 80038ac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038b0:	e009      	b.n	80038c6 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038b2:	f7fd fbd1 	bl	8001058 <HAL_GetTick>
 80038b6:	4602      	mov	r2, r0
 80038b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80038bc:	1ad3      	subs	r3, r2, r3
 80038be:	2b02      	cmp	r3, #2
 80038c0:	d901      	bls.n	80038c6 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80038c2:	2303      	movs	r3, #3
 80038c4:	e18b      	b.n	8003bde <HAL_RCC_OscConfig+0xe02>
 80038c6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80038ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038d0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	fa93 f2a3 	rbit	r2, r3
 80038da:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80038de:	601a      	str	r2, [r3, #0]
  return result;
 80038e0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80038e4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038e6:	fab3 f383 	clz	r3, r3
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	095b      	lsrs	r3, r3, #5
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	f043 0301 	orr.w	r3, r3, #1
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d102      	bne.n	8003900 <HAL_RCC_OscConfig+0xb24>
 80038fa:	4b49      	ldr	r3, [pc, #292]	; (8003a20 <HAL_RCC_OscConfig+0xc44>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	e01b      	b.n	8003938 <HAL_RCC_OscConfig+0xb5c>
 8003900:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003904:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003908:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800390a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	fa93 f2a3 	rbit	r2, r3
 8003914:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003918:	601a      	str	r2, [r3, #0]
 800391a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800391e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003922:	601a      	str	r2, [r3, #0]
 8003924:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	fa93 f2a3 	rbit	r2, r3
 800392e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003932:	601a      	str	r2, [r3, #0]
 8003934:	4b3a      	ldr	r3, [pc, #232]	; (8003a20 <HAL_RCC_OscConfig+0xc44>)
 8003936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003938:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800393c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003940:	6011      	str	r1, [r2, #0]
 8003942:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003946:	6812      	ldr	r2, [r2, #0]
 8003948:	fa92 f1a2 	rbit	r1, r2
 800394c:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003950:	6011      	str	r1, [r2, #0]
  return result;
 8003952:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003956:	6812      	ldr	r2, [r2, #0]
 8003958:	fab2 f282 	clz	r2, r2
 800395c:	b2d2      	uxtb	r2, r2
 800395e:	f042 0220 	orr.w	r2, r2, #32
 8003962:	b2d2      	uxtb	r2, r2
 8003964:	f002 021f 	and.w	r2, r2, #31
 8003968:	2101      	movs	r1, #1
 800396a:	fa01 f202 	lsl.w	r2, r1, r2
 800396e:	4013      	ands	r3, r2
 8003970:	2b00      	cmp	r3, #0
 8003972:	d19e      	bne.n	80038b2 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003974:	4b2a      	ldr	r3, [pc, #168]	; (8003a20 <HAL_RCC_OscConfig+0xc44>)
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800397c:	1d3b      	adds	r3, r7, #4
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003982:	1d3b      	adds	r3, r7, #4
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	6a1b      	ldr	r3, [r3, #32]
 8003988:	430b      	orrs	r3, r1
 800398a:	4925      	ldr	r1, [pc, #148]	; (8003a20 <HAL_RCC_OscConfig+0xc44>)
 800398c:	4313      	orrs	r3, r2
 800398e:	604b      	str	r3, [r1, #4]
 8003990:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003994:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003998:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800399a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	fa93 f2a3 	rbit	r2, r3
 80039a4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80039a8:	601a      	str	r2, [r3, #0]
  return result;
 80039aa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80039ae:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039b0:	fab3 f383 	clz	r3, r3
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80039ba:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	461a      	mov	r2, r3
 80039c2:	2301      	movs	r3, #1
 80039c4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039c6:	f7fd fb47 	bl	8001058 <HAL_GetTick>
 80039ca:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80039ce:	e009      	b.n	80039e4 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039d0:	f7fd fb42 	bl	8001058 <HAL_GetTick>
 80039d4:	4602      	mov	r2, r0
 80039d6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	2b02      	cmp	r3, #2
 80039de:	d901      	bls.n	80039e4 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80039e0:	2303      	movs	r3, #3
 80039e2:	e0fc      	b.n	8003bde <HAL_RCC_OscConfig+0xe02>
 80039e4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80039e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80039ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ee:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	fa93 f2a3 	rbit	r2, r3
 80039f8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80039fc:	601a      	str	r2, [r3, #0]
  return result;
 80039fe:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003a02:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a04:	fab3 f383 	clz	r3, r3
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	095b      	lsrs	r3, r3, #5
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	f043 0301 	orr.w	r3, r3, #1
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d105      	bne.n	8003a24 <HAL_RCC_OscConfig+0xc48>
 8003a18:	4b01      	ldr	r3, [pc, #4]	; (8003a20 <HAL_RCC_OscConfig+0xc44>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	e01e      	b.n	8003a5c <HAL_RCC_OscConfig+0xc80>
 8003a1e:	bf00      	nop
 8003a20:	40021000 	.word	0x40021000
 8003a24:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003a28:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a2e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	fa93 f2a3 	rbit	r2, r3
 8003a38:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003a3c:	601a      	str	r2, [r3, #0]
 8003a3e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003a42:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a46:	601a      	str	r2, [r3, #0]
 8003a48:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	fa93 f2a3 	rbit	r2, r3
 8003a52:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003a56:	601a      	str	r2, [r3, #0]
 8003a58:	4b63      	ldr	r3, [pc, #396]	; (8003be8 <HAL_RCC_OscConfig+0xe0c>)
 8003a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003a60:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003a64:	6011      	str	r1, [r2, #0]
 8003a66:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003a6a:	6812      	ldr	r2, [r2, #0]
 8003a6c:	fa92 f1a2 	rbit	r1, r2
 8003a70:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003a74:	6011      	str	r1, [r2, #0]
  return result;
 8003a76:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003a7a:	6812      	ldr	r2, [r2, #0]
 8003a7c:	fab2 f282 	clz	r2, r2
 8003a80:	b2d2      	uxtb	r2, r2
 8003a82:	f042 0220 	orr.w	r2, r2, #32
 8003a86:	b2d2      	uxtb	r2, r2
 8003a88:	f002 021f 	and.w	r2, r2, #31
 8003a8c:	2101      	movs	r1, #1
 8003a8e:	fa01 f202 	lsl.w	r2, r1, r2
 8003a92:	4013      	ands	r3, r2
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d09b      	beq.n	80039d0 <HAL_RCC_OscConfig+0xbf4>
 8003a98:	e0a0      	b.n	8003bdc <HAL_RCC_OscConfig+0xe00>
 8003a9a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003a9e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003aa2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aa4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	fa93 f2a3 	rbit	r2, r3
 8003aae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003ab2:	601a      	str	r2, [r3, #0]
  return result;
 8003ab4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003ab8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003aba:	fab3 f383 	clz	r3, r3
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003ac4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003ac8:	009b      	lsls	r3, r3, #2
 8003aca:	461a      	mov	r2, r3
 8003acc:	2300      	movs	r3, #0
 8003ace:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ad0:	f7fd fac2 	bl	8001058 <HAL_GetTick>
 8003ad4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ad8:	e009      	b.n	8003aee <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ada:	f7fd fabd 	bl	8001058 <HAL_GetTick>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	d901      	bls.n	8003aee <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8003aea:	2303      	movs	r3, #3
 8003aec:	e077      	b.n	8003bde <HAL_RCC_OscConfig+0xe02>
 8003aee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003af2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003af6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003af8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	fa93 f2a3 	rbit	r2, r3
 8003b02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b06:	601a      	str	r2, [r3, #0]
  return result;
 8003b08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b0c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b0e:	fab3 f383 	clz	r3, r3
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	095b      	lsrs	r3, r3, #5
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	f043 0301 	orr.w	r3, r3, #1
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d102      	bne.n	8003b28 <HAL_RCC_OscConfig+0xd4c>
 8003b22:	4b31      	ldr	r3, [pc, #196]	; (8003be8 <HAL_RCC_OscConfig+0xe0c>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	e01b      	b.n	8003b60 <HAL_RCC_OscConfig+0xd84>
 8003b28:	f107 0320 	add.w	r3, r7, #32
 8003b2c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b30:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b32:	f107 0320 	add.w	r3, r7, #32
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	fa93 f2a3 	rbit	r2, r3
 8003b3c:	f107 031c 	add.w	r3, r7, #28
 8003b40:	601a      	str	r2, [r3, #0]
 8003b42:	f107 0318 	add.w	r3, r7, #24
 8003b46:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b4a:	601a      	str	r2, [r3, #0]
 8003b4c:	f107 0318 	add.w	r3, r7, #24
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	fa93 f2a3 	rbit	r2, r3
 8003b56:	f107 0314 	add.w	r3, r7, #20
 8003b5a:	601a      	str	r2, [r3, #0]
 8003b5c:	4b22      	ldr	r3, [pc, #136]	; (8003be8 <HAL_RCC_OscConfig+0xe0c>)
 8003b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b60:	f107 0210 	add.w	r2, r7, #16
 8003b64:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003b68:	6011      	str	r1, [r2, #0]
 8003b6a:	f107 0210 	add.w	r2, r7, #16
 8003b6e:	6812      	ldr	r2, [r2, #0]
 8003b70:	fa92 f1a2 	rbit	r1, r2
 8003b74:	f107 020c 	add.w	r2, r7, #12
 8003b78:	6011      	str	r1, [r2, #0]
  return result;
 8003b7a:	f107 020c 	add.w	r2, r7, #12
 8003b7e:	6812      	ldr	r2, [r2, #0]
 8003b80:	fab2 f282 	clz	r2, r2
 8003b84:	b2d2      	uxtb	r2, r2
 8003b86:	f042 0220 	orr.w	r2, r2, #32
 8003b8a:	b2d2      	uxtb	r2, r2
 8003b8c:	f002 021f 	and.w	r2, r2, #31
 8003b90:	2101      	movs	r1, #1
 8003b92:	fa01 f202 	lsl.w	r2, r1, r2
 8003b96:	4013      	ands	r3, r2
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d19e      	bne.n	8003ada <HAL_RCC_OscConfig+0xcfe>
 8003b9c:	e01e      	b.n	8003bdc <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b9e:	1d3b      	adds	r3, r7, #4
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	69db      	ldr	r3, [r3, #28]
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d101      	bne.n	8003bac <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e018      	b.n	8003bde <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003bac:	4b0e      	ldr	r3, [pc, #56]	; (8003be8 <HAL_RCC_OscConfig+0xe0c>)
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003bb4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003bb8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003bbc:	1d3b      	adds	r3, r7, #4
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	6a1b      	ldr	r3, [r3, #32]
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	d108      	bne.n	8003bd8 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003bc6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003bca:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003bce:	1d3b      	adds	r3, r7, #4
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d001      	beq.n	8003bdc <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e000      	b.n	8003bde <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8003bdc:	2300      	movs	r3, #0
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}
 8003be8:	40021000 	.word	0x40021000

08003bec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b09e      	sub	sp, #120	; 0x78
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d101      	bne.n	8003c04 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	e162      	b.n	8003eca <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c04:	4b90      	ldr	r3, [pc, #576]	; (8003e48 <HAL_RCC_ClockConfig+0x25c>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 0307 	and.w	r3, r3, #7
 8003c0c:	683a      	ldr	r2, [r7, #0]
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d910      	bls.n	8003c34 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c12:	4b8d      	ldr	r3, [pc, #564]	; (8003e48 <HAL_RCC_ClockConfig+0x25c>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f023 0207 	bic.w	r2, r3, #7
 8003c1a:	498b      	ldr	r1, [pc, #556]	; (8003e48 <HAL_RCC_ClockConfig+0x25c>)
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c22:	4b89      	ldr	r3, [pc, #548]	; (8003e48 <HAL_RCC_ClockConfig+0x25c>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0307 	and.w	r3, r3, #7
 8003c2a:	683a      	ldr	r2, [r7, #0]
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d001      	beq.n	8003c34 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e14a      	b.n	8003eca <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 0302 	and.w	r3, r3, #2
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d008      	beq.n	8003c52 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c40:	4b82      	ldr	r3, [pc, #520]	; (8003e4c <HAL_RCC_ClockConfig+0x260>)
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	497f      	ldr	r1, [pc, #508]	; (8003e4c <HAL_RCC_ClockConfig+0x260>)
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 0301 	and.w	r3, r3, #1
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	f000 80dc 	beq.w	8003e18 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d13c      	bne.n	8003ce2 <HAL_RCC_ClockConfig+0xf6>
 8003c68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c6c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c70:	fa93 f3a3 	rbit	r3, r3
 8003c74:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003c76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c78:	fab3 f383 	clz	r3, r3
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	095b      	lsrs	r3, r3, #5
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	f043 0301 	orr.w	r3, r3, #1
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d102      	bne.n	8003c92 <HAL_RCC_ClockConfig+0xa6>
 8003c8c:	4b6f      	ldr	r3, [pc, #444]	; (8003e4c <HAL_RCC_ClockConfig+0x260>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	e00f      	b.n	8003cb2 <HAL_RCC_ClockConfig+0xc6>
 8003c92:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c96:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003c9a:	fa93 f3a3 	rbit	r3, r3
 8003c9e:	667b      	str	r3, [r7, #100]	; 0x64
 8003ca0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ca4:	663b      	str	r3, [r7, #96]	; 0x60
 8003ca6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ca8:	fa93 f3a3 	rbit	r3, r3
 8003cac:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003cae:	4b67      	ldr	r3, [pc, #412]	; (8003e4c <HAL_RCC_ClockConfig+0x260>)
 8003cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003cb6:	65ba      	str	r2, [r7, #88]	; 0x58
 8003cb8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003cba:	fa92 f2a2 	rbit	r2, r2
 8003cbe:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003cc0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003cc2:	fab2 f282 	clz	r2, r2
 8003cc6:	b2d2      	uxtb	r2, r2
 8003cc8:	f042 0220 	orr.w	r2, r2, #32
 8003ccc:	b2d2      	uxtb	r2, r2
 8003cce:	f002 021f 	and.w	r2, r2, #31
 8003cd2:	2101      	movs	r1, #1
 8003cd4:	fa01 f202 	lsl.w	r2, r1, r2
 8003cd8:	4013      	ands	r3, r2
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d17b      	bne.n	8003dd6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e0f3      	b.n	8003eca <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	2b02      	cmp	r3, #2
 8003ce8:	d13c      	bne.n	8003d64 <HAL_RCC_ClockConfig+0x178>
 8003cea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003cee:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cf0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cf2:	fa93 f3a3 	rbit	r3, r3
 8003cf6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003cf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cfa:	fab3 f383 	clz	r3, r3
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	095b      	lsrs	r3, r3, #5
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	f043 0301 	orr.w	r3, r3, #1
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d102      	bne.n	8003d14 <HAL_RCC_ClockConfig+0x128>
 8003d0e:	4b4f      	ldr	r3, [pc, #316]	; (8003e4c <HAL_RCC_ClockConfig+0x260>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	e00f      	b.n	8003d34 <HAL_RCC_ClockConfig+0x148>
 8003d14:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d18:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d1c:	fa93 f3a3 	rbit	r3, r3
 8003d20:	647b      	str	r3, [r7, #68]	; 0x44
 8003d22:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d26:	643b      	str	r3, [r7, #64]	; 0x40
 8003d28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d2a:	fa93 f3a3 	rbit	r3, r3
 8003d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d30:	4b46      	ldr	r3, [pc, #280]	; (8003e4c <HAL_RCC_ClockConfig+0x260>)
 8003d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d34:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d38:	63ba      	str	r2, [r7, #56]	; 0x38
 8003d3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d3c:	fa92 f2a2 	rbit	r2, r2
 8003d40:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003d42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d44:	fab2 f282 	clz	r2, r2
 8003d48:	b2d2      	uxtb	r2, r2
 8003d4a:	f042 0220 	orr.w	r2, r2, #32
 8003d4e:	b2d2      	uxtb	r2, r2
 8003d50:	f002 021f 	and.w	r2, r2, #31
 8003d54:	2101      	movs	r1, #1
 8003d56:	fa01 f202 	lsl.w	r2, r1, r2
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d13a      	bne.n	8003dd6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e0b2      	b.n	8003eca <HAL_RCC_ClockConfig+0x2de>
 8003d64:	2302      	movs	r3, #2
 8003d66:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d6a:	fa93 f3a3 	rbit	r3, r3
 8003d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d72:	fab3 f383 	clz	r3, r3
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	095b      	lsrs	r3, r3, #5
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	f043 0301 	orr.w	r3, r3, #1
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d102      	bne.n	8003d8c <HAL_RCC_ClockConfig+0x1a0>
 8003d86:	4b31      	ldr	r3, [pc, #196]	; (8003e4c <HAL_RCC_ClockConfig+0x260>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	e00d      	b.n	8003da8 <HAL_RCC_ClockConfig+0x1bc>
 8003d8c:	2302      	movs	r3, #2
 8003d8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d92:	fa93 f3a3 	rbit	r3, r3
 8003d96:	627b      	str	r3, [r7, #36]	; 0x24
 8003d98:	2302      	movs	r3, #2
 8003d9a:	623b      	str	r3, [r7, #32]
 8003d9c:	6a3b      	ldr	r3, [r7, #32]
 8003d9e:	fa93 f3a3 	rbit	r3, r3
 8003da2:	61fb      	str	r3, [r7, #28]
 8003da4:	4b29      	ldr	r3, [pc, #164]	; (8003e4c <HAL_RCC_ClockConfig+0x260>)
 8003da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da8:	2202      	movs	r2, #2
 8003daa:	61ba      	str	r2, [r7, #24]
 8003dac:	69ba      	ldr	r2, [r7, #24]
 8003dae:	fa92 f2a2 	rbit	r2, r2
 8003db2:	617a      	str	r2, [r7, #20]
  return result;
 8003db4:	697a      	ldr	r2, [r7, #20]
 8003db6:	fab2 f282 	clz	r2, r2
 8003dba:	b2d2      	uxtb	r2, r2
 8003dbc:	f042 0220 	orr.w	r2, r2, #32
 8003dc0:	b2d2      	uxtb	r2, r2
 8003dc2:	f002 021f 	and.w	r2, r2, #31
 8003dc6:	2101      	movs	r1, #1
 8003dc8:	fa01 f202 	lsl.w	r2, r1, r2
 8003dcc:	4013      	ands	r3, r2
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d101      	bne.n	8003dd6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e079      	b.n	8003eca <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003dd6:	4b1d      	ldr	r3, [pc, #116]	; (8003e4c <HAL_RCC_ClockConfig+0x260>)
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	f023 0203 	bic.w	r2, r3, #3
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	491a      	ldr	r1, [pc, #104]	; (8003e4c <HAL_RCC_ClockConfig+0x260>)
 8003de4:	4313      	orrs	r3, r2
 8003de6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003de8:	f7fd f936 	bl	8001058 <HAL_GetTick>
 8003dec:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dee:	e00a      	b.n	8003e06 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003df0:	f7fd f932 	bl	8001058 <HAL_GetTick>
 8003df4:	4602      	mov	r2, r0
 8003df6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003df8:	1ad3      	subs	r3, r2, r3
 8003dfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d901      	bls.n	8003e06 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003e02:	2303      	movs	r3, #3
 8003e04:	e061      	b.n	8003eca <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e06:	4b11      	ldr	r3, [pc, #68]	; (8003e4c <HAL_RCC_ClockConfig+0x260>)
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	f003 020c 	and.w	r2, r3, #12
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d1eb      	bne.n	8003df0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e18:	4b0b      	ldr	r3, [pc, #44]	; (8003e48 <HAL_RCC_ClockConfig+0x25c>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0307 	and.w	r3, r3, #7
 8003e20:	683a      	ldr	r2, [r7, #0]
 8003e22:	429a      	cmp	r2, r3
 8003e24:	d214      	bcs.n	8003e50 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e26:	4b08      	ldr	r3, [pc, #32]	; (8003e48 <HAL_RCC_ClockConfig+0x25c>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f023 0207 	bic.w	r2, r3, #7
 8003e2e:	4906      	ldr	r1, [pc, #24]	; (8003e48 <HAL_RCC_ClockConfig+0x25c>)
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	4313      	orrs	r3, r2
 8003e34:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e36:	4b04      	ldr	r3, [pc, #16]	; (8003e48 <HAL_RCC_ClockConfig+0x25c>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0307 	and.w	r3, r3, #7
 8003e3e:	683a      	ldr	r2, [r7, #0]
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d005      	beq.n	8003e50 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	e040      	b.n	8003eca <HAL_RCC_ClockConfig+0x2de>
 8003e48:	40022000 	.word	0x40022000
 8003e4c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f003 0304 	and.w	r3, r3, #4
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d008      	beq.n	8003e6e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e5c:	4b1d      	ldr	r3, [pc, #116]	; (8003ed4 <HAL_RCC_ClockConfig+0x2e8>)
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	491a      	ldr	r1, [pc, #104]	; (8003ed4 <HAL_RCC_ClockConfig+0x2e8>)
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 0308 	and.w	r3, r3, #8
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d009      	beq.n	8003e8e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e7a:	4b16      	ldr	r3, [pc, #88]	; (8003ed4 <HAL_RCC_ClockConfig+0x2e8>)
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	691b      	ldr	r3, [r3, #16]
 8003e86:	00db      	lsls	r3, r3, #3
 8003e88:	4912      	ldr	r1, [pc, #72]	; (8003ed4 <HAL_RCC_ClockConfig+0x2e8>)
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003e8e:	f000 f829 	bl	8003ee4 <HAL_RCC_GetSysClockFreq>
 8003e92:	4601      	mov	r1, r0
 8003e94:	4b0f      	ldr	r3, [pc, #60]	; (8003ed4 <HAL_RCC_ClockConfig+0x2e8>)
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e9c:	22f0      	movs	r2, #240	; 0xf0
 8003e9e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ea0:	693a      	ldr	r2, [r7, #16]
 8003ea2:	fa92 f2a2 	rbit	r2, r2
 8003ea6:	60fa      	str	r2, [r7, #12]
  return result;
 8003ea8:	68fa      	ldr	r2, [r7, #12]
 8003eaa:	fab2 f282 	clz	r2, r2
 8003eae:	b2d2      	uxtb	r2, r2
 8003eb0:	40d3      	lsrs	r3, r2
 8003eb2:	4a09      	ldr	r2, [pc, #36]	; (8003ed8 <HAL_RCC_ClockConfig+0x2ec>)
 8003eb4:	5cd3      	ldrb	r3, [r2, r3]
 8003eb6:	fa21 f303 	lsr.w	r3, r1, r3
 8003eba:	4a08      	ldr	r2, [pc, #32]	; (8003edc <HAL_RCC_ClockConfig+0x2f0>)
 8003ebc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003ebe:	4b08      	ldr	r3, [pc, #32]	; (8003ee0 <HAL_RCC_ClockConfig+0x2f4>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f7fd f884 	bl	8000fd0 <HAL_InitTick>
  
  return HAL_OK;
 8003ec8:	2300      	movs	r3, #0
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3778      	adds	r7, #120	; 0x78
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}
 8003ed2:	bf00      	nop
 8003ed4:	40021000 	.word	0x40021000
 8003ed8:	08004edc 	.word	0x08004edc
 8003edc:	20000000 	.word	0x20000000
 8003ee0:	20000004 	.word	0x20000004

08003ee4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b08b      	sub	sp, #44	; 0x2c
 8003ee8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003eea:	2300      	movs	r3, #0
 8003eec:	61fb      	str	r3, [r7, #28]
 8003eee:	2300      	movs	r3, #0
 8003ef0:	61bb      	str	r3, [r7, #24]
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	627b      	str	r3, [r7, #36]	; 0x24
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003efa:	2300      	movs	r3, #0
 8003efc:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003efe:	4b29      	ldr	r3, [pc, #164]	; (8003fa4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003f04:	69fb      	ldr	r3, [r7, #28]
 8003f06:	f003 030c 	and.w	r3, r3, #12
 8003f0a:	2b04      	cmp	r3, #4
 8003f0c:	d002      	beq.n	8003f14 <HAL_RCC_GetSysClockFreq+0x30>
 8003f0e:	2b08      	cmp	r3, #8
 8003f10:	d003      	beq.n	8003f1a <HAL_RCC_GetSysClockFreq+0x36>
 8003f12:	e03c      	b.n	8003f8e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003f14:	4b24      	ldr	r3, [pc, #144]	; (8003fa8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003f16:	623b      	str	r3, [r7, #32]
      break;
 8003f18:	e03c      	b.n	8003f94 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003f20:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003f24:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f26:	68ba      	ldr	r2, [r7, #8]
 8003f28:	fa92 f2a2 	rbit	r2, r2
 8003f2c:	607a      	str	r2, [r7, #4]
  return result;
 8003f2e:	687a      	ldr	r2, [r7, #4]
 8003f30:	fab2 f282 	clz	r2, r2
 8003f34:	b2d2      	uxtb	r2, r2
 8003f36:	40d3      	lsrs	r3, r2
 8003f38:	4a1c      	ldr	r2, [pc, #112]	; (8003fac <HAL_RCC_GetSysClockFreq+0xc8>)
 8003f3a:	5cd3      	ldrb	r3, [r2, r3]
 8003f3c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003f3e:	4b19      	ldr	r3, [pc, #100]	; (8003fa4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f42:	f003 030f 	and.w	r3, r3, #15
 8003f46:	220f      	movs	r2, #15
 8003f48:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f4a:	693a      	ldr	r2, [r7, #16]
 8003f4c:	fa92 f2a2 	rbit	r2, r2
 8003f50:	60fa      	str	r2, [r7, #12]
  return result;
 8003f52:	68fa      	ldr	r2, [r7, #12]
 8003f54:	fab2 f282 	clz	r2, r2
 8003f58:	b2d2      	uxtb	r2, r2
 8003f5a:	40d3      	lsrs	r3, r2
 8003f5c:	4a14      	ldr	r2, [pc, #80]	; (8003fb0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003f5e:	5cd3      	ldrb	r3, [r2, r3]
 8003f60:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003f62:	69fb      	ldr	r3, [r7, #28]
 8003f64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d008      	beq.n	8003f7e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003f6c:	4a0e      	ldr	r2, [pc, #56]	; (8003fa8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003f6e:	69bb      	ldr	r3, [r7, #24]
 8003f70:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	fb02 f303 	mul.w	r3, r2, r3
 8003f7a:	627b      	str	r3, [r7, #36]	; 0x24
 8003f7c:	e004      	b.n	8003f88 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	4a0c      	ldr	r2, [pc, #48]	; (8003fb4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003f82:	fb02 f303 	mul.w	r3, r2, r3
 8003f86:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8a:	623b      	str	r3, [r7, #32]
      break;
 8003f8c:	e002      	b.n	8003f94 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003f8e:	4b06      	ldr	r3, [pc, #24]	; (8003fa8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003f90:	623b      	str	r3, [r7, #32]
      break;
 8003f92:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f94:	6a3b      	ldr	r3, [r7, #32]
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	372c      	adds	r7, #44	; 0x2c
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr
 8003fa2:	bf00      	nop
 8003fa4:	40021000 	.word	0x40021000
 8003fa8:	007a1200 	.word	0x007a1200
 8003fac:	08004ef4 	.word	0x08004ef4
 8003fb0:	08004f04 	.word	0x08004f04
 8003fb4:	003d0900 	.word	0x003d0900

08003fb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fbc:	4b03      	ldr	r3, [pc, #12]	; (8003fcc <HAL_RCC_GetHCLKFreq+0x14>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr
 8003fca:	bf00      	nop
 8003fcc:	20000000 	.word	0x20000000

08003fd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b082      	sub	sp, #8
 8003fd4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003fd6:	f7ff ffef 	bl	8003fb8 <HAL_RCC_GetHCLKFreq>
 8003fda:	4601      	mov	r1, r0
 8003fdc:	4b0b      	ldr	r3, [pc, #44]	; (800400c <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003fe4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003fe8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	fa92 f2a2 	rbit	r2, r2
 8003ff0:	603a      	str	r2, [r7, #0]
  return result;
 8003ff2:	683a      	ldr	r2, [r7, #0]
 8003ff4:	fab2 f282 	clz	r2, r2
 8003ff8:	b2d2      	uxtb	r2, r2
 8003ffa:	40d3      	lsrs	r3, r2
 8003ffc:	4a04      	ldr	r2, [pc, #16]	; (8004010 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003ffe:	5cd3      	ldrb	r3, [r2, r3]
 8004000:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004004:	4618      	mov	r0, r3
 8004006:	3708      	adds	r7, #8
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}
 800400c:	40021000 	.word	0x40021000
 8004010:	08004eec 	.word	0x08004eec

08004014 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b082      	sub	sp, #8
 8004018:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800401a:	f7ff ffcd 	bl	8003fb8 <HAL_RCC_GetHCLKFreq>
 800401e:	4601      	mov	r1, r0
 8004020:	4b0b      	ldr	r3, [pc, #44]	; (8004050 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004028:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800402c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	fa92 f2a2 	rbit	r2, r2
 8004034:	603a      	str	r2, [r7, #0]
  return result;
 8004036:	683a      	ldr	r2, [r7, #0]
 8004038:	fab2 f282 	clz	r2, r2
 800403c:	b2d2      	uxtb	r2, r2
 800403e:	40d3      	lsrs	r3, r2
 8004040:	4a04      	ldr	r2, [pc, #16]	; (8004054 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004042:	5cd3      	ldrb	r3, [r2, r3]
 8004044:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004048:	4618      	mov	r0, r3
 800404a:	3708      	adds	r7, #8
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}
 8004050:	40021000 	.word	0x40021000
 8004054:	08004eec 	.word	0x08004eec

08004058 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b092      	sub	sp, #72	; 0x48
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004060:	2300      	movs	r3, #0
 8004062:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004064:	2300      	movs	r3, #0
 8004066:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004070:	2b00      	cmp	r3, #0
 8004072:	f000 80d0 	beq.w	8004216 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8004076:	2300      	movs	r3, #0
 8004078:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800407c:	4b8e      	ldr	r3, [pc, #568]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800407e:	69db      	ldr	r3, [r3, #28]
 8004080:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004084:	2b00      	cmp	r3, #0
 8004086:	d10e      	bne.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004088:	4b8b      	ldr	r3, [pc, #556]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800408a:	69db      	ldr	r3, [r3, #28]
 800408c:	4a8a      	ldr	r2, [pc, #552]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800408e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004092:	61d3      	str	r3, [r2, #28]
 8004094:	4b88      	ldr	r3, [pc, #544]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004096:	69db      	ldr	r3, [r3, #28]
 8004098:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800409c:	60bb      	str	r3, [r7, #8]
 800409e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040a0:	2301      	movs	r3, #1
 80040a2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040a6:	4b85      	ldr	r3, [pc, #532]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d118      	bne.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040b2:	4b82      	ldr	r3, [pc, #520]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a81      	ldr	r2, [pc, #516]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80040b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040bc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040be:	f7fc ffcb 	bl	8001058 <HAL_GetTick>
 80040c2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040c4:	e008      	b.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040c6:	f7fc ffc7 	bl	8001058 <HAL_GetTick>
 80040ca:	4602      	mov	r2, r0
 80040cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040ce:	1ad3      	subs	r3, r2, r3
 80040d0:	2b64      	cmp	r3, #100	; 0x64
 80040d2:	d901      	bls.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80040d4:	2303      	movs	r3, #3
 80040d6:	e0ea      	b.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x256>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040d8:	4b78      	ldr	r3, [pc, #480]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d0f0      	beq.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80040e4:	4b74      	ldr	r3, [pc, #464]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040e6:	6a1b      	ldr	r3, [r3, #32]
 80040e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040ec:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80040ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d07d      	beq.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80040fe:	429a      	cmp	r2, r3
 8004100:	d076      	beq.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004102:	4b6d      	ldr	r3, [pc, #436]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004104:	6a1b      	ldr	r3, [r3, #32]
 8004106:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800410a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800410c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004110:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004114:	fa93 f3a3 	rbit	r3, r3
 8004118:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800411a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800411c:	fab3 f383 	clz	r3, r3
 8004120:	b2db      	uxtb	r3, r3
 8004122:	461a      	mov	r2, r3
 8004124:	4b66      	ldr	r3, [pc, #408]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004126:	4413      	add	r3, r2
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	461a      	mov	r2, r3
 800412c:	2301      	movs	r3, #1
 800412e:	6013      	str	r3, [r2, #0]
 8004130:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004134:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004138:	fa93 f3a3 	rbit	r3, r3
 800413c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800413e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004140:	fab3 f383 	clz	r3, r3
 8004144:	b2db      	uxtb	r3, r3
 8004146:	461a      	mov	r2, r3
 8004148:	4b5d      	ldr	r3, [pc, #372]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800414a:	4413      	add	r3, r2
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	461a      	mov	r2, r3
 8004150:	2300      	movs	r3, #0
 8004152:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004154:	4a58      	ldr	r2, [pc, #352]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004156:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004158:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800415a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800415c:	f003 0301 	and.w	r3, r3, #1
 8004160:	2b00      	cmp	r3, #0
 8004162:	d045      	beq.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004164:	f7fc ff78 	bl	8001058 <HAL_GetTick>
 8004168:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800416a:	e00a      	b.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800416c:	f7fc ff74 	bl	8001058 <HAL_GetTick>
 8004170:	4602      	mov	r2, r0
 8004172:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	f241 3288 	movw	r2, #5000	; 0x1388
 800417a:	4293      	cmp	r3, r2
 800417c:	d901      	bls.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800417e:	2303      	movs	r3, #3
 8004180:	e095      	b.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x256>
 8004182:	2302      	movs	r3, #2
 8004184:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004188:	fa93 f3a3 	rbit	r3, r3
 800418c:	627b      	str	r3, [r7, #36]	; 0x24
 800418e:	2302      	movs	r3, #2
 8004190:	623b      	str	r3, [r7, #32]
 8004192:	6a3b      	ldr	r3, [r7, #32]
 8004194:	fa93 f3a3 	rbit	r3, r3
 8004198:	61fb      	str	r3, [r7, #28]
  return result;
 800419a:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800419c:	fab3 f383 	clz	r3, r3
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	095b      	lsrs	r3, r3, #5
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	f043 0302 	orr.w	r3, r3, #2
 80041aa:	b2db      	uxtb	r3, r3
 80041ac:	2b02      	cmp	r3, #2
 80041ae:	d102      	bne.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80041b0:	4b41      	ldr	r3, [pc, #260]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041b2:	6a1b      	ldr	r3, [r3, #32]
 80041b4:	e007      	b.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80041b6:	2302      	movs	r3, #2
 80041b8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ba:	69bb      	ldr	r3, [r7, #24]
 80041bc:	fa93 f3a3 	rbit	r3, r3
 80041c0:	617b      	str	r3, [r7, #20]
 80041c2:	4b3d      	ldr	r3, [pc, #244]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c6:	2202      	movs	r2, #2
 80041c8:	613a      	str	r2, [r7, #16]
 80041ca:	693a      	ldr	r2, [r7, #16]
 80041cc:	fa92 f2a2 	rbit	r2, r2
 80041d0:	60fa      	str	r2, [r7, #12]
  return result;
 80041d2:	68fa      	ldr	r2, [r7, #12]
 80041d4:	fab2 f282 	clz	r2, r2
 80041d8:	b2d2      	uxtb	r2, r2
 80041da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041de:	b2d2      	uxtb	r2, r2
 80041e0:	f002 021f 	and.w	r2, r2, #31
 80041e4:	2101      	movs	r1, #1
 80041e6:	fa01 f202 	lsl.w	r2, r1, r2
 80041ea:	4013      	ands	r3, r2
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d0bd      	beq.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80041f0:	4b31      	ldr	r3, [pc, #196]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041f2:	6a1b      	ldr	r3, [r3, #32]
 80041f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	492e      	ldr	r1, [pc, #184]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041fe:	4313      	orrs	r3, r2
 8004200:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004202:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004206:	2b01      	cmp	r3, #1
 8004208:	d105      	bne.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800420a:	4b2b      	ldr	r3, [pc, #172]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800420c:	69db      	ldr	r3, [r3, #28]
 800420e:	4a2a      	ldr	r2, [pc, #168]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004210:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004214:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 0301 	and.w	r3, r3, #1
 800421e:	2b00      	cmp	r3, #0
 8004220:	d008      	beq.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004222:	4b25      	ldr	r3, [pc, #148]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004226:	f023 0203 	bic.w	r2, r3, #3
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	4922      	ldr	r1, [pc, #136]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004230:	4313      	orrs	r3, r2
 8004232:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 0320 	and.w	r3, r3, #32
 800423c:	2b00      	cmp	r3, #0
 800423e:	d008      	beq.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004240:	4b1d      	ldr	r3, [pc, #116]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004244:	f023 0210 	bic.w	r2, r3, #16
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	491a      	ldr	r1, [pc, #104]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800424e:	4313      	orrs	r3, r2
 8004250:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800425a:	2b00      	cmp	r3, #0
 800425c:	d008      	beq.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800425e:	4b16      	ldr	r3, [pc, #88]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004262:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	691b      	ldr	r3, [r3, #16]
 800426a:	4913      	ldr	r1, [pc, #76]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800426c:	4313      	orrs	r3, r2
 800426e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004278:	2b00      	cmp	r3, #0
 800427a:	d008      	beq.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800427c:	4b0e      	ldr	r3, [pc, #56]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800427e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004280:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	695b      	ldr	r3, [r3, #20]
 8004288:	490b      	ldr	r1, [pc, #44]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800428a:	4313      	orrs	r3, r2
 800428c:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004296:	2b00      	cmp	r3, #0
 8004298:	d008      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800429a:	4b07      	ldr	r3, [pc, #28]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800429c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800429e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	699b      	ldr	r3, [r3, #24]
 80042a6:	4904      	ldr	r1, [pc, #16]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042a8:	4313      	orrs	r3, r2
 80042aa:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80042ac:	2300      	movs	r3, #0
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3748      	adds	r7, #72	; 0x48
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	bf00      	nop
 80042b8:	40021000 	.word	0x40021000
 80042bc:	40007000 	.word	0x40007000
 80042c0:	10908100 	.word	0x10908100

080042c4 <HAL_RTC_Init>:
  *         in the RTC_InitTypeDef structure and initialize the associated handle.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b082      	sub	sp, #8
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d101      	bne.n	80042d6 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e083      	b.n	80043de <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	7f5b      	ldrb	r3, [r3, #29]
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d105      	bne.n	80042ec <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2200      	movs	r2, #0
 80042e4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f7fc fd24 	bl	8000d34 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2202      	movs	r2, #2
 80042f0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	22ca      	movs	r2, #202	; 0xca
 80042f8:	625a      	str	r2, [r3, #36]	; 0x24
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	2253      	movs	r2, #83	; 0x53
 8004300:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f000 fb13 	bl	800492e <RTC_EnterInitMode>
 8004308:	4603      	mov	r3, r0
 800430a:	2b00      	cmp	r3, #0
 800430c:	d008      	beq.n	8004320 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	22ff      	movs	r2, #255	; 0xff
 8004314:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2204      	movs	r2, #4
 800431a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	e05e      	b.n	80043de <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	687a      	ldr	r2, [r7, #4]
 8004328:	6812      	ldr	r2, [r2, #0]
 800432a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800432e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004332:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	6899      	ldr	r1, [r3, #8]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	685a      	ldr	r2, [r3, #4]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	691b      	ldr	r3, [r3, #16]
 8004342:	431a      	orrs	r2, r3
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	695b      	ldr	r3, [r3, #20]
 8004348:	431a      	orrs	r2, r3
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	430a      	orrs	r2, r1
 8004350:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	68d2      	ldr	r2, [r2, #12]
 800435a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	6919      	ldr	r1, [r3, #16]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	041a      	lsls	r2, r3, #16
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	430a      	orrs	r2, r1
 800436e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	68da      	ldr	r2, [r3, #12]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800437e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	f003 0320 	and.w	r3, r3, #32
 800438a:	2b00      	cmp	r3, #0
 800438c:	d10e      	bne.n	80043ac <HAL_RTC_Init+0xe8>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f000 faa5 	bl	80048de <HAL_RTC_WaitForSynchro>
 8004394:	4603      	mov	r3, r0
 8004396:	2b00      	cmp	r3, #0
 8004398:	d008      	beq.n	80043ac <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	22ff      	movs	r2, #255	; 0xff
 80043a0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2204      	movs	r2, #4
 80043a6:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	e018      	b.n	80043de <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80043ba:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	699a      	ldr	r2, [r3, #24]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	430a      	orrs	r2, r1
 80043cc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	22ff      	movs	r2, #255	; 0xff
 80043d4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2201      	movs	r2, #1
 80043da:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80043dc:	2300      	movs	r3, #0
  }
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3708      	adds	r7, #8
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}

080043e6 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80043e6:	b590      	push	{r4, r7, lr}
 80043e8:	b087      	sub	sp, #28
 80043ea:	af00      	add	r7, sp, #0
 80043ec:	60f8      	str	r0, [r7, #12]
 80043ee:	60b9      	str	r1, [r7, #8]
 80043f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80043f2:	2300      	movs	r3, #0
 80043f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	7f1b      	ldrb	r3, [r3, #28]
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d101      	bne.n	8004402 <HAL_RTC_SetTime+0x1c>
 80043fe:	2302      	movs	r3, #2
 8004400:	e0aa      	b.n	8004558 <HAL_RTC_SetTime+0x172>
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2201      	movs	r2, #1
 8004406:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2202      	movs	r2, #2
 800440c:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d126      	bne.n	8004462 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800441e:	2b00      	cmp	r3, #0
 8004420:	d102      	bne.n	8004428 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	2200      	movs	r2, #0
 8004426:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	781b      	ldrb	r3, [r3, #0]
 800442c:	4618      	mov	r0, r3
 800442e:	f000 faaa 	bl	8004986 <RTC_ByteToBcd2>
 8004432:	4603      	mov	r3, r0
 8004434:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	785b      	ldrb	r3, [r3, #1]
 800443a:	4618      	mov	r0, r3
 800443c:	f000 faa3 	bl	8004986 <RTC_ByteToBcd2>
 8004440:	4603      	mov	r3, r0
 8004442:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004444:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	789b      	ldrb	r3, [r3, #2]
 800444a:	4618      	mov	r0, r3
 800444c:	f000 fa9b 	bl	8004986 <RTC_ByteToBcd2>
 8004450:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004452:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	78db      	ldrb	r3, [r3, #3]
 800445a:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800445c:	4313      	orrs	r3, r2
 800445e:	617b      	str	r3, [r7, #20]
 8004460:	e018      	b.n	8004494 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800446c:	2b00      	cmp	r3, #0
 800446e:	d102      	bne.n	8004476 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	2200      	movs	r2, #0
 8004474:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	785b      	ldrb	r3, [r3, #1]
 8004480:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004482:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8004484:	68ba      	ldr	r2, [r7, #8]
 8004486:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004488:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	78db      	ldrb	r3, [r3, #3]
 800448e:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004490:	4313      	orrs	r3, r2
 8004492:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	22ca      	movs	r2, #202	; 0xca
 800449a:	625a      	str	r2, [r3, #36]	; 0x24
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	2253      	movs	r2, #83	; 0x53
 80044a2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80044a4:	68f8      	ldr	r0, [r7, #12]
 80044a6:	f000 fa42 	bl	800492e <RTC_EnterInitMode>
 80044aa:	4603      	mov	r3, r0
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d00b      	beq.n	80044c8 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	22ff      	movs	r2, #255	; 0xff
 80044b6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2204      	movs	r2, #4
 80044bc:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2200      	movs	r2, #0
 80044c2:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	e047      	b.n	8004558 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80044d2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80044d6:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	689a      	ldr	r2, [r3, #8]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80044e6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	6899      	ldr	r1, [r3, #8]
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	68da      	ldr	r2, [r3, #12]
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	691b      	ldr	r3, [r3, #16]
 80044f6:	431a      	orrs	r2, r3
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	430a      	orrs	r2, r1
 80044fe:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	68da      	ldr	r2, [r3, #12]
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800450e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0U, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	f003 0320 	and.w	r3, r3, #32
 800451a:	2b00      	cmp	r3, #0
 800451c:	d111      	bne.n	8004542 <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800451e:	68f8      	ldr	r0, [r7, #12]
 8004520:	f000 f9dd 	bl	80048de <HAL_RTC_WaitForSynchro>
 8004524:	4603      	mov	r3, r0
 8004526:	2b00      	cmp	r3, #0
 8004528:	d00b      	beq.n	8004542 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	22ff      	movs	r2, #255	; 0xff
 8004530:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2204      	movs	r2, #4
 8004536:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2200      	movs	r2, #0
 800453c:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e00a      	b.n	8004558 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	22ff      	movs	r2, #255	; 0xff
 8004548:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2201      	movs	r2, #1
 800454e:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2200      	movs	r2, #0
 8004554:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8004556:	2300      	movs	r3, #0
  }
}
 8004558:	4618      	mov	r0, r3
 800455a:	371c      	adds	r7, #28
 800455c:	46bd      	mov	sp, r7
 800455e:	bd90      	pop	{r4, r7, pc}

08004560 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004560:	b590      	push	{r4, r7, lr}
 8004562:	b087      	sub	sp, #28
 8004564:	af00      	add	r7, sp, #0
 8004566:	60f8      	str	r0, [r7, #12]
 8004568:	60b9      	str	r1, [r7, #8]
 800456a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800456c:	2300      	movs	r3, #0
 800456e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	7f1b      	ldrb	r3, [r3, #28]
 8004574:	2b01      	cmp	r3, #1
 8004576:	d101      	bne.n	800457c <HAL_RTC_SetDate+0x1c>
 8004578:	2302      	movs	r3, #2
 800457a:	e094      	b.n	80046a6 <HAL_RTC_SetDate+0x146>
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2201      	movs	r2, #1
 8004580:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2202      	movs	r2, #2
 8004586:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d10e      	bne.n	80045ac <HAL_RTC_SetDate+0x4c>
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	785b      	ldrb	r3, [r3, #1]
 8004592:	f003 0310 	and.w	r3, r3, #16
 8004596:	2b00      	cmp	r3, #0
 8004598:	d008      	beq.n	80045ac <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	785b      	ldrb	r3, [r3, #1]
 800459e:	f023 0310 	bic.w	r3, r3, #16
 80045a2:	b2db      	uxtb	r3, r3
 80045a4:	330a      	adds	r3, #10
 80045a6:	b2da      	uxtb	r2, r3
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d11c      	bne.n	80045ec <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	78db      	ldrb	r3, [r3, #3]
 80045b6:	4618      	mov	r0, r3
 80045b8:	f000 f9e5 	bl	8004986 <RTC_ByteToBcd2>
 80045bc:	4603      	mov	r3, r0
 80045be:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	785b      	ldrb	r3, [r3, #1]
 80045c4:	4618      	mov	r0, r3
 80045c6:	f000 f9de 	bl	8004986 <RTC_ByteToBcd2>
 80045ca:	4603      	mov	r3, r0
 80045cc:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80045ce:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	789b      	ldrb	r3, [r3, #2]
 80045d4:	4618      	mov	r0, r3
 80045d6:	f000 f9d6 	bl	8004986 <RTC_ByteToBcd2>
 80045da:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80045dc:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	781b      	ldrb	r3, [r3, #0]
 80045e4:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80045e6:	4313      	orrs	r3, r2
 80045e8:	617b      	str	r3, [r7, #20]
 80045ea:	e00e      	b.n	800460a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	78db      	ldrb	r3, [r3, #3]
 80045f0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	785b      	ldrb	r3, [r3, #1]
 80045f6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80045f8:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80045fa:	68ba      	ldr	r2, [r7, #8]
 80045fc:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80045fe:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	781b      	ldrb	r3, [r3, #0]
 8004604:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004606:	4313      	orrs	r3, r2
 8004608:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	22ca      	movs	r2, #202	; 0xca
 8004610:	625a      	str	r2, [r3, #36]	; 0x24
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	2253      	movs	r2, #83	; 0x53
 8004618:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800461a:	68f8      	ldr	r0, [r7, #12]
 800461c:	f000 f987 	bl	800492e <RTC_EnterInitMode>
 8004620:	4603      	mov	r3, r0
 8004622:	2b00      	cmp	r3, #0
 8004624:	d00b      	beq.n	800463e <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	22ff      	movs	r2, #255	; 0xff
 800462c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2204      	movs	r2, #4
 8004632:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2200      	movs	r2, #0
 8004638:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e033      	b.n	80046a6 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004648:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800464c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	68da      	ldr	r2, [r3, #12]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800465c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0U, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	f003 0320 	and.w	r3, r3, #32
 8004668:	2b00      	cmp	r3, #0
 800466a:	d111      	bne.n	8004690 <HAL_RTC_SetDate+0x130>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800466c:	68f8      	ldr	r0, [r7, #12]
 800466e:	f000 f936 	bl	80048de <HAL_RTC_WaitForSynchro>
 8004672:	4603      	mov	r3, r0
 8004674:	2b00      	cmp	r3, #0
 8004676:	d00b      	beq.n	8004690 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	22ff      	movs	r2, #255	; 0xff
 800467e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2204      	movs	r2, #4
 8004684:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2200      	movs	r2, #0
 800468a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	e00a      	b.n	80046a6 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	22ff      	movs	r2, #255	; 0xff
 8004696:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2201      	movs	r2, #1
 800469c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2200      	movs	r2, #0
 80046a2:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80046a4:	2300      	movs	r3, #0
  }
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	371c      	adds	r7, #28
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd90      	pop	{r4, r7, pc}

080046ae <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80046ae:	b590      	push	{r4, r7, lr}
 80046b0:	b089      	sub	sp, #36	; 0x24
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	60f8      	str	r0, [r7, #12]
 80046b6:	60b9      	str	r1, [r7, #8]
 80046b8:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 80046ba:	2300      	movs	r3, #0
 80046bc:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 80046be:	2300      	movs	r3, #0
 80046c0:	61fb      	str	r3, [r7, #28]
 80046c2:	2300      	movs	r3, #0
 80046c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	7f1b      	ldrb	r3, [r3, #28]
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d101      	bne.n	80046d2 <HAL_RTC_SetAlarm+0x24>
 80046ce:	2302      	movs	r3, #2
 80046d0:	e101      	b.n	80048d6 <HAL_RTC_SetAlarm+0x228>
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2201      	movs	r2, #1
 80046d6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2202      	movs	r2, #2
 80046dc:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d137      	bne.n	8004754 <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d102      	bne.n	80046f8 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	2200      	movs	r2, #0
 80046f6:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	781b      	ldrb	r3, [r3, #0]
 80046fc:	4618      	mov	r0, r3
 80046fe:	f000 f942 	bl	8004986 <RTC_ByteToBcd2>
 8004702:	4603      	mov	r3, r0
 8004704:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	785b      	ldrb	r3, [r3, #1]
 800470a:	4618      	mov	r0, r3
 800470c:	f000 f93b 	bl	8004986 <RTC_ByteToBcd2>
 8004710:	4603      	mov	r3, r0
 8004712:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8004714:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	789b      	ldrb	r3, [r3, #2]
 800471a:	4618      	mov	r0, r3
 800471c:	f000 f933 	bl	8004986 <RTC_ByteToBcd2>
 8004720:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8004722:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	78db      	ldrb	r3, [r3, #3]
 800472a:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800472c:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004736:	4618      	mov	r0, r3
 8004738:	f000 f925 	bl	8004986 <RTC_ByteToBcd2>
 800473c:	4603      	mov	r3, r0
 800473e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8004740:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8004748:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800474e:	4313      	orrs	r3, r2
 8004750:	61fb      	str	r3, [r7, #28]
 8004752:	e023      	b.n	800479c <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800475e:	2b00      	cmp	r3, #0
 8004760:	d102      	bne.n	8004768 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	2200      	movs	r2, #0
 8004766:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	781b      	ldrb	r3, [r3, #0]
 800476c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	785b      	ldrb	r3, [r3, #1]
 8004772:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8004774:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8004776:	68ba      	ldr	r2, [r7, #8]
 8004778:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800477a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	78db      	ldrb	r3, [r3, #3]
 8004780:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8004782:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	f893 3020 	ldrb.w	r3, [r3, #32]
 800478a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800478c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8004792:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8004798:	4313      	orrs	r3, r2
 800479a:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	685a      	ldr	r2, [r3, #4]
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	699b      	ldr	r3, [r3, #24]
 80047a4:	4313      	orrs	r3, r2
 80047a6:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	22ca      	movs	r2, #202	; 0xca
 80047ae:	625a      	str	r2, [r3, #36]	; 0x24
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	2253      	movs	r2, #83	; 0x53
 80047b6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047c0:	d13f      	bne.n	8004842 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	689a      	ldr	r2, [r3, #8]
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80047d0:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	689a      	ldr	r2, [r3, #8]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80047e0:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 80047e2:	f7fc fc39 	bl	8001058 <HAL_GetTick>
 80047e6:	61b8      	str	r0, [r7, #24]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 80047e8:	e013      	b.n	8004812 <HAL_RTC_SetAlarm+0x164>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80047ea:	f7fc fc35 	bl	8001058 <HAL_GetTick>
 80047ee:	4602      	mov	r2, r0
 80047f0:	69bb      	ldr	r3, [r7, #24]
 80047f2:	1ad3      	subs	r3, r2, r3
 80047f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80047f8:	d90b      	bls.n	8004812 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	22ff      	movs	r2, #255	; 0xff
 8004800:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2203      	movs	r2, #3
 8004806:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2200      	movs	r2, #0
 800480c:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800480e:	2303      	movs	r3, #3
 8004810:	e061      	b.n	80048d6 <HAL_RTC_SetAlarm+0x228>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	f003 0301 	and.w	r3, r3, #1
 800481c:	2b00      	cmp	r3, #0
 800481e:	d0e4      	beq.n	80047ea <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	69fa      	ldr	r2, [r7, #28]
 8004826:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	697a      	ldr	r2, [r7, #20]
 800482e:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	689a      	ldr	r2, [r3, #8]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800483e:	609a      	str	r2, [r3, #8]
 8004840:	e03e      	b.n	80048c0 <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	689a      	ldr	r2, [r3, #8]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004850:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	689a      	ldr	r2, [r3, #8]
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004860:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 8004862:	f7fc fbf9 	bl	8001058 <HAL_GetTick>
 8004866:	61b8      	str	r0, [r7, #24]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8004868:	e013      	b.n	8004892 <HAL_RTC_SetAlarm+0x1e4>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800486a:	f7fc fbf5 	bl	8001058 <HAL_GetTick>
 800486e:	4602      	mov	r2, r0
 8004870:	69bb      	ldr	r3, [r7, #24]
 8004872:	1ad3      	subs	r3, r2, r3
 8004874:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004878:	d90b      	bls.n	8004892 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	22ff      	movs	r2, #255	; 0xff
 8004880:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2203      	movs	r2, #3
 8004886:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2200      	movs	r2, #0
 800488c:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800488e:	2303      	movs	r3, #3
 8004890:	e021      	b.n	80048d6 <HAL_RTC_SetAlarm+0x228>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	68db      	ldr	r3, [r3, #12]
 8004898:	f003 0302 	and.w	r3, r3, #2
 800489c:	2b00      	cmp	r3, #0
 800489e:	d0e4      	beq.n	800486a <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	69fa      	ldr	r2, [r7, #28]
 80048a6:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	697a      	ldr	r2, [r7, #20]
 80048ae:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	689a      	ldr	r2, [r3, #8]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048be:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	22ff      	movs	r2, #255	; 0xff
 80048c6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2201      	movs	r2, #1
 80048cc:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2200      	movs	r2, #0
 80048d2:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80048d4:	2300      	movs	r3, #0
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3724      	adds	r7, #36	; 0x24
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd90      	pop	{r4, r7, pc}

080048de <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80048de:	b580      	push	{r7, lr}
 80048e0:	b084      	sub	sp, #16
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80048e6:	2300      	movs	r3, #0
 80048e8:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	68da      	ldr	r2, [r3, #12]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80048f8:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80048fa:	f7fc fbad 	bl	8001058 <HAL_GetTick>
 80048fe:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004900:	e009      	b.n	8004916 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004902:	f7fc fba9 	bl	8001058 <HAL_GetTick>
 8004906:	4602      	mov	r2, r0
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	1ad3      	subs	r3, r2, r3
 800490c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004910:	d901      	bls.n	8004916 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004912:	2303      	movs	r3, #3
 8004914:	e007      	b.n	8004926 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	f003 0320 	and.w	r3, r3, #32
 8004920:	2b00      	cmp	r3, #0
 8004922:	d0ee      	beq.n	8004902 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8004924:	2300      	movs	r3, #0
}
 8004926:	4618      	mov	r0, r3
 8004928:	3710      	adds	r7, #16
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}

0800492e <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - HAL_OK : RTC is in Init mode
  *          - HAL_TIMEOUT : RTC is not in Init mode and in Timeout
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800492e:	b580      	push	{r7, lr}
 8004930:	b084      	sub	sp, #16
 8004932:	af00      	add	r7, sp, #0
 8004934:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004936:	2300      	movs	r3, #0
 8004938:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	68db      	ldr	r3, [r3, #12]
 8004940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004944:	2b00      	cmp	r3, #0
 8004946:	d119      	bne.n	800497c <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f04f 32ff 	mov.w	r2, #4294967295
 8004950:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004952:	f7fc fb81 	bl	8001058 <HAL_GetTick>
 8004956:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004958:	e009      	b.n	800496e <RTC_EnterInitMode+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800495a:	f7fc fb7d 	bl	8001058 <HAL_GetTick>
 800495e:	4602      	mov	r2, r0
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	1ad3      	subs	r3, r2, r3
 8004964:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004968:	d901      	bls.n	800496e <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800496a:	2303      	movs	r3, #3
 800496c:	e007      	b.n	800497e <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004978:	2b00      	cmp	r3, #0
 800497a:	d0ee      	beq.n	800495a <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800497c:	2300      	movs	r3, #0
}
 800497e:	4618      	mov	r0, r3
 8004980:	3710      	adds	r7, #16
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}

08004986 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004986:	b480      	push	{r7}
 8004988:	b085      	sub	sp, #20
 800498a:	af00      	add	r7, sp, #0
 800498c:	4603      	mov	r3, r0
 800498e:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004990:	2300      	movs	r3, #0
 8004992:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8004994:	e005      	b.n	80049a2 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	3301      	adds	r3, #1
 800499a:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800499c:	79fb      	ldrb	r3, [r7, #7]
 800499e:	3b0a      	subs	r3, #10
 80049a0:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 80049a2:	79fb      	ldrb	r3, [r7, #7]
 80049a4:	2b09      	cmp	r3, #9
 80049a6:	d8f6      	bhi.n	8004996 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	b2db      	uxtb	r3, r3
 80049ac:	011b      	lsls	r3, r3, #4
 80049ae:	b2da      	uxtb	r2, r3
 80049b0:	79fb      	ldrb	r3, [r7, #7]
 80049b2:	4313      	orrs	r3, r2
 80049b4:	b2db      	uxtb	r3, r3
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3714      	adds	r7, #20
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr

080049c2 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80049c2:	b580      	push	{r7, lr}
 80049c4:	b084      	sub	sp, #16
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d101      	bne.n	80049d4 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	e07c      	b.n	8004ace <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2200      	movs	r2, #0
 80049d8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d106      	bne.n	80049f4 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2200      	movs	r2, #0
 80049ea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f7fc f9c6 	bl	8000d80 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2202      	movs	r2, #2
 80049f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a0a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a14:	d902      	bls.n	8004a1c <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004a16:	2300      	movs	r3, #0
 8004a18:	60fb      	str	r3, [r7, #12]
 8004a1a:	e002      	b.n	8004a22 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004a1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004a20:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	68db      	ldr	r3, [r3, #12]
 8004a26:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004a2a:	d007      	beq.n	8004a3c <HAL_SPI_Init+0x7a>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a34:	d002      	beq.n	8004a3c <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d10b      	bne.n	8004a5c <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a4c:	d903      	bls.n	8004a56 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2202      	movs	r2, #2
 8004a52:	631a      	str	r2, [r3, #48]	; 0x30
 8004a54:	e002      	b.n	8004a5c <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2201      	movs	r2, #1
 8004a5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	685a      	ldr	r2, [r3, #4]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	431a      	orrs	r2, r3
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	691b      	ldr	r3, [r3, #16]
 8004a6a:	431a      	orrs	r2, r3
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	695b      	ldr	r3, [r3, #20]
 8004a70:	431a      	orrs	r2, r3
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	699b      	ldr	r3, [r3, #24]
 8004a76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a7a:	431a      	orrs	r2, r3
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	69db      	ldr	r3, [r3, #28]
 8004a80:	431a      	orrs	r2, r3
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a1b      	ldr	r3, [r3, #32]
 8004a86:	ea42 0103 	orr.w	r1, r2, r3
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	430a      	orrs	r2, r1
 8004a94:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	699b      	ldr	r3, [r3, #24]
 8004a9a:	0c1b      	lsrs	r3, r3, #16
 8004a9c:	f003 0204 	and.w	r2, r3, #4
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa4:	431a      	orrs	r2, r3
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aaa:	431a      	orrs	r2, r3
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	ea42 0103 	orr.w	r1, r2, r3
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	68fa      	ldr	r2, [r7, #12]
 8004aba:	430a      	orrs	r2, r1
 8004abc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004acc:	2300      	movs	r3, #0
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3710      	adds	r7, #16
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}

08004ad6 <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8004ad6:	b580      	push	{r7, lr}
 8004ad8:	b082      	sub	sp, #8
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d101      	bne.n	8004ae8 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	e03c      	b.n	8004b62 <HAL_USART_Init+0x8c>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8004aee:	b2db      	uxtb	r3, r3
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d106      	bne.n	8004b02 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2200      	movs	r2, #0
 8004af8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	f7fc f99f 	bl	8000e40 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2202      	movs	r2, #2
 8004b06:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f022 0201 	bic.w	r2, r2, #1
 8004b18:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f000 f85c 	bl	8004bd8 <USART_SetConfig>
 8004b20:	4603      	mov	r3, r0
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	d101      	bne.n	8004b2a <HAL_USART_Init+0x54>
  {
    return HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	e01b      	b.n	8004b62 <HAL_USART_Init+0x8c>

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.
  */
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	685a      	ldr	r2, [r3, #4]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004b38:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	689a      	ldr	r2, [r3, #8]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b48:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f042 0201 	orr.w	r2, r2, #1
 8004b58:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f000 f942 	bl	8004de4 <USART_CheckIdleState>
 8004b60:	4603      	mov	r3, r0
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	3708      	adds	r7, #8
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}

08004b6a <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 8004b6a:	b580      	push	{r7, lr}
 8004b6c:	b084      	sub	sp, #16
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	60f8      	str	r0, [r7, #12]
 8004b72:	60b9      	str	r1, [r7, #8]
 8004b74:	603b      	str	r3, [r7, #0]
 8004b76:	4613      	mov	r3, r2
 8004b78:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8004b7a:	e018      	b.n	8004bae <USART_WaitOnFlagUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b7c:	69bb      	ldr	r3, [r7, #24]
 8004b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b82:	d014      	beq.n	8004bae <USART_WaitOnFlagUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b84:	f7fc fa68 	bl	8001058 <HAL_GetTick>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	1ad3      	subs	r3, r2, r3
 8004b8e:	69ba      	ldr	r2, [r7, #24]
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d302      	bcc.n	8004b9a <USART_WaitOnFlagUntilTimeout+0x30>
 8004b94:	69bb      	ldr	r3, [r7, #24]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d109      	bne.n	8004bae <USART_WaitOnFlagUntilTimeout+0x44>
      {
        husart->State = HAL_USART_STATE_READY;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

        return HAL_TIMEOUT;
 8004baa:	2303      	movs	r3, #3
 8004bac:	e00f      	b.n	8004bce <USART_WaitOnFlagUntilTimeout+0x64>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	69da      	ldr	r2, [r3, #28]
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	4013      	ands	r3, r2
 8004bb8:	68ba      	ldr	r2, [r7, #8]
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	bf0c      	ite	eq
 8004bbe:	2301      	moveq	r3, #1
 8004bc0:	2300      	movne	r3, #0
 8004bc2:	b2db      	uxtb	r3, r3
 8004bc4:	461a      	mov	r2, r3
 8004bc6:	79fb      	ldrb	r3, [r7, #7]
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d0d7      	beq.n	8004b7c <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004bcc:	2300      	movs	r3, #0
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3710      	adds	r7, #16
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}
	...

08004bd8 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b088      	sub	sp, #32
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 8004be0:	2300      	movs	r3, #0
 8004be2:	77bb      	strb	r3, [r7, #30]
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 8004be4:	2300      	movs	r3, #0
 8004be6:	61bb      	str	r3, [r7, #24]
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	689a      	ldr	r2, [r3, #8]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	691b      	ldr	r3, [r3, #16]
 8004bf0:	431a      	orrs	r2, r3
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	695b      	ldr	r3, [r3, #20]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bfc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	4b72      	ldr	r3, [pc, #456]	; (8004dd0 <USART_SetConfig+0x1f8>)
 8004c06:	4013      	ands	r3, r2
 8004c08:	687a      	ldr	r2, [r7, #4]
 8004c0a:	6812      	ldr	r2, [r2, #0]
 8004c0c:	6979      	ldr	r1, [r7, #20]
 8004c0e:	430b      	orrs	r3, r1
 8004c10:	6013      	str	r3, [r2, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL and STOP bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 8004c12:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004c16:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6a1b      	ldr	r3, [r3, #32]
 8004c1c:	697a      	ldr	r2, [r7, #20]
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	617b      	str	r3, [r7, #20]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	699a      	ldr	r2, [r3, #24]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	69db      	ldr	r3, [r3, #28]
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	697a      	ldr	r2, [r7, #20]
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.StopBits;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	68db      	ldr	r3, [r3, #12]
 8004c36:	697a      	ldr	r2, [r7, #20]
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	697a      	ldr	r2, [r7, #20]
 8004c4c:	430a      	orrs	r2, r1
 8004c4e:	605a      	str	r2, [r3, #4]


  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a5f      	ldr	r2, [pc, #380]	; (8004dd4 <USART_SetConfig+0x1fc>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d120      	bne.n	8004c9c <USART_SetConfig+0xc4>
 8004c5a:	4b5f      	ldr	r3, [pc, #380]	; (8004dd8 <USART_SetConfig+0x200>)
 8004c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c5e:	f003 0303 	and.w	r3, r3, #3
 8004c62:	2b03      	cmp	r3, #3
 8004c64:	d816      	bhi.n	8004c94 <USART_SetConfig+0xbc>
 8004c66:	a201      	add	r2, pc, #4	; (adr r2, 8004c6c <USART_SetConfig+0x94>)
 8004c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c6c:	08004c7d 	.word	0x08004c7d
 8004c70:	08004c89 	.word	0x08004c89
 8004c74:	08004c8f 	.word	0x08004c8f
 8004c78:	08004c83 	.word	0x08004c83
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	77fb      	strb	r3, [r7, #31]
 8004c80:	e01e      	b.n	8004cc0 <USART_SetConfig+0xe8>
 8004c82:	2302      	movs	r3, #2
 8004c84:	77fb      	strb	r3, [r7, #31]
 8004c86:	e01b      	b.n	8004cc0 <USART_SetConfig+0xe8>
 8004c88:	2304      	movs	r3, #4
 8004c8a:	77fb      	strb	r3, [r7, #31]
 8004c8c:	e018      	b.n	8004cc0 <USART_SetConfig+0xe8>
 8004c8e:	2308      	movs	r3, #8
 8004c90:	77fb      	strb	r3, [r7, #31]
 8004c92:	e015      	b.n	8004cc0 <USART_SetConfig+0xe8>
 8004c94:	2310      	movs	r3, #16
 8004c96:	77fb      	strb	r3, [r7, #31]
 8004c98:	bf00      	nop
 8004c9a:	e011      	b.n	8004cc0 <USART_SetConfig+0xe8>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a4e      	ldr	r2, [pc, #312]	; (8004ddc <USART_SetConfig+0x204>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d102      	bne.n	8004cac <USART_SetConfig+0xd4>
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	77fb      	strb	r3, [r7, #31]
 8004caa:	e009      	b.n	8004cc0 <USART_SetConfig+0xe8>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a4b      	ldr	r2, [pc, #300]	; (8004de0 <USART_SetConfig+0x208>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d102      	bne.n	8004cbc <USART_SetConfig+0xe4>
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	77fb      	strb	r3, [r7, #31]
 8004cba:	e001      	b.n	8004cc0 <USART_SetConfig+0xe8>
 8004cbc:	2310      	movs	r3, #16
 8004cbe:	77fb      	strb	r3, [r7, #31]

  switch (clocksource)
 8004cc0:	7ffb      	ldrb	r3, [r7, #31]
 8004cc2:	2b08      	cmp	r3, #8
 8004cc4:	d859      	bhi.n	8004d7a <USART_SetConfig+0x1a2>
 8004cc6:	a201      	add	r2, pc, #4	; (adr r2, 8004ccc <USART_SetConfig+0xf4>)
 8004cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ccc:	08004cf1 	.word	0x08004cf1
 8004cd0:	08004d0f 	.word	0x08004d0f
 8004cd4:	08004d2d 	.word	0x08004d2d
 8004cd8:	08004d7b 	.word	0x08004d7b
 8004cdc:	08004d47 	.word	0x08004d47
 8004ce0:	08004d7b 	.word	0x08004d7b
 8004ce4:	08004d7b 	.word	0x08004d7b
 8004ce8:	08004d7b 	.word	0x08004d7b
 8004cec:	08004d65 	.word	0x08004d65
  {
    case USART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 8004cf0:	f7ff f96e 	bl	8003fd0 <HAL_RCC_GetPCLK1Freq>
 8004cf4:	6138      	str	r0, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	005a      	lsls	r2, r3, #1
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	085b      	lsrs	r3, r3, #1
 8004d00:	441a      	add	r2, r3
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d0a:	61bb      	str	r3, [r7, #24]
      break;
 8004d0c:	e038      	b.n	8004d80 <USART_SetConfig+0x1a8>
    case USART_CLOCKSOURCE_PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 8004d0e:	f7ff f981 	bl	8004014 <HAL_RCC_GetPCLK2Freq>
 8004d12:	6138      	str	r0, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	005a      	lsls	r2, r3, #1
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	085b      	lsrs	r3, r3, #1
 8004d1e:	441a      	add	r2, r3
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d28:	61bb      	str	r3, [r7, #24]
      break;
 8004d2a:	e029      	b.n	8004d80 <USART_SetConfig+0x1a8>
    case USART_CLOCKSOURCE_HSI:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate));
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	085b      	lsrs	r3, r3, #1
 8004d32:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8004d36:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8004d3a:	687a      	ldr	r2, [r7, #4]
 8004d3c:	6852      	ldr	r2, [r2, #4]
 8004d3e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004d42:	61bb      	str	r3, [r7, #24]
      break;
 8004d44:	e01c      	b.n	8004d80 <USART_SetConfig+0x1a8>
    case USART_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 8004d46:	f7ff f8cd 	bl	8003ee4 <HAL_RCC_GetSysClockFreq>
 8004d4a:	6138      	str	r0, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	005a      	lsls	r2, r3, #1
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	085b      	lsrs	r3, r3, #1
 8004d56:	441a      	add	r2, r3
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d60:	61bb      	str	r3, [r7, #24]
      break;
 8004d62:	e00d      	b.n	8004d80 <USART_SetConfig+0x1a8>
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate));
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	085b      	lsrs	r3, r3, #1
 8004d6a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d76:	61bb      	str	r3, [r7, #24]
      break;
 8004d78:	e002      	b.n	8004d80 <USART_SetConfig+0x1a8>
    default:
      ret = HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	77bb      	strb	r3, [r7, #30]
      break;
 8004d7e:	bf00      	nop
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 8004d80:	69bb      	ldr	r3, [r7, #24]
 8004d82:	2b0f      	cmp	r3, #15
 8004d84:	d916      	bls.n	8004db4 <USART_SetConfig+0x1dc>
 8004d86:	69bb      	ldr	r3, [r7, #24]
 8004d88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d8c:	d212      	bcs.n	8004db4 <USART_SetConfig+0x1dc>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d8e:	69bb      	ldr	r3, [r7, #24]
 8004d90:	b29b      	uxth	r3, r3
 8004d92:	f023 030f 	bic.w	r3, r3, #15
 8004d96:	81fb      	strh	r3, [r7, #14]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d98:	69bb      	ldr	r3, [r7, #24]
 8004d9a:	085b      	lsrs	r3, r3, #1
 8004d9c:	b29b      	uxth	r3, r3
 8004d9e:	f003 0307 	and.w	r3, r3, #7
 8004da2:	b29a      	uxth	r2, r3
 8004da4:	89fb      	ldrh	r3, [r7, #14]
 8004da6:	4313      	orrs	r3, r2
 8004da8:	81fb      	strh	r3, [r7, #14]
    husart->Instance->BRR = brrtemp;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	89fa      	ldrh	r2, [r7, #14]
 8004db0:	60da      	str	r2, [r3, #12]
 8004db2:	e001      	b.n	8004db8 <USART_SetConfig+0x1e0>
  }
  else
  {
    ret = HAL_ERROR;
 8004db4:	2301      	movs	r3, #1
 8004db6:	77bb      	strb	r3, [r7, #30]
  }


  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	639a      	str	r2, [r3, #56]	; 0x38
  husart->TxISR   = NULL;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	63da      	str	r2, [r3, #60]	; 0x3c

  return ret;
 8004dc4:	7fbb      	ldrb	r3, [r7, #30]
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3720      	adds	r7, #32
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}
 8004dce:	bf00      	nop
 8004dd0:	efff69f3 	.word	0xefff69f3
 8004dd4:	40013800 	.word	0x40013800
 8004dd8:	40021000 	.word	0x40021000
 8004ddc:	40004400 	.word	0x40004400
 8004de0:	40004800 	.word	0x40004800

08004de4 <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b086      	sub	sp, #24
 8004de8:	af02      	add	r7, sp, #8
 8004dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2200      	movs	r2, #0
 8004df0:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004df2:	f7fc f931 	bl	8001058 <HAL_GetTick>
 8004df6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 0308 	and.w	r3, r3, #8
 8004e02:	2b08      	cmp	r3, #8
 8004e04:	d10e      	bne.n	8004e24 <USART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8004e06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004e0a:	9300      	str	r3, [sp, #0]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	f7ff fea8 	bl	8004b6a <USART_WaitOnFlagUntilTimeout>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d001      	beq.n	8004e24 <USART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e20:	2303      	movs	r3, #3
 8004e22:	e01e      	b.n	8004e62 <USART_CheckIdleState+0x7e>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f003 0304 	and.w	r3, r3, #4
 8004e2e:	2b04      	cmp	r3, #4
 8004e30:	d10e      	bne.n	8004e50 <USART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8004e32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004e36:	9300      	str	r3, [sp, #0]
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f7ff fe92 	bl	8004b6a <USART_WaitOnFlagUntilTimeout>
 8004e46:	4603      	mov	r3, r0
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d001      	beq.n	8004e50 <USART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e4c:	2303      	movs	r3, #3
 8004e4e:	e008      	b.n	8004e62 <USART_CheckIdleState+0x7e>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2201      	movs	r2, #1
 8004e54:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  return HAL_OK;
 8004e60:	2300      	movs	r3, #0
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3710      	adds	r7, #16
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}
	...

08004e6c <__libc_init_array>:
 8004e6c:	b570      	push	{r4, r5, r6, lr}
 8004e6e:	4e0d      	ldr	r6, [pc, #52]	; (8004ea4 <__libc_init_array+0x38>)
 8004e70:	4c0d      	ldr	r4, [pc, #52]	; (8004ea8 <__libc_init_array+0x3c>)
 8004e72:	1ba4      	subs	r4, r4, r6
 8004e74:	10a4      	asrs	r4, r4, #2
 8004e76:	2500      	movs	r5, #0
 8004e78:	42a5      	cmp	r5, r4
 8004e7a:	d109      	bne.n	8004e90 <__libc_init_array+0x24>
 8004e7c:	4e0b      	ldr	r6, [pc, #44]	; (8004eac <__libc_init_array+0x40>)
 8004e7e:	4c0c      	ldr	r4, [pc, #48]	; (8004eb0 <__libc_init_array+0x44>)
 8004e80:	f000 f820 	bl	8004ec4 <_init>
 8004e84:	1ba4      	subs	r4, r4, r6
 8004e86:	10a4      	asrs	r4, r4, #2
 8004e88:	2500      	movs	r5, #0
 8004e8a:	42a5      	cmp	r5, r4
 8004e8c:	d105      	bne.n	8004e9a <__libc_init_array+0x2e>
 8004e8e:	bd70      	pop	{r4, r5, r6, pc}
 8004e90:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004e94:	4798      	blx	r3
 8004e96:	3501      	adds	r5, #1
 8004e98:	e7ee      	b.n	8004e78 <__libc_init_array+0xc>
 8004e9a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004e9e:	4798      	blx	r3
 8004ea0:	3501      	adds	r5, #1
 8004ea2:	e7f2      	b.n	8004e8a <__libc_init_array+0x1e>
 8004ea4:	08004f14 	.word	0x08004f14
 8004ea8:	08004f14 	.word	0x08004f14
 8004eac:	08004f14 	.word	0x08004f14
 8004eb0:	08004f18 	.word	0x08004f18

08004eb4 <memset>:
 8004eb4:	4402      	add	r2, r0
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d100      	bne.n	8004ebe <memset+0xa>
 8004ebc:	4770      	bx	lr
 8004ebe:	f803 1b01 	strb.w	r1, [r3], #1
 8004ec2:	e7f9      	b.n	8004eb8 <memset+0x4>

08004ec4 <_init>:
 8004ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ec6:	bf00      	nop
 8004ec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004eca:	bc08      	pop	{r3}
 8004ecc:	469e      	mov	lr, r3
 8004ece:	4770      	bx	lr

08004ed0 <_fini>:
 8004ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ed2:	bf00      	nop
 8004ed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ed6:	bc08      	pop	{r3}
 8004ed8:	469e      	mov	lr, r3
 8004eda:	4770      	bx	lr
