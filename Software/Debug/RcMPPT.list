
RcMPPT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005dbc  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08005f94  08005f94  00015f94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005fd4  08005fd4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005fd4  08005fd4  00015fd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005fdc  08005fdc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005fdc  08005fdc  00015fdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005fe0  08005fe0  00015fe0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005fe4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000668  2000000c  08005ff0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000674  08005ff0  00020674  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f202  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002e89  00000000  00000000  0003f23e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001c28  00000000  00000000  000420c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001ab0  00000000  00000000  00043cf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002a4bd  00000000  00000000  000457a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001532b  00000000  00000000  0006fc5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0012678c  00000000  00000000  00084f88  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001ab714  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007c68  00000000  00000000  001ab790  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08005f7c 	.word	0x08005f7c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08005f7c 	.word	0x08005f7c

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b972 	b.w	8000514 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	4688      	mov	r8, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14b      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000256:	428a      	cmp	r2, r1
 8000258:	4615      	mov	r5, r2
 800025a:	d967      	bls.n	800032c <__udivmoddi4+0xe4>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0720 	rsb	r7, r2, #32
 8000266:	fa01 f302 	lsl.w	r3, r1, r2
 800026a:	fa20 f707 	lsr.w	r7, r0, r7
 800026e:	4095      	lsls	r5, r2
 8000270:	ea47 0803 	orr.w	r8, r7, r3
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000280:	fa1f fc85 	uxth.w	ip, r5
 8000284:	fb0e 8817 	mls	r8, lr, r7, r8
 8000288:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028c:	fb07 f10c 	mul.w	r1, r7, ip
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18eb      	adds	r3, r5, r3
 8000296:	f107 30ff 	add.w	r0, r7, #4294967295
 800029a:	f080 811b 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8118 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002a4:	3f02      	subs	r7, #2
 80002a6:	442b      	add	r3, r5
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002bc:	45a4      	cmp	ip, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	192c      	adds	r4, r5, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c6:	f080 8107 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002ca:	45a4      	cmp	ip, r4
 80002cc:	f240 8104 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002d0:	3802      	subs	r0, #2
 80002d2:	442c      	add	r4, r5
 80002d4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d8:	eba4 040c 	sub.w	r4, r4, ip
 80002dc:	2700      	movs	r7, #0
 80002de:	b11e      	cbz	r6, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c6 4300 	strd	r4, r3, [r6]
 80002e8:	4639      	mov	r1, r7
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xbe>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80eb 	beq.w	80004ce <__udivmoddi4+0x286>
 80002f8:	2700      	movs	r7, #0
 80002fa:	e9c6 0100 	strd	r0, r1, [r6]
 80002fe:	4638      	mov	r0, r7
 8000300:	4639      	mov	r1, r7
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f783 	clz	r7, r3
 800030a:	2f00      	cmp	r7, #0
 800030c:	d147      	bne.n	800039e <__udivmoddi4+0x156>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd0>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80fa 	bhi.w	800050c <__udivmoddi4+0x2c4>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4698      	mov	r8, r3
 8000322:	2e00      	cmp	r6, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000326:	e9c6 4800 	strd	r4, r8, [r6]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa0>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xe8>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 808f 	bne.w	8000458 <__udivmoddi4+0x210>
 800033a:	1b49      	subs	r1, r1, r5
 800033c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000340:	fa1f f885 	uxth.w	r8, r5
 8000344:	2701      	movs	r7, #1
 8000346:	fbb1 fcfe 	udiv	ip, r1, lr
 800034a:	0c23      	lsrs	r3, r4, #16
 800034c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb08 f10c 	mul.w	r1, r8, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x124>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4299      	cmp	r1, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 800036a:	4684      	mov	ip, r0
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	b2a3      	uxth	r3, r4
 8000370:	fbb1 f0fe 	udiv	r0, r1, lr
 8000374:	fb0e 1410 	mls	r4, lr, r0, r1
 8000378:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800037c:	fb08 f800 	mul.w	r8, r8, r0
 8000380:	45a0      	cmp	r8, r4
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x14c>
 8000384:	192c      	adds	r4, r5, r4
 8000386:	f100 33ff 	add.w	r3, r0, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x14a>
 800038c:	45a0      	cmp	r8, r4
 800038e:	f200 80b6 	bhi.w	80004fe <__udivmoddi4+0x2b6>
 8000392:	4618      	mov	r0, r3
 8000394:	eba4 0408 	sub.w	r4, r4, r8
 8000398:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800039c:	e79f      	b.n	80002de <__udivmoddi4+0x96>
 800039e:	f1c7 0c20 	rsb	ip, r7, #32
 80003a2:	40bb      	lsls	r3, r7
 80003a4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003ac:	fa01 f407 	lsl.w	r4, r1, r7
 80003b0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003b4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003bc:	4325      	orrs	r5, r4
 80003be:	fbb3 f9f8 	udiv	r9, r3, r8
 80003c2:	0c2c      	lsrs	r4, r5, #16
 80003c4:	fb08 3319 	mls	r3, r8, r9, r3
 80003c8:	fa1f fa8e 	uxth.w	sl, lr
 80003cc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d0:	fb09 f40a 	mul.w	r4, r9, sl
 80003d4:	429c      	cmp	r4, r3
 80003d6:	fa02 f207 	lsl.w	r2, r2, r7
 80003da:	fa00 f107 	lsl.w	r1, r0, r7
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1e 0303 	adds.w	r3, lr, r3
 80003e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e8:	f080 8087 	bcs.w	80004fa <__udivmoddi4+0x2b2>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f240 8084 	bls.w	80004fa <__udivmoddi4+0x2b2>
 80003f2:	f1a9 0902 	sub.w	r9, r9, #2
 80003f6:	4473      	add	r3, lr
 80003f8:	1b1b      	subs	r3, r3, r4
 80003fa:	b2ad      	uxth	r5, r5
 80003fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000400:	fb08 3310 	mls	r3, r8, r0, r3
 8000404:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000408:	fb00 fa0a 	mul.w	sl, r0, sl
 800040c:	45a2      	cmp	sl, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1e 0404 	adds.w	r4, lr, r4
 8000414:	f100 33ff 	add.w	r3, r0, #4294967295
 8000418:	d26b      	bcs.n	80004f2 <__udivmoddi4+0x2aa>
 800041a:	45a2      	cmp	sl, r4
 800041c:	d969      	bls.n	80004f2 <__udivmoddi4+0x2aa>
 800041e:	3802      	subs	r0, #2
 8000420:	4474      	add	r4, lr
 8000422:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000426:	fba0 8902 	umull	r8, r9, r0, r2
 800042a:	eba4 040a 	sub.w	r4, r4, sl
 800042e:	454c      	cmp	r4, r9
 8000430:	46c2      	mov	sl, r8
 8000432:	464b      	mov	r3, r9
 8000434:	d354      	bcc.n	80004e0 <__udivmoddi4+0x298>
 8000436:	d051      	beq.n	80004dc <__udivmoddi4+0x294>
 8000438:	2e00      	cmp	r6, #0
 800043a:	d069      	beq.n	8000510 <__udivmoddi4+0x2c8>
 800043c:	ebb1 050a 	subs.w	r5, r1, sl
 8000440:	eb64 0403 	sbc.w	r4, r4, r3
 8000444:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000448:	40fd      	lsrs	r5, r7
 800044a:	40fc      	lsrs	r4, r7
 800044c:	ea4c 0505 	orr.w	r5, ip, r5
 8000450:	e9c6 5400 	strd	r5, r4, [r6]
 8000454:	2700      	movs	r7, #0
 8000456:	e747      	b.n	80002e8 <__udivmoddi4+0xa0>
 8000458:	f1c2 0320 	rsb	r3, r2, #32
 800045c:	fa20 f703 	lsr.w	r7, r0, r3
 8000460:	4095      	lsls	r5, r2
 8000462:	fa01 f002 	lsl.w	r0, r1, r2
 8000466:	fa21 f303 	lsr.w	r3, r1, r3
 800046a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800046e:	4338      	orrs	r0, r7
 8000470:	0c01      	lsrs	r1, r0, #16
 8000472:	fbb3 f7fe 	udiv	r7, r3, lr
 8000476:	fa1f f885 	uxth.w	r8, r5
 800047a:	fb0e 3317 	mls	r3, lr, r7, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb07 f308 	mul.w	r3, r7, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x256>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f107 3cff 	add.w	ip, r7, #4294967295
 8000494:	d22f      	bcs.n	80004f6 <__udivmoddi4+0x2ae>
 8000496:	428b      	cmp	r3, r1
 8000498:	d92d      	bls.n	80004f6 <__udivmoddi4+0x2ae>
 800049a:	3f02      	subs	r7, #2
 800049c:	4429      	add	r1, r5
 800049e:	1acb      	subs	r3, r1, r3
 80004a0:	b281      	uxth	r1, r0
 80004a2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004a6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004aa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ae:	fb00 f308 	mul.w	r3, r0, r8
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x27e>
 80004b6:	1869      	adds	r1, r5, r1
 80004b8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004bc:	d217      	bcs.n	80004ee <__udivmoddi4+0x2a6>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d915      	bls.n	80004ee <__udivmoddi4+0x2a6>
 80004c2:	3802      	subs	r0, #2
 80004c4:	4429      	add	r1, r5
 80004c6:	1ac9      	subs	r1, r1, r3
 80004c8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004cc:	e73b      	b.n	8000346 <__udivmoddi4+0xfe>
 80004ce:	4637      	mov	r7, r6
 80004d0:	4630      	mov	r0, r6
 80004d2:	e709      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d4:	4607      	mov	r7, r0
 80004d6:	e6e7      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d8:	4618      	mov	r0, r3
 80004da:	e6fb      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004dc:	4541      	cmp	r1, r8
 80004de:	d2ab      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004e4:	eb69 020e 	sbc.w	r2, r9, lr
 80004e8:	3801      	subs	r0, #1
 80004ea:	4613      	mov	r3, r2
 80004ec:	e7a4      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004ee:	4660      	mov	r0, ip
 80004f0:	e7e9      	b.n	80004c6 <__udivmoddi4+0x27e>
 80004f2:	4618      	mov	r0, r3
 80004f4:	e795      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f6:	4667      	mov	r7, ip
 80004f8:	e7d1      	b.n	800049e <__udivmoddi4+0x256>
 80004fa:	4681      	mov	r9, r0
 80004fc:	e77c      	b.n	80003f8 <__udivmoddi4+0x1b0>
 80004fe:	3802      	subs	r0, #2
 8000500:	442c      	add	r4, r5
 8000502:	e747      	b.n	8000394 <__udivmoddi4+0x14c>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	442b      	add	r3, r5
 800050a:	e72f      	b.n	800036c <__udivmoddi4+0x124>
 800050c:	4638      	mov	r0, r7
 800050e:	e708      	b.n	8000322 <__udivmoddi4+0xda>
 8000510:	4637      	mov	r7, r6
 8000512:	e6e9      	b.n	80002e8 <__udivmoddi4+0xa0>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051c:	f000 ff61 	bl	80013e2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000520:	f000 f813 	bl	800054a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000524:	f000 fb9a 	bl	8000c5c <MX_GPIO_Init>
  MX_HRTIM1_Init();
 8000528:	f000 f942 	bl	80007b0 <MX_HRTIM1_Init>
  MX_ADC1_Init();
 800052c:	f000 f882 	bl	8000634 <MX_ADC1_Init>
  MX_FDCAN2_Init();
 8000530:	f000 f8fa 	bl	8000728 <MX_FDCAN2_Init>
  MX_I2C1_Init();
 8000534:	f000 fa60 	bl	80009f8 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000538:	f000 fa9e 	bl	8000a78 <MX_I2C2_Init>
  MX_SPI3_Init();
 800053c:	f000 fadc 	bl	8000af8 <MX_SPI3_Init>
  MX_UART5_Init();
 8000540:	f000 fb18 	bl	8000b74 <MX_UART5_Init>
  MX_USB_PCD_Init();
 8000544:	f000 fb62 	bl	8000c0c <MX_USB_PCD_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000548:	e7fe      	b.n	8000548 <main+0x30>

0800054a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800054a:	b580      	push	{r7, lr}
 800054c:	b0a8      	sub	sp, #160	; 0xa0
 800054e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000550:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000554:	2238      	movs	r2, #56	; 0x38
 8000556:	2100      	movs	r1, #0
 8000558:	4618      	mov	r0, r3
 800055a:	f005 fd07 	bl	8005f6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800055e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000562:	2200      	movs	r2, #0
 8000564:	601a      	str	r2, [r3, #0]
 8000566:	605a      	str	r2, [r3, #4]
 8000568:	609a      	str	r2, [r3, #8]
 800056a:	60da      	str	r2, [r3, #12]
 800056c:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800056e:	463b      	mov	r3, r7
 8000570:	2254      	movs	r2, #84	; 0x54
 8000572:	2100      	movs	r1, #0
 8000574:	4618      	mov	r0, r3
 8000576:	f005 fcf9 	bl	8005f6c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800057a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800057e:	f003 fe0f 	bl	80041a0 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000582:	2301      	movs	r3, #1
 8000584:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000586:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800058a:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800058c:	2302      	movs	r3, #2
 800058e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000592:	2303      	movs	r3, #3
 8000594:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000598:	2301      	movs	r3, #1
 800059a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 18;
 800059e:	2312      	movs	r3, #18
 80005a0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005a4:	2302      	movs	r3, #2
 80005a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV6;
 80005aa:	2306      	movs	r3, #6
 80005ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005b0:	2302      	movs	r3, #2
 80005b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80005ba:	4618      	mov	r0, r3
 80005bc:	f003 fea4 	bl	8004308 <HAL_RCC_OscConfig>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <SystemClock_Config+0x80>
  {
    Error_Handler();
 80005c6:	f000 fbe3 	bl	8000d90 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ca:	230f      	movs	r3, #15
 80005cc:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ce:	2303      	movs	r3, #3
 80005d0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d2:	2300      	movs	r3, #0
 80005d4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005d6:	2300      	movs	r3, #0
 80005d8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005da:	2300      	movs	r3, #0
 80005dc:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005de:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80005e2:	2104      	movs	r1, #4
 80005e4:	4618      	mov	r0, r3
 80005e6:	f004 f9a7 	bl	8004938 <HAL_RCC_ClockConfig>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80005f0:	f000 fbce 	bl	8000d90 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5|RCC_PERIPHCLK_I2C1
 80005f4:	f24b 03d0 	movw	r3, #45264	; 0xb0d0
 80005f8:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_USB
                              |RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_FDCAN;
  PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 80005fa:	2300      	movs	r3, #0
 80005fc:	617b      	str	r3, [r7, #20]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80005fe:	2300      	movs	r3, #0
 8000600:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000602:	2300      	movs	r3, #0
 8000604:	623b      	str	r3, [r7, #32]
  PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000606:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800060a:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800060c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000610:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000612:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000616:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000618:	463b      	mov	r3, r7
 800061a:	4618      	mov	r0, r3
 800061c:	f004 fba4 	bl	8004d68 <HAL_RCCEx_PeriphCLKConfig>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8000626:	f000 fbb3 	bl	8000d90 <Error_Handler>
  }
}
 800062a:	bf00      	nop
 800062c:	37a0      	adds	r7, #160	; 0xa0
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
	...

08000634 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b08c      	sub	sp, #48	; 0x30
 8000638:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800063a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800063e:	2200      	movs	r2, #0
 8000640:	601a      	str	r2, [r3, #0]
 8000642:	605a      	str	r2, [r3, #4]
 8000644:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000646:	1d3b      	adds	r3, r7, #4
 8000648:	2220      	movs	r2, #32
 800064a:	2100      	movs	r1, #0
 800064c:	4618      	mov	r0, r3
 800064e:	f005 fc8d 	bl	8005f6c <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000652:	4b32      	ldr	r3, [pc, #200]	; (800071c <MX_ADC1_Init+0xe8>)
 8000654:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000658:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800065a:	4b30      	ldr	r3, [pc, #192]	; (800071c <MX_ADC1_Init+0xe8>)
 800065c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000660:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000662:	4b2e      	ldr	r3, [pc, #184]	; (800071c <MX_ADC1_Init+0xe8>)
 8000664:	2200      	movs	r2, #0
 8000666:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000668:	4b2c      	ldr	r3, [pc, #176]	; (800071c <MX_ADC1_Init+0xe8>)
 800066a:	2200      	movs	r2, #0
 800066c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800066e:	4b2b      	ldr	r3, [pc, #172]	; (800071c <MX_ADC1_Init+0xe8>)
 8000670:	2200      	movs	r2, #0
 8000672:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000674:	4b29      	ldr	r3, [pc, #164]	; (800071c <MX_ADC1_Init+0xe8>)
 8000676:	2200      	movs	r2, #0
 8000678:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800067a:	4b28      	ldr	r3, [pc, #160]	; (800071c <MX_ADC1_Init+0xe8>)
 800067c:	2204      	movs	r2, #4
 800067e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000680:	4b26      	ldr	r3, [pc, #152]	; (800071c <MX_ADC1_Init+0xe8>)
 8000682:	2200      	movs	r2, #0
 8000684:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000686:	4b25      	ldr	r3, [pc, #148]	; (800071c <MX_ADC1_Init+0xe8>)
 8000688:	2200      	movs	r2, #0
 800068a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800068c:	4b23      	ldr	r3, [pc, #140]	; (800071c <MX_ADC1_Init+0xe8>)
 800068e:	2201      	movs	r2, #1
 8000690:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000692:	4b22      	ldr	r3, [pc, #136]	; (800071c <MX_ADC1_Init+0xe8>)
 8000694:	2200      	movs	r2, #0
 8000696:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800069a:	4b20      	ldr	r3, [pc, #128]	; (800071c <MX_ADC1_Init+0xe8>)
 800069c:	2200      	movs	r2, #0
 800069e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006a0:	4b1e      	ldr	r3, [pc, #120]	; (800071c <MX_ADC1_Init+0xe8>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006a6:	4b1d      	ldr	r3, [pc, #116]	; (800071c <MX_ADC1_Init+0xe8>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006ae:	4b1b      	ldr	r3, [pc, #108]	; (800071c <MX_ADC1_Init+0xe8>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80006b4:	4b19      	ldr	r3, [pc, #100]	; (800071c <MX_ADC1_Init+0xe8>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006bc:	4817      	ldr	r0, [pc, #92]	; (800071c <MX_ADC1_Init+0xe8>)
 80006be:	f001 f8d7 	bl	8001870 <HAL_ADC_Init>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80006c8:	f000 fb62 	bl	8000d90 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80006cc:	2300      	movs	r3, #0
 80006ce:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80006d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006d4:	4619      	mov	r1, r3
 80006d6:	4811      	ldr	r0, [pc, #68]	; (800071c <MX_ADC1_Init+0xe8>)
 80006d8:	f001 feee 	bl	80024b8 <HAL_ADCEx_MultiModeConfigChannel>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80006e2:	f000 fb55 	bl	8000d90 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80006e6:	4b0e      	ldr	r3, [pc, #56]	; (8000720 <MX_ADC1_Init+0xec>)
 80006e8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006ea:	2306      	movs	r3, #6
 80006ec:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80006ee:	2300      	movs	r3, #0
 80006f0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 80006f2:	4b0c      	ldr	r3, [pc, #48]	; (8000724 <MX_ADC1_Init+0xf0>)
 80006f4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006f6:	2304      	movs	r3, #4
 80006f8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80006fa:	2300      	movs	r3, #0
 80006fc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006fe:	1d3b      	adds	r3, r7, #4
 8000700:	4619      	mov	r1, r3
 8000702:	4806      	ldr	r0, [pc, #24]	; (800071c <MX_ADC1_Init+0xe8>)
 8000704:	f001 fa74 	bl	8001bf0 <HAL_ADC_ConfigChannel>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800070e:	f000 fb3f 	bl	8000d90 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000712:	bf00      	nop
 8000714:	3730      	adds	r7, #48	; 0x30
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	200001b0 	.word	0x200001b0
 8000720:	19200040 	.word	0x19200040
 8000724:	407f0000 	.word	0x407f0000

08000728 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 800072c:	4b1e      	ldr	r3, [pc, #120]	; (80007a8 <MX_FDCAN2_Init+0x80>)
 800072e:	4a1f      	ldr	r2, [pc, #124]	; (80007ac <MX_FDCAN2_Init+0x84>)
 8000730:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 8000732:	4b1d      	ldr	r3, [pc, #116]	; (80007a8 <MX_FDCAN2_Init+0x80>)
 8000734:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000738:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 800073a:	4b1b      	ldr	r3, [pc, #108]	; (80007a8 <MX_FDCAN2_Init+0x80>)
 800073c:	2200      	movs	r2, #0
 800073e:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000740:	4b19      	ldr	r3, [pc, #100]	; (80007a8 <MX_FDCAN2_Init+0x80>)
 8000742:	2200      	movs	r2, #0
 8000744:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000746:	4b18      	ldr	r3, [pc, #96]	; (80007a8 <MX_FDCAN2_Init+0x80>)
 8000748:	2200      	movs	r2, #0
 800074a:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 800074c:	4b16      	ldr	r3, [pc, #88]	; (80007a8 <MX_FDCAN2_Init+0x80>)
 800074e:	2200      	movs	r2, #0
 8000750:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 8000752:	4b15      	ldr	r3, [pc, #84]	; (80007a8 <MX_FDCAN2_Init+0x80>)
 8000754:	2201      	movs	r2, #1
 8000756:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000758:	4b13      	ldr	r3, [pc, #76]	; (80007a8 <MX_FDCAN2_Init+0x80>)
 800075a:	2201      	movs	r2, #1
 800075c:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 800075e:	4b12      	ldr	r3, [pc, #72]	; (80007a8 <MX_FDCAN2_Init+0x80>)
 8000760:	2202      	movs	r2, #2
 8000762:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8000764:	4b10      	ldr	r3, [pc, #64]	; (80007a8 <MX_FDCAN2_Init+0x80>)
 8000766:	2202      	movs	r2, #2
 8000768:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 800076a:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <MX_FDCAN2_Init+0x80>)
 800076c:	2201      	movs	r2, #1
 800076e:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000770:	4b0d      	ldr	r3, [pc, #52]	; (80007a8 <MX_FDCAN2_Init+0x80>)
 8000772:	2201      	movs	r2, #1
 8000774:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000776:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <MX_FDCAN2_Init+0x80>)
 8000778:	2201      	movs	r2, #1
 800077a:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 800077c:	4b0a      	ldr	r3, [pc, #40]	; (80007a8 <MX_FDCAN2_Init+0x80>)
 800077e:	2201      	movs	r2, #1
 8000780:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.StdFiltersNbr = 0;
 8000782:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <MX_FDCAN2_Init+0x80>)
 8000784:	2200      	movs	r2, #0
 8000786:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000788:	4b07      	ldr	r3, [pc, #28]	; (80007a8 <MX_FDCAN2_Init+0x80>)
 800078a:	2200      	movs	r2, #0
 800078c:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800078e:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <MX_FDCAN2_Init+0x80>)
 8000790:	2200      	movs	r2, #0
 8000792:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000794:	4804      	ldr	r0, [pc, #16]	; (80007a8 <MX_FDCAN2_Init+0x80>)
 8000796:	f002 f877 	bl	8002888 <HAL_FDCAN_Init>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_FDCAN2_Init+0x7c>
  {
    Error_Handler();
 80007a0:	f000 faf6 	bl	8000d90 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 80007a4:	bf00      	nop
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	2000060c 	.word	0x2000060c
 80007ac:	40006800 	.word	0x40006800

080007b0 <MX_HRTIM1_Init>:
  * @brief HRTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_HRTIM1_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b0ac      	sub	sp, #176	; 0xb0
 80007b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HRTIM1_Init 0 */

  /* USER CODE END HRTIM1_Init 0 */

  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 80007b6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
 80007be:	605a      	str	r2, [r3, #4]
 80007c0:	609a      	str	r2, [r3, #8]
 80007c2:	60da      	str	r2, [r3, #12]
  HRTIM_TimerCtlTypeDef pTimerCtl = {0};
 80007c4:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
 80007cc:	605a      	str	r2, [r3, #4]
 80007ce:	609a      	str	r2, [r3, #8]
 80007d0:	60da      	str	r2, [r3, #12]
 80007d2:	611a      	str	r2, [r3, #16]
 80007d4:	615a      	str	r2, [r3, #20]
 80007d6:	619a      	str	r2, [r3, #24]
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 80007d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007dc:	2260      	movs	r2, #96	; 0x60
 80007de:	2100      	movs	r1, #0
 80007e0:	4618      	mov	r0, r3
 80007e2:	f005 fbc3 	bl	8005f6c <memset>
  HRTIM_OutputCfgTypeDef pOutputCfg = {0};
 80007e6:	1d3b      	adds	r3, r7, #4
 80007e8:	2220      	movs	r2, #32
 80007ea:	2100      	movs	r1, #0
 80007ec:	4618      	mov	r0, r3
 80007ee:	f005 fbbd 	bl	8005f6c <memset>

  /* USER CODE BEGIN HRTIM1_Init 1 */

  /* USER CODE END HRTIM1_Init 1 */
  hhrtim1.Instance = HRTIM1;
 80007f2:	4b7f      	ldr	r3, [pc, #508]	; (80009f0 <MX_HRTIM1_Init+0x240>)
 80007f4:	4a7f      	ldr	r2, [pc, #508]	; (80009f4 <MX_HRTIM1_Init+0x244>)
 80007f6:	601a      	str	r2, [r3, #0]
  hhrtim1.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 80007f8:	4b7d      	ldr	r3, [pc, #500]	; (80009f0 <MX_HRTIM1_Init+0x240>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	605a      	str	r2, [r3, #4]
  hhrtim1.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 80007fe:	4b7c      	ldr	r3, [pc, #496]	; (80009f0 <MX_HRTIM1_Init+0x240>)
 8000800:	2200      	movs	r2, #0
 8000802:	609a      	str	r2, [r3, #8]
  if (HAL_HRTIM_Init(&hhrtim1) != HAL_OK)
 8000804:	487a      	ldr	r0, [pc, #488]	; (80009f0 <MX_HRTIM1_Init+0x240>)
 8000806:	f002 fb9f 	bl	8002f48 <HAL_HRTIM_Init>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_HRTIM1_Init+0x64>
  {
    Error_Handler();
 8000810:	f000 fabe 	bl	8000d90 <Error_Handler>
  }
  if (HAL_HRTIM_DLLCalibrationStart(&hhrtim1, HRTIM_CALIBRATIONRATE_3) != HAL_OK)
 8000814:	210c      	movs	r1, #12
 8000816:	4876      	ldr	r0, [pc, #472]	; (80009f0 <MX_HRTIM1_Init+0x240>)
 8000818:	f002 fc66 	bl	80030e8 <HAL_HRTIM_DLLCalibrationStart>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_HRTIM1_Init+0x76>
  {
    Error_Handler();
 8000822:	f000 fab5 	bl	8000d90 <Error_Handler>
  }
  if (HAL_HRTIM_PollForDLLCalibration(&hhrtim1, 10) != HAL_OK)
 8000826:	210a      	movs	r1, #10
 8000828:	4871      	ldr	r0, [pc, #452]	; (80009f0 <MX_HRTIM1_Init+0x240>)
 800082a:	f002 fcb5 	bl	8003198 <HAL_HRTIM_PollForDLLCalibration>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_HRTIM1_Init+0x88>
  {
    Error_Handler();
 8000834:	f000 faac 	bl	8000d90 <Error_Handler>
  }
  pTimeBaseCfg.Period = 0xFFDF;
 8000838:	f64f 73df 	movw	r3, #65503	; 0xffdf
 800083c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  pTimeBaseCfg.RepetitionCounter = 0x00;
 8000840:	2300      	movs	r3, #0
 8000842:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_MUL32;
 8000846:	2300      	movs	r3, #0
 8000848:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 800084c:	2308      	movs	r3, #8
 800084e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, &pTimeBaseCfg) != HAL_OK)
 8000852:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000856:	461a      	mov	r2, r3
 8000858:	2104      	movs	r1, #4
 800085a:	4865      	ldr	r0, [pc, #404]	; (80009f0 <MX_HRTIM1_Init+0x240>)
 800085c:	f002 fcd0 	bl	8003200 <HAL_HRTIM_TimeBaseConfig>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_HRTIM1_Init+0xba>
  {
    Error_Handler();
 8000866:	f000 fa93 	bl	8000d90 <Error_Handler>
  }
  pTimerCtl.UpDownMode = HRTIM_TIMERUPDOWNMODE_UP;
 800086a:	2300      	movs	r3, #0
 800086c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  pTimerCtl.DualChannelDacEnable = HRTIM_TIMER_DCDE_DISABLED;
 8000870:	2300      	movs	r3, #0
 8000872:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, &pTimerCtl) != HAL_OK)
 8000876:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800087a:	461a      	mov	r2, r3
 800087c:	2104      	movs	r1, #4
 800087e:	485c      	ldr	r0, [pc, #368]	; (80009f0 <MX_HRTIM1_Init+0x240>)
 8000880:	f002 fd58 	bl	8003334 <HAL_HRTIM_WaveformTimerControl>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_HRTIM1_Init+0xde>
  {
    Error_Handler();
 800088a:	f000 fa81 	bl	8000d90 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_MASTER_IT_NONE;
 800088e:	2300      	movs	r3, #0
 8000890:	627b      	str	r3, [r7, #36]	; 0x24
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
 8000892:	2300      	movs	r3, #0
 8000894:	62bb      	str	r3, [r7, #40]	; 0x28
  pTimerCfg.DMASrcAddress = 0x0000;
 8000896:	2300      	movs	r3, #0
 8000898:	62fb      	str	r3, [r7, #44]	; 0x2c
  pTimerCfg.DMADstAddress = 0x0000;
 800089a:	2300      	movs	r3, #0
 800089c:	633b      	str	r3, [r7, #48]	; 0x30
  pTimerCfg.DMASize = 0x1;
 800089e:	2301      	movs	r3, #1
 80008a0:	637b      	str	r3, [r7, #52]	; 0x34
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 80008a2:	2300      	movs	r3, #0
 80008a4:	63bb      	str	r3, [r7, #56]	; 0x38
  pTimerCfg.InterleavedMode = HRTIM_INTERLEAVED_MODE_DISABLED;
 80008a6:	2300      	movs	r3, #0
 80008a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 80008aa:	2300      	movs	r3, #0
 80008ac:	643b      	str	r3, [r7, #64]	; 0x40
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 80008ae:	2300      	movs	r3, #0
 80008b0:	647b      	str	r3, [r7, #68]	; 0x44
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 80008b2:	2300      	movs	r3, #0
 80008b4:	64bb      	str	r3, [r7, #72]	; 0x48
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_DISABLED;
 80008b6:	2300      	movs	r3, #0
 80008b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 80008ba:	2300      	movs	r3, #0
 80008bc:	653b      	str	r3, [r7, #80]	; 0x50
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 80008be:	2300      	movs	r3, #0
 80008c0:	657b      	str	r3, [r7, #84]	; 0x54
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 80008c2:	2300      	movs	r3, #0
 80008c4:	65bb      	str	r3, [r7, #88]	; 0x58
  pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 80008c6:	2300      	movs	r3, #0
 80008c8:	65fb      	str	r3, [r7, #92]	; 0x5c
  pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_NONE;
 80008ca:	2300      	movs	r3, #0
 80008cc:	663b      	str	r3, [r7, #96]	; 0x60
  pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 80008ce:	2300      	movs	r3, #0
 80008d0:	667b      	str	r3, [r7, #100]	; 0x64
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_DISABLED;
 80008d2:	2300      	movs	r3, #0
 80008d4:	66bb      	str	r3, [r7, #104]	; 0x68
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_D_E_DELAYEDPROTECTION_DISABLED;
 80008d6:	2300      	movs	r3, #0
 80008d8:	66fb      	str	r3, [r7, #108]	; 0x6c
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_NONE;
 80008da:	2300      	movs	r3, #0
 80008dc:	677b      	str	r3, [r7, #116]	; 0x74
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_NONE;
 80008de:	2300      	movs	r3, #0
 80008e0:	67bb      	str	r3, [r7, #120]	; 0x78
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_DISABLED;
 80008e2:	2300      	movs	r3, #0
 80008e4:	67fb      	str	r3, [r7, #124]	; 0x7c
  pTimerCfg.ReSyncUpdate = HRTIM_TIMERESYNC_UPDATE_UNCONDITIONAL;
 80008e6:	2300      	movs	r3, #0
 80008e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, &pTimerCfg) != HAL_OK)
 80008ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008f0:	461a      	mov	r2, r3
 80008f2:	2104      	movs	r1, #4
 80008f4:	483e      	ldr	r0, [pc, #248]	; (80009f0 <MX_HRTIM1_Init+0x240>)
 80008f6:	f002 fcab 	bl	8003250 <HAL_HRTIM_WaveformTimerConfig>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_HRTIM1_Init+0x154>
  {
    Error_Handler();
 8000900:	f000 fa46 	bl	8000d90 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_NONE;
 8000904:	2300      	movs	r3, #0
 8000906:	627b      	str	r3, [r7, #36]	; 0x24
  pTimerCfg.DMASrcAddress = 0x0000;
 8000908:	2300      	movs	r3, #0
 800090a:	62fb      	str	r3, [r7, #44]	; 0x2c
  pTimerCfg.DMADstAddress = 0x0000;
 800090c:	2300      	movs	r3, #0
 800090e:	633b      	str	r3, [r7, #48]	; 0x30
  pTimerCfg.DMASize = 0x1;
 8000910:	2301      	movs	r3, #1
 8000912:	637b      	str	r3, [r7, #52]	; 0x34
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_F_DELAYEDPROTECTION_DISABLED;
 8000914:	2300      	movs	r3, #0
 8000916:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_F, &pTimerCfg) != HAL_OK)
 8000918:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800091c:	461a      	mov	r2, r3
 800091e:	2105      	movs	r1, #5
 8000920:	4833      	ldr	r0, [pc, #204]	; (80009f0 <MX_HRTIM1_Init+0x240>)
 8000922:	f002 fc95 	bl	8003250 <HAL_HRTIM_WaveformTimerConfig>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <MX_HRTIM1_Init+0x180>
  {
    Error_Handler();
 800092c:	f000 fa30 	bl	8000d90 <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 8000930:	2300      	movs	r3, #0
 8000932:	607b      	str	r3, [r7, #4]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_NONE;
 8000934:	2300      	movs	r3, #0
 8000936:	60bb      	str	r3, [r7, #8]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_NONE;
 8000938:	2300      	movs	r3, #0
 800093a:	60fb      	str	r3, [r7, #12]
  pOutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 800093c:	2300      	movs	r3, #0
 800093e:	613b      	str	r3, [r7, #16]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 8000940:	2300      	movs	r3, #0
 8000942:	617b      	str	r3, [r7, #20]
  pOutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
 8000944:	2300      	movs	r3, #0
 8000946:	61bb      	str	r3, [r7, #24]
  pOutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 8000948:	2300      	movs	r3, #0
 800094a:	61fb      	str	r3, [r7, #28]
  pOutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 800094c:	2300      	movs	r3, #0
 800094e:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, HRTIM_OUTPUT_TE1, &pOutputCfg) != HAL_OK)
 8000950:	1d3b      	adds	r3, r7, #4
 8000952:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000956:	2104      	movs	r1, #4
 8000958:	4825      	ldr	r0, [pc, #148]	; (80009f0 <MX_HRTIM1_Init+0x240>)
 800095a:	f002 fd1e 	bl	800339a <HAL_HRTIM_WaveformOutputConfig>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_HRTIM1_Init+0x1b8>
  {
    Error_Handler();
 8000964:	f000 fa14 	bl	8000d90 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_F, HRTIM_OUTPUT_TF1, &pOutputCfg) != HAL_OK)
 8000968:	1d3b      	adds	r3, r7, #4
 800096a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800096e:	2105      	movs	r1, #5
 8000970:	481f      	ldr	r0, [pc, #124]	; (80009f0 <MX_HRTIM1_Init+0x240>)
 8000972:	f002 fd12 	bl	800339a <HAL_HRTIM_WaveformOutputConfig>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <MX_HRTIM1_Init+0x1d0>
  {
    Error_Handler();
 800097c:	f000 fa08 	bl	8000d90 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, HRTIM_OUTPUT_TE2, &pOutputCfg) != HAL_OK)
 8000980:	1d3b      	adds	r3, r7, #4
 8000982:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000986:	2104      	movs	r1, #4
 8000988:	4819      	ldr	r0, [pc, #100]	; (80009f0 <MX_HRTIM1_Init+0x240>)
 800098a:	f002 fd06 	bl	800339a <HAL_HRTIM_WaveformOutputConfig>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_HRTIM1_Init+0x1e8>
  {
    Error_Handler();
 8000994:	f000 f9fc 	bl	8000d90 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_F, HRTIM_OUTPUT_TF2, &pOutputCfg) != HAL_OK)
 8000998:	1d3b      	adds	r3, r7, #4
 800099a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800099e:	2105      	movs	r1, #5
 80009a0:	4813      	ldr	r0, [pc, #76]	; (80009f0 <MX_HRTIM1_Init+0x240>)
 80009a2:	f002 fcfa 	bl	800339a <HAL_HRTIM_WaveformOutputConfig>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_HRTIM1_Init+0x200>
  {
    Error_Handler();
 80009ac:	f000 f9f0 	bl	8000d90 <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_F, &pTimeBaseCfg) != HAL_OK)
 80009b0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80009b4:	461a      	mov	r2, r3
 80009b6:	2105      	movs	r1, #5
 80009b8:	480d      	ldr	r0, [pc, #52]	; (80009f0 <MX_HRTIM1_Init+0x240>)
 80009ba:	f002 fc21 	bl	8003200 <HAL_HRTIM_TimeBaseConfig>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_HRTIM1_Init+0x218>
  {
    Error_Handler();
 80009c4:	f000 f9e4 	bl	8000d90 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_F, &pTimerCtl) != HAL_OK)
 80009c8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80009cc:	461a      	mov	r2, r3
 80009ce:	2105      	movs	r1, #5
 80009d0:	4807      	ldr	r0, [pc, #28]	; (80009f0 <MX_HRTIM1_Init+0x240>)
 80009d2:	f002 fcaf 	bl	8003334 <HAL_HRTIM_WaveformTimerControl>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_HRTIM1_Init+0x230>
  {
    Error_Handler();
 80009dc:	f000 f9d8 	bl	8000d90 <Error_Handler>
  }
  /* USER CODE BEGIN HRTIM1_Init 2 */

  /* USER CODE END HRTIM1_Init 2 */
  HAL_HRTIM_MspPostInit(&hhrtim1);
 80009e0:	4803      	ldr	r0, [pc, #12]	; (80009f0 <MX_HRTIM1_Init+0x240>)
 80009e2:	f000 fab3 	bl	8000f4c <HAL_HRTIM_MspPostInit>

}
 80009e6:	bf00      	nop
 80009e8:	37b0      	adds	r7, #176	; 0xb0
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	2000021c 	.word	0x2000021c
 80009f4:	40016800 	.word	0x40016800

080009f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009fc:	4b1b      	ldr	r3, [pc, #108]	; (8000a6c <MX_I2C1_Init+0x74>)
 80009fe:	4a1c      	ldr	r2, [pc, #112]	; (8000a70 <MX_I2C1_Init+0x78>)
 8000a00:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20B0D9FF;
 8000a02:	4b1a      	ldr	r3, [pc, #104]	; (8000a6c <MX_I2C1_Init+0x74>)
 8000a04:	4a1b      	ldr	r2, [pc, #108]	; (8000a74 <MX_I2C1_Init+0x7c>)
 8000a06:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a08:	4b18      	ldr	r3, [pc, #96]	; (8000a6c <MX_I2C1_Init+0x74>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a0e:	4b17      	ldr	r3, [pc, #92]	; (8000a6c <MX_I2C1_Init+0x74>)
 8000a10:	2201      	movs	r2, #1
 8000a12:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a14:	4b15      	ldr	r3, [pc, #84]	; (8000a6c <MX_I2C1_Init+0x74>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a1a:	4b14      	ldr	r3, [pc, #80]	; (8000a6c <MX_I2C1_Init+0x74>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a20:	4b12      	ldr	r3, [pc, #72]	; (8000a6c <MX_I2C1_Init+0x74>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a26:	4b11      	ldr	r3, [pc, #68]	; (8000a6c <MX_I2C1_Init+0x74>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a2c:	4b0f      	ldr	r3, [pc, #60]	; (8000a6c <MX_I2C1_Init+0x74>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a32:	480e      	ldr	r0, [pc, #56]	; (8000a6c <MX_I2C1_Init+0x74>)
 8000a34:	f003 f90e 	bl	8003c54 <HAL_I2C_Init>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a3e:	f000 f9a7 	bl	8000d90 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a42:	2100      	movs	r1, #0
 8000a44:	4809      	ldr	r0, [pc, #36]	; (8000a6c <MX_I2C1_Init+0x74>)
 8000a46:	f003 f994 	bl	8003d72 <HAL_I2CEx_ConfigAnalogFilter>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a50:	f000 f99e 	bl	8000d90 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a54:	2100      	movs	r1, #0
 8000a56:	4805      	ldr	r0, [pc, #20]	; (8000a6c <MX_I2C1_Init+0x74>)
 8000a58:	f003 f9d6 	bl	8003e08 <HAL_I2CEx_ConfigDigitalFilter>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a62:	f000 f995 	bl	8000d90 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	20000028 	.word	0x20000028
 8000a70:	40005400 	.word	0x40005400
 8000a74:	20b0d9ff 	.word	0x20b0d9ff

08000a78 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000a7c:	4b1b      	ldr	r3, [pc, #108]	; (8000aec <MX_I2C2_Init+0x74>)
 8000a7e:	4a1c      	ldr	r2, [pc, #112]	; (8000af0 <MX_I2C2_Init+0x78>)
 8000a80:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20B0D9FF;
 8000a82:	4b1a      	ldr	r3, [pc, #104]	; (8000aec <MX_I2C2_Init+0x74>)
 8000a84:	4a1b      	ldr	r2, [pc, #108]	; (8000af4 <MX_I2C2_Init+0x7c>)
 8000a86:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000a88:	4b18      	ldr	r3, [pc, #96]	; (8000aec <MX_I2C2_Init+0x74>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a8e:	4b17      	ldr	r3, [pc, #92]	; (8000aec <MX_I2C2_Init+0x74>)
 8000a90:	2201      	movs	r2, #1
 8000a92:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a94:	4b15      	ldr	r3, [pc, #84]	; (8000aec <MX_I2C2_Init+0x74>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000a9a:	4b14      	ldr	r3, [pc, #80]	; (8000aec <MX_I2C2_Init+0x74>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000aa0:	4b12      	ldr	r3, [pc, #72]	; (8000aec <MX_I2C2_Init+0x74>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000aa6:	4b11      	ldr	r3, [pc, #68]	; (8000aec <MX_I2C2_Init+0x74>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000aac:	4b0f      	ldr	r3, [pc, #60]	; (8000aec <MX_I2C2_Init+0x74>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000ab2:	480e      	ldr	r0, [pc, #56]	; (8000aec <MX_I2C2_Init+0x74>)
 8000ab4:	f003 f8ce 	bl	8003c54 <HAL_I2C_Init>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000abe:	f000 f967 	bl	8000d90 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	4809      	ldr	r0, [pc, #36]	; (8000aec <MX_I2C2_Init+0x74>)
 8000ac6:	f003 f954 	bl	8003d72 <HAL_I2CEx_ConfigAnalogFilter>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000ad0:	f000 f95e 	bl	8000d90 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	4805      	ldr	r0, [pc, #20]	; (8000aec <MX_I2C2_Init+0x74>)
 8000ad8:	f003 f996 	bl	8003e08 <HAL_I2CEx_ConfigDigitalFilter>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000ae2:	f000 f955 	bl	8000d90 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000ae6:	bf00      	nop
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	20000074 	.word	0x20000074
 8000af0:	40005800 	.word	0x40005800
 8000af4:	20b0d9ff 	.word	0x20b0d9ff

08000af8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000afc:	4b1b      	ldr	r3, [pc, #108]	; (8000b6c <MX_SPI3_Init+0x74>)
 8000afe:	4a1c      	ldr	r2, [pc, #112]	; (8000b70 <MX_SPI3_Init+0x78>)
 8000b00:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000b02:	4b1a      	ldr	r3, [pc, #104]	; (8000b6c <MX_SPI3_Init+0x74>)
 8000b04:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b08:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000b0a:	4b18      	ldr	r3, [pc, #96]	; (8000b6c <MX_SPI3_Init+0x74>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000b10:	4b16      	ldr	r3, [pc, #88]	; (8000b6c <MX_SPI3_Init+0x74>)
 8000b12:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000b16:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b18:	4b14      	ldr	r3, [pc, #80]	; (8000b6c <MX_SPI3_Init+0x74>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b1e:	4b13      	ldr	r3, [pc, #76]	; (8000b6c <MX_SPI3_Init+0x74>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000b24:	4b11      	ldr	r3, [pc, #68]	; (8000b6c <MX_SPI3_Init+0x74>)
 8000b26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b2a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000b2c:	4b0f      	ldr	r3, [pc, #60]	; (8000b6c <MX_SPI3_Init+0x74>)
 8000b2e:	2208      	movs	r2, #8
 8000b30:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b32:	4b0e      	ldr	r3, [pc, #56]	; (8000b6c <MX_SPI3_Init+0x74>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b38:	4b0c      	ldr	r3, [pc, #48]	; (8000b6c <MX_SPI3_Init+0x74>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b3e:	4b0b      	ldr	r3, [pc, #44]	; (8000b6c <MX_SPI3_Init+0x74>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000b44:	4b09      	ldr	r3, [pc, #36]	; (8000b6c <MX_SPI3_Init+0x74>)
 8000b46:	2207      	movs	r2, #7
 8000b48:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b4a:	4b08      	ldr	r3, [pc, #32]	; (8000b6c <MX_SPI3_Init+0x74>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b50:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <MX_SPI3_Init+0x74>)
 8000b52:	2208      	movs	r2, #8
 8000b54:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000b56:	4805      	ldr	r0, [pc, #20]	; (8000b6c <MX_SPI3_Init+0x74>)
 8000b58:	f004 fb52 	bl	8005200 <HAL_SPI_Init>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000b62:	f000 f915 	bl	8000d90 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000b66:	bf00      	nop
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	200000c0 	.word	0x200000c0
 8000b70:	40003c00 	.word	0x40003c00

08000b74 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000b78:	4b22      	ldr	r3, [pc, #136]	; (8000c04 <MX_UART5_Init+0x90>)
 8000b7a:	4a23      	ldr	r2, [pc, #140]	; (8000c08 <MX_UART5_Init+0x94>)
 8000b7c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000b7e:	4b21      	ldr	r3, [pc, #132]	; (8000c04 <MX_UART5_Init+0x90>)
 8000b80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b84:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000b86:	4b1f      	ldr	r3, [pc, #124]	; (8000c04 <MX_UART5_Init+0x90>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000b8c:	4b1d      	ldr	r3, [pc, #116]	; (8000c04 <MX_UART5_Init+0x90>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000b92:	4b1c      	ldr	r3, [pc, #112]	; (8000c04 <MX_UART5_Init+0x90>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000b98:	4b1a      	ldr	r3, [pc, #104]	; (8000c04 <MX_UART5_Init+0x90>)
 8000b9a:	220c      	movs	r2, #12
 8000b9c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b9e:	4b19      	ldr	r3, [pc, #100]	; (8000c04 <MX_UART5_Init+0x90>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ba4:	4b17      	ldr	r3, [pc, #92]	; (8000c04 <MX_UART5_Init+0x90>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000baa:	4b16      	ldr	r3, [pc, #88]	; (8000c04 <MX_UART5_Init+0x90>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bb0:	4b14      	ldr	r3, [pc, #80]	; (8000c04 <MX_UART5_Init+0x90>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bb6:	4b13      	ldr	r3, [pc, #76]	; (8000c04 <MX_UART5_Init+0x90>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000bbc:	4811      	ldr	r0, [pc, #68]	; (8000c04 <MX_UART5_Init+0x90>)
 8000bbe:	f004 fbca 	bl	8005356 <HAL_UART_Init>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8000bc8:	f000 f8e2 	bl	8000d90 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bcc:	2100      	movs	r1, #0
 8000bce:	480d      	ldr	r0, [pc, #52]	; (8000c04 <MX_UART5_Init+0x90>)
 8000bd0:	f005 f887 	bl	8005ce2 <HAL_UARTEx_SetTxFifoThreshold>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8000bda:	f000 f8d9 	bl	8000d90 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bde:	2100      	movs	r1, #0
 8000be0:	4808      	ldr	r0, [pc, #32]	; (8000c04 <MX_UART5_Init+0x90>)
 8000be2:	f005 f8bc 	bl	8005d5e <HAL_UARTEx_SetRxFifoThreshold>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8000bec:	f000 f8d0 	bl	8000d90 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8000bf0:	4804      	ldr	r0, [pc, #16]	; (8000c04 <MX_UART5_Init+0x90>)
 8000bf2:	f005 f83d 	bl	8005c70 <HAL_UARTEx_DisableFifoMode>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8000bfc:	f000 f8c8 	bl	8000d90 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000c00:	bf00      	nop
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	20000124 	.word	0x20000124
 8000c08:	40005000 	.word	0x40005000

08000c0c <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000c10:	4b10      	ldr	r3, [pc, #64]	; (8000c54 <MX_USB_PCD_Init+0x48>)
 8000c12:	4a11      	ldr	r2, [pc, #68]	; (8000c58 <MX_USB_PCD_Init+0x4c>)
 8000c14:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000c16:	4b0f      	ldr	r3, [pc, #60]	; (8000c54 <MX_USB_PCD_Init+0x48>)
 8000c18:	2208      	movs	r2, #8
 8000c1a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000c1c:	4b0d      	ldr	r3, [pc, #52]	; (8000c54 <MX_USB_PCD_Init+0x48>)
 8000c1e:	2202      	movs	r2, #2
 8000c20:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000c22:	4b0c      	ldr	r3, [pc, #48]	; (8000c54 <MX_USB_PCD_Init+0x48>)
 8000c24:	2202      	movs	r2, #2
 8000c26:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000c28:	4b0a      	ldr	r3, [pc, #40]	; (8000c54 <MX_USB_PCD_Init+0x48>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000c2e:	4b09      	ldr	r3, [pc, #36]	; (8000c54 <MX_USB_PCD_Init+0x48>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000c34:	4b07      	ldr	r3, [pc, #28]	; (8000c54 <MX_USB_PCD_Init+0x48>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000c3a:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <MX_USB_PCD_Init+0x48>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000c40:	4804      	ldr	r0, [pc, #16]	; (8000c54 <MX_USB_PCD_Init+0x48>)
 8000c42:	f003 f92d 	bl	8003ea0 <HAL_PCD_Init>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8000c4c:	f000 f8a0 	bl	8000d90 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000c50:	bf00      	nop
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	20000318 	.word	0x20000318
 8000c58:	40005c00 	.word	0x40005c00

08000c5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b08c      	sub	sp, #48	; 0x30
 8000c60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c62:	f107 031c 	add.w	r3, r7, #28
 8000c66:	2200      	movs	r2, #0
 8000c68:	601a      	str	r2, [r3, #0]
 8000c6a:	605a      	str	r2, [r3, #4]
 8000c6c:	609a      	str	r2, [r3, #8]
 8000c6e:	60da      	str	r2, [r3, #12]
 8000c70:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c72:	4b44      	ldr	r3, [pc, #272]	; (8000d84 <MX_GPIO_Init+0x128>)
 8000c74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c76:	4a43      	ldr	r2, [pc, #268]	; (8000d84 <MX_GPIO_Init+0x128>)
 8000c78:	f043 0320 	orr.w	r3, r3, #32
 8000c7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c7e:	4b41      	ldr	r3, [pc, #260]	; (8000d84 <MX_GPIO_Init+0x128>)
 8000c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c82:	f003 0320 	and.w	r3, r3, #32
 8000c86:	61bb      	str	r3, [r7, #24]
 8000c88:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c8a:	4b3e      	ldr	r3, [pc, #248]	; (8000d84 <MX_GPIO_Init+0x128>)
 8000c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c8e:	4a3d      	ldr	r2, [pc, #244]	; (8000d84 <MX_GPIO_Init+0x128>)
 8000c90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c96:	4b3b      	ldr	r3, [pc, #236]	; (8000d84 <MX_GPIO_Init+0x128>)
 8000c98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c9e:	617b      	str	r3, [r7, #20]
 8000ca0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ca2:	4b38      	ldr	r3, [pc, #224]	; (8000d84 <MX_GPIO_Init+0x128>)
 8000ca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ca6:	4a37      	ldr	r2, [pc, #220]	; (8000d84 <MX_GPIO_Init+0x128>)
 8000ca8:	f043 0304 	orr.w	r3, r3, #4
 8000cac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cae:	4b35      	ldr	r3, [pc, #212]	; (8000d84 <MX_GPIO_Init+0x128>)
 8000cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cb2:	f003 0304 	and.w	r3, r3, #4
 8000cb6:	613b      	str	r3, [r7, #16]
 8000cb8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cba:	4b32      	ldr	r3, [pc, #200]	; (8000d84 <MX_GPIO_Init+0x128>)
 8000cbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cbe:	4a31      	ldr	r2, [pc, #196]	; (8000d84 <MX_GPIO_Init+0x128>)
 8000cc0:	f043 0301 	orr.w	r3, r3, #1
 8000cc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cc6:	4b2f      	ldr	r3, [pc, #188]	; (8000d84 <MX_GPIO_Init+0x128>)
 8000cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cca:	f003 0301 	and.w	r3, r3, #1
 8000cce:	60fb      	str	r3, [r7, #12]
 8000cd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cd2:	4b2c      	ldr	r3, [pc, #176]	; (8000d84 <MX_GPIO_Init+0x128>)
 8000cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cd6:	4a2b      	ldr	r2, [pc, #172]	; (8000d84 <MX_GPIO_Init+0x128>)
 8000cd8:	f043 0302 	orr.w	r3, r3, #2
 8000cdc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cde:	4b29      	ldr	r3, [pc, #164]	; (8000d84 <MX_GPIO_Init+0x128>)
 8000ce0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce2:	f003 0302 	and.w	r3, r3, #2
 8000ce6:	60bb      	str	r3, [r7, #8]
 8000ce8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cea:	4b26      	ldr	r3, [pc, #152]	; (8000d84 <MX_GPIO_Init+0x128>)
 8000cec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cee:	4a25      	ldr	r2, [pc, #148]	; (8000d84 <MX_GPIO_Init+0x128>)
 8000cf0:	f043 0308 	orr.w	r3, r3, #8
 8000cf4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cf6:	4b23      	ldr	r3, [pc, #140]	; (8000d84 <MX_GPIO_Init+0x128>)
 8000cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cfa:	f003 0308 	and.w	r3, r3, #8
 8000cfe:	607b      	str	r3, [r7, #4]
 8000d00:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_14, GPIO_PIN_RESET);
 8000d02:	2200      	movs	r2, #0
 8000d04:	f644 4104 	movw	r1, #19460	; 0x4c04
 8000d08:	481f      	ldr	r0, [pc, #124]	; (8000d88 <MX_GPIO_Init+0x12c>)
 8000d0a:	f002 f905 	bl	8002f18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d14:	2300      	movs	r3, #0
 8000d16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d1c:	f107 031c 	add.w	r3, r7, #28
 8000d20:	4619      	mov	r1, r3
 8000d22:	481a      	ldr	r0, [pc, #104]	; (8000d8c <MX_GPIO_Init+0x130>)
 8000d24:	f001 ff76 	bl	8002c14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000d28:	23f0      	movs	r3, #240	; 0xf0
 8000d2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d30:	2300      	movs	r3, #0
 8000d32:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d34:	f107 031c 	add.w	r3, r7, #28
 8000d38:	4619      	mov	r1, r3
 8000d3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d3e:	f001 ff69 	bl	8002c14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 PB11 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_14;
 8000d42:	f644 4304 	movw	r3, #19460	; 0x4c04
 8000d46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d50:	2300      	movs	r3, #0
 8000d52:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d54:	f107 031c 	add.w	r3, r7, #28
 8000d58:	4619      	mov	r1, r3
 8000d5a:	480b      	ldr	r0, [pc, #44]	; (8000d88 <MX_GPIO_Init+0x12c>)
 8000d5c:	f001 ff5a 	bl	8002c14 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW2_Pin BOOT0_Pin */
  GPIO_InitStruct.Pin = SW2_Pin|BOOT0_Pin;
 8000d60:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000d64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d66:	2300      	movs	r3, #0
 8000d68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d6e:	f107 031c 	add.w	r3, r7, #28
 8000d72:	4619      	mov	r1, r3
 8000d74:	4804      	ldr	r0, [pc, #16]	; (8000d88 <MX_GPIO_Init+0x12c>)
 8000d76:	f001 ff4d 	bl	8002c14 <HAL_GPIO_Init>

}
 8000d7a:	bf00      	nop
 8000d7c:	3730      	adds	r7, #48	; 0x30
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	40021000 	.word	0x40021000
 8000d88:	48000400 	.word	0x48000400
 8000d8c:	48001800 	.word	0x48001800

08000d90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000d94:	bf00      	nop
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
	...

08000da0 <HAL_MspInit>:
void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef *hhrtim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */
  PWR_PVDTypeDef sConfigPVD = {0};
 8000da6:	f107 0308 	add.w	r3, r7, #8
 8000daa:	2200      	movs	r2, #0
 8000dac:	601a      	str	r2, [r3, #0]
 8000dae:	605a      	str	r2, [r3, #4]

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000db0:	4b14      	ldr	r3, [pc, #80]	; (8000e04 <HAL_MspInit+0x64>)
 8000db2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000db4:	4a13      	ldr	r2, [pc, #76]	; (8000e04 <HAL_MspInit+0x64>)
 8000db6:	f043 0301 	orr.w	r3, r3, #1
 8000dba:	6613      	str	r3, [r2, #96]	; 0x60
 8000dbc:	4b11      	ldr	r3, [pc, #68]	; (8000e04 <HAL_MspInit+0x64>)
 8000dbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dc0:	f003 0301 	and.w	r3, r3, #1
 8000dc4:	607b      	str	r3, [r7, #4]
 8000dc6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dc8:	4b0e      	ldr	r3, [pc, #56]	; (8000e04 <HAL_MspInit+0x64>)
 8000dca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dcc:	4a0d      	ldr	r2, [pc, #52]	; (8000e04 <HAL_MspInit+0x64>)
 8000dce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dd2:	6593      	str	r3, [r2, #88]	; 0x58
 8000dd4:	4b0b      	ldr	r3, [pc, #44]	; (8000e04 <HAL_MspInit+0x64>)
 8000dd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ddc:	603b      	str	r3, [r7, #0]
 8000dde:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** PVD Configuration
  */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_0;
 8000de0:	2300      	movs	r3, #0
 8000de2:	60bb      	str	r3, [r7, #8]
  sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;
 8000de4:	2300      	movs	r3, #0
 8000de6:	60fb      	str	r3, [r7, #12]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 8000de8:	f107 0308 	add.w	r3, r7, #8
 8000dec:	4618      	mov	r0, r3
 8000dee:	f003 f967 	bl	80040c0 <HAL_PWR_ConfigPVD>
  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
 8000df2:	f003 f9c5 	bl	8004180 <HAL_PWR_EnablePVD>
  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000df6:	f003 fa77 	bl	80042e8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	3710      	adds	r7, #16
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	40021000 	.word	0x40021000

08000e08 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b08a      	sub	sp, #40	; 0x28
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e10:	f107 0314 	add.w	r3, r7, #20
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	605a      	str	r2, [r3, #4]
 8000e1a:	609a      	str	r2, [r3, #8]
 8000e1c:	60da      	str	r2, [r3, #12]
 8000e1e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000e28:	d123      	bne.n	8000e72 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000e2a:	4b14      	ldr	r3, [pc, #80]	; (8000e7c <HAL_ADC_MspInit+0x74>)
 8000e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e2e:	4a13      	ldr	r2, [pc, #76]	; (8000e7c <HAL_ADC_MspInit+0x74>)
 8000e30:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000e34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e36:	4b11      	ldr	r3, [pc, #68]	; (8000e7c <HAL_ADC_MspInit+0x74>)
 8000e38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e3e:	613b      	str	r3, [r7, #16]
 8000e40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e42:	4b0e      	ldr	r3, [pc, #56]	; (8000e7c <HAL_ADC_MspInit+0x74>)
 8000e44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e46:	4a0d      	ldr	r2, [pc, #52]	; (8000e7c <HAL_ADC_MspInit+0x74>)
 8000e48:	f043 0304 	orr.w	r3, r3, #4
 8000e4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e4e:	4b0b      	ldr	r3, [pc, #44]	; (8000e7c <HAL_ADC_MspInit+0x74>)
 8000e50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e52:	f003 0304 	and.w	r3, r3, #4
 8000e56:	60fb      	str	r3, [r7, #12]
 8000e58:	68fb      	ldr	r3, [r7, #12]
    PC0     ------> ADC1_IN6
    PC1     ------> ADC1_IN7
    PC2     ------> ADC1_IN8
    PC3     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000e5a:	230f      	movs	r3, #15
 8000e5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e5e:	2303      	movs	r3, #3
 8000e60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e62:	2300      	movs	r3, #0
 8000e64:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e66:	f107 0314 	add.w	r3, r7, #20
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	4804      	ldr	r0, [pc, #16]	; (8000e80 <HAL_ADC_MspInit+0x78>)
 8000e6e:	f001 fed1 	bl	8002c14 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e72:	bf00      	nop
 8000e74:	3728      	adds	r7, #40	; 0x28
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	40021000 	.word	0x40021000
 8000e80:	48000800 	.word	0x48000800

08000e84 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b08a      	sub	sp, #40	; 0x28
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e8c:	f107 0314 	add.w	r3, r7, #20
 8000e90:	2200      	movs	r2, #0
 8000e92:	601a      	str	r2, [r3, #0]
 8000e94:	605a      	str	r2, [r3, #4]
 8000e96:	609a      	str	r2, [r3, #8]
 8000e98:	60da      	str	r2, [r3, #12]
 8000e9a:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN2)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a17      	ldr	r2, [pc, #92]	; (8000f00 <HAL_FDCAN_MspInit+0x7c>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d128      	bne.n	8000ef8 <HAL_FDCAN_MspInit+0x74>
  {
  /* USER CODE BEGIN FDCAN2_MspInit 0 */

  /* USER CODE END FDCAN2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000ea6:	4b17      	ldr	r3, [pc, #92]	; (8000f04 <HAL_FDCAN_MspInit+0x80>)
 8000ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eaa:	4a16      	ldr	r2, [pc, #88]	; (8000f04 <HAL_FDCAN_MspInit+0x80>)
 8000eac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000eb0:	6593      	str	r3, [r2, #88]	; 0x58
 8000eb2:	4b14      	ldr	r3, [pc, #80]	; (8000f04 <HAL_FDCAN_MspInit+0x80>)
 8000eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000eba:	613b      	str	r3, [r7, #16]
 8000ebc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ebe:	4b11      	ldr	r3, [pc, #68]	; (8000f04 <HAL_FDCAN_MspInit+0x80>)
 8000ec0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ec2:	4a10      	ldr	r2, [pc, #64]	; (8000f04 <HAL_FDCAN_MspInit+0x80>)
 8000ec4:	f043 0302 	orr.w	r3, r3, #2
 8000ec8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eca:	4b0e      	ldr	r3, [pc, #56]	; (8000f04 <HAL_FDCAN_MspInit+0x80>)
 8000ecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ece:	f003 0302 	and.w	r3, r3, #2
 8000ed2:	60fb      	str	r3, [r7, #12]
 8000ed4:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN2 GPIO Configuration
    PB12     ------> FDCAN2_RX
    PB13     ------> FDCAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000ed6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000eda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000edc:	2302      	movs	r3, #2
 8000ede:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8000ee8:	2309      	movs	r3, #9
 8000eea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eec:	f107 0314 	add.w	r3, r7, #20
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	4805      	ldr	r0, [pc, #20]	; (8000f08 <HAL_FDCAN_MspInit+0x84>)
 8000ef4:	f001 fe8e 	bl	8002c14 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8000ef8:	bf00      	nop
 8000efa:	3728      	adds	r7, #40	; 0x28
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	40006800 	.word	0x40006800
 8000f04:	40021000 	.word	0x40021000
 8000f08:	48000400 	.word	0x48000400

08000f0c <HAL_HRTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hhrtim: HRTIM handle pointer
* @retval None
*/
void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hhrtim)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b085      	sub	sp, #20
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  if(hhrtim->Instance==HRTIM1)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a0a      	ldr	r2, [pc, #40]	; (8000f44 <HAL_HRTIM_MspInit+0x38>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d10b      	bne.n	8000f36 <HAL_HRTIM_MspInit+0x2a>
  {
  /* USER CODE BEGIN HRTIM1_MspInit 0 */

  /* USER CODE END HRTIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 8000f1e:	4b0a      	ldr	r3, [pc, #40]	; (8000f48 <HAL_HRTIM_MspInit+0x3c>)
 8000f20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f22:	4a09      	ldr	r2, [pc, #36]	; (8000f48 <HAL_HRTIM_MspInit+0x3c>)
 8000f24:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000f28:	6613      	str	r3, [r2, #96]	; 0x60
 8000f2a:	4b07      	ldr	r3, [pc, #28]	; (8000f48 <HAL_HRTIM_MspInit+0x3c>)
 8000f2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f2e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000f32:	60fb      	str	r3, [r7, #12]
 8000f34:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN HRTIM1_MspInit 1 */

  /* USER CODE END HRTIM1_MspInit 1 */
  }

}
 8000f36:	bf00      	nop
 8000f38:	3714      	adds	r7, #20
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	40016800 	.word	0x40016800
 8000f48:	40021000 	.word	0x40021000

08000f4c <HAL_HRTIM_MspPostInit>:

void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef* hhrtim)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b088      	sub	sp, #32
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f54:	f107 030c 	add.w	r3, r7, #12
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
 8000f5c:	605a      	str	r2, [r3, #4]
 8000f5e:	609a      	str	r2, [r3, #8]
 8000f60:	60da      	str	r2, [r3, #12]
 8000f62:	611a      	str	r2, [r3, #16]
  if(hhrtim->Instance==HRTIM1)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a19      	ldr	r2, [pc, #100]	; (8000fd0 <HAL_HRTIM_MspPostInit+0x84>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d12c      	bne.n	8000fc8 <HAL_HRTIM_MspPostInit+0x7c>
  {
  /* USER CODE BEGIN HRTIM1_MspPostInit 0 */

  /* USER CODE END HRTIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f6e:	4b19      	ldr	r3, [pc, #100]	; (8000fd4 <HAL_HRTIM_MspPostInit+0x88>)
 8000f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f72:	4a18      	ldr	r2, [pc, #96]	; (8000fd4 <HAL_HRTIM_MspPostInit+0x88>)
 8000f74:	f043 0304 	orr.w	r3, r3, #4
 8000f78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f7a:	4b16      	ldr	r3, [pc, #88]	; (8000fd4 <HAL_HRTIM_MspPostInit+0x88>)
 8000f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f7e:	f003 0304 	and.w	r3, r3, #4
 8000f82:	60bb      	str	r3, [r7, #8]
 8000f84:	68bb      	ldr	r3, [r7, #8]
    PC6     ------> HRTIM1_CHF1
    PC7     ------> HRTIM1_CHF2
    PC8     ------> HRTIM1_CHE1
    PC9     ------> HRTIM1_CHE2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f86:	23c0      	movs	r3, #192	; 0xc0
 8000f88:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f92:	2303      	movs	r3, #3
 8000f94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 8000f96:	230d      	movs	r3, #13
 8000f98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f9a:	f107 030c 	add.w	r3, r7, #12
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	480d      	ldr	r0, [pc, #52]	; (8000fd8 <HAL_HRTIM_MspPostInit+0x8c>)
 8000fa2:	f001 fe37 	bl	8002c14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000fa6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000faa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fac:	2302      	movs	r3, #2
 8000fae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fb4:	2303      	movs	r3, #3
 8000fb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_HRTIM1;
 8000fb8:	2303      	movs	r3, #3
 8000fba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fbc:	f107 030c 	add.w	r3, r7, #12
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4805      	ldr	r0, [pc, #20]	; (8000fd8 <HAL_HRTIM_MspPostInit+0x8c>)
 8000fc4:	f001 fe26 	bl	8002c14 <HAL_GPIO_Init>
  /* USER CODE BEGIN HRTIM1_MspPostInit 1 */

  /* USER CODE END HRTIM1_MspPostInit 1 */
  }

}
 8000fc8:	bf00      	nop
 8000fca:	3720      	adds	r7, #32
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	40016800 	.word	0x40016800
 8000fd4:	40021000 	.word	0x40021000
 8000fd8:	48000800 	.word	0x48000800

08000fdc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b08e      	sub	sp, #56	; 0x38
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
 8000fec:	605a      	str	r2, [r3, #4]
 8000fee:	609a      	str	r2, [r3, #8]
 8000ff0:	60da      	str	r2, [r3, #12]
 8000ff2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a4c      	ldr	r2, [pc, #304]	; (800112c <HAL_I2C_MspInit+0x150>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d146      	bne.n	800108c <HAL_I2C_MspInit+0xb0>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ffe:	4b4c      	ldr	r3, [pc, #304]	; (8001130 <HAL_I2C_MspInit+0x154>)
 8001000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001002:	4a4b      	ldr	r2, [pc, #300]	; (8001130 <HAL_I2C_MspInit+0x154>)
 8001004:	f043 0301 	orr.w	r3, r3, #1
 8001008:	64d3      	str	r3, [r2, #76]	; 0x4c
 800100a:	4b49      	ldr	r3, [pc, #292]	; (8001130 <HAL_I2C_MspInit+0x154>)
 800100c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800100e:	f003 0301 	and.w	r3, r3, #1
 8001012:	623b      	str	r3, [r7, #32]
 8001014:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001016:	4b46      	ldr	r3, [pc, #280]	; (8001130 <HAL_I2C_MspInit+0x154>)
 8001018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800101a:	4a45      	ldr	r2, [pc, #276]	; (8001130 <HAL_I2C_MspInit+0x154>)
 800101c:	f043 0302 	orr.w	r3, r3, #2
 8001020:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001022:	4b43      	ldr	r3, [pc, #268]	; (8001130 <HAL_I2C_MspInit+0x154>)
 8001024:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001026:	f003 0302 	and.w	r3, r3, #2
 800102a:	61fb      	str	r3, [r7, #28]
 800102c:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800102e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001032:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001034:	2312      	movs	r3, #18
 8001036:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001038:	2301      	movs	r3, #1
 800103a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103c:	2300      	movs	r3, #0
 800103e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001040:	2304      	movs	r3, #4
 8001042:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001044:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001048:	4619      	mov	r1, r3
 800104a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800104e:	f001 fde1 	bl	8002c14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001052:	2380      	movs	r3, #128	; 0x80
 8001054:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001056:	2312      	movs	r3, #18
 8001058:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800105a:	2301      	movs	r3, #1
 800105c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105e:	2300      	movs	r3, #0
 8001060:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001062:	2304      	movs	r3, #4
 8001064:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001066:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800106a:	4619      	mov	r1, r3
 800106c:	4831      	ldr	r0, [pc, #196]	; (8001134 <HAL_I2C_MspInit+0x158>)
 800106e:	f001 fdd1 	bl	8002c14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001072:	4b2f      	ldr	r3, [pc, #188]	; (8001130 <HAL_I2C_MspInit+0x154>)
 8001074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001076:	4a2e      	ldr	r2, [pc, #184]	; (8001130 <HAL_I2C_MspInit+0x154>)
 8001078:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800107c:	6593      	str	r3, [r2, #88]	; 0x58
 800107e:	4b2c      	ldr	r3, [pc, #176]	; (8001130 <HAL_I2C_MspInit+0x154>)
 8001080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001082:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001086:	61bb      	str	r3, [r7, #24]
 8001088:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800108a:	e04a      	b.n	8001122 <HAL_I2C_MspInit+0x146>
  else if(hi2c->Instance==I2C2)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a29      	ldr	r2, [pc, #164]	; (8001138 <HAL_I2C_MspInit+0x15c>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d145      	bne.n	8001122 <HAL_I2C_MspInit+0x146>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001096:	4b26      	ldr	r3, [pc, #152]	; (8001130 <HAL_I2C_MspInit+0x154>)
 8001098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800109a:	4a25      	ldr	r2, [pc, #148]	; (8001130 <HAL_I2C_MspInit+0x154>)
 800109c:	f043 0304 	orr.w	r3, r3, #4
 80010a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010a2:	4b23      	ldr	r3, [pc, #140]	; (8001130 <HAL_I2C_MspInit+0x154>)
 80010a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a6:	f003 0304 	and.w	r3, r3, #4
 80010aa:	617b      	str	r3, [r7, #20]
 80010ac:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ae:	4b20      	ldr	r3, [pc, #128]	; (8001130 <HAL_I2C_MspInit+0x154>)
 80010b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b2:	4a1f      	ldr	r2, [pc, #124]	; (8001130 <HAL_I2C_MspInit+0x154>)
 80010b4:	f043 0301 	orr.w	r3, r3, #1
 80010b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ba:	4b1d      	ldr	r3, [pc, #116]	; (8001130 <HAL_I2C_MspInit+0x154>)
 80010bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010be:	f003 0301 	and.w	r3, r3, #1
 80010c2:	613b      	str	r3, [r7, #16]
 80010c4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80010c6:	2310      	movs	r3, #16
 80010c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010ca:	2312      	movs	r3, #18
 80010cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010ce:	2301      	movs	r3, #1
 80010d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d2:	2300      	movs	r3, #0
 80010d4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80010d6:	2304      	movs	r3, #4
 80010d8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010de:	4619      	mov	r1, r3
 80010e0:	4816      	ldr	r0, [pc, #88]	; (800113c <HAL_I2C_MspInit+0x160>)
 80010e2:	f001 fd97 	bl	8002c14 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80010e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010ec:	2312      	movs	r3, #18
 80010ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010f0:	2301      	movs	r3, #1
 80010f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f4:	2300      	movs	r3, #0
 80010f6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80010f8:	2304      	movs	r3, #4
 80010fa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001100:	4619      	mov	r1, r3
 8001102:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001106:	f001 fd85 	bl	8002c14 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800110a:	4b09      	ldr	r3, [pc, #36]	; (8001130 <HAL_I2C_MspInit+0x154>)
 800110c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800110e:	4a08      	ldr	r2, [pc, #32]	; (8001130 <HAL_I2C_MspInit+0x154>)
 8001110:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001114:	6593      	str	r3, [r2, #88]	; 0x58
 8001116:	4b06      	ldr	r3, [pc, #24]	; (8001130 <HAL_I2C_MspInit+0x154>)
 8001118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800111a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800111e:	60fb      	str	r3, [r7, #12]
 8001120:	68fb      	ldr	r3, [r7, #12]
}
 8001122:	bf00      	nop
 8001124:	3738      	adds	r7, #56	; 0x38
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	40005400 	.word	0x40005400
 8001130:	40021000 	.word	0x40021000
 8001134:	48000400 	.word	0x48000400
 8001138:	40005800 	.word	0x40005800
 800113c:	48000800 	.word	0x48000800

08001140 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b08a      	sub	sp, #40	; 0x28
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001148:	f107 0314 	add.w	r3, r7, #20
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	605a      	str	r2, [r3, #4]
 8001152:	609a      	str	r2, [r3, #8]
 8001154:	60da      	str	r2, [r3, #12]
 8001156:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a25      	ldr	r2, [pc, #148]	; (80011f4 <HAL_SPI_MspInit+0xb4>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d144      	bne.n	80011ec <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001162:	4b25      	ldr	r3, [pc, #148]	; (80011f8 <HAL_SPI_MspInit+0xb8>)
 8001164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001166:	4a24      	ldr	r2, [pc, #144]	; (80011f8 <HAL_SPI_MspInit+0xb8>)
 8001168:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800116c:	6593      	str	r3, [r2, #88]	; 0x58
 800116e:	4b22      	ldr	r3, [pc, #136]	; (80011f8 <HAL_SPI_MspInit+0xb8>)
 8001170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001172:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001176:	613b      	str	r3, [r7, #16]
 8001178:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800117a:	4b1f      	ldr	r3, [pc, #124]	; (80011f8 <HAL_SPI_MspInit+0xb8>)
 800117c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800117e:	4a1e      	ldr	r2, [pc, #120]	; (80011f8 <HAL_SPI_MspInit+0xb8>)
 8001180:	f043 0304 	orr.w	r3, r3, #4
 8001184:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001186:	4b1c      	ldr	r3, [pc, #112]	; (80011f8 <HAL_SPI_MspInit+0xb8>)
 8001188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800118a:	f003 0304 	and.w	r3, r3, #4
 800118e:	60fb      	str	r3, [r7, #12]
 8001190:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001192:	4b19      	ldr	r3, [pc, #100]	; (80011f8 <HAL_SPI_MspInit+0xb8>)
 8001194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001196:	4a18      	ldr	r2, [pc, #96]	; (80011f8 <HAL_SPI_MspInit+0xb8>)
 8001198:	f043 0302 	orr.w	r3, r3, #2
 800119c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800119e:	4b16      	ldr	r3, [pc, #88]	; (80011f8 <HAL_SPI_MspInit+0xb8>)
 80011a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011a2:	f003 0302 	and.w	r3, r3, #2
 80011a6:	60bb      	str	r3, [r7, #8]
 80011a8:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80011aa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80011ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b0:	2302      	movs	r3, #2
 80011b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b4:	2300      	movs	r3, #0
 80011b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b8:	2300      	movs	r3, #0
 80011ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80011bc:	2306      	movs	r3, #6
 80011be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011c0:	f107 0314 	add.w	r3, r7, #20
 80011c4:	4619      	mov	r1, r3
 80011c6:	480d      	ldr	r0, [pc, #52]	; (80011fc <HAL_SPI_MspInit+0xbc>)
 80011c8:	f001 fd24 	bl	8002c14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80011cc:	2320      	movs	r3, #32
 80011ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d0:	2302      	movs	r3, #2
 80011d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d4:	2300      	movs	r3, #0
 80011d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d8:	2300      	movs	r3, #0
 80011da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80011dc:	2306      	movs	r3, #6
 80011de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e0:	f107 0314 	add.w	r3, r7, #20
 80011e4:	4619      	mov	r1, r3
 80011e6:	4806      	ldr	r0, [pc, #24]	; (8001200 <HAL_SPI_MspInit+0xc0>)
 80011e8:	f001 fd14 	bl	8002c14 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80011ec:	bf00      	nop
 80011ee:	3728      	adds	r7, #40	; 0x28
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	40003c00 	.word	0x40003c00
 80011f8:	40021000 	.word	0x40021000
 80011fc:	48000800 	.word	0x48000800
 8001200:	48000400 	.word	0x48000400

08001204 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b08a      	sub	sp, #40	; 0x28
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800120c:	f107 0314 	add.w	r3, r7, #20
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	605a      	str	r2, [r3, #4]
 8001216:	609a      	str	r2, [r3, #8]
 8001218:	60da      	str	r2, [r3, #12]
 800121a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a25      	ldr	r2, [pc, #148]	; (80012b8 <HAL_UART_MspInit+0xb4>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d144      	bne.n	80012b0 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001226:	4b25      	ldr	r3, [pc, #148]	; (80012bc <HAL_UART_MspInit+0xb8>)
 8001228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800122a:	4a24      	ldr	r2, [pc, #144]	; (80012bc <HAL_UART_MspInit+0xb8>)
 800122c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001230:	6593      	str	r3, [r2, #88]	; 0x58
 8001232:	4b22      	ldr	r3, [pc, #136]	; (80012bc <HAL_UART_MspInit+0xb8>)
 8001234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001236:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800123a:	613b      	str	r3, [r7, #16]
 800123c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800123e:	4b1f      	ldr	r3, [pc, #124]	; (80012bc <HAL_UART_MspInit+0xb8>)
 8001240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001242:	4a1e      	ldr	r2, [pc, #120]	; (80012bc <HAL_UART_MspInit+0xb8>)
 8001244:	f043 0304 	orr.w	r3, r3, #4
 8001248:	64d3      	str	r3, [r2, #76]	; 0x4c
 800124a:	4b1c      	ldr	r3, [pc, #112]	; (80012bc <HAL_UART_MspInit+0xb8>)
 800124c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800124e:	f003 0304 	and.w	r3, r3, #4
 8001252:	60fb      	str	r3, [r7, #12]
 8001254:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001256:	4b19      	ldr	r3, [pc, #100]	; (80012bc <HAL_UART_MspInit+0xb8>)
 8001258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800125a:	4a18      	ldr	r2, [pc, #96]	; (80012bc <HAL_UART_MspInit+0xb8>)
 800125c:	f043 0308 	orr.w	r3, r3, #8
 8001260:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001262:	4b16      	ldr	r3, [pc, #88]	; (80012bc <HAL_UART_MspInit+0xb8>)
 8001264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001266:	f003 0308 	and.w	r3, r3, #8
 800126a:	60bb      	str	r3, [r7, #8]
 800126c:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800126e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001272:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001274:	2302      	movs	r3, #2
 8001276:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001278:	2300      	movs	r3, #0
 800127a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800127c:	2300      	movs	r3, #0
 800127e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8001280:	2305      	movs	r3, #5
 8001282:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001284:	f107 0314 	add.w	r3, r7, #20
 8001288:	4619      	mov	r1, r3
 800128a:	480d      	ldr	r0, [pc, #52]	; (80012c0 <HAL_UART_MspInit+0xbc>)
 800128c:	f001 fcc2 	bl	8002c14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001290:	2304      	movs	r3, #4
 8001292:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001294:	2302      	movs	r3, #2
 8001296:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001298:	2300      	movs	r3, #0
 800129a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129c:	2300      	movs	r3, #0
 800129e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 80012a0:	2305      	movs	r3, #5
 80012a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012a4:	f107 0314 	add.w	r3, r7, #20
 80012a8:	4619      	mov	r1, r3
 80012aa:	4806      	ldr	r0, [pc, #24]	; (80012c4 <HAL_UART_MspInit+0xc0>)
 80012ac:	f001 fcb2 	bl	8002c14 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 80012b0:	bf00      	nop
 80012b2:	3728      	adds	r7, #40	; 0x28
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	40005000 	.word	0x40005000
 80012bc:	40021000 	.word	0x40021000
 80012c0:	48000800 	.word	0x48000800
 80012c4:	48000c00 	.word	0x48000c00

080012c8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b085      	sub	sp, #20
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a0a      	ldr	r2, [pc, #40]	; (8001300 <HAL_PCD_MspInit+0x38>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d10b      	bne.n	80012f2 <HAL_PCD_MspInit+0x2a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80012da:	4b0a      	ldr	r3, [pc, #40]	; (8001304 <HAL_PCD_MspInit+0x3c>)
 80012dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012de:	4a09      	ldr	r2, [pc, #36]	; (8001304 <HAL_PCD_MspInit+0x3c>)
 80012e0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80012e4:	6593      	str	r3, [r2, #88]	; 0x58
 80012e6:	4b07      	ldr	r3, [pc, #28]	; (8001304 <HAL_PCD_MspInit+0x3c>)
 80012e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80012ee:	60fb      	str	r3, [r7, #12]
 80012f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80012f2:	bf00      	nop
 80012f4:	3714      	adds	r7, #20
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	40005c00 	.word	0x40005c00
 8001304:	40021000 	.word	0x40021000

08001308 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800130c:	bf00      	nop
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr

08001316 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001316:	b480      	push	{r7}
 8001318:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800131a:	e7fe      	b.n	800131a <HardFault_Handler+0x4>

0800131c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001320:	e7fe      	b.n	8001320 <MemManage_Handler+0x4>

08001322 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001322:	b480      	push	{r7}
 8001324:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001326:	e7fe      	b.n	8001326 <BusFault_Handler+0x4>

08001328 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800132c:	e7fe      	b.n	800132c <UsageFault_Handler+0x4>

0800132e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800132e:	b480      	push	{r7}
 8001330:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001332:	bf00      	nop
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr

0800133c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001340:	bf00      	nop
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr

0800134a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800134a:	b480      	push	{r7}
 800134c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800134e:	bf00      	nop
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr

08001358 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800135c:	f000 f894 	bl	8001488 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001360:	bf00      	nop
 8001362:	bd80      	pop	{r7, pc}

08001364 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001368:	4b08      	ldr	r3, [pc, #32]	; (800138c <SystemInit+0x28>)
 800136a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800136e:	4a07      	ldr	r2, [pc, #28]	; (800138c <SystemInit+0x28>)
 8001370:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001374:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001378:	4b04      	ldr	r3, [pc, #16]	; (800138c <SystemInit+0x28>)
 800137a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800137e:	609a      	str	r2, [r3, #8]
#endif
}
 8001380:	bf00      	nop
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	e000ed00 	.word	0xe000ed00

08001390 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001390:	480d      	ldr	r0, [pc, #52]	; (80013c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001392:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001394:	480d      	ldr	r0, [pc, #52]	; (80013cc <LoopForever+0x6>)
  ldr r1, =_edata
 8001396:	490e      	ldr	r1, [pc, #56]	; (80013d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001398:	4a0e      	ldr	r2, [pc, #56]	; (80013d4 <LoopForever+0xe>)
  movs r3, #0
 800139a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800139c:	e002      	b.n	80013a4 <LoopCopyDataInit>

0800139e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800139e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013a2:	3304      	adds	r3, #4

080013a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013a8:	d3f9      	bcc.n	800139e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013aa:	4a0b      	ldr	r2, [pc, #44]	; (80013d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013ac:	4c0b      	ldr	r4, [pc, #44]	; (80013dc <LoopForever+0x16>)
  movs r3, #0
 80013ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013b0:	e001      	b.n	80013b6 <LoopFillZerobss>

080013b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013b4:	3204      	adds	r2, #4

080013b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013b8:	d3fb      	bcc.n	80013b2 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80013ba:	f7ff ffd3 	bl	8001364 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013be:	f004 fdb1 	bl	8005f24 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013c2:	f7ff f8a9 	bl	8000518 <main>

080013c6 <LoopForever>:

LoopForever:
    b LoopForever
 80013c6:	e7fe      	b.n	80013c6 <LoopForever>
  ldr   r0, =_estack
 80013c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013d0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80013d4:	08005fe4 	.word	0x08005fe4
  ldr r2, =_sbss
 80013d8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80013dc:	20000674 	.word	0x20000674

080013e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013e0:	e7fe      	b.n	80013e0 <ADC1_2_IRQHandler>

080013e2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013e2:	b580      	push	{r7, lr}
 80013e4:	b082      	sub	sp, #8
 80013e6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013e8:	2300      	movs	r3, #0
 80013ea:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013ec:	2003      	movs	r0, #3
 80013ee:	f001 fa19 	bl	8002824 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013f2:	2000      	movs	r0, #0
 80013f4:	f000 f80e 	bl	8001414 <HAL_InitTick>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d002      	beq.n	8001404 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	71fb      	strb	r3, [r7, #7]
 8001402:	e001      	b.n	8001408 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001404:	f7ff fccc 	bl	8000da0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001408:	79fb      	ldrb	r3, [r7, #7]

}
 800140a:	4618      	mov	r0, r3
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
	...

08001414 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800141c:	2300      	movs	r3, #0
 800141e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001420:	4b16      	ldr	r3, [pc, #88]	; (800147c <HAL_InitTick+0x68>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d022      	beq.n	800146e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001428:	4b15      	ldr	r3, [pc, #84]	; (8001480 <HAL_InitTick+0x6c>)
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	4b13      	ldr	r3, [pc, #76]	; (800147c <HAL_InitTick+0x68>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001434:	fbb1 f3f3 	udiv	r3, r1, r3
 8001438:	fbb2 f3f3 	udiv	r3, r2, r3
 800143c:	4618      	mov	r0, r3
 800143e:	f001 fa16 	bl	800286e <HAL_SYSTICK_Config>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d10f      	bne.n	8001468 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2b0f      	cmp	r3, #15
 800144c:	d809      	bhi.n	8001462 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800144e:	2200      	movs	r2, #0
 8001450:	6879      	ldr	r1, [r7, #4]
 8001452:	f04f 30ff 	mov.w	r0, #4294967295
 8001456:	f001 f9f0 	bl	800283a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800145a:	4a0a      	ldr	r2, [pc, #40]	; (8001484 <HAL_InitTick+0x70>)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6013      	str	r3, [r2, #0]
 8001460:	e007      	b.n	8001472 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	73fb      	strb	r3, [r7, #15]
 8001466:	e004      	b.n	8001472 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001468:	2301      	movs	r3, #1
 800146a:	73fb      	strb	r3, [r7, #15]
 800146c:	e001      	b.n	8001472 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001472:	7bfb      	ldrb	r3, [r7, #15]
}
 8001474:	4618      	mov	r0, r3
 8001476:	3710      	adds	r7, #16
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	20000008 	.word	0x20000008
 8001480:	20000000 	.word	0x20000000
 8001484:	20000004 	.word	0x20000004

08001488 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800148c:	4b05      	ldr	r3, [pc, #20]	; (80014a4 <HAL_IncTick+0x1c>)
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	4b05      	ldr	r3, [pc, #20]	; (80014a8 <HAL_IncTick+0x20>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4413      	add	r3, r2
 8001496:	4a03      	ldr	r2, [pc, #12]	; (80014a4 <HAL_IncTick+0x1c>)
 8001498:	6013      	str	r3, [r2, #0]
}
 800149a:	bf00      	nop
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr
 80014a4:	20000670 	.word	0x20000670
 80014a8:	20000008 	.word	0x20000008

080014ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  return uwTick;
 80014b0:	4b03      	ldr	r3, [pc, #12]	; (80014c0 <HAL_GetTick+0x14>)
 80014b2:	681b      	ldr	r3, [r3, #0]
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	20000670 	.word	0x20000670

080014c4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	431a      	orrs	r2, r3
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	609a      	str	r2, [r3, #8]
}
 80014de:	bf00      	nop
 80014e0:	370c      	adds	r7, #12
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr

080014ea <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80014ea:	b480      	push	{r7}
 80014ec:	b083      	sub	sp, #12
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	6078      	str	r0, [r7, #4]
 80014f2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	431a      	orrs	r2, r3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	609a      	str	r2, [r3, #8]
}
 8001504:	bf00      	nop
 8001506:	370c      	adds	r7, #12
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr

08001510 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001520:	4618      	mov	r0, r3
 8001522:	370c      	adds	r7, #12
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr

0800152c <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800152c:	b480      	push	{r7}
 800152e:	b087      	sub	sp, #28
 8001530:	af00      	add	r7, sp, #0
 8001532:	60f8      	str	r0, [r7, #12]
 8001534:	60b9      	str	r1, [r7, #8]
 8001536:	607a      	str	r2, [r7, #4]
 8001538:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	3360      	adds	r3, #96	; 0x60
 800153e:	461a      	mov	r2, r3
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	4413      	add	r3, r2
 8001546:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	4b08      	ldr	r3, [pc, #32]	; (8001570 <LL_ADC_SetOffset+0x44>)
 800154e:	4013      	ands	r3, r2
 8001550:	687a      	ldr	r2, [r7, #4]
 8001552:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001556:	683a      	ldr	r2, [r7, #0]
 8001558:	430a      	orrs	r2, r1
 800155a:	4313      	orrs	r3, r2
 800155c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001564:	bf00      	nop
 8001566:	371c      	adds	r7, #28
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr
 8001570:	03fff000 	.word	0x03fff000

08001574 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001574:	b480      	push	{r7}
 8001576:	b085      	sub	sp, #20
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	3360      	adds	r3, #96	; 0x60
 8001582:	461a      	mov	r2, r3
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	4413      	add	r3, r2
 800158a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001594:	4618      	mov	r0, r3
 8001596:	3714      	adds	r7, #20
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr

080015a0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b087      	sub	sp, #28
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	60f8      	str	r0, [r7, #12]
 80015a8:	60b9      	str	r1, [r7, #8]
 80015aa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	3360      	adds	r3, #96	; 0x60
 80015b0:	461a      	mov	r2, r3
 80015b2:	68bb      	ldr	r3, [r7, #8]
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	4413      	add	r3, r2
 80015b8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	431a      	orrs	r2, r3
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80015ca:	bf00      	nop
 80015cc:	371c      	adds	r7, #28
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr

080015d6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80015d6:	b480      	push	{r7}
 80015d8:	b087      	sub	sp, #28
 80015da:	af00      	add	r7, sp, #0
 80015dc:	60f8      	str	r0, [r7, #12]
 80015de:	60b9      	str	r1, [r7, #8]
 80015e0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	3360      	adds	r3, #96	; 0x60
 80015e6:	461a      	mov	r2, r3
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	4413      	add	r3, r2
 80015ee:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	431a      	orrs	r2, r3
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001600:	bf00      	nop
 8001602:	371c      	adds	r7, #28
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr

0800160c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800160c:	b480      	push	{r7}
 800160e:	b087      	sub	sp, #28
 8001610:	af00      	add	r7, sp, #0
 8001612:	60f8      	str	r0, [r7, #12]
 8001614:	60b9      	str	r1, [r7, #8]
 8001616:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	3360      	adds	r3, #96	; 0x60
 800161c:	461a      	mov	r2, r3
 800161e:	68bb      	ldr	r3, [r7, #8]
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	4413      	add	r3, r2
 8001624:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	431a      	orrs	r2, r3
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001636:	bf00      	nop
 8001638:	371c      	adds	r7, #28
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr

08001642 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001642:	b480      	push	{r7}
 8001644:	b083      	sub	sp, #12
 8001646:	af00      	add	r7, sp, #0
 8001648:	6078      	str	r0, [r7, #4]
 800164a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	695b      	ldr	r3, [r3, #20]
 8001650:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	431a      	orrs	r2, r3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	615a      	str	r2, [r3, #20]
}
 800165c:	bf00      	nop
 800165e:	370c      	adds	r7, #12
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr

08001668 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001668:	b480      	push	{r7}
 800166a:	b087      	sub	sp, #28
 800166c:	af00      	add	r7, sp, #0
 800166e:	60f8      	str	r0, [r7, #12]
 8001670:	60b9      	str	r1, [r7, #8]
 8001672:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	3330      	adds	r3, #48	; 0x30
 8001678:	461a      	mov	r2, r3
 800167a:	68bb      	ldr	r3, [r7, #8]
 800167c:	0a1b      	lsrs	r3, r3, #8
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	f003 030c 	and.w	r3, r3, #12
 8001684:	4413      	add	r3, r2
 8001686:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	f003 031f 	and.w	r3, r3, #31
 8001692:	211f      	movs	r1, #31
 8001694:	fa01 f303 	lsl.w	r3, r1, r3
 8001698:	43db      	mvns	r3, r3
 800169a:	401a      	ands	r2, r3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	0e9b      	lsrs	r3, r3, #26
 80016a0:	f003 011f 	and.w	r1, r3, #31
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	f003 031f 	and.w	r3, r3, #31
 80016aa:	fa01 f303 	lsl.w	r3, r1, r3
 80016ae:	431a      	orrs	r2, r3
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80016b4:	bf00      	nop
 80016b6:	371c      	adds	r7, #28
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr

080016c0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b087      	sub	sp, #28
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	60f8      	str	r0, [r7, #12]
 80016c8:	60b9      	str	r1, [r7, #8]
 80016ca:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	3314      	adds	r3, #20
 80016d0:	461a      	mov	r2, r3
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	0e5b      	lsrs	r3, r3, #25
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	f003 0304 	and.w	r3, r3, #4
 80016dc:	4413      	add	r3, r2
 80016de:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	0d1b      	lsrs	r3, r3, #20
 80016e8:	f003 031f 	and.w	r3, r3, #31
 80016ec:	2107      	movs	r1, #7
 80016ee:	fa01 f303 	lsl.w	r3, r1, r3
 80016f2:	43db      	mvns	r3, r3
 80016f4:	401a      	ands	r2, r3
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	0d1b      	lsrs	r3, r3, #20
 80016fa:	f003 031f 	and.w	r3, r3, #31
 80016fe:	6879      	ldr	r1, [r7, #4]
 8001700:	fa01 f303 	lsl.w	r3, r1, r3
 8001704:	431a      	orrs	r2, r3
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800170a:	bf00      	nop
 800170c:	371c      	adds	r7, #28
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
	...

08001718 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001718:	b480      	push	{r7}
 800171a:	b085      	sub	sp, #20
 800171c:	af00      	add	r7, sp, #0
 800171e:	60f8      	str	r0, [r7, #12]
 8001720:	60b9      	str	r1, [r7, #8]
 8001722:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001730:	43db      	mvns	r3, r3
 8001732:	401a      	ands	r2, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	f003 0318 	and.w	r3, r3, #24
 800173a:	4908      	ldr	r1, [pc, #32]	; (800175c <LL_ADC_SetChannelSingleDiff+0x44>)
 800173c:	40d9      	lsrs	r1, r3
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	400b      	ands	r3, r1
 8001742:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001746:	431a      	orrs	r2, r3
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800174e:	bf00      	nop
 8001750:	3714      	adds	r7, #20
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	0007ffff 	.word	0x0007ffff

08001760 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001770:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001774:	687a      	ldr	r2, [r7, #4]
 8001776:	6093      	str	r3, [r2, #8]
}
 8001778:	bf00      	nop
 800177a:	370c      	adds	r7, #12
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr

08001784 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001794:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001798:	d101      	bne.n	800179e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800179a:	2301      	movs	r3, #1
 800179c:	e000      	b.n	80017a0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800179e:	2300      	movs	r3, #0
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	370c      	adds	r7, #12
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr

080017ac <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80017bc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80017c0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80017c8:	bf00      	nop
 80017ca:	370c      	adds	r7, #12
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr

080017d4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80017e8:	d101      	bne.n	80017ee <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80017ea:	2301      	movs	r3, #1
 80017ec:	e000      	b.n	80017f0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80017ee:	2300      	movs	r3, #0
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	370c      	adds	r7, #12
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr

080017fc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	f003 0301 	and.w	r3, r3, #1
 800180c:	2b01      	cmp	r3, #1
 800180e:	d101      	bne.n	8001814 <LL_ADC_IsEnabled+0x18>
 8001810:	2301      	movs	r3, #1
 8001812:	e000      	b.n	8001816 <LL_ADC_IsEnabled+0x1a>
 8001814:	2300      	movs	r3, #0
}
 8001816:	4618      	mov	r0, r3
 8001818:	370c      	adds	r7, #12
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr

08001822 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001822:	b480      	push	{r7}
 8001824:	b083      	sub	sp, #12
 8001826:	af00      	add	r7, sp, #0
 8001828:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	f003 0304 	and.w	r3, r3, #4
 8001832:	2b04      	cmp	r3, #4
 8001834:	d101      	bne.n	800183a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001836:	2301      	movs	r3, #1
 8001838:	e000      	b.n	800183c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800183a:	2300      	movs	r3, #0
}
 800183c:	4618      	mov	r0, r3
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr

08001848 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	f003 0308 	and.w	r3, r3, #8
 8001858:	2b08      	cmp	r3, #8
 800185a:	d101      	bne.n	8001860 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800185c:	2301      	movs	r3, #1
 800185e:	e000      	b.n	8001862 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001860:	2300      	movs	r3, #0
}
 8001862:	4618      	mov	r0, r3
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
	...

08001870 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001870:	b590      	push	{r4, r7, lr}
 8001872:	b089      	sub	sp, #36	; 0x24
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001878:	2300      	movs	r3, #0
 800187a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800187c:	2300      	movs	r3, #0
 800187e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d101      	bne.n	800188a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e1ad      	b.n	8001be6 <HAL_ADC_Init+0x376>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	695b      	ldr	r3, [r3, #20]
 800188e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001894:	2b00      	cmp	r3, #0
 8001896:	d109      	bne.n	80018ac <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f7ff fab5 	bl	8000e08 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2200      	movs	r2, #0
 80018a2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2200      	movs	r2, #0
 80018a8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7ff ff67 	bl	8001784 <LL_ADC_IsDeepPowerDownEnabled>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d004      	beq.n	80018c6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7ff ff4d 	bl	8001760 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4618      	mov	r0, r3
 80018cc:	f7ff ff82 	bl	80017d4 <LL_ADC_IsInternalRegulatorEnabled>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d113      	bne.n	80018fe <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4618      	mov	r0, r3
 80018dc:	f7ff ff66 	bl	80017ac <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80018e0:	4b9e      	ldr	r3, [pc, #632]	; (8001b5c <HAL_ADC_Init+0x2ec>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	099b      	lsrs	r3, r3, #6
 80018e6:	4a9e      	ldr	r2, [pc, #632]	; (8001b60 <HAL_ADC_Init+0x2f0>)
 80018e8:	fba2 2303 	umull	r2, r3, r2, r3
 80018ec:	099b      	lsrs	r3, r3, #6
 80018ee:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80018f0:	e002      	b.n	80018f8 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	3b01      	subs	r3, #1
 80018f6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d1f9      	bne.n	80018f2 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4618      	mov	r0, r3
 8001904:	f7ff ff66 	bl	80017d4 <LL_ADC_IsInternalRegulatorEnabled>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d10d      	bne.n	800192a <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001912:	f043 0210 	orr.w	r2, r3, #16
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800191e:	f043 0201 	orr.w	r2, r3, #1
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4618      	mov	r0, r3
 8001930:	f7ff ff77 	bl	8001822 <LL_ADC_REG_IsConversionOngoing>
 8001934:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800193a:	f003 0310 	and.w	r3, r3, #16
 800193e:	2b00      	cmp	r3, #0
 8001940:	f040 8148 	bne.w	8001bd4 <HAL_ADC_Init+0x364>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	2b00      	cmp	r3, #0
 8001948:	f040 8144 	bne.w	8001bd4 <HAL_ADC_Init+0x364>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001950:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001954:	f043 0202 	orr.w	r2, r3, #2
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4618      	mov	r0, r3
 8001962:	f7ff ff4b 	bl	80017fc <LL_ADC_IsEnabled>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d141      	bne.n	80019f0 <HAL_ADC_Init+0x180>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001974:	d004      	beq.n	8001980 <HAL_ADC_Init+0x110>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a7a      	ldr	r2, [pc, #488]	; (8001b64 <HAL_ADC_Init+0x2f4>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d10f      	bne.n	80019a0 <HAL_ADC_Init+0x130>
 8001980:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001984:	f7ff ff3a 	bl	80017fc <LL_ADC_IsEnabled>
 8001988:	4604      	mov	r4, r0
 800198a:	4876      	ldr	r0, [pc, #472]	; (8001b64 <HAL_ADC_Init+0x2f4>)
 800198c:	f7ff ff36 	bl	80017fc <LL_ADC_IsEnabled>
 8001990:	4603      	mov	r3, r0
 8001992:	4323      	orrs	r3, r4
 8001994:	2b00      	cmp	r3, #0
 8001996:	bf0c      	ite	eq
 8001998:	2301      	moveq	r3, #1
 800199a:	2300      	movne	r3, #0
 800199c:	b2db      	uxtb	r3, r3
 800199e:	e012      	b.n	80019c6 <HAL_ADC_Init+0x156>
 80019a0:	4871      	ldr	r0, [pc, #452]	; (8001b68 <HAL_ADC_Init+0x2f8>)
 80019a2:	f7ff ff2b 	bl	80017fc <LL_ADC_IsEnabled>
 80019a6:	4604      	mov	r4, r0
 80019a8:	4870      	ldr	r0, [pc, #448]	; (8001b6c <HAL_ADC_Init+0x2fc>)
 80019aa:	f7ff ff27 	bl	80017fc <LL_ADC_IsEnabled>
 80019ae:	4603      	mov	r3, r0
 80019b0:	431c      	orrs	r4, r3
 80019b2:	486f      	ldr	r0, [pc, #444]	; (8001b70 <HAL_ADC_Init+0x300>)
 80019b4:	f7ff ff22 	bl	80017fc <LL_ADC_IsEnabled>
 80019b8:	4603      	mov	r3, r0
 80019ba:	4323      	orrs	r3, r4
 80019bc:	2b00      	cmp	r3, #0
 80019be:	bf0c      	ite	eq
 80019c0:	2301      	moveq	r3, #1
 80019c2:	2300      	movne	r3, #0
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d012      	beq.n	80019f0 <HAL_ADC_Init+0x180>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019d2:	d004      	beq.n	80019de <HAL_ADC_Init+0x16e>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a62      	ldr	r2, [pc, #392]	; (8001b64 <HAL_ADC_Init+0x2f4>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d101      	bne.n	80019e2 <HAL_ADC_Init+0x172>
 80019de:	4a65      	ldr	r2, [pc, #404]	; (8001b74 <HAL_ADC_Init+0x304>)
 80019e0:	e000      	b.n	80019e4 <HAL_ADC_Init+0x174>
 80019e2:	4a65      	ldr	r2, [pc, #404]	; (8001b78 <HAL_ADC_Init+0x308>)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	4619      	mov	r1, r3
 80019ea:	4610      	mov	r0, r2
 80019ec:	f7ff fd6a 	bl	80014c4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	7f5b      	ldrb	r3, [r3, #29]
 80019f4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80019fa:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001a00:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001a06:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a0e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001a10:	4313      	orrs	r3, r2
 8001a12:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d106      	bne.n	8001a2c <HAL_ADC_Init+0x1bc>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a22:	3b01      	subs	r3, #1
 8001a24:	045b      	lsls	r3, r3, #17
 8001a26:	69ba      	ldr	r2, [r7, #24]
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d009      	beq.n	8001a48 <HAL_ADC_Init+0x1d8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a38:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a40:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001a42:	69ba      	ldr	r2, [r7, #24]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	68da      	ldr	r2, [r3, #12]
 8001a4e:	4b4b      	ldr	r3, [pc, #300]	; (8001b7c <HAL_ADC_Init+0x30c>)
 8001a50:	4013      	ands	r3, r2
 8001a52:	687a      	ldr	r2, [r7, #4]
 8001a54:	6812      	ldr	r2, [r2, #0]
 8001a56:	69b9      	ldr	r1, [r7, #24]
 8001a58:	430b      	orrs	r3, r1
 8001a5a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	691b      	ldr	r3, [r3, #16]
 8001a62:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	430a      	orrs	r2, r1
 8001a70:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7ff fed3 	bl	8001822 <LL_ADC_REG_IsConversionOngoing>
 8001a7c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f7ff fee0 	bl	8001848 <LL_ADC_INJ_IsConversionOngoing>
 8001a88:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d17f      	bne.n	8001b90 <HAL_ADC_Init+0x320>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d17c      	bne.n	8001b90 <HAL_ADC_Init+0x320>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001a9a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001aa2:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	68db      	ldr	r3, [r3, #12]
 8001aae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001ab2:	f023 0302 	bic.w	r3, r3, #2
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	6812      	ldr	r2, [r2, #0]
 8001aba:	69b9      	ldr	r1, [r7, #24]
 8001abc:	430b      	orrs	r3, r1
 8001abe:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	691b      	ldr	r3, [r3, #16]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d017      	beq.n	8001af8 <HAL_ADC_Init+0x288>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	691a      	ldr	r2, [r3, #16]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001ad6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001ae0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001ae4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ae8:	687a      	ldr	r2, [r7, #4]
 8001aea:	6911      	ldr	r1, [r2, #16]
 8001aec:	687a      	ldr	r2, [r7, #4]
 8001aee:	6812      	ldr	r2, [r2, #0]
 8001af0:	430b      	orrs	r3, r1
 8001af2:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001af6:	e013      	b.n	8001b20 <HAL_ADC_Init+0x2b0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	691a      	ldr	r2, [r3, #16]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001b06:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	6812      	ldr	r2, [r2, #0]
 8001b14:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001b18:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b1c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d12a      	bne.n	8001b80 <HAL_ADC_Init+0x310>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	691b      	ldr	r3, [r3, #16]
 8001b30:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001b34:	f023 0304 	bic.w	r3, r3, #4
 8001b38:	687a      	ldr	r2, [r7, #4]
 8001b3a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001b3c:	687a      	ldr	r2, [r7, #4]
 8001b3e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001b40:	4311      	orrs	r1, r2
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001b46:	4311      	orrs	r1, r2
 8001b48:	687a      	ldr	r2, [r7, #4]
 8001b4a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001b4c:	430a      	orrs	r2, r1
 8001b4e:	431a      	orrs	r2, r3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f042 0201 	orr.w	r2, r2, #1
 8001b58:	611a      	str	r2, [r3, #16]
 8001b5a:	e019      	b.n	8001b90 <HAL_ADC_Init+0x320>
 8001b5c:	20000000 	.word	0x20000000
 8001b60:	053e2d63 	.word	0x053e2d63
 8001b64:	50000100 	.word	0x50000100
 8001b68:	50000400 	.word	0x50000400
 8001b6c:	50000500 	.word	0x50000500
 8001b70:	50000600 	.word	0x50000600
 8001b74:	50000300 	.word	0x50000300
 8001b78:	50000700 	.word	0x50000700
 8001b7c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	691a      	ldr	r2, [r3, #16]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f022 0201 	bic.w	r2, r2, #1
 8001b8e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	695b      	ldr	r3, [r3, #20]
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d10c      	bne.n	8001bb2 <HAL_ADC_Init+0x342>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9e:	f023 010f 	bic.w	r1, r3, #15
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6a1b      	ldr	r3, [r3, #32]
 8001ba6:	1e5a      	subs	r2, r3, #1
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	430a      	orrs	r2, r1
 8001bae:	631a      	str	r2, [r3, #48]	; 0x30
 8001bb0:	e007      	b.n	8001bc2 <HAL_ADC_Init+0x352>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f022 020f 	bic.w	r2, r2, #15
 8001bc0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bc6:	f023 0303 	bic.w	r3, r3, #3
 8001bca:	f043 0201 	orr.w	r2, r3, #1
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	65da      	str	r2, [r3, #92]	; 0x5c
 8001bd2:	e007      	b.n	8001be4 <HAL_ADC_Init+0x374>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bd8:	f043 0210 	orr.w	r2, r3, #16
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001be4:	7ffb      	ldrb	r3, [r7, #31]
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3724      	adds	r7, #36	; 0x24
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd90      	pop	{r4, r7, pc}
 8001bee:	bf00      	nop

08001bf0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b0b6      	sub	sp, #216	; 0xd8
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001c00:	2300      	movs	r3, #0
 8001c02:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d102      	bne.n	8001c14 <HAL_ADC_ConfigChannel+0x24>
 8001c0e:	2302      	movs	r3, #2
 8001c10:	f000 bc12 	b.w	8002438 <HAL_ADC_ConfigChannel+0x848>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2201      	movs	r2, #1
 8001c18:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4618      	mov	r0, r3
 8001c22:	f7ff fdfe 	bl	8001822 <LL_ADC_REG_IsConversionOngoing>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	f040 83f2 	bne.w	8002412 <HAL_ADC_ConfigChannel+0x822>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6818      	ldr	r0, [r3, #0]
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	6859      	ldr	r1, [r3, #4]
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	f7ff fd14 	bl	8001668 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7ff fdec 	bl	8001822 <LL_ADC_REG_IsConversionOngoing>
 8001c4a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7ff fdf8 	bl	8001848 <LL_ADC_INJ_IsConversionOngoing>
 8001c58:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c5c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	f040 81d9 	bne.w	8002018 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001c66:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	f040 81d4 	bne.w	8002018 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001c78:	d10f      	bne.n	8001c9a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6818      	ldr	r0, [r3, #0]
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	2200      	movs	r2, #0
 8001c84:	4619      	mov	r1, r3
 8001c86:	f7ff fd1b 	bl	80016c0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7ff fcd5 	bl	8001642 <LL_ADC_SetSamplingTimeCommonConfig>
 8001c98:	e00e      	b.n	8001cb8 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6818      	ldr	r0, [r3, #0]
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	6819      	ldr	r1, [r3, #0]
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	f7ff fd0a 	bl	80016c0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	2100      	movs	r1, #0
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f7ff fcc5 	bl	8001642 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	695a      	ldr	r2, [r3, #20]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	68db      	ldr	r3, [r3, #12]
 8001cc2:	08db      	lsrs	r3, r3, #3
 8001cc4:	f003 0303 	and.w	r3, r3, #3
 8001cc8:	005b      	lsls	r3, r3, #1
 8001cca:	fa02 f303 	lsl.w	r3, r2, r3
 8001cce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	691b      	ldr	r3, [r3, #16]
 8001cd6:	2b04      	cmp	r3, #4
 8001cd8:	d022      	beq.n	8001d20 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6818      	ldr	r0, [r3, #0]
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	6919      	ldr	r1, [r3, #16]
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001cea:	f7ff fc1f 	bl	800152c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6818      	ldr	r0, [r3, #0]
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	6919      	ldr	r1, [r3, #16]
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	699b      	ldr	r3, [r3, #24]
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	f7ff fc6b 	bl	80015d6 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6818      	ldr	r0, [r3, #0]
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	6919      	ldr	r1, [r3, #16]
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	7f1b      	ldrb	r3, [r3, #28]
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d102      	bne.n	8001d16 <HAL_ADC_ConfigChannel+0x126>
 8001d10:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d14:	e000      	b.n	8001d18 <HAL_ADC_ConfigChannel+0x128>
 8001d16:	2300      	movs	r3, #0
 8001d18:	461a      	mov	r2, r3
 8001d1a:	f7ff fc77 	bl	800160c <LL_ADC_SetOffsetSaturation>
 8001d1e:	e17b      	b.n	8002018 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	2100      	movs	r1, #0
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7ff fc24 	bl	8001574 <LL_ADC_GetOffsetChannel>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d10a      	bne.n	8001d4c <HAL_ADC_ConfigChannel+0x15c>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	2100      	movs	r1, #0
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7ff fc19 	bl	8001574 <LL_ADC_GetOffsetChannel>
 8001d42:	4603      	mov	r3, r0
 8001d44:	0e9b      	lsrs	r3, r3, #26
 8001d46:	f003 021f 	and.w	r2, r3, #31
 8001d4a:	e01e      	b.n	8001d8a <HAL_ADC_ConfigChannel+0x19a>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	2100      	movs	r1, #0
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7ff fc0e 	bl	8001574 <LL_ADC_GetOffsetChannel>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d5e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001d62:	fa93 f3a3 	rbit	r3, r3
 8001d66:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001d6a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001d6e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001d72:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d101      	bne.n	8001d7e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8001d7a:	2320      	movs	r3, #32
 8001d7c:	e004      	b.n	8001d88 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8001d7e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001d82:	fab3 f383 	clz	r3, r3
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	461a      	mov	r2, r3
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d105      	bne.n	8001da2 <HAL_ADC_ConfigChannel+0x1b2>
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	0e9b      	lsrs	r3, r3, #26
 8001d9c:	f003 031f 	and.w	r3, r3, #31
 8001da0:	e018      	b.n	8001dd4 <HAL_ADC_ConfigChannel+0x1e4>
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001daa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001dae:	fa93 f3a3 	rbit	r3, r3
 8001db2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001db6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001dba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001dbe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d101      	bne.n	8001dca <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8001dc6:	2320      	movs	r3, #32
 8001dc8:	e004      	b.n	8001dd4 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8001dca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001dce:	fab3 f383 	clz	r3, r3
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d106      	bne.n	8001de6 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	2100      	movs	r1, #0
 8001de0:	4618      	mov	r0, r3
 8001de2:	f7ff fbdd 	bl	80015a0 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	2101      	movs	r1, #1
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7ff fbc1 	bl	8001574 <LL_ADC_GetOffsetChannel>
 8001df2:	4603      	mov	r3, r0
 8001df4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d10a      	bne.n	8001e12 <HAL_ADC_ConfigChannel+0x222>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	2101      	movs	r1, #1
 8001e02:	4618      	mov	r0, r3
 8001e04:	f7ff fbb6 	bl	8001574 <LL_ADC_GetOffsetChannel>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	0e9b      	lsrs	r3, r3, #26
 8001e0c:	f003 021f 	and.w	r2, r3, #31
 8001e10:	e01e      	b.n	8001e50 <HAL_ADC_ConfigChannel+0x260>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	2101      	movs	r1, #1
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7ff fbab 	bl	8001574 <LL_ADC_GetOffsetChannel>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e24:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001e28:	fa93 f3a3 	rbit	r3, r3
 8001e2c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001e30:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001e34:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001e38:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d101      	bne.n	8001e44 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8001e40:	2320      	movs	r3, #32
 8001e42:	e004      	b.n	8001e4e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8001e44:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001e48:	fab3 f383 	clz	r3, r3
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	461a      	mov	r2, r3
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d105      	bne.n	8001e68 <HAL_ADC_ConfigChannel+0x278>
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	0e9b      	lsrs	r3, r3, #26
 8001e62:	f003 031f 	and.w	r3, r3, #31
 8001e66:	e018      	b.n	8001e9a <HAL_ADC_ConfigChannel+0x2aa>
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e70:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001e74:	fa93 f3a3 	rbit	r3, r3
 8001e78:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001e7c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001e80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001e84:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d101      	bne.n	8001e90 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8001e8c:	2320      	movs	r3, #32
 8001e8e:	e004      	b.n	8001e9a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8001e90:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001e94:	fab3 f383 	clz	r3, r3
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d106      	bne.n	8001eac <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	2101      	movs	r1, #1
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f7ff fb7a 	bl	80015a0 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	2102      	movs	r1, #2
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f7ff fb5e 	bl	8001574 <LL_ADC_GetOffsetChannel>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d10a      	bne.n	8001ed8 <HAL_ADC_ConfigChannel+0x2e8>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	2102      	movs	r1, #2
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f7ff fb53 	bl	8001574 <LL_ADC_GetOffsetChannel>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	0e9b      	lsrs	r3, r3, #26
 8001ed2:	f003 021f 	and.w	r2, r3, #31
 8001ed6:	e01e      	b.n	8001f16 <HAL_ADC_ConfigChannel+0x326>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2102      	movs	r1, #2
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f7ff fb48 	bl	8001574 <LL_ADC_GetOffsetChannel>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001eee:	fa93 f3a3 	rbit	r3, r3
 8001ef2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001ef6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001efa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001efe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d101      	bne.n	8001f0a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8001f06:	2320      	movs	r3, #32
 8001f08:	e004      	b.n	8001f14 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8001f0a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001f0e:	fab3 f383 	clz	r3, r3
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	461a      	mov	r2, r3
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d105      	bne.n	8001f2e <HAL_ADC_ConfigChannel+0x33e>
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	0e9b      	lsrs	r3, r3, #26
 8001f28:	f003 031f 	and.w	r3, r3, #31
 8001f2c:	e016      	b.n	8001f5c <HAL_ADC_ConfigChannel+0x36c>
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f36:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001f3a:	fa93 f3a3 	rbit	r3, r3
 8001f3e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001f40:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001f42:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001f46:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d101      	bne.n	8001f52 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8001f4e:	2320      	movs	r3, #32
 8001f50:	e004      	b.n	8001f5c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8001f52:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f56:	fab3 f383 	clz	r3, r3
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d106      	bne.n	8001f6e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	2200      	movs	r2, #0
 8001f66:	2102      	movs	r1, #2
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f7ff fb19 	bl	80015a0 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	2103      	movs	r1, #3
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7ff fafd 	bl	8001574 <LL_ADC_GetOffsetChannel>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d10a      	bne.n	8001f9a <HAL_ADC_ConfigChannel+0x3aa>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	2103      	movs	r1, #3
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f7ff faf2 	bl	8001574 <LL_ADC_GetOffsetChannel>
 8001f90:	4603      	mov	r3, r0
 8001f92:	0e9b      	lsrs	r3, r3, #26
 8001f94:	f003 021f 	and.w	r2, r3, #31
 8001f98:	e017      	b.n	8001fca <HAL_ADC_ConfigChannel+0x3da>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	2103      	movs	r1, #3
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f7ff fae7 	bl	8001574 <LL_ADC_GetOffsetChannel>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001faa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001fac:	fa93 f3a3 	rbit	r3, r3
 8001fb0:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001fb2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001fb4:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001fb6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d101      	bne.n	8001fc0 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8001fbc:	2320      	movs	r3, #32
 8001fbe:	e003      	b.n	8001fc8 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8001fc0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001fc2:	fab3 f383 	clz	r3, r3
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	461a      	mov	r2, r3
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d105      	bne.n	8001fe2 <HAL_ADC_ConfigChannel+0x3f2>
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	0e9b      	lsrs	r3, r3, #26
 8001fdc:	f003 031f 	and.w	r3, r3, #31
 8001fe0:	e011      	b.n	8002006 <HAL_ADC_ConfigChannel+0x416>
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001fea:	fa93 f3a3 	rbit	r3, r3
 8001fee:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001ff0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001ff2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001ff4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d101      	bne.n	8001ffe <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8001ffa:	2320      	movs	r3, #32
 8001ffc:	e003      	b.n	8002006 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8001ffe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002000:	fab3 f383 	clz	r3, r3
 8002004:	b2db      	uxtb	r3, r3
 8002006:	429a      	cmp	r2, r3
 8002008:	d106      	bne.n	8002018 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	2200      	movs	r2, #0
 8002010:	2103      	movs	r1, #3
 8002012:	4618      	mov	r0, r3
 8002014:	f7ff fac4 	bl	80015a0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4618      	mov	r0, r3
 800201e:	f7ff fbed 	bl	80017fc <LL_ADC_IsEnabled>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	f040 813d 	bne.w	80022a4 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6818      	ldr	r0, [r3, #0]
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	6819      	ldr	r1, [r3, #0]
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	68db      	ldr	r3, [r3, #12]
 8002036:	461a      	mov	r2, r3
 8002038:	f7ff fb6e 	bl	8001718 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	4aa2      	ldr	r2, [pc, #648]	; (80022cc <HAL_ADC_ConfigChannel+0x6dc>)
 8002042:	4293      	cmp	r3, r2
 8002044:	f040 812e 	bne.w	80022a4 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002054:	2b00      	cmp	r3, #0
 8002056:	d10b      	bne.n	8002070 <HAL_ADC_ConfigChannel+0x480>
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	0e9b      	lsrs	r3, r3, #26
 800205e:	3301      	adds	r3, #1
 8002060:	f003 031f 	and.w	r3, r3, #31
 8002064:	2b09      	cmp	r3, #9
 8002066:	bf94      	ite	ls
 8002068:	2301      	movls	r3, #1
 800206a:	2300      	movhi	r3, #0
 800206c:	b2db      	uxtb	r3, r3
 800206e:	e019      	b.n	80020a4 <HAL_ADC_ConfigChannel+0x4b4>
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002076:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002078:	fa93 f3a3 	rbit	r3, r3
 800207c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800207e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002080:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002082:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002084:	2b00      	cmp	r3, #0
 8002086:	d101      	bne.n	800208c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002088:	2320      	movs	r3, #32
 800208a:	e003      	b.n	8002094 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800208c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800208e:	fab3 f383 	clz	r3, r3
 8002092:	b2db      	uxtb	r3, r3
 8002094:	3301      	adds	r3, #1
 8002096:	f003 031f 	and.w	r3, r3, #31
 800209a:	2b09      	cmp	r3, #9
 800209c:	bf94      	ite	ls
 800209e:	2301      	movls	r3, #1
 80020a0:	2300      	movhi	r3, #0
 80020a2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d079      	beq.n	800219c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d107      	bne.n	80020c4 <HAL_ADC_ConfigChannel+0x4d4>
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	0e9b      	lsrs	r3, r3, #26
 80020ba:	3301      	adds	r3, #1
 80020bc:	069b      	lsls	r3, r3, #26
 80020be:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80020c2:	e015      	b.n	80020f0 <HAL_ADC_ConfigChannel+0x500>
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020cc:	fa93 f3a3 	rbit	r3, r3
 80020d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80020d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020d4:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80020d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d101      	bne.n	80020e0 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80020dc:	2320      	movs	r3, #32
 80020de:	e003      	b.n	80020e8 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80020e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020e2:	fab3 f383 	clz	r3, r3
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	3301      	adds	r3, #1
 80020ea:	069b      	lsls	r3, r3, #26
 80020ec:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d109      	bne.n	8002110 <HAL_ADC_ConfigChannel+0x520>
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	0e9b      	lsrs	r3, r3, #26
 8002102:	3301      	adds	r3, #1
 8002104:	f003 031f 	and.w	r3, r3, #31
 8002108:	2101      	movs	r1, #1
 800210a:	fa01 f303 	lsl.w	r3, r1, r3
 800210e:	e017      	b.n	8002140 <HAL_ADC_ConfigChannel+0x550>
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002116:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002118:	fa93 f3a3 	rbit	r3, r3
 800211c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800211e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002120:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002122:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002124:	2b00      	cmp	r3, #0
 8002126:	d101      	bne.n	800212c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002128:	2320      	movs	r3, #32
 800212a:	e003      	b.n	8002134 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 800212c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800212e:	fab3 f383 	clz	r3, r3
 8002132:	b2db      	uxtb	r3, r3
 8002134:	3301      	adds	r3, #1
 8002136:	f003 031f 	and.w	r3, r3, #31
 800213a:	2101      	movs	r1, #1
 800213c:	fa01 f303 	lsl.w	r3, r1, r3
 8002140:	ea42 0103 	orr.w	r1, r2, r3
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800214c:	2b00      	cmp	r3, #0
 800214e:	d10a      	bne.n	8002166 <HAL_ADC_ConfigChannel+0x576>
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	0e9b      	lsrs	r3, r3, #26
 8002156:	3301      	adds	r3, #1
 8002158:	f003 021f 	and.w	r2, r3, #31
 800215c:	4613      	mov	r3, r2
 800215e:	005b      	lsls	r3, r3, #1
 8002160:	4413      	add	r3, r2
 8002162:	051b      	lsls	r3, r3, #20
 8002164:	e018      	b.n	8002198 <HAL_ADC_ConfigChannel+0x5a8>
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800216c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800216e:	fa93 f3a3 	rbit	r3, r3
 8002172:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002176:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002178:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800217a:	2b00      	cmp	r3, #0
 800217c:	d101      	bne.n	8002182 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800217e:	2320      	movs	r3, #32
 8002180:	e003      	b.n	800218a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002182:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002184:	fab3 f383 	clz	r3, r3
 8002188:	b2db      	uxtb	r3, r3
 800218a:	3301      	adds	r3, #1
 800218c:	f003 021f 	and.w	r2, r3, #31
 8002190:	4613      	mov	r3, r2
 8002192:	005b      	lsls	r3, r3, #1
 8002194:	4413      	add	r3, r2
 8002196:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002198:	430b      	orrs	r3, r1
 800219a:	e07e      	b.n	800229a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d107      	bne.n	80021b8 <HAL_ADC_ConfigChannel+0x5c8>
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	0e9b      	lsrs	r3, r3, #26
 80021ae:	3301      	adds	r3, #1
 80021b0:	069b      	lsls	r3, r3, #26
 80021b2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021b6:	e015      	b.n	80021e4 <HAL_ADC_ConfigChannel+0x5f4>
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021c0:	fa93 f3a3 	rbit	r3, r3
 80021c4:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80021c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021c8:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80021ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d101      	bne.n	80021d4 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80021d0:	2320      	movs	r3, #32
 80021d2:	e003      	b.n	80021dc <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80021d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021d6:	fab3 f383 	clz	r3, r3
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	3301      	adds	r3, #1
 80021de:	069b      	lsls	r3, r3, #26
 80021e0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d109      	bne.n	8002204 <HAL_ADC_ConfigChannel+0x614>
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	0e9b      	lsrs	r3, r3, #26
 80021f6:	3301      	adds	r3, #1
 80021f8:	f003 031f 	and.w	r3, r3, #31
 80021fc:	2101      	movs	r1, #1
 80021fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002202:	e017      	b.n	8002234 <HAL_ADC_ConfigChannel+0x644>
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800220a:	6a3b      	ldr	r3, [r7, #32]
 800220c:	fa93 f3a3 	rbit	r3, r3
 8002210:	61fb      	str	r3, [r7, #28]
  return result;
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002218:	2b00      	cmp	r3, #0
 800221a:	d101      	bne.n	8002220 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 800221c:	2320      	movs	r3, #32
 800221e:	e003      	b.n	8002228 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002222:	fab3 f383 	clz	r3, r3
 8002226:	b2db      	uxtb	r3, r3
 8002228:	3301      	adds	r3, #1
 800222a:	f003 031f 	and.w	r3, r3, #31
 800222e:	2101      	movs	r1, #1
 8002230:	fa01 f303 	lsl.w	r3, r1, r3
 8002234:	ea42 0103 	orr.w	r1, r2, r3
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002240:	2b00      	cmp	r3, #0
 8002242:	d10d      	bne.n	8002260 <HAL_ADC_ConfigChannel+0x670>
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	0e9b      	lsrs	r3, r3, #26
 800224a:	3301      	adds	r3, #1
 800224c:	f003 021f 	and.w	r2, r3, #31
 8002250:	4613      	mov	r3, r2
 8002252:	005b      	lsls	r3, r3, #1
 8002254:	4413      	add	r3, r2
 8002256:	3b1e      	subs	r3, #30
 8002258:	051b      	lsls	r3, r3, #20
 800225a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800225e:	e01b      	b.n	8002298 <HAL_ADC_ConfigChannel+0x6a8>
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	fa93 f3a3 	rbit	r3, r3
 800226c:	613b      	str	r3, [r7, #16]
  return result;
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002272:	69bb      	ldr	r3, [r7, #24]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d101      	bne.n	800227c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002278:	2320      	movs	r3, #32
 800227a:	e003      	b.n	8002284 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 800227c:	69bb      	ldr	r3, [r7, #24]
 800227e:	fab3 f383 	clz	r3, r3
 8002282:	b2db      	uxtb	r3, r3
 8002284:	3301      	adds	r3, #1
 8002286:	f003 021f 	and.w	r2, r3, #31
 800228a:	4613      	mov	r3, r2
 800228c:	005b      	lsls	r3, r3, #1
 800228e:	4413      	add	r3, r2
 8002290:	3b1e      	subs	r3, #30
 8002292:	051b      	lsls	r3, r3, #20
 8002294:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002298:	430b      	orrs	r3, r1
 800229a:	683a      	ldr	r2, [r7, #0]
 800229c:	6892      	ldr	r2, [r2, #8]
 800229e:	4619      	mov	r1, r3
 80022a0:	f7ff fa0e 	bl	80016c0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	4b09      	ldr	r3, [pc, #36]	; (80022d0 <HAL_ADC_ConfigChannel+0x6e0>)
 80022aa:	4013      	ands	r3, r2
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	f000 80bd 	beq.w	800242c <HAL_ADC_ConfigChannel+0x83c>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80022ba:	d004      	beq.n	80022c6 <HAL_ADC_ConfigChannel+0x6d6>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a04      	ldr	r2, [pc, #16]	; (80022d4 <HAL_ADC_ConfigChannel+0x6e4>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d10a      	bne.n	80022dc <HAL_ADC_ConfigChannel+0x6ec>
 80022c6:	4b04      	ldr	r3, [pc, #16]	; (80022d8 <HAL_ADC_ConfigChannel+0x6e8>)
 80022c8:	e009      	b.n	80022de <HAL_ADC_ConfigChannel+0x6ee>
 80022ca:	bf00      	nop
 80022cc:	407f0000 	.word	0x407f0000
 80022d0:	80080000 	.word	0x80080000
 80022d4:	50000100 	.word	0x50000100
 80022d8:	50000300 	.word	0x50000300
 80022dc:	4b58      	ldr	r3, [pc, #352]	; (8002440 <HAL_ADC_ConfigChannel+0x850>)
 80022de:	4618      	mov	r0, r3
 80022e0:	f7ff f916 	bl	8001510 <LL_ADC_GetCommonPathInternalCh>
 80022e4:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a55      	ldr	r2, [pc, #340]	; (8002444 <HAL_ADC_ConfigChannel+0x854>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d004      	beq.n	80022fc <HAL_ADC_ConfigChannel+0x70c>
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a54      	ldr	r2, [pc, #336]	; (8002448 <HAL_ADC_ConfigChannel+0x858>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d139      	bne.n	8002370 <HAL_ADC_ConfigChannel+0x780>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80022fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002300:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002304:	2b00      	cmp	r3, #0
 8002306:	d133      	bne.n	8002370 <HAL_ADC_ConfigChannel+0x780>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002310:	d005      	beq.n	800231e <HAL_ADC_ConfigChannel+0x72e>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a4d      	ldr	r2, [pc, #308]	; (800244c <HAL_ADC_ConfigChannel+0x85c>)
 8002318:	4293      	cmp	r3, r2
 800231a:	f040 8084 	bne.w	8002426 <HAL_ADC_ConfigChannel+0x836>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002326:	d004      	beq.n	8002332 <HAL_ADC_ConfigChannel+0x742>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a48      	ldr	r2, [pc, #288]	; (8002450 <HAL_ADC_ConfigChannel+0x860>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d101      	bne.n	8002336 <HAL_ADC_ConfigChannel+0x746>
 8002332:	4a48      	ldr	r2, [pc, #288]	; (8002454 <HAL_ADC_ConfigChannel+0x864>)
 8002334:	e000      	b.n	8002338 <HAL_ADC_ConfigChannel+0x748>
 8002336:	4a42      	ldr	r2, [pc, #264]	; (8002440 <HAL_ADC_ConfigChannel+0x850>)
 8002338:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800233c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002340:	4619      	mov	r1, r3
 8002342:	4610      	mov	r0, r2
 8002344:	f7ff f8d1 	bl	80014ea <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002348:	4b43      	ldr	r3, [pc, #268]	; (8002458 <HAL_ADC_ConfigChannel+0x868>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	099b      	lsrs	r3, r3, #6
 800234e:	4a43      	ldr	r2, [pc, #268]	; (800245c <HAL_ADC_ConfigChannel+0x86c>)
 8002350:	fba2 2303 	umull	r2, r3, r2, r3
 8002354:	099a      	lsrs	r2, r3, #6
 8002356:	4613      	mov	r3, r2
 8002358:	005b      	lsls	r3, r3, #1
 800235a:	4413      	add	r3, r2
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002360:	e002      	b.n	8002368 <HAL_ADC_ConfigChannel+0x778>
          {
            wait_loop_index--;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	3b01      	subs	r3, #1
 8002366:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d1f9      	bne.n	8002362 <HAL_ADC_ConfigChannel+0x772>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800236e:	e05a      	b.n	8002426 <HAL_ADC_ConfigChannel+0x836>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a3a      	ldr	r2, [pc, #232]	; (8002460 <HAL_ADC_ConfigChannel+0x870>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d125      	bne.n	80023c6 <HAL_ADC_ConfigChannel+0x7d6>
 800237a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800237e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d11f      	bne.n	80023c6 <HAL_ADC_ConfigChannel+0x7d6>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a31      	ldr	r2, [pc, #196]	; (8002450 <HAL_ADC_ConfigChannel+0x860>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d104      	bne.n	800239a <HAL_ADC_ConfigChannel+0x7aa>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a33      	ldr	r2, [pc, #204]	; (8002464 <HAL_ADC_ConfigChannel+0x874>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d047      	beq.n	800242a <HAL_ADC_ConfigChannel+0x83a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023a2:	d004      	beq.n	80023ae <HAL_ADC_ConfigChannel+0x7be>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a29      	ldr	r2, [pc, #164]	; (8002450 <HAL_ADC_ConfigChannel+0x860>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d101      	bne.n	80023b2 <HAL_ADC_ConfigChannel+0x7c2>
 80023ae:	4a29      	ldr	r2, [pc, #164]	; (8002454 <HAL_ADC_ConfigChannel+0x864>)
 80023b0:	e000      	b.n	80023b4 <HAL_ADC_ConfigChannel+0x7c4>
 80023b2:	4a23      	ldr	r2, [pc, #140]	; (8002440 <HAL_ADC_ConfigChannel+0x850>)
 80023b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80023b8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023bc:	4619      	mov	r1, r3
 80023be:	4610      	mov	r0, r2
 80023c0:	f7ff f893 	bl	80014ea <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80023c4:	e031      	b.n	800242a <HAL_ADC_ConfigChannel+0x83a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a27      	ldr	r2, [pc, #156]	; (8002468 <HAL_ADC_ConfigChannel+0x878>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d12d      	bne.n	800242c <HAL_ADC_ConfigChannel+0x83c>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80023d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80023d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d127      	bne.n	800242c <HAL_ADC_ConfigChannel+0x83c>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a1b      	ldr	r2, [pc, #108]	; (8002450 <HAL_ADC_ConfigChannel+0x860>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d022      	beq.n	800242c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023ee:	d004      	beq.n	80023fa <HAL_ADC_ConfigChannel+0x80a>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a16      	ldr	r2, [pc, #88]	; (8002450 <HAL_ADC_ConfigChannel+0x860>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d101      	bne.n	80023fe <HAL_ADC_ConfigChannel+0x80e>
 80023fa:	4a16      	ldr	r2, [pc, #88]	; (8002454 <HAL_ADC_ConfigChannel+0x864>)
 80023fc:	e000      	b.n	8002400 <HAL_ADC_ConfigChannel+0x810>
 80023fe:	4a10      	ldr	r2, [pc, #64]	; (8002440 <HAL_ADC_ConfigChannel+0x850>)
 8002400:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002404:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002408:	4619      	mov	r1, r3
 800240a:	4610      	mov	r0, r2
 800240c:	f7ff f86d 	bl	80014ea <LL_ADC_SetCommonPathInternalCh>
 8002410:	e00c      	b.n	800242c <HAL_ADC_ConfigChannel+0x83c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002416:	f043 0220 	orr.w	r2, r3, #32
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002424:	e002      	b.n	800242c <HAL_ADC_ConfigChannel+0x83c>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002426:	bf00      	nop
 8002428:	e000      	b.n	800242c <HAL_ADC_ConfigChannel+0x83c>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800242a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2200      	movs	r2, #0
 8002430:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002434:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002438:	4618      	mov	r0, r3
 800243a:	37d8      	adds	r7, #216	; 0xd8
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	50000700 	.word	0x50000700
 8002444:	c3210000 	.word	0xc3210000
 8002448:	90c00010 	.word	0x90c00010
 800244c:	50000600 	.word	0x50000600
 8002450:	50000100 	.word	0x50000100
 8002454:	50000300 	.word	0x50000300
 8002458:	20000000 	.word	0x20000000
 800245c:	053e2d63 	.word	0x053e2d63
 8002460:	c7520000 	.word	0xc7520000
 8002464:	50000500 	.word	0x50000500
 8002468:	cb840000 	.word	0xcb840000

0800246c <LL_ADC_IsEnabled>:
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	f003 0301 	and.w	r3, r3, #1
 800247c:	2b01      	cmp	r3, #1
 800247e:	d101      	bne.n	8002484 <LL_ADC_IsEnabled+0x18>
 8002480:	2301      	movs	r3, #1
 8002482:	e000      	b.n	8002486 <LL_ADC_IsEnabled+0x1a>
 8002484:	2300      	movs	r3, #0
}
 8002486:	4618      	mov	r0, r3
 8002488:	370c      	adds	r7, #12
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr

08002492 <LL_ADC_REG_IsConversionOngoing>:
{
 8002492:	b480      	push	{r7}
 8002494:	b083      	sub	sp, #12
 8002496:	af00      	add	r7, sp, #0
 8002498:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	f003 0304 	and.w	r3, r3, #4
 80024a2:	2b04      	cmp	r3, #4
 80024a4:	d101      	bne.n	80024aa <LL_ADC_REG_IsConversionOngoing+0x18>
 80024a6:	2301      	movs	r3, #1
 80024a8:	e000      	b.n	80024ac <LL_ADC_REG_IsConversionOngoing+0x1a>
 80024aa:	2300      	movs	r3, #0
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr

080024b8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80024b8:	b590      	push	{r4, r7, lr}
 80024ba:	b0a1      	sub	sp, #132	; 0x84
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024c2:	2300      	movs	r3, #0
 80024c4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d101      	bne.n	80024d6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80024d2:	2302      	movs	r3, #2
 80024d4:	e0e3      	b.n	800269e <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2201      	movs	r2, #1
 80024da:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024e6:	d102      	bne.n	80024ee <HAL_ADCEx_MultiModeConfigChannel+0x36>
 80024e8:	4b6f      	ldr	r3, [pc, #444]	; (80026a8 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 80024ea:	60bb      	str	r3, [r7, #8]
 80024ec:	e009      	b.n	8002502 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a6e      	ldr	r2, [pc, #440]	; (80026ac <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d102      	bne.n	80024fe <HAL_ADCEx_MultiModeConfigChannel+0x46>
 80024f8:	4b6d      	ldr	r3, [pc, #436]	; (80026b0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80024fa:	60bb      	str	r3, [r7, #8]
 80024fc:	e001      	b.n	8002502 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 80024fe:	2300      	movs	r3, #0
 8002500:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d10b      	bne.n	8002520 <HAL_ADCEx_MultiModeConfigChannel+0x68>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800250c:	f043 0220 	orr.w	r2, r3, #32
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2200      	movs	r2, #0
 8002518:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e0be      	b.n	800269e <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	4618      	mov	r0, r3
 8002524:	f7ff ffb5 	bl	8002492 <LL_ADC_REG_IsConversionOngoing>
 8002528:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4618      	mov	r0, r3
 8002530:	f7ff ffaf 	bl	8002492 <LL_ADC_REG_IsConversionOngoing>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	f040 80a0 	bne.w	800267c <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800253c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800253e:	2b00      	cmp	r3, #0
 8002540:	f040 809c 	bne.w	800267c <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800254c:	d004      	beq.n	8002558 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a55      	ldr	r2, [pc, #340]	; (80026a8 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d101      	bne.n	800255c <HAL_ADCEx_MultiModeConfigChannel+0xa4>
 8002558:	4b56      	ldr	r3, [pc, #344]	; (80026b4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800255a:	e000      	b.n	800255e <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 800255c:	4b56      	ldr	r3, [pc, #344]	; (80026b8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800255e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d04b      	beq.n	8002600 <HAL_ADCEx_MultiModeConfigChannel+0x148>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002568:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	6859      	ldr	r1, [r3, #4]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800257a:	035b      	lsls	r3, r3, #13
 800257c:	430b      	orrs	r3, r1
 800257e:	431a      	orrs	r2, r3
 8002580:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002582:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800258c:	d004      	beq.n	8002598 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a45      	ldr	r2, [pc, #276]	; (80026a8 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d10f      	bne.n	80025b8 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8002598:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800259c:	f7ff ff66 	bl	800246c <LL_ADC_IsEnabled>
 80025a0:	4604      	mov	r4, r0
 80025a2:	4841      	ldr	r0, [pc, #260]	; (80026a8 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 80025a4:	f7ff ff62 	bl	800246c <LL_ADC_IsEnabled>
 80025a8:	4603      	mov	r3, r0
 80025aa:	4323      	orrs	r3, r4
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	bf0c      	ite	eq
 80025b0:	2301      	moveq	r3, #1
 80025b2:	2300      	movne	r3, #0
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	e012      	b.n	80025de <HAL_ADCEx_MultiModeConfigChannel+0x126>
 80025b8:	483c      	ldr	r0, [pc, #240]	; (80026ac <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 80025ba:	f7ff ff57 	bl	800246c <LL_ADC_IsEnabled>
 80025be:	4604      	mov	r4, r0
 80025c0:	483b      	ldr	r0, [pc, #236]	; (80026b0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80025c2:	f7ff ff53 	bl	800246c <LL_ADC_IsEnabled>
 80025c6:	4603      	mov	r3, r0
 80025c8:	431c      	orrs	r4, r3
 80025ca:	483c      	ldr	r0, [pc, #240]	; (80026bc <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80025cc:	f7ff ff4e 	bl	800246c <LL_ADC_IsEnabled>
 80025d0:	4603      	mov	r3, r0
 80025d2:	4323      	orrs	r3, r4
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	bf0c      	ite	eq
 80025d8:	2301      	moveq	r3, #1
 80025da:	2300      	movne	r3, #0
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d056      	beq.n	8002690 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80025e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80025ea:	f023 030f 	bic.w	r3, r3, #15
 80025ee:	683a      	ldr	r2, [r7, #0]
 80025f0:	6811      	ldr	r1, [r2, #0]
 80025f2:	683a      	ldr	r2, [r7, #0]
 80025f4:	6892      	ldr	r2, [r2, #8]
 80025f6:	430a      	orrs	r2, r1
 80025f8:	431a      	orrs	r2, r3
 80025fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025fc:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80025fe:	e047      	b.n	8002690 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002600:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002608:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800260a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002614:	d004      	beq.n	8002620 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a23      	ldr	r2, [pc, #140]	; (80026a8 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d10f      	bne.n	8002640 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002620:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002624:	f7ff ff22 	bl	800246c <LL_ADC_IsEnabled>
 8002628:	4604      	mov	r4, r0
 800262a:	481f      	ldr	r0, [pc, #124]	; (80026a8 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 800262c:	f7ff ff1e 	bl	800246c <LL_ADC_IsEnabled>
 8002630:	4603      	mov	r3, r0
 8002632:	4323      	orrs	r3, r4
 8002634:	2b00      	cmp	r3, #0
 8002636:	bf0c      	ite	eq
 8002638:	2301      	moveq	r3, #1
 800263a:	2300      	movne	r3, #0
 800263c:	b2db      	uxtb	r3, r3
 800263e:	e012      	b.n	8002666 <HAL_ADCEx_MultiModeConfigChannel+0x1ae>
 8002640:	481a      	ldr	r0, [pc, #104]	; (80026ac <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 8002642:	f7ff ff13 	bl	800246c <LL_ADC_IsEnabled>
 8002646:	4604      	mov	r4, r0
 8002648:	4819      	ldr	r0, [pc, #100]	; (80026b0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800264a:	f7ff ff0f 	bl	800246c <LL_ADC_IsEnabled>
 800264e:	4603      	mov	r3, r0
 8002650:	431c      	orrs	r4, r3
 8002652:	481a      	ldr	r0, [pc, #104]	; (80026bc <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8002654:	f7ff ff0a 	bl	800246c <LL_ADC_IsEnabled>
 8002658:	4603      	mov	r3, r0
 800265a:	4323      	orrs	r3, r4
 800265c:	2b00      	cmp	r3, #0
 800265e:	bf0c      	ite	eq
 8002660:	2301      	moveq	r3, #1
 8002662:	2300      	movne	r3, #0
 8002664:	b2db      	uxtb	r3, r3
 8002666:	2b00      	cmp	r3, #0
 8002668:	d012      	beq.n	8002690 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800266a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002672:	f023 030f 	bic.w	r3, r3, #15
 8002676:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002678:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800267a:	e009      	b.n	8002690 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002680:	f043 0220 	orr.w	r2, r3, #32
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800268e:	e000      	b.n	8002692 <HAL_ADCEx_MultiModeConfigChannel+0x1da>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002690:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2200      	movs	r2, #0
 8002696:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800269a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3784      	adds	r7, #132	; 0x84
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd90      	pop	{r4, r7, pc}
 80026a6:	bf00      	nop
 80026a8:	50000100 	.word	0x50000100
 80026ac:	50000400 	.word	0x50000400
 80026b0:	50000500 	.word	0x50000500
 80026b4:	50000300 	.word	0x50000300
 80026b8:	50000700 	.word	0x50000700
 80026bc:	50000600 	.word	0x50000600

080026c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b085      	sub	sp, #20
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	f003 0307 	and.w	r3, r3, #7
 80026ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026d0:	4b0c      	ldr	r3, [pc, #48]	; (8002704 <__NVIC_SetPriorityGrouping+0x44>)
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026d6:	68ba      	ldr	r2, [r7, #8]
 80026d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026dc:	4013      	ands	r3, r2
 80026de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026f2:	4a04      	ldr	r2, [pc, #16]	; (8002704 <__NVIC_SetPriorityGrouping+0x44>)
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	60d3      	str	r3, [r2, #12]
}
 80026f8:	bf00      	nop
 80026fa:	3714      	adds	r7, #20
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr
 8002704:	e000ed00 	.word	0xe000ed00

08002708 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002708:	b480      	push	{r7}
 800270a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800270c:	4b04      	ldr	r3, [pc, #16]	; (8002720 <__NVIC_GetPriorityGrouping+0x18>)
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	0a1b      	lsrs	r3, r3, #8
 8002712:	f003 0307 	and.w	r3, r3, #7
}
 8002716:	4618      	mov	r0, r3
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr
 8002720:	e000ed00 	.word	0xe000ed00

08002724 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 800272a:	4603      	mov	r3, r0
 800272c:	6039      	str	r1, [r7, #0]
 800272e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002730:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002734:	2b00      	cmp	r3, #0
 8002736:	db0a      	blt.n	800274e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	b2da      	uxtb	r2, r3
 800273c:	490c      	ldr	r1, [pc, #48]	; (8002770 <__NVIC_SetPriority+0x4c>)
 800273e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002742:	0112      	lsls	r2, r2, #4
 8002744:	b2d2      	uxtb	r2, r2
 8002746:	440b      	add	r3, r1
 8002748:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800274c:	e00a      	b.n	8002764 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	b2da      	uxtb	r2, r3
 8002752:	4908      	ldr	r1, [pc, #32]	; (8002774 <__NVIC_SetPriority+0x50>)
 8002754:	79fb      	ldrb	r3, [r7, #7]
 8002756:	f003 030f 	and.w	r3, r3, #15
 800275a:	3b04      	subs	r3, #4
 800275c:	0112      	lsls	r2, r2, #4
 800275e:	b2d2      	uxtb	r2, r2
 8002760:	440b      	add	r3, r1
 8002762:	761a      	strb	r2, [r3, #24]
}
 8002764:	bf00      	nop
 8002766:	370c      	adds	r7, #12
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr
 8002770:	e000e100 	.word	0xe000e100
 8002774:	e000ed00 	.word	0xe000ed00

08002778 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002778:	b480      	push	{r7}
 800277a:	b089      	sub	sp, #36	; 0x24
 800277c:	af00      	add	r7, sp, #0
 800277e:	60f8      	str	r0, [r7, #12]
 8002780:	60b9      	str	r1, [r7, #8]
 8002782:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	f003 0307 	and.w	r3, r3, #7
 800278a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	f1c3 0307 	rsb	r3, r3, #7
 8002792:	2b04      	cmp	r3, #4
 8002794:	bf28      	it	cs
 8002796:	2304      	movcs	r3, #4
 8002798:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	3304      	adds	r3, #4
 800279e:	2b06      	cmp	r3, #6
 80027a0:	d902      	bls.n	80027a8 <NVIC_EncodePriority+0x30>
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	3b03      	subs	r3, #3
 80027a6:	e000      	b.n	80027aa <NVIC_EncodePriority+0x32>
 80027a8:	2300      	movs	r3, #0
 80027aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027ac:	f04f 32ff 	mov.w	r2, #4294967295
 80027b0:	69bb      	ldr	r3, [r7, #24]
 80027b2:	fa02 f303 	lsl.w	r3, r2, r3
 80027b6:	43da      	mvns	r2, r3
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	401a      	ands	r2, r3
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027c0:	f04f 31ff 	mov.w	r1, #4294967295
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	fa01 f303 	lsl.w	r3, r1, r3
 80027ca:	43d9      	mvns	r1, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027d0:	4313      	orrs	r3, r2
         );
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3724      	adds	r7, #36	; 0x24
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr
	...

080027e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	3b01      	subs	r3, #1
 80027ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027f0:	d301      	bcc.n	80027f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027f2:	2301      	movs	r3, #1
 80027f4:	e00f      	b.n	8002816 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027f6:	4a0a      	ldr	r2, [pc, #40]	; (8002820 <SysTick_Config+0x40>)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	3b01      	subs	r3, #1
 80027fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027fe:	210f      	movs	r1, #15
 8002800:	f04f 30ff 	mov.w	r0, #4294967295
 8002804:	f7ff ff8e 	bl	8002724 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002808:	4b05      	ldr	r3, [pc, #20]	; (8002820 <SysTick_Config+0x40>)
 800280a:	2200      	movs	r2, #0
 800280c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800280e:	4b04      	ldr	r3, [pc, #16]	; (8002820 <SysTick_Config+0x40>)
 8002810:	2207      	movs	r2, #7
 8002812:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002814:	2300      	movs	r3, #0
}
 8002816:	4618      	mov	r0, r3
 8002818:	3708      	adds	r7, #8
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	e000e010 	.word	0xe000e010

08002824 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	f7ff ff47 	bl	80026c0 <__NVIC_SetPriorityGrouping>
}
 8002832:	bf00      	nop
 8002834:	3708      	adds	r7, #8
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}

0800283a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800283a:	b580      	push	{r7, lr}
 800283c:	b086      	sub	sp, #24
 800283e:	af00      	add	r7, sp, #0
 8002840:	4603      	mov	r3, r0
 8002842:	60b9      	str	r1, [r7, #8]
 8002844:	607a      	str	r2, [r7, #4]
 8002846:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002848:	f7ff ff5e 	bl	8002708 <__NVIC_GetPriorityGrouping>
 800284c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	68b9      	ldr	r1, [r7, #8]
 8002852:	6978      	ldr	r0, [r7, #20]
 8002854:	f7ff ff90 	bl	8002778 <NVIC_EncodePriority>
 8002858:	4602      	mov	r2, r0
 800285a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800285e:	4611      	mov	r1, r2
 8002860:	4618      	mov	r0, r3
 8002862:	f7ff ff5f 	bl	8002724 <__NVIC_SetPriority>
}
 8002866:	bf00      	nop
 8002868:	3718      	adds	r7, #24
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}

0800286e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800286e:	b580      	push	{r7, lr}
 8002870:	b082      	sub	sp, #8
 8002872:	af00      	add	r7, sp, #0
 8002874:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f7ff ffb2 	bl	80027e0 <SysTick_Config>
 800287c:	4603      	mov	r3, r0
}
 800287e:	4618      	mov	r0, r3
 8002880:	3708      	adds	r7, #8
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
	...

08002888 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d101      	bne.n	800289a <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e147      	b.n	8002b2a <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d106      	bne.n	80028b4 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2200      	movs	r2, #0
 80028aa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f7fe fae8 	bl	8000e84 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	699a      	ldr	r2, [r3, #24]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f022 0210 	bic.w	r2, r2, #16
 80028c2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80028c4:	f7fe fdf2 	bl	80014ac <HAL_GetTick>
 80028c8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80028ca:	e012      	b.n	80028f2 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80028cc:	f7fe fdee 	bl	80014ac <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	2b0a      	cmp	r3, #10
 80028d8:	d90b      	bls.n	80028f2 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028de:	f043 0201 	orr.w	r2, r3, #1
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2203      	movs	r2, #3
 80028ea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e11b      	b.n	8002b2a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	699b      	ldr	r3, [r3, #24]
 80028f8:	f003 0308 	and.w	r3, r3, #8
 80028fc:	2b08      	cmp	r3, #8
 80028fe:	d0e5      	beq.n	80028cc <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	699a      	ldr	r2, [r3, #24]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f042 0201 	orr.w	r2, r2, #1
 800290e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002910:	f7fe fdcc 	bl	80014ac <HAL_GetTick>
 8002914:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002916:	e012      	b.n	800293e <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002918:	f7fe fdc8 	bl	80014ac <HAL_GetTick>
 800291c:	4602      	mov	r2, r0
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	2b0a      	cmp	r3, #10
 8002924:	d90b      	bls.n	800293e <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800292a:	f043 0201 	orr.w	r2, r3, #1
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2203      	movs	r2, #3
 8002936:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e0f5      	b.n	8002b2a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	699b      	ldr	r3, [r3, #24]
 8002944:	f003 0301 	and.w	r3, r3, #1
 8002948:	2b00      	cmp	r3, #0
 800294a:	d0e5      	beq.n	8002918 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	699a      	ldr	r2, [r3, #24]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f042 0202 	orr.w	r2, r2, #2
 800295a:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a74      	ldr	r2, [pc, #464]	; (8002b34 <HAL_FDCAN_Init+0x2ac>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d103      	bne.n	800296e <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8002966:	4a74      	ldr	r2, [pc, #464]	; (8002b38 <HAL_FDCAN_Init+0x2b0>)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	7c1b      	ldrb	r3, [r3, #16]
 8002972:	2b01      	cmp	r3, #1
 8002974:	d108      	bne.n	8002988 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	699a      	ldr	r2, [r3, #24]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002984:	619a      	str	r2, [r3, #24]
 8002986:	e007      	b.n	8002998 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	699a      	ldr	r2, [r3, #24]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002996:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	7c5b      	ldrb	r3, [r3, #17]
 800299c:	2b01      	cmp	r3, #1
 800299e:	d108      	bne.n	80029b2 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	699a      	ldr	r2, [r3, #24]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80029ae:	619a      	str	r2, [r3, #24]
 80029b0:	e007      	b.n	80029c2 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	699a      	ldr	r2, [r3, #24]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80029c0:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	7c9b      	ldrb	r3, [r3, #18]
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d108      	bne.n	80029dc <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	699a      	ldr	r2, [r3, #24]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80029d8:	619a      	str	r2, [r3, #24]
 80029da:	e007      	b.n	80029ec <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	699a      	ldr	r2, [r3, #24]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80029ea:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	699b      	ldr	r3, [r3, #24]
 80029f2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	689a      	ldr	r2, [r3, #8]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	430a      	orrs	r2, r1
 8002a00:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	699a      	ldr	r2, [r3, #24]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8002a10:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	691a      	ldr	r2, [r3, #16]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f022 0210 	bic.w	r2, r2, #16
 8002a20:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	68db      	ldr	r3, [r3, #12]
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d108      	bne.n	8002a3c <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	699a      	ldr	r2, [r3, #24]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f042 0204 	orr.w	r2, r2, #4
 8002a38:	619a      	str	r2, [r3, #24]
 8002a3a:	e02c      	b.n	8002a96 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d028      	beq.n	8002a96 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	2b02      	cmp	r3, #2
 8002a4a:	d01c      	beq.n	8002a86 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	699a      	ldr	r2, [r3, #24]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002a5a:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	691a      	ldr	r2, [r3, #16]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f042 0210 	orr.w	r2, r2, #16
 8002a6a:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	2b03      	cmp	r3, #3
 8002a72:	d110      	bne.n	8002a96 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	699a      	ldr	r2, [r3, #24]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f042 0220 	orr.w	r2, r2, #32
 8002a82:	619a      	str	r2, [r3, #24]
 8002a84:	e007      	b.n	8002a96 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	699a      	ldr	r2, [r3, #24]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f042 0220 	orr.w	r2, r2, #32
 8002a94:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	699b      	ldr	r3, [r3, #24]
 8002a9a:	3b01      	subs	r3, #1
 8002a9c:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	69db      	ldr	r3, [r3, #28]
 8002aa2:	3b01      	subs	r3, #1
 8002aa4:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002aa6:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6a1b      	ldr	r3, [r3, #32]
 8002aac:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002aae:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	695b      	ldr	r3, [r3, #20]
 8002ab6:	3b01      	subs	r3, #1
 8002ab8:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002abe:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002ac0:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002aca:	d115      	bne.n	8002af8 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ad0:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad6:	3b01      	subs	r3, #1
 8002ad8:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002ada:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae0:	3b01      	subs	r3, #1
 8002ae2:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002ae4:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aec:	3b01      	subs	r3, #1
 8002aee:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002af4:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002af6:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	430a      	orrs	r2, r1
 8002b0a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f000 f814 	bl	8002b3c <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2200      	movs	r2, #0
 8002b18:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2201      	movs	r2, #1
 8002b24:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8002b28:	2300      	movs	r3, #0
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3710      	adds	r7, #16
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	40006400 	.word	0x40006400
 8002b38:	40006500 	.word	0x40006500

08002b3c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b085      	sub	sp, #20
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8002b44:	4b30      	ldr	r3, [pc, #192]	; (8002c08 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8002b46:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a2f      	ldr	r2, [pc, #188]	; (8002c0c <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d103      	bne.n	8002b5a <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8002b58:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a2c      	ldr	r2, [pc, #176]	; (8002c10 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d103      	bne.n	8002b6c <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 8002b6a:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	68ba      	ldr	r2, [r7, #8]
 8002b70:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b7a:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b82:	041a      	lsls	r2, r3, #16
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	430a      	orrs	r2, r1
 8002b8a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ba0:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba8:	061a      	lsls	r2, r3, #24
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	430a      	orrs	r2, r1
 8002bb0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	60fb      	str	r3, [r7, #12]
 8002be0:	e005      	b.n	8002bee <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2200      	movs	r2, #0
 8002be6:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	3304      	adds	r3, #4
 8002bec:	60fb      	str	r3, [r7, #12]
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8002bf4:	68fa      	ldr	r2, [r7, #12]
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d3f3      	bcc.n	8002be2 <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 8002bfa:	bf00      	nop
 8002bfc:	3714      	adds	r7, #20
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr
 8002c06:	bf00      	nop
 8002c08:	4000a400 	.word	0x4000a400
 8002c0c:	40006800 	.word	0x40006800
 8002c10:	40006c00 	.word	0x40006c00

08002c14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b087      	sub	sp, #28
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002c22:	e15a      	b.n	8002eda <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	2101      	movs	r1, #1
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c30:	4013      	ands	r3, r2
 8002c32:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	f000 814c 	beq.w	8002ed4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d00b      	beq.n	8002c5c <HAL_GPIO_Init+0x48>
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	2b02      	cmp	r3, #2
 8002c4a:	d007      	beq.n	8002c5c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c50:	2b11      	cmp	r3, #17
 8002c52:	d003      	beq.n	8002c5c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	2b12      	cmp	r3, #18
 8002c5a:	d130      	bne.n	8002cbe <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	005b      	lsls	r3, r3, #1
 8002c66:	2203      	movs	r2, #3
 8002c68:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6c:	43db      	mvns	r3, r3
 8002c6e:	693a      	ldr	r2, [r7, #16]
 8002c70:	4013      	ands	r3, r2
 8002c72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	68da      	ldr	r2, [r3, #12]
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	005b      	lsls	r3, r3, #1
 8002c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c80:	693a      	ldr	r2, [r7, #16]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	693a      	ldr	r2, [r7, #16]
 8002c8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002c92:	2201      	movs	r2, #1
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9a:	43db      	mvns	r3, r3
 8002c9c:	693a      	ldr	r2, [r7, #16]
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	091b      	lsrs	r3, r3, #4
 8002ca8:	f003 0201 	and.w	r2, r3, #1
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb2:	693a      	ldr	r2, [r7, #16]
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	693a      	ldr	r2, [r7, #16]
 8002cbc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	005b      	lsls	r3, r3, #1
 8002cc8:	2203      	movs	r2, #3
 8002cca:	fa02 f303 	lsl.w	r3, r2, r3
 8002cce:	43db      	mvns	r3, r3
 8002cd0:	693a      	ldr	r2, [r7, #16]
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	689a      	ldr	r2, [r3, #8]
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	005b      	lsls	r3, r3, #1
 8002cde:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce2:	693a      	ldr	r2, [r7, #16]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	693a      	ldr	r2, [r7, #16]
 8002cec:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d003      	beq.n	8002cfe <HAL_GPIO_Init+0xea>
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	2b12      	cmp	r3, #18
 8002cfc:	d123      	bne.n	8002d46 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	08da      	lsrs	r2, r3, #3
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	3208      	adds	r2, #8
 8002d06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d0a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	f003 0307 	and.w	r3, r3, #7
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	220f      	movs	r2, #15
 8002d16:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1a:	43db      	mvns	r3, r3
 8002d1c:	693a      	ldr	r2, [r7, #16]
 8002d1e:	4013      	ands	r3, r2
 8002d20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	691a      	ldr	r2, [r3, #16]
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	f003 0307 	and.w	r3, r3, #7
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d32:	693a      	ldr	r2, [r7, #16]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	08da      	lsrs	r2, r3, #3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	3208      	adds	r2, #8
 8002d40:	6939      	ldr	r1, [r7, #16]
 8002d42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	005b      	lsls	r3, r3, #1
 8002d50:	2203      	movs	r2, #3
 8002d52:	fa02 f303 	lsl.w	r3, r2, r3
 8002d56:	43db      	mvns	r3, r3
 8002d58:	693a      	ldr	r2, [r7, #16]
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f003 0203 	and.w	r2, r3, #3
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	005b      	lsls	r3, r3, #1
 8002d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6e:	693a      	ldr	r2, [r7, #16]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	693a      	ldr	r2, [r7, #16]
 8002d78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	f000 80a6 	beq.w	8002ed4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d88:	4b5b      	ldr	r3, [pc, #364]	; (8002ef8 <HAL_GPIO_Init+0x2e4>)
 8002d8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d8c:	4a5a      	ldr	r2, [pc, #360]	; (8002ef8 <HAL_GPIO_Init+0x2e4>)
 8002d8e:	f043 0301 	orr.w	r3, r3, #1
 8002d92:	6613      	str	r3, [r2, #96]	; 0x60
 8002d94:	4b58      	ldr	r3, [pc, #352]	; (8002ef8 <HAL_GPIO_Init+0x2e4>)
 8002d96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d98:	f003 0301 	and.w	r3, r3, #1
 8002d9c:	60bb      	str	r3, [r7, #8]
 8002d9e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002da0:	4a56      	ldr	r2, [pc, #344]	; (8002efc <HAL_GPIO_Init+0x2e8>)
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	089b      	lsrs	r3, r3, #2
 8002da6:	3302      	adds	r3, #2
 8002da8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	f003 0303 	and.w	r3, r3, #3
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	220f      	movs	r2, #15
 8002db8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbc:	43db      	mvns	r3, r3
 8002dbe:	693a      	ldr	r2, [r7, #16]
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002dca:	d01f      	beq.n	8002e0c <HAL_GPIO_Init+0x1f8>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	4a4c      	ldr	r2, [pc, #304]	; (8002f00 <HAL_GPIO_Init+0x2ec>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d019      	beq.n	8002e08 <HAL_GPIO_Init+0x1f4>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	4a4b      	ldr	r2, [pc, #300]	; (8002f04 <HAL_GPIO_Init+0x2f0>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d013      	beq.n	8002e04 <HAL_GPIO_Init+0x1f0>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	4a4a      	ldr	r2, [pc, #296]	; (8002f08 <HAL_GPIO_Init+0x2f4>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d00d      	beq.n	8002e00 <HAL_GPIO_Init+0x1ec>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	4a49      	ldr	r2, [pc, #292]	; (8002f0c <HAL_GPIO_Init+0x2f8>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d007      	beq.n	8002dfc <HAL_GPIO_Init+0x1e8>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	4a48      	ldr	r2, [pc, #288]	; (8002f10 <HAL_GPIO_Init+0x2fc>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d101      	bne.n	8002df8 <HAL_GPIO_Init+0x1e4>
 8002df4:	2305      	movs	r3, #5
 8002df6:	e00a      	b.n	8002e0e <HAL_GPIO_Init+0x1fa>
 8002df8:	2306      	movs	r3, #6
 8002dfa:	e008      	b.n	8002e0e <HAL_GPIO_Init+0x1fa>
 8002dfc:	2304      	movs	r3, #4
 8002dfe:	e006      	b.n	8002e0e <HAL_GPIO_Init+0x1fa>
 8002e00:	2303      	movs	r3, #3
 8002e02:	e004      	b.n	8002e0e <HAL_GPIO_Init+0x1fa>
 8002e04:	2302      	movs	r3, #2
 8002e06:	e002      	b.n	8002e0e <HAL_GPIO_Init+0x1fa>
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e000      	b.n	8002e0e <HAL_GPIO_Init+0x1fa>
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	697a      	ldr	r2, [r7, #20]
 8002e10:	f002 0203 	and.w	r2, r2, #3
 8002e14:	0092      	lsls	r2, r2, #2
 8002e16:	4093      	lsls	r3, r2
 8002e18:	693a      	ldr	r2, [r7, #16]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e1e:	4937      	ldr	r1, [pc, #220]	; (8002efc <HAL_GPIO_Init+0x2e8>)
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	089b      	lsrs	r3, r3, #2
 8002e24:	3302      	adds	r3, #2
 8002e26:	693a      	ldr	r2, [r7, #16]
 8002e28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002e2c:	4b39      	ldr	r3, [pc, #228]	; (8002f14 <HAL_GPIO_Init+0x300>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	43db      	mvns	r3, r3
 8002e36:	693a      	ldr	r2, [r7, #16]
 8002e38:	4013      	ands	r3, r2
 8002e3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d003      	beq.n	8002e50 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002e48:	693a      	ldr	r2, [r7, #16]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002e50:	4a30      	ldr	r2, [pc, #192]	; (8002f14 <HAL_GPIO_Init+0x300>)
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002e56:	4b2f      	ldr	r3, [pc, #188]	; (8002f14 <HAL_GPIO_Init+0x300>)
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	43db      	mvns	r3, r3
 8002e60:	693a      	ldr	r2, [r7, #16]
 8002e62:	4013      	ands	r3, r2
 8002e64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d003      	beq.n	8002e7a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002e72:	693a      	ldr	r2, [r7, #16]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	4313      	orrs	r3, r2
 8002e78:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002e7a:	4a26      	ldr	r2, [pc, #152]	; (8002f14 <HAL_GPIO_Init+0x300>)
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002e80:	4b24      	ldr	r3, [pc, #144]	; (8002f14 <HAL_GPIO_Init+0x300>)
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	43db      	mvns	r3, r3
 8002e8a:	693a      	ldr	r2, [r7, #16]
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d003      	beq.n	8002ea4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002e9c:	693a      	ldr	r2, [r7, #16]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002ea4:	4a1b      	ldr	r2, [pc, #108]	; (8002f14 <HAL_GPIO_Init+0x300>)
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002eaa:	4b1a      	ldr	r3, [pc, #104]	; (8002f14 <HAL_GPIO_Init+0x300>)
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	43db      	mvns	r3, r3
 8002eb4:	693a      	ldr	r2, [r7, #16]
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d003      	beq.n	8002ece <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002ec6:	693a      	ldr	r2, [r7, #16]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002ece:	4a11      	ldr	r2, [pc, #68]	; (8002f14 <HAL_GPIO_Init+0x300>)
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	3301      	adds	r3, #1
 8002ed8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	f47f ae9d 	bne.w	8002c24 <HAL_GPIO_Init+0x10>
  }
}
 8002eea:	bf00      	nop
 8002eec:	371c      	adds	r7, #28
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr
 8002ef6:	bf00      	nop
 8002ef8:	40021000 	.word	0x40021000
 8002efc:	40010000 	.word	0x40010000
 8002f00:	48000400 	.word	0x48000400
 8002f04:	48000800 	.word	0x48000800
 8002f08:	48000c00 	.word	0x48000c00
 8002f0c:	48001000 	.word	0x48001000
 8002f10:	48001400 	.word	0x48001400
 8002f14:	40010400 	.word	0x40010400

08002f18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	460b      	mov	r3, r1
 8002f22:	807b      	strh	r3, [r7, #2]
 8002f24:	4613      	mov	r3, r2
 8002f26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f28:	787b      	ldrb	r3, [r7, #1]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d003      	beq.n	8002f36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f2e:	887a      	ldrh	r2, [r7, #2]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002f34:	e002      	b.n	8002f3c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f36:	887a      	ldrh	r2, [r7, #2]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002f3c:	bf00      	nop
 8002f3e:	370c      	adds	r7, #12
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr

08002f48 <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef * hhrtim)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b086      	sub	sp, #24
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if(hhrtim == NULL)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d101      	bne.n	8002f5a <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e0be      	b.n	80030d8 <HAL_HRTIM_Init+0x190>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2202      	movs	r2, #2
 8002f5e:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2200      	movs	r2, #0
 8002f66:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2200      	movs	r2, #0
 8002f86:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
  hhrtim->hdmaTimerF = (DMA_HandleTypeDef *)NULL;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	f003 0301 	and.w	r3, r3, #1
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d02e      	beq.n	8003004 <HAL_HRTIM_Init+0xbc>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a4d      	ldr	r2, [pc, #308]	; (80030e0 <HAL_HRTIM_Init+0x198>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d10b      	bne.n	8002fc8 <HAL_HRTIM_Init+0x80>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 8002fb0:	4b4c      	ldr	r3, [pc, #304]	; (80030e4 <HAL_HRTIM_Init+0x19c>)
 8002fb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fb4:	4a4b      	ldr	r2, [pc, #300]	; (80030e4 <HAL_HRTIM_Init+0x19c>)
 8002fb6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002fba:	6613      	str	r3, [r2, #96]	; 0x60
 8002fbc:	4b49      	ldr	r3, [pc, #292]	; (80030e4 <HAL_HRTIM_Init+0x19c>)
 8002fbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fc0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002fc4:	60fb      	str	r3, [r7, #12]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002fd6:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	691b      	ldr	r3, [r3, #16]
 8002fdc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002fe0:	693a      	ldr	r2, [r7, #16]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002fec:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	695b      	ldr	r3, [r3, #20]
 8002ff2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002ff6:	693a      	ldr	r2, [r7, #16]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	693a      	ldr	r2, [r7, #16]
 8003002:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f7fd ff81 	bl	8000f0c <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	f003 0302 	and.w	r3, r3, #2
 8003012:	2b00      	cmp	r3, #0
 8003014:	d012      	beq.n	800303c <HAL_HRTIM_Init+0xf4>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003024:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	68db      	ldr	r3, [r3, #12]
 800302a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800302e:	693a      	ldr	r2, [r7, #16]
 8003030:	4313      	orrs	r3, r2
 8003032:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	693a      	ldr	r2, [r7, #16]
 800303a:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2201      	movs	r2, #1
 8003040:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2200      	movs	r2, #0
 8003048:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 800304c:	2300      	movs	r3, #0
 800304e:	75fb      	strb	r3, [r7, #23]
 8003050:	e03e      	b.n	80030d0 <HAL_HRTIM_Init+0x188>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 8003052:	7dfa      	ldrb	r2, [r7, #23]
 8003054:	6879      	ldr	r1, [r7, #4]
 8003056:	4613      	mov	r3, r2
 8003058:	00db      	lsls	r3, r3, #3
 800305a:	1a9b      	subs	r3, r3, r2
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	440b      	add	r3, r1
 8003060:	3318      	adds	r3, #24
 8003062:	2200      	movs	r2, #0
 8003064:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 8003066:	7dfa      	ldrb	r2, [r7, #23]
 8003068:	6879      	ldr	r1, [r7, #4]
 800306a:	4613      	mov	r3, r2
 800306c:	00db      	lsls	r3, r3, #3
 800306e:	1a9b      	subs	r3, r3, r2
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	440b      	add	r3, r1
 8003074:	331c      	adds	r3, #28
 8003076:	2200      	movs	r2, #0
 8003078:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 800307a:	7dfa      	ldrb	r2, [r7, #23]
 800307c:	6879      	ldr	r1, [r7, #4]
 800307e:	4613      	mov	r3, r2
 8003080:	00db      	lsls	r3, r3, #3
 8003082:	1a9b      	subs	r3, r3, r2
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	440b      	add	r3, r1
 8003088:	3320      	adds	r3, #32
 800308a:	2200      	movs	r2, #0
 800308c:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 800308e:	7dfa      	ldrb	r2, [r7, #23]
 8003090:	6879      	ldr	r1, [r7, #4]
 8003092:	4613      	mov	r3, r2
 8003094:	00db      	lsls	r3, r3, #3
 8003096:	1a9b      	subs	r3, r3, r2
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	440b      	add	r3, r1
 800309c:	3324      	adds	r3, #36	; 0x24
 800309e:	2200      	movs	r2, #0
 80030a0:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 80030a2:	7dfa      	ldrb	r2, [r7, #23]
 80030a4:	6879      	ldr	r1, [r7, #4]
 80030a6:	4613      	mov	r3, r2
 80030a8:	00db      	lsls	r3, r3, #3
 80030aa:	1a9b      	subs	r3, r3, r2
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	440b      	add	r3, r1
 80030b0:	3328      	adds	r3, #40	; 0x28
 80030b2:	2200      	movs	r2, #0
 80030b4:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 80030b6:	7dfa      	ldrb	r2, [r7, #23]
 80030b8:	6879      	ldr	r1, [r7, #4]
 80030ba:	4613      	mov	r3, r2
 80030bc:	00db      	lsls	r3, r3, #3
 80030be:	1a9b      	subs	r3, r3, r2
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	440b      	add	r3, r1
 80030c4:	3330      	adds	r3, #48	; 0x30
 80030c6:	2200      	movs	r2, #0
 80030c8:	601a      	str	r2, [r3, #0]
       timer_idx++)
 80030ca:	7dfb      	ldrb	r3, [r7, #23]
 80030cc:	3301      	adds	r3, #1
 80030ce:	75fb      	strb	r3, [r7, #23]
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 80030d0:	7dfb      	ldrb	r3, [r7, #23]
 80030d2:	2b06      	cmp	r3, #6
 80030d4:	d9bd      	bls.n	8003052 <HAL_HRTIM_Init+0x10a>
  }

  return HAL_OK;
 80030d6:	2300      	movs	r3, #0
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3718      	adds	r7, #24
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}
 80030e0:	40016800 	.word	0x40016800
 80030e4:	40021000 	.word	0x40021000

080030e8 <HAL_HRTIM_DLLCalibrationStart>:
  *       within the HAL_HRTIM_PollForDLLCalibration function, just before
  *       exiting the function.
  */
HAL_StatusTypeDef HAL_HRTIM_DLLCalibrationStart(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t CalibrationRate)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b083      	sub	sp, #12
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_HRTIM_CALIBRATIONRATE(CalibrationRate));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d101      	bne.n	8003100 <HAL_HRTIM_DLLCalibrationStart+0x18>
 80030fc:	2302      	movs	r3, #2
 80030fe:	e045      	b.n	800318c <HAL_HRTIM_DLLCalibrationStart+0xa4>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2201      	movs	r2, #1
 8003104:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2202      	movs	r2, #2
 800310c:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  if (CalibrationRate == HRTIM_SINGLE_CALIBRATION)
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003116:	d114      	bne.n	8003142 <HAL_HRTIM_DLLCalibrationStart+0x5a>
  {
    /* One shot DLL calibration */
    CLEAR_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f022 0202 	bic.w	r2, r2, #2
 8003128:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f042 0201 	orr.w	r2, r2, #1
 800313c:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
 8003140:	e01f      	b.n	8003182 <HAL_HRTIM_DLLCalibrationStart+0x9a>
  }
  else
  {
    /* Periodic DLL calibration */
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f042 0202 	orr.w	r2, r2, #2
 8003152:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
    MODIFY_REG(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALRTE, CalibrationRate);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800315e:	f023 010c 	bic.w	r1, r3, #12
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	683a      	ldr	r2, [r7, #0]
 8003168:	430a      	orrs	r2, r1
 800316a:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f042 0201 	orr.w	r2, r2, #1
 800317e:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2201      	movs	r2, #1
 8003186:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  return HAL_OK;
 800318a:	2300      	movs	r3, #0
}
 800318c:	4618      	mov	r0, r3
 800318e:	370c      	adds	r7, #12
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr

08003198 <HAL_HRTIM_PollForDLLCalibration>:
  * @param  Timeout Timeout duration in millisecond
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_PollForDLLCalibration(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t Timeout)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b084      	sub	sp, #16
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
 80031a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  tickstart = HAL_GetTick();
 80031a2:	f7fe f983 	bl	80014ac <HAL_GetTick>
 80031a6:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 80031a8:	e014      	b.n	80031d4 <HAL_HRTIM_PollForDLLCalibration+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031b0:	d010      	beq.n	80031d4 <HAL_HRTIM_PollForDLLCalibration+0x3c>
    {
      if(((HAL_GetTick()-tickstart) > Timeout) || (Timeout == 0U))
 80031b2:	f7fe f97b 	bl	80014ac <HAL_GetTick>
 80031b6:	4602      	mov	r2, r0
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	1ad3      	subs	r3, r2, r3
 80031bc:	683a      	ldr	r2, [r7, #0]
 80031be:	429a      	cmp	r2, r3
 80031c0:	d302      	bcc.n	80031c8 <HAL_HRTIM_PollForDLLCalibration+0x30>
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d105      	bne.n	80031d4 <HAL_HRTIM_PollForDLLCalibration+0x3c>
      {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2207      	movs	r2, #7
 80031cc:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
        return HAL_TIMEOUT;
 80031d0:	2303      	movs	r3, #3
 80031d2:	e011      	b.n	80031f8 <HAL_HRTIM_PollForDLLCalibration+0x60>
  while(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 80031dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031e4:	d1e1      	bne.n	80031aa <HAL_HRTIM_PollForDLLCalibration+0x12>
      }
    }
  }

  /* Set HRTIM State */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2201      	movs	r2, #1
 80031ea:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process unlocked */
  __HAL_UNLOCK(hhrtim);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 80031f6:	2300      	movs	r3, #0
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3710      	adds	r7, #16
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}

08003200 <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b084      	sub	sp, #16
 8003204:	af00      	add	r7, sp, #0
 8003206:	60f8      	str	r0, [r7, #12]
 8003208:	60b9      	str	r1, [r7, #8]
 800320a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8003212:	b2db      	uxtb	r3, r3
 8003214:	2b02      	cmp	r3, #2
 8003216:	d101      	bne.n	800321c <HAL_HRTIM_TimeBaseConfig+0x1c>
  {
     return HAL_BUSY;
 8003218:	2302      	movs	r3, #2
 800321a:	e015      	b.n	8003248 <HAL_HRTIM_TimeBaseConfig+0x48>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2202      	movs	r2, #2
 8003220:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	2b06      	cmp	r3, #6
 8003228:	d104      	bne.n	8003234 <HAL_HRTIM_TimeBaseConfig+0x34>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 800322a:	6879      	ldr	r1, [r7, #4]
 800322c:	68f8      	ldr	r0, [r7, #12]
 800322e:	f000 f8e5 	bl	80033fc <HRTIM_MasterBase_Config>
 8003232:	e004      	b.n	800323e <HAL_HRTIM_TimeBaseConfig+0x3e>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	68b9      	ldr	r1, [r7, #8]
 8003238:	68f8      	ldr	r0, [r7, #12]
 800323a:	f000 f90e 	bl	800345a <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2201      	movs	r2, #1
 8003242:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  return HAL_OK;
 8003246:	2300      	movs	r3, #0
}
 8003248:	4618      	mov	r0, r3
 800324a:	3710      	adds	r7, #16
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}

08003250 <HAL_HRTIM_WaveformTimerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b084      	sub	sp, #16
 8003254:	af00      	add	r7, sp, #0
 8003256:	60f8      	str	r0, [r7, #12]
 8003258:	60b9      	str	r1, [r7, #8]
 800325a:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_DACSYNC(pTimerCfg->DACSynchro));
  assert_param(IS_HRTIM_PRELOAD(pTimerCfg->PreloadEnable));
  assert_param(IS_HRTIM_TIMERBURSTMODE(pTimerCfg->BurstMode));
  assert_param(IS_HRTIM_UPDATEONREPETITION(pTimerCfg->RepetitionUpdate));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8003262:	b2db      	uxtb	r3, r3
 8003264:	2b02      	cmp	r3, #2
 8003266:	d101      	bne.n	800326c <HAL_HRTIM_WaveformTimerConfig+0x1c>
  {
     return HAL_BUSY;
 8003268:	2302      	movs	r3, #2
 800326a:	e05f      	b.n	800332c <HAL_HRTIM_WaveformTimerConfig+0xdc>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8003272:	2b01      	cmp	r3, #1
 8003274:	d101      	bne.n	800327a <HAL_HRTIM_WaveformTimerConfig+0x2a>
 8003276:	2302      	movs	r3, #2
 8003278:	e058      	b.n	800332c <HAL_HRTIM_WaveformTimerConfig+0xdc>
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2201      	movs	r2, #1
 800327e:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2202      	movs	r2, #2
 8003286:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	2b06      	cmp	r3, #6
 800328e:	d104      	bne.n	800329a <HAL_HRTIM_WaveformTimerConfig+0x4a>
    assert_param(IS_HRTIM_UPDATEGATING_MASTER(pTimerCfg->UpdateGating));
    assert_param(IS_HRTIM_MASTER_IT(pTimerCfg->InterruptRequests));
    assert_param(IS_HRTIM_MASTER_DMA(pTimerCfg->DMARequests));

    /* Configure master timer */
    HRTIM_MasterWaveform_Config(hhrtim, pTimerCfg);
 8003290:	6879      	ldr	r1, [r7, #4]
 8003292:	68f8      	ldr	r0, [r7, #12]
 8003294:	f000 f921 	bl	80034da <HRTIM_MasterWaveform_Config>
 8003298:	e004      	b.n	80032a4 <HAL_HRTIM_WaveformTimerConfig+0x54>
    assert_param(IS_HRTIM_TIMRESETTRIGGER(pTimerCfg->ResetTrigger));
    assert_param(IS_HRTIM_TIMUPDATEONRESET(pTimerCfg->ResetUpdate));
    assert_param(IS_HRTIM_TIMSYNCUPDATE(pTimerCfg->ReSyncUpdate));

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Config(hhrtim, TimerIdx, pTimerCfg);
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	68b9      	ldr	r1, [r7, #8]
 800329e:	68f8      	ldr	r0, [r7, #12]
 80032a0:	f000 f9b8 	bl	8003614 <HRTIM_TimingUnitWaveform_Config>
  }

  /* Update timer parameters */
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6819      	ldr	r1, [r3, #0]
 80032a8:	68f8      	ldr	r0, [r7, #12]
 80032aa:	68ba      	ldr	r2, [r7, #8]
 80032ac:	4613      	mov	r3, r2
 80032ae:	00db      	lsls	r3, r3, #3
 80032b0:	1a9b      	subs	r3, r3, r2
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	4403      	add	r3, r0
 80032b6:	3320      	adds	r3, #32
 80032b8:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6859      	ldr	r1, [r3, #4]
 80032be:	68f8      	ldr	r0, [r7, #12]
 80032c0:	68ba      	ldr	r2, [r7, #8]
 80032c2:	4613      	mov	r3, r2
 80032c4:	00db      	lsls	r3, r3, #3
 80032c6:	1a9b      	subs	r3, r3, r2
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	4403      	add	r3, r0
 80032cc:	3324      	adds	r3, #36	; 0x24
 80032ce:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6899      	ldr	r1, [r3, #8]
 80032d4:	68f8      	ldr	r0, [r7, #12]
 80032d6:	68ba      	ldr	r2, [r7, #8]
 80032d8:	4613      	mov	r3, r2
 80032da:	00db      	lsls	r3, r3, #3
 80032dc:	1a9b      	subs	r3, r3, r2
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	4403      	add	r3, r0
 80032e2:	3328      	adds	r3, #40	; 0x28
 80032e4:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	68d9      	ldr	r1, [r3, #12]
 80032ea:	68f8      	ldr	r0, [r7, #12]
 80032ec:	68ba      	ldr	r2, [r7, #8]
 80032ee:	4613      	mov	r3, r2
 80032f0:	00db      	lsls	r3, r3, #3
 80032f2:	1a9b      	subs	r3, r3, r2
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	4403      	add	r3, r0
 80032f8:	332c      	adds	r3, #44	; 0x2c
 80032fa:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6919      	ldr	r1, [r3, #16]
 8003300:	68f8      	ldr	r0, [r7, #12]
 8003302:	68ba      	ldr	r2, [r7, #8]
 8003304:	4613      	mov	r3, r2
 8003306:	00db      	lsls	r3, r3, #3
 8003308:	1a9b      	subs	r3, r3, r2
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	4403      	add	r3, r0
 800330e:	3330      	adds	r3, #48	; 0x30
 8003310:	6019      	str	r1, [r3, #0]

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 8003312:	68b9      	ldr	r1, [r7, #8]
 8003314:	68f8      	ldr	r0, [r7, #12]
 8003316:	f000 fc2f 	bl	8003b78 <HRTIM_ForceRegistersUpdate>

  hhrtim->State = HAL_HRTIM_STATE_READY;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2201      	movs	r2, #1
 800331e:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2200      	movs	r2, #0
 8003326:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 800332a:	2300      	movs	r3, #0
}
 800332c:	4618      	mov	r0, r3
 800332e:	3710      	adds	r7, #16
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}

08003334 <HAL_HRTIM_WaveformTimerControl>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerControl(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                HRTIM_TimerCtlTypeDef * pTimerCtl)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b084      	sub	sp, #16
 8003338:	af00      	add	r7, sp, #0
 800333a:	60f8      	str	r0, [r7, #12]
 800333c:	60b9      	str	r1, [r7, #8]
 800333e:	607a      	str	r2, [r7, #4]
    assert_param(IS_HRTIM_TIMERGTCMP1(pTimerCtl->GreaterCMP1));
    assert_param(IS_HRTIM_DUALDAC_RESET(pTimerCtl->DualChannelDacReset));
    assert_param(IS_HRTIM_DUALDAC_STEP(pTimerCtl->DualChannelDacStep));
    assert_param(IS_HRTIM_DUALDAC_ENABLE(pTimerCtl->DualChannelDacEnable));

    if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8003346:	b2db      	uxtb	r3, r3
 8003348:	2b02      	cmp	r3, #2
 800334a:	d101      	bne.n	8003350 <HAL_HRTIM_WaveformTimerControl+0x1c>
    {
       return HAL_BUSY;
 800334c:	2302      	movs	r3, #2
 800334e:	e020      	b.n	8003392 <HAL_HRTIM_WaveformTimerControl+0x5e>
    }

    /* Process Locked */
    __HAL_LOCK(hhrtim);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8003356:	2b01      	cmp	r3, #1
 8003358:	d101      	bne.n	800335e <HAL_HRTIM_WaveformTimerControl+0x2a>
 800335a:	2302      	movs	r3, #2
 800335c:	e019      	b.n	8003392 <HAL_HRTIM_WaveformTimerControl+0x5e>
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2201      	movs	r2, #1
 8003362:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

    hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2202      	movs	r2, #2
 800336a:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Control(hhrtim, TimerIdx, pTimerCtl);
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	68b9      	ldr	r1, [r7, #8]
 8003372:	68f8      	ldr	r0, [r7, #12]
 8003374:	f000 fae2 	bl	800393c <HRTIM_TimingUnitWaveform_Control>

    /* Force a software update */
    HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 8003378:	68b9      	ldr	r1, [r7, #8]
 800337a:	68f8      	ldr	r0, [r7, #12]
 800337c:	f000 fbfc 	bl	8003b78 <HRTIM_ForceRegistersUpdate>

    hhrtim->State = HAL_HRTIM_STATE_READY;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

    /* Process Unlocked */
    __HAL_UNLOCK(hhrtim);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2200      	movs	r2, #0
 800338c:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

    return HAL_OK;
 8003390:	2300      	movs	r3, #0
}
 8003392:	4618      	mov	r0, r3
 8003394:	3710      	adds	r7, #16
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}

0800339a <HAL_HRTIM_WaveformOutputConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                uint32_t Output,
                                                HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 800339a:	b580      	push	{r7, lr}
 800339c:	b084      	sub	sp, #16
 800339e:	af00      	add	r7, sp, #0
 80033a0:	60f8      	str	r0, [r7, #12]
 80033a2:	60b9      	str	r1, [r7, #8]
 80033a4:	607a      	str	r2, [r7, #4]
 80033a6:	603b      	str	r3, [r7, #0]
  assert_param(IS_HRTIM_OUTPUTIDLEMODE(pOutputCfg->IdleMode));
  assert_param(IS_HRTIM_OUTPUTFAULTLEVEL(pOutputCfg->FaultLevel));
  assert_param(IS_HRTIM_OUTPUTCHOPPERMODE(pOutputCfg->ChopperModeEnable));
  assert_param(IS_HRTIM_OUTPUTBURSTMODEENTRY(pOutputCfg->BurstModeEntryDelayed));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	2b02      	cmp	r3, #2
 80033b2:	d101      	bne.n	80033b8 <HAL_HRTIM_WaveformOutputConfig+0x1e>
  {
     return HAL_BUSY;
 80033b4:	2302      	movs	r3, #2
 80033b6:	e01d      	b.n	80033f4 <HAL_HRTIM_WaveformOutputConfig+0x5a>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d101      	bne.n	80033c6 <HAL_HRTIM_WaveformOutputConfig+0x2c>
 80033c2:	2302      	movs	r3, #2
 80033c4:	e016      	b.n	80033f4 <HAL_HRTIM_WaveformOutputConfig+0x5a>
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2201      	movs	r2, #1
 80033ca:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2202      	movs	r2, #2
 80033d2:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Configure the timer output */
  HRTIM_OutputConfig(hhrtim,
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	687a      	ldr	r2, [r7, #4]
 80033da:	68b9      	ldr	r1, [r7, #8]
 80033dc:	68f8      	ldr	r0, [r7, #12]
 80033de:	f000 fb0d 	bl	80039fc <HRTIM_OutputConfig>
                     TimerIdx,
                     Output,
                     pOutputCfg);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2201      	movs	r2, #1
 80033e6:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2200      	movs	r2, #0
 80033ee:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 80033f2:	2300      	movs	r3, #0
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3710      	adds	r7, #16
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}

080033fc <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                     HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b085      	sub	sp, #20
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	f023 0307 	bic.w	r3, r3, #7
 8003414:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	68fa      	ldr	r2, [r7, #12]
 800341c:	4313      	orrs	r3, r2
 800341e:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f023 0318 	bic.w	r3, r3, #24
 8003426:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	68fa      	ldr	r2, [r7, #12]
 800342e:	4313      	orrs	r3, r2
 8003430:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	68fa      	ldr	r2, [r7, #12]
 8003438:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	683a      	ldr	r2, [r7, #0]
 8003440:	6812      	ldr	r2, [r2, #0]
 8003442:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	683a      	ldr	r2, [r7, #0]
 800344a:	6852      	ldr	r2, [r2, #4]
 800344c:	619a      	str	r2, [r3, #24]
}
 800344e:	bf00      	nop
 8003450:	3714      	adds	r7, #20
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr

0800345a <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                         uint32_t TimerIdx ,
                                         HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 800345a:	b480      	push	{r7}
 800345c:	b087      	sub	sp, #28
 800345e:	af00      	add	r7, sp, #0
 8003460:	60f8      	str	r0, [r7, #12]
 8003462:	60b9      	str	r1, [r7, #8]
 8003464:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	3301      	adds	r3, #1
 800346e:	01db      	lsls	r3, r3, #7
 8003470:	4413      	add	r3, r2
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	f023 0307 	bic.w	r3, r3, #7
 800347c:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	697a      	ldr	r2, [r7, #20]
 8003484:	4313      	orrs	r3, r2
 8003486:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	f023 0318 	bic.w	r3, r3, #24
 800348e:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	697a      	ldr	r2, [r7, #20]
 8003496:	4313      	orrs	r3, r2
 8003498:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	3301      	adds	r3, #1
 80034a2:	01db      	lsls	r3, r3, #7
 80034a4:	4413      	add	r3, r2
 80034a6:	697a      	ldr	r2, [r7, #20]
 80034a8:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	6819      	ldr	r1, [r3, #0]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	01db      	lsls	r3, r3, #7
 80034b6:	440b      	add	r3, r1
 80034b8:	3394      	adds	r3, #148	; 0x94
 80034ba:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6819      	ldr	r1, [r3, #0]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	685a      	ldr	r2, [r3, #4]
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	01db      	lsls	r3, r3, #7
 80034c8:	440b      	add	r3, r1
 80034ca:	3398      	adds	r3, #152	; 0x98
 80034cc:	601a      	str	r2, [r3, #0]
}
 80034ce:	bf00      	nop
 80034d0:	371c      	adds	r7, #28
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr

080034da <HRTIM_MasterWaveform_Config>:
  * @param  pTimerCfg pointer to the timer configuration data structure
  * @retval None
  */
static void HRTIM_MasterWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                         HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 80034da:	b480      	push	{r7}
 80034dc:	b085      	sub	sp, #20
 80034de:	af00      	add	r7, sp, #0
 80034e0:	6078      	str	r0, [r7, #4]
 80034e2:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;
  uint32_t hrtim_bmcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 80034f4:	60bb      	str	r3, [r7, #8]

  /* Enable/Disable the half mode */
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	f023 0320 	bic.w	r3, r3, #32
 80034fc:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	695b      	ldr	r3, [r3, #20]
 8003502:	68fa      	ldr	r2, [r7, #12]
 8003504:	4313      	orrs	r3, r2
 8003506:	60fb      	str	r3, [r7, #12]

  /* INTLVD bits are set to 00 */
  hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800350e:	60fb      	str	r3, [r7, #12]
  if ((pTimerCfg->HalfModeEnable == HRTIM_HALFMODE_ENABLED) || (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_DUAL))
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	695b      	ldr	r3, [r3, #20]
 8003514:	2b20      	cmp	r3, #32
 8003516:	d003      	beq.n	8003520 <HRTIM_MasterWaveform_Config+0x46>
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	699b      	ldr	r3, [r3, #24]
 800351c:	2b02      	cmp	r3, #2
 800351e:	d108      	bne.n	8003532 <HRTIM_MasterWaveform_Config+0x58>
  {
    /* INTLVD bits set to 00 */
    hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003526:	60fb      	str	r3, [r7, #12]
    hrtim_mcr |= (HRTIM_MCR_HALF);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f043 0320 	orr.w	r3, r3, #32
 800352e:	60fb      	str	r3, [r7, #12]
 8003530:	e021      	b.n	8003576 <HRTIM_MasterWaveform_Config+0x9c>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_TRIPLE)
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	699b      	ldr	r3, [r3, #24]
 8003536:	2b03      	cmp	r3, #3
 8003538:	d108      	bne.n	800354c <HRTIM_MasterWaveform_Config+0x72>
  {
        hrtim_mcr |= (HRTIM_MCR_INTLVD_0);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003540:	60fb      	str	r3, [r7, #12]
        hrtim_mcr &= ~(HRTIM_MCR_INTLVD_1);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003548:	60fb      	str	r3, [r7, #12]
 800354a:	e014      	b.n	8003576 <HRTIM_MasterWaveform_Config+0x9c>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_QUAD)
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	699b      	ldr	r3, [r3, #24]
 8003550:	2b04      	cmp	r3, #4
 8003552:	d108      	bne.n	8003566 <HRTIM_MasterWaveform_Config+0x8c>
  {
        hrtim_mcr |= (HRTIM_MCR_INTLVD_1);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800355a:	60fb      	str	r3, [r7, #12]
        hrtim_mcr &= ~(HRTIM_MCR_INTLVD_0);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003562:	60fb      	str	r3, [r7, #12]
 8003564:	e007      	b.n	8003576 <HRTIM_MasterWaveform_Config+0x9c>
  }
  else
  {
        hrtim_mcr &= ~(HRTIM_MCR_HALF);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	f023 0320 	bic.w	r3, r3, #32
 800356c:	60fb      	str	r3, [r7, #12]
        hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003574:	60fb      	str	r3, [r7, #12]
  }

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800357c:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->StartOnSync;
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	69db      	ldr	r3, [r3, #28]
 8003582:	68fa      	ldr	r2, [r7, #12]
 8003584:	4313      	orrs	r3, r2
 8003586:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800358e:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	6a1b      	ldr	r3, [r3, #32]
 8003594:	68fa      	ldr	r2, [r7, #12]
 8003596:	4313      	orrs	r3, r2
 8003598:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80035a0:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->DACSynchro;
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a6:	68fa      	ldr	r2, [r7, #12]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 80035b2:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b8:	68fa      	ldr	r2, [r7, #12]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	60fb      	str	r3, [r7, #12]

  /* Master timer registers update handling */
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80035c4:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	68fa      	ldr	r2, [r7, #12]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable registers update on repetition */
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80035d8:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035de:	68fa      	ldr	r2, [r7, #12]
 80035e0:	4313      	orrs	r3, r2
 80035e2:	60fb      	str	r3, [r7, #12]

  /* Set the timer burst mode */
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035ea:	60bb      	str	r3, [r7, #8]
  hrtim_bmcr |= pTimerCfg->BurstMode;
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f0:	68ba      	ldr	r2, [r7, #8]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	60bb      	str	r3, [r7, #8]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	68fa      	ldr	r2, [r7, #12]
 80035fc:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	68ba      	ldr	r2, [r7, #8]
 8003604:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 8003608:	bf00      	nop
 800360a:	3714      	adds	r7, #20
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr

08003614 <HRTIM_TimingUnitWaveform_Config>:
  * @retval None
  */
static void  HRTIM_TimingUnitWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8003614:	b480      	push	{r7}
 8003616:	b08b      	sub	sp, #44	; 0x2c
 8003618:	af00      	add	r7, sp, #0
 800361a:	60f8      	str	r0, [r7, #12]
 800361c:	60b9      	str	r1, [r7, #8]
 800361e:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	3301      	adds	r3, #1
 8003628:	01db      	lsls	r3, r3, #7
 800362a:	4413      	add	r3, r2
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	68fa      	ldr	r2, [r7, #12]
 8003630:	6811      	ldr	r1, [r2, #0]
 8003632:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	3301      	adds	r3, #1
 800363a:	01db      	lsls	r3, r3, #7
 800363c:	440b      	add	r3, r1
 800363e:	601a      	str	r2, [r3, #0]

  /* Configure timing unit (Timer A to Timer F) */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	3301      	adds	r3, #1
 8003648:	01db      	lsls	r3, r3, #7
 800364a:	4413      	add	r3, r2
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	01db      	lsls	r3, r3, #7
 8003658:	4413      	add	r3, r2
 800365a:	33e8      	adds	r3, #232	; 0xe8
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	61bb      	str	r3, [r7, #24]
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	01db      	lsls	r3, r3, #7
 8003668:	4413      	add	r3, r2
 800366a:	33e4      	adds	r3, #228	; 0xe4
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	623b      	str	r3, [r7, #32]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 8003678:	61fb      	str	r3, [r7, #28]

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 800367a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367c:	f023 0320 	bic.w	r3, r3, #32
 8003680:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	695b      	ldr	r3, [r3, #20]
 8003686:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003688:	4313      	orrs	r3, r2
 800368a:	627b      	str	r3, [r7, #36]	; 0x24

  if ((pTimerCfg->HalfModeEnable == HRTIM_HALFMODE_ENABLED) || (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_DUAL))
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	695b      	ldr	r3, [r3, #20]
 8003690:	2b20      	cmp	r3, #32
 8003692:	d003      	beq.n	800369c <HRTIM_TimingUnitWaveform_Config+0x88>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	699b      	ldr	r3, [r3, #24]
 8003698:	2b02      	cmp	r3, #2
 800369a:	d108      	bne.n	80036ae <HRTIM_TimingUnitWaveform_Config+0x9a>
  {
    /* INTLVD bits set to 00 */
    hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD);
 800369c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369e:	f423 73c0 	bic.w	r3, r3, #384	; 0x180
 80036a2:	627b      	str	r3, [r7, #36]	; 0x24
    hrtim_timcr |= (HRTIM_TIMCR_HALF);
 80036a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a6:	f043 0320 	orr.w	r3, r3, #32
 80036aa:	627b      	str	r3, [r7, #36]	; 0x24
 80036ac:	e021      	b.n	80036f2 <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_TRIPLE)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	699b      	ldr	r3, [r3, #24]
 80036b2:	2b03      	cmp	r3, #3
 80036b4:	d108      	bne.n	80036c8 <HRTIM_TimingUnitWaveform_Config+0xb4>
  {
        hrtim_timcr |= (HRTIM_TIMCR_INTLVD_0);
 80036b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036bc:	627b      	str	r3, [r7, #36]	; 0x24
        hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD_1);
 80036be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036c4:	627b      	str	r3, [r7, #36]	; 0x24
 80036c6:	e014      	b.n	80036f2 <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_QUAD)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	699b      	ldr	r3, [r3, #24]
 80036cc:	2b04      	cmp	r3, #4
 80036ce:	d108      	bne.n	80036e2 <HRTIM_TimingUnitWaveform_Config+0xce>
  {
        hrtim_timcr |= (HRTIM_TIMCR_INTLVD_1);
 80036d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036d6:	627b      	str	r3, [r7, #36]	; 0x24
        hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD_0);
 80036d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036de:	627b      	str	r3, [r7, #36]	; 0x24
 80036e0:	e007      	b.n	80036f2 <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else
  {
        hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 80036e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e4:	f023 0320 	bic.w	r3, r3, #32
 80036e8:	627b      	str	r3, [r7, #36]	; 0x24
        hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD);
 80036ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ec:	f423 73c0 	bic.w	r3, r3, #384	; 0x180
 80036f0:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 80036f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80036f8:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->StartOnSync;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	69db      	ldr	r3, [r3, #28]
 80036fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003700:	4313      	orrs	r3, r2
 8003702:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 8003704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003706:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800370a:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6a1b      	ldr	r3, [r3, #32]
 8003710:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003712:	4313      	orrs	r3, r2
 8003714:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 8003716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003718:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800371c:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->DACSynchro;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003722:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003724:	4313      	orrs	r3, r2
 8003726:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 8003728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372a:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 800372e:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003734:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003736:	4313      	orrs	r3, r2
 8003738:	627b      	str	r3, [r7, #36]	; 0x24

  /* Timing unit registers update handling */
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 800373a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003740:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateGating;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003746:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003748:	4313      	orrs	r3, r2
 800374a:	627b      	str	r3, [r7, #36]	; 0x24

  if (pTimerCfg->UpdateGating == HRTIM_UPDATEGATING_INDEPENDENT)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003750:	2b00      	cmp	r3, #0
 8003752:	d109      	bne.n	8003768 <HRTIM_TimingUnitWaveform_Config+0x154>
  {
    /* Timing unit Re-Synchronized Update */
    hrtim_timcr &= ~(HRTIM_TIMCR_RSYNCU);
 8003754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003756:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800375a:	627b      	str	r3, [r7, #36]	; 0x24
    hrtim_timcr |= (pTimerCfg->ReSyncUpdate) << HRTIM_TIMCR_RSYNCU_Pos;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003760:	025b      	lsls	r3, r3, #9
 8003762:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003764:	4313      	orrs	r3, r2
 8003766:	627b      	str	r3, [r7, #36]	; 0x24
  }


  /* Enable/Disable registers update on repetition */
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 8003768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800376e:	627b      	str	r3, [r7, #36]	; 0x24
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003774:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003778:	d103      	bne.n	8003782 <HRTIM_TimingUnitWaveform_Config+0x16e>
  {
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 800377a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003780:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Set the push-pull mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 8003782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003784:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003788:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PushPull;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800378e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003790:	4313      	orrs	r3, r2
 8003792:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 8003794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003796:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800379a:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037a2:	4313      	orrs	r3, r2
 80037a4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set the timer update trigger */
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 80037a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a8:	f023 73fc 	bic.w	r3, r3, #33030144	; 0x1f80000
 80037ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037b0:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037b8:	4313      	orrs	r3, r2
 80037ba:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
 80037bc:	69bb      	ldr	r3, [r7, #24]
 80037be:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80037c2:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037cc:	69ba      	ldr	r2, [r7, #24]
 80037ce:	4313      	orrs	r3, r2
 80037d0:	61bb      	str	r3, [r7, #24]

  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 80037d2:	69bb      	ldr	r3, [r7, #24]
 80037d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80037d8:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= pTimerCfg->FaultLock;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037de:	69ba      	ldr	r2, [r7, #24]
 80037e0:	4313      	orrs	r3, r2
 80037e2:	61bb      	str	r3, [r7, #24]

    /* Enable/Disable dead time insertion at timer level */
    hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 80037e4:	6a3b      	ldr	r3, [r7, #32]
 80037e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037ea:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037f0:	6a3a      	ldr	r2, [r7, #32]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	623b      	str	r3, [r7, #32]

  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if ( ((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037fa:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 80037fe:	d004      	beq.n	800380a <HRTIM_TimingUnitWaveform_Config+0x1f6>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003804:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 8003808:	d103      	bne.n	8003812 <HRTIM_TimingUnitWaveform_Config+0x1fe>
       || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800380e:	2b40      	cmp	r3, #64	; 0x40
 8003810:	d108      	bne.n	8003824 <HRTIM_TimingUnitWaveform_Config+0x210>
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT| HRTIM_OUTR_DLYPRTEN);
 8003812:	6a3b      	ldr	r3, [r7, #32]
 8003814:	f423 53f0 	bic.w	r3, r3, #7680	; 0x1e00
 8003818:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800381e:	6a3a      	ldr	r2, [r7, #32]
 8003820:	4313      	orrs	r3, r2
 8003822:	623b      	str	r3, [r7, #32]
  }

  /* Set the BIAR mode : one bit for both outputs */
  hrtim_timoutr &= ~(HRTIM_OUTR_BIAR);
 8003824:	6a3b      	ldr	r3, [r7, #32]
 8003826:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800382a:	623b      	str	r3, [r7, #32]
  hrtim_timoutr |= (pTimerCfg->BalancedIdleAutomaticResume);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003830:	6a3a      	ldr	r2, [r7, #32]
 8003832:	4313      	orrs	r3, r2
 8003834:	623b      	str	r3, [r7, #32]

  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800383a:	617b      	str	r3, [r7, #20]

  /* Set the timer burst mode */
  switch (TimerIdx)
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	2b05      	cmp	r3, #5
 8003840:	d850      	bhi.n	80038e4 <HRTIM_TimingUnitWaveform_Config+0x2d0>
 8003842:	a201      	add	r2, pc, #4	; (adr r2, 8003848 <HRTIM_TimingUnitWaveform_Config+0x234>)
 8003844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003848:	08003861 	.word	0x08003861
 800384c:	08003877 	.word	0x08003877
 8003850:	0800388d 	.word	0x0800388d
 8003854:	080038a3 	.word	0x080038a3
 8003858:	080038b9 	.word	0x080038b9
 800385c:	080038cf 	.word	0x080038cf
  {
  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003866:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 1U);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800386c:	005b      	lsls	r3, r3, #1
 800386e:	69fa      	ldr	r2, [r7, #28]
 8003870:	4313      	orrs	r3, r2
 8003872:	61fb      	str	r3, [r7, #28]
      break;
 8003874:	e037      	b.n	80038e6 <HRTIM_TimingUnitWaveform_Config+0x2d2>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800387c:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 2U);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	69fa      	ldr	r2, [r7, #28]
 8003886:	4313      	orrs	r3, r2
 8003888:	61fb      	str	r3, [r7, #28]
      break;
 800388a:	e02c      	b.n	80038e6 <HRTIM_TimingUnitWaveform_Config+0x2d2>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8003892:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 3U);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003898:	00db      	lsls	r3, r3, #3
 800389a:	69fa      	ldr	r2, [r7, #28]
 800389c:	4313      	orrs	r3, r2
 800389e:	61fb      	str	r3, [r7, #28]
      break;
 80038a0:	e021      	b.n	80038e6 <HRTIM_TimingUnitWaveform_Config+0x2d2>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80038a8:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 4U);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ae:	011b      	lsls	r3, r3, #4
 80038b0:	69fa      	ldr	r2, [r7, #28]
 80038b2:	4313      	orrs	r3, r2
 80038b4:	61fb      	str	r3, [r7, #28]
      break;
 80038b6:	e016      	b.n	80038e6 <HRTIM_TimingUnitWaveform_Config+0x2d2>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80038be:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 5U);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c4:	015b      	lsls	r3, r3, #5
 80038c6:	69fa      	ldr	r2, [r7, #28]
 80038c8:	4313      	orrs	r3, r2
 80038ca:	61fb      	str	r3, [r7, #28]
      break;
 80038cc:	e00b      	b.n	80038e6 <HRTIM_TimingUnitWaveform_Config+0x2d2>
    }

  case HRTIM_TIMERINDEX_TIMER_F:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TFBM);
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80038d4:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 6U);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038da:	019b      	lsls	r3, r3, #6
 80038dc:	69fa      	ldr	r2, [r7, #28]
 80038de:	4313      	orrs	r3, r2
 80038e0:	61fb      	str	r3, [r7, #28]
      break;
 80038e2:	e000      	b.n	80038e6 <HRTIM_TimingUnitWaveform_Config+0x2d2>
    }

  default:
    break;
 80038e4:	bf00      	nop
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	3301      	adds	r3, #1
 80038ee:	01db      	lsls	r3, r3, #7
 80038f0:	4413      	add	r3, r2
 80038f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038f4:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	01db      	lsls	r3, r3, #7
 80038fe:	4413      	add	r3, r2
 8003900:	33e8      	adds	r3, #232	; 0xe8
 8003902:	69ba      	ldr	r2, [r7, #24]
 8003904:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	01db      	lsls	r3, r3, #7
 800390e:	4413      	add	r3, r2
 8003910:	33e4      	adds	r3, #228	; 0xe4
 8003912:	6a3a      	ldr	r2, [r7, #32]
 8003914:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	01db      	lsls	r3, r3, #7
 800391e:	4413      	add	r3, r2
 8003920:	33d4      	adds	r3, #212	; 0xd4
 8003922:	697a      	ldr	r2, [r7, #20]
 8003924:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	69fa      	ldr	r2, [r7, #28]
 800392c:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 8003930:	bf00      	nop
 8003932:	372c      	adds	r7, #44	; 0x2c
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr

0800393c <HRTIM_TimingUnitWaveform_Control>:
  * @retval None
  */
static void HRTIM_TimingUnitWaveform_Control(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             HRTIM_TimerCtlTypeDef * pTimerCtl)
{
 800393c:	b480      	push	{r7}
 800393e:	b087      	sub	sp, #28
 8003940:	af00      	add	r7, sp, #0
 8003942:	60f8      	str	r0, [r7, #12]
 8003944:	60b9      	str	r1, [r7, #8]
 8003946:	607a      	str	r2, [r7, #4]
   uint32_t hrtim_timcr2;

   /* Configure timing unit (Timer A to Timer F) */
   hrtim_timcr2 = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	01db      	lsls	r3, r3, #7
 8003950:	4413      	add	r3, r2
 8003952:	33ec      	adds	r3, #236	; 0xec
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	617b      	str	r3, [r7, #20]

   /* Set the UpDown counting Mode */
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_UDM);
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	f023 0310 	bic.w	r3, r3, #16
 800395e:	617b      	str	r3, [r7, #20]
   hrtim_timcr2 |= (pTimerCtl->UpDownMode << HRTIM_TIMCR2_UDM_Pos) ;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	011b      	lsls	r3, r3, #4
 8003966:	697a      	ldr	r2, [r7, #20]
 8003968:	4313      	orrs	r3, r2
 800396a:	617b      	str	r3, [r7, #20]

   /* Set the TrigHalf Mode : requires the counter to be disabled */
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_TRGHLF);
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003972:	617b      	str	r3, [r7, #20]
   hrtim_timcr2 |= pTimerCtl->TrigHalf;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	697a      	ldr	r2, [r7, #20]
 800397a:	4313      	orrs	r3, r2
 800397c:	617b      	str	r3, [r7, #20]

   /* define the compare event operating mode */
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_GTCMP1);
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003984:	617b      	str	r3, [r7, #20]
   hrtim_timcr2 |= pTimerCtl->GreaterCMP1;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	697a      	ldr	r2, [r7, #20]
 800398c:	4313      	orrs	r3, r2
 800398e:	617b      	str	r3, [r7, #20]

   /* define the compare event operating mode */
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_GTCMP3);
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003996:	617b      	str	r3, [r7, #20]
   hrtim_timcr2 |= pTimerCtl->GreaterCMP3;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	697a      	ldr	r2, [r7, #20]
 800399e:	4313      	orrs	r3, r2
 80039a0:	617b      	str	r3, [r7, #20]

   if (pTimerCtl->DualChannelDacEnable == HRTIM_TIMER_DCDE_ENABLED)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	699b      	ldr	r3, [r3, #24]
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d11a      	bne.n	80039e0 <HRTIM_TimingUnitWaveform_Control+0xa4>
   {
      /* Set the DualChannel DAC Reset trigger : requires DCDE enabled */
      hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDR);
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	f023 0304 	bic.w	r3, r3, #4
 80039b0:	617b      	str	r3, [r7, #20]
      hrtim_timcr2 |= pTimerCtl->DualChannelDacReset;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	691b      	ldr	r3, [r3, #16]
 80039b6:	697a      	ldr	r2, [r7, #20]
 80039b8:	4313      	orrs	r3, r2
 80039ba:	617b      	str	r3, [r7, #20]

      /* Set the DualChannel DAC Step trigger : requires DCDE enabled */
      hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDS);
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	f023 0302 	bic.w	r3, r3, #2
 80039c2:	617b      	str	r3, [r7, #20]
      hrtim_timcr2 |= pTimerCtl->DualChannelDacStep;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	695b      	ldr	r3, [r3, #20]
 80039c8:	697a      	ldr	r2, [r7, #20]
 80039ca:	4313      	orrs	r3, r2
 80039cc:	617b      	str	r3, [r7, #20]

      /* Enable the DualChannel DAC trigger */
      hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDE);
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	f023 0301 	bic.w	r3, r3, #1
 80039d4:	617b      	str	r3, [r7, #20]
      hrtim_timcr2 |= pTimerCtl->DualChannelDacEnable;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	699b      	ldr	r3, [r3, #24]
 80039da:	697a      	ldr	r2, [r7, #20]
 80039dc:	4313      	orrs	r3, r2
 80039de:	617b      	str	r3, [r7, #20]
   }
   /* Update the HRTIM registers */
   hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2  = hrtim_timcr2;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	01db      	lsls	r3, r3, #7
 80039e8:	4413      	add	r3, r2
 80039ea:	33ec      	adds	r3, #236	; 0xec
 80039ec:	697a      	ldr	r2, [r7, #20]
 80039ee:	601a      	str	r2, [r3, #0]

}
 80039f0:	bf00      	nop
 80039f2:	371c      	adds	r7, #28
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr

080039fc <HRTIM_OutputConfig>:
  */
static void  HRTIM_OutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                uint32_t TimerIdx,
                                uint32_t Output,
                                HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b089      	sub	sp, #36	; 0x24
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	60f8      	str	r0, [r7, #12]
 8003a04:	60b9      	str	r1, [r7, #8]
 8003a06:	607a      	str	r2, [r7, #4]
 8003a08:	603b      	str	r3, [r7, #0]
  uint32_t hrtim_outr;
  uint32_t hrtim_dtr;

  uint32_t shift = 0U;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	61bb      	str	r3, [r7, #24]

  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	01db      	lsls	r3, r3, #7
 8003a16:	4413      	add	r3, r2
 8003a18:	33e4      	adds	r3, #228	; 0xe4
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	61fb      	str	r3, [r7, #28]
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	01db      	lsls	r3, r3, #7
 8003a26:	4413      	add	r3, r2
 8003a28:	33b8      	adds	r3, #184	; 0xb8
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	617b      	str	r3, [r7, #20]

  switch (Output)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2b20      	cmp	r3, #32
 8003a32:	d037      	beq.n	8003aa4 <HRTIM_OutputConfig+0xa8>
 8003a34:	2b20      	cmp	r3, #32
 8003a36:	d80d      	bhi.n	8003a54 <HRTIM_OutputConfig+0x58>
 8003a38:	2b04      	cmp	r3, #4
 8003a3a:	d020      	beq.n	8003a7e <HRTIM_OutputConfig+0x82>
 8003a3c:	2b04      	cmp	r3, #4
 8003a3e:	d804      	bhi.n	8003a4a <HRTIM_OutputConfig+0x4e>
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d01c      	beq.n	8003a7e <HRTIM_OutputConfig+0x82>
 8003a44:	2b02      	cmp	r3, #2
 8003a46:	d02d      	beq.n	8003aa4 <HRTIM_OutputConfig+0xa8>
      shift = 16U;
      break;
    }

  default:
    break;
 8003a48:	e041      	b.n	8003ace <HRTIM_OutputConfig+0xd2>
  switch (Output)
 8003a4a:	2b08      	cmp	r3, #8
 8003a4c:	d02a      	beq.n	8003aa4 <HRTIM_OutputConfig+0xa8>
 8003a4e:	2b10      	cmp	r3, #16
 8003a50:	d015      	beq.n	8003a7e <HRTIM_OutputConfig+0x82>
    break;
 8003a52:	e03c      	b.n	8003ace <HRTIM_OutputConfig+0xd2>
  switch (Output)
 8003a54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a58:	d011      	beq.n	8003a7e <HRTIM_OutputConfig+0x82>
 8003a5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a5e:	d804      	bhi.n	8003a6a <HRTIM_OutputConfig+0x6e>
 8003a60:	2b40      	cmp	r3, #64	; 0x40
 8003a62:	d00c      	beq.n	8003a7e <HRTIM_OutputConfig+0x82>
 8003a64:	2b80      	cmp	r3, #128	; 0x80
 8003a66:	d01d      	beq.n	8003aa4 <HRTIM_OutputConfig+0xa8>
    break;
 8003a68:	e031      	b.n	8003ace <HRTIM_OutputConfig+0xd2>
  switch (Output)
 8003a6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a6e:	d006      	beq.n	8003a7e <HRTIM_OutputConfig+0x82>
 8003a70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a74:	d016      	beq.n	8003aa4 <HRTIM_OutputConfig+0xa8>
 8003a76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a7a:	d013      	beq.n	8003aa4 <HRTIM_OutputConfig+0xa8>
    break;
 8003a7c:	e027      	b.n	8003ace <HRTIM_OutputConfig+0xd2>
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R = pOutputCfg->SetSource;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	6819      	ldr	r1, [r3, #0]
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	685a      	ldr	r2, [r3, #4]
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	01db      	lsls	r3, r3, #7
 8003a8a:	440b      	add	r3, r1
 8003a8c:	33bc      	adds	r3, #188	; 0xbc
 8003a8e:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R = pOutputCfg->ResetSource;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6819      	ldr	r1, [r3, #0]
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	689a      	ldr	r2, [r3, #8]
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	01db      	lsls	r3, r3, #7
 8003a9c:	440b      	add	r3, r1
 8003a9e:	33c0      	adds	r3, #192	; 0xc0
 8003aa0:	601a      	str	r2, [r3, #0]
      break;
 8003aa2:	e014      	b.n	8003ace <HRTIM_OutputConfig+0xd2>
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R = pOutputCfg->SetSource;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	6819      	ldr	r1, [r3, #0]
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	685a      	ldr	r2, [r3, #4]
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	01db      	lsls	r3, r3, #7
 8003ab0:	440b      	add	r3, r1
 8003ab2:	33c4      	adds	r3, #196	; 0xc4
 8003ab4:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R = pOutputCfg->ResetSource;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	6819      	ldr	r1, [r3, #0]
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	689a      	ldr	r2, [r3, #8]
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	01db      	lsls	r3, r3, #7
 8003ac2:	440b      	add	r3, r1
 8003ac4:	33c8      	adds	r3, #200	; 0xc8
 8003ac6:	601a      	str	r2, [r3, #0]
      shift = 16U;
 8003ac8:	2310      	movs	r3, #16
 8003aca:	61bb      	str	r3, [r7, #24]
      break;
 8003acc:	bf00      	nop
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
                   HRTIM_OUTR_IDLM1 |
                   HRTIM_OUTR_IDLES1|
                   HRTIM_OUTR_FAULT1|
                   HRTIM_OUTR_CHP1 |
                   HRTIM_OUTR_DIDL1) << shift);
 8003ace:	22fe      	movs	r2, #254	; 0xfe
 8003ad0:	69bb      	ldr	r3, [r7, #24]
 8003ad2:	fa02 f303 	lsl.w	r3, r2, r3
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
 8003ad6:	43db      	mvns	r3, r3
 8003ad8:	69fa      	ldr	r2, [r7, #28]
 8003ada:	4013      	ands	r3, r2
 8003adc:	61fb      	str	r3, [r7, #28]

  /* Set the polarity */
  hrtim_outr |= (pOutputCfg->Polarity << shift);
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	69bb      	ldr	r3, [r7, #24]
 8003ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae8:	69fa      	ldr	r2, [r7, #28]
 8003aea:	4313      	orrs	r3, r2
 8003aec:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE mode */
  hrtim_outr |= (pOutputCfg->IdleMode << shift);
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	68da      	ldr	r2, [r3, #12]
 8003af2:	69bb      	ldr	r3, [r7, #24]
 8003af4:	fa02 f303 	lsl.w	r3, r2, r3
 8003af8:	69fa      	ldr	r2, [r7, #28]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE state */
  hrtim_outr |= (pOutputCfg->IdleLevel << shift);
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	691a      	ldr	r2, [r3, #16]
 8003b02:	69bb      	ldr	r3, [r7, #24]
 8003b04:	fa02 f303 	lsl.w	r3, r2, r3
 8003b08:	69fa      	ldr	r2, [r7, #28]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	61fb      	str	r3, [r7, #28]

  /* Set the FAULT state */
  hrtim_outr |= (pOutputCfg->FaultLevel << shift);
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	695a      	ldr	r2, [r3, #20]
 8003b12:	69bb      	ldr	r3, [r7, #24]
 8003b14:	fa02 f303 	lsl.w	r3, r2, r3
 8003b18:	69fa      	ldr	r2, [r7, #28]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	61fb      	str	r3, [r7, #28]

  /* Set the chopper mode */
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	699a      	ldr	r2, [r3, #24]
 8003b22:	69bb      	ldr	r3, [r7, #24]
 8003b24:	fa02 f303 	lsl.w	r3, r2, r3
 8003b28:	69fa      	ldr	r2, [r7, #28]
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	61fb      	str	r3, [r7, #28]
     state during a burst mode operation is allowed only under the following
     conditions:
     - the outputs is active during the burst mode (IDLES=1U)
     - positive deadtimes (SDTR/SDTF set to 0U)
  */
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	691b      	ldr	r3, [r3, #16]
 8003b32:	2b08      	cmp	r3, #8
 8003b34:	d111      	bne.n	8003b5a <HRTIM_OutputConfig+0x15e>
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	f403 7300 	and.w	r3, r3, #512	; 0x200
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d10c      	bne.n	8003b5a <HRTIM_OutputConfig+0x15e>
      ((hrtim_dtr & HRTIM_DTR_SDTF) == (uint32_t)RESET))
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d107      	bne.n	8003b5a <HRTIM_OutputConfig+0x15e>
  {
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	69da      	ldr	r2, [r3, #28]
 8003b4e:	69bb      	ldr	r3, [r7, #24]
 8003b50:	fa02 f303 	lsl.w	r3, r2, r3
 8003b54:	69fa      	ldr	r2, [r7, #28]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	61fb      	str	r3, [r7, #28]
  }

  /* Update HRTIM register */
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	01db      	lsls	r3, r3, #7
 8003b62:	4413      	add	r3, r2
 8003b64:	33e4      	adds	r3, #228	; 0xe4
 8003b66:	69fa      	ldr	r2, [r7, #28]
 8003b68:	601a      	str	r2, [r3, #0]
}
 8003b6a:	bf00      	nop
 8003b6c:	3724      	adds	r7, #36	; 0x24
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr
	...

08003b78 <HRTIM_ForceRegistersUpdate>:
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef * hhrtim,
                                       uint32_t TimerIdx)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b083      	sub	sp, #12
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	6039      	str	r1, [r7, #0]
  switch (TimerIdx)
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	2b06      	cmp	r3, #6
 8003b86:	d85e      	bhi.n	8003c46 <HRTIM_ForceRegistersUpdate+0xce>
 8003b88:	a201      	add	r2, pc, #4	; (adr r2, 8003b90 <HRTIM_ForceRegistersUpdate+0x18>)
 8003b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b8e:	bf00      	nop
 8003b90:	08003bc3 	.word	0x08003bc3
 8003b94:	08003bd9 	.word	0x08003bd9
 8003b98:	08003bef 	.word	0x08003bef
 8003b9c:	08003c05 	.word	0x08003c05
 8003ba0:	08003c1b 	.word	0x08003c1b
 8003ba4:	08003c31 	.word	0x08003c31
 8003ba8:	08003bad 	.word	0x08003bad
  {
  case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f042 0201 	orr.w	r2, r2, #1
 8003bbc:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8003bc0:	e042      	b.n	8003c48 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f042 0202 	orr.w	r2, r2, #2
 8003bd2:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8003bd6:	e037      	b.n	8003c48 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f042 0204 	orr.w	r2, r2, #4
 8003be8:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8003bec:	e02c      	b.n	8003c48 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f042 0208 	orr.w	r2, r2, #8
 8003bfe:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8003c02:	e021      	b.n	8003c48 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f042 0210 	orr.w	r2, r2, #16
 8003c14:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8003c18:	e016      	b.n	8003c48 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f042 0220 	orr.w	r2, r2, #32
 8003c2a:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8003c2e:	e00b      	b.n	8003c48 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_F:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TFSWU;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c40:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8003c44:	e000      	b.n	8003c48 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  default:
    break;
 8003c46:	bf00      	nop
  }
}
 8003c48:	bf00      	nop
 8003c4a:	370c      	adds	r7, #12
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr

08003c54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b082      	sub	sp, #8
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d101      	bne.n	8003c66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e081      	b.n	8003d6a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d106      	bne.n	8003c80 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f7fd f9ae 	bl	8000fdc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2224      	movs	r2, #36	; 0x24
 8003c84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f022 0201 	bic.w	r2, r2, #1
 8003c96:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	685a      	ldr	r2, [r3, #4]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003ca4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	689a      	ldr	r2, [r3, #8]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003cb4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	68db      	ldr	r3, [r3, #12]
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d107      	bne.n	8003cce <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	689a      	ldr	r2, [r3, #8]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003cca:	609a      	str	r2, [r3, #8]
 8003ccc:	e006      	b.n	8003cdc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	689a      	ldr	r2, [r3, #8]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003cda:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	2b02      	cmp	r3, #2
 8003ce2:	d104      	bne.n	8003cee <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003cec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	687a      	ldr	r2, [r7, #4]
 8003cf6:	6812      	ldr	r2, [r2, #0]
 8003cf8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003cfc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d00:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	68da      	ldr	r2, [r3, #12]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d10:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	691a      	ldr	r2, [r3, #16]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	695b      	ldr	r3, [r3, #20]
 8003d1a:	ea42 0103 	orr.w	r1, r2, r3
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	699b      	ldr	r3, [r3, #24]
 8003d22:	021a      	lsls	r2, r3, #8
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	430a      	orrs	r2, r1
 8003d2a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	69d9      	ldr	r1, [r3, #28]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6a1a      	ldr	r2, [r3, #32]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	430a      	orrs	r2, r1
 8003d3a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f042 0201 	orr.w	r2, r2, #1
 8003d4a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2220      	movs	r2, #32
 8003d56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2200      	movs	r2, #0
 8003d64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003d68:	2300      	movs	r3, #0
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3708      	adds	r7, #8
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}

08003d72 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003d72:	b480      	push	{r7}
 8003d74:	b083      	sub	sp, #12
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	6078      	str	r0, [r7, #4]
 8003d7a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	2b20      	cmp	r3, #32
 8003d86:	d138      	bne.n	8003dfa <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d101      	bne.n	8003d96 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003d92:	2302      	movs	r3, #2
 8003d94:	e032      	b.n	8003dfc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2201      	movs	r2, #1
 8003d9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2224      	movs	r2, #36	; 0x24
 8003da2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f022 0201 	bic.w	r2, r2, #1
 8003db4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003dc4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	6819      	ldr	r1, [r3, #0]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	683a      	ldr	r2, [r7, #0]
 8003dd2:	430a      	orrs	r2, r1
 8003dd4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f042 0201 	orr.w	r2, r2, #1
 8003de4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2220      	movs	r2, #32
 8003dea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003df6:	2300      	movs	r3, #0
 8003df8:	e000      	b.n	8003dfc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003dfa:	2302      	movs	r3, #2
  }
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	370c      	adds	r7, #12
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr

08003e08 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b085      	sub	sp, #20
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	2b20      	cmp	r3, #32
 8003e1c:	d139      	bne.n	8003e92 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d101      	bne.n	8003e2c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003e28:	2302      	movs	r3, #2
 8003e2a:	e033      	b.n	8003e94 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2224      	movs	r2, #36	; 0x24
 8003e38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f022 0201 	bic.w	r2, r2, #1
 8003e4a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003e5a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	021b      	lsls	r3, r3, #8
 8003e60:	68fa      	ldr	r2, [r7, #12]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	68fa      	ldr	r2, [r7, #12]
 8003e6c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f042 0201 	orr.w	r2, r2, #1
 8003e7c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2220      	movs	r2, #32
 8003e82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	e000      	b.n	8003e94 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003e92:	2302      	movs	r3, #2
  }
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3714      	adds	r7, #20
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr

08003ea0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003ea0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ea2:	b08b      	sub	sp, #44	; 0x2c
 8003ea4:	af06      	add	r7, sp, #24
 8003ea6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d101      	bne.n	8003eb2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e0d7      	b.n	8004062 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d106      	bne.n	8003ecc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f7fd f9fe 	bl	80012c8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2203      	movs	r2, #3
 8003ed0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f001 ffe7 	bl	8005eac <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ede:	2300      	movs	r3, #0
 8003ee0:	73fb      	strb	r3, [r7, #15]
 8003ee2:	e04c      	b.n	8003f7e <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003ee4:	7bfb      	ldrb	r3, [r7, #15]
 8003ee6:	6879      	ldr	r1, [r7, #4]
 8003ee8:	1c5a      	adds	r2, r3, #1
 8003eea:	4613      	mov	r3, r2
 8003eec:	009b      	lsls	r3, r3, #2
 8003eee:	4413      	add	r3, r2
 8003ef0:	00db      	lsls	r3, r3, #3
 8003ef2:	440b      	add	r3, r1
 8003ef4:	3301      	adds	r3, #1
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003efa:	7bfb      	ldrb	r3, [r7, #15]
 8003efc:	6879      	ldr	r1, [r7, #4]
 8003efe:	1c5a      	adds	r2, r3, #1
 8003f00:	4613      	mov	r3, r2
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	4413      	add	r3, r2
 8003f06:	00db      	lsls	r3, r3, #3
 8003f08:	440b      	add	r3, r1
 8003f0a:	7bfa      	ldrb	r2, [r7, #15]
 8003f0c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003f0e:	7bfa      	ldrb	r2, [r7, #15]
 8003f10:	7bfb      	ldrb	r3, [r7, #15]
 8003f12:	b298      	uxth	r0, r3
 8003f14:	6879      	ldr	r1, [r7, #4]
 8003f16:	4613      	mov	r3, r2
 8003f18:	009b      	lsls	r3, r3, #2
 8003f1a:	4413      	add	r3, r2
 8003f1c:	00db      	lsls	r3, r3, #3
 8003f1e:	440b      	add	r3, r1
 8003f20:	3336      	adds	r3, #54	; 0x36
 8003f22:	4602      	mov	r2, r0
 8003f24:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003f26:	7bfb      	ldrb	r3, [r7, #15]
 8003f28:	6879      	ldr	r1, [r7, #4]
 8003f2a:	1c5a      	adds	r2, r3, #1
 8003f2c:	4613      	mov	r3, r2
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	4413      	add	r3, r2
 8003f32:	00db      	lsls	r3, r3, #3
 8003f34:	440b      	add	r3, r1
 8003f36:	3303      	adds	r3, #3
 8003f38:	2200      	movs	r2, #0
 8003f3a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003f3c:	7bfa      	ldrb	r2, [r7, #15]
 8003f3e:	6879      	ldr	r1, [r7, #4]
 8003f40:	4613      	mov	r3, r2
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	4413      	add	r3, r2
 8003f46:	00db      	lsls	r3, r3, #3
 8003f48:	440b      	add	r3, r1
 8003f4a:	3338      	adds	r3, #56	; 0x38
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003f50:	7bfa      	ldrb	r2, [r7, #15]
 8003f52:	6879      	ldr	r1, [r7, #4]
 8003f54:	4613      	mov	r3, r2
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	4413      	add	r3, r2
 8003f5a:	00db      	lsls	r3, r3, #3
 8003f5c:	440b      	add	r3, r1
 8003f5e:	333c      	adds	r3, #60	; 0x3c
 8003f60:	2200      	movs	r2, #0
 8003f62:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003f64:	7bfa      	ldrb	r2, [r7, #15]
 8003f66:	6879      	ldr	r1, [r7, #4]
 8003f68:	4613      	mov	r3, r2
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	4413      	add	r3, r2
 8003f6e:	00db      	lsls	r3, r3, #3
 8003f70:	440b      	add	r3, r1
 8003f72:	3340      	adds	r3, #64	; 0x40
 8003f74:	2200      	movs	r2, #0
 8003f76:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f78:	7bfb      	ldrb	r3, [r7, #15]
 8003f7a:	3301      	adds	r3, #1
 8003f7c:	73fb      	strb	r3, [r7, #15]
 8003f7e:	7bfa      	ldrb	r2, [r7, #15]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d3ad      	bcc.n	8003ee4 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f88:	2300      	movs	r3, #0
 8003f8a:	73fb      	strb	r3, [r7, #15]
 8003f8c:	e044      	b.n	8004018 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003f8e:	7bfa      	ldrb	r2, [r7, #15]
 8003f90:	6879      	ldr	r1, [r7, #4]
 8003f92:	4613      	mov	r3, r2
 8003f94:	009b      	lsls	r3, r3, #2
 8003f96:	4413      	add	r3, r2
 8003f98:	00db      	lsls	r3, r3, #3
 8003f9a:	440b      	add	r3, r1
 8003f9c:	f203 1369 	addw	r3, r3, #361	; 0x169
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003fa4:	7bfa      	ldrb	r2, [r7, #15]
 8003fa6:	6879      	ldr	r1, [r7, #4]
 8003fa8:	4613      	mov	r3, r2
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	4413      	add	r3, r2
 8003fae:	00db      	lsls	r3, r3, #3
 8003fb0:	440b      	add	r3, r1
 8003fb2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003fb6:	7bfa      	ldrb	r2, [r7, #15]
 8003fb8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003fba:	7bfa      	ldrb	r2, [r7, #15]
 8003fbc:	6879      	ldr	r1, [r7, #4]
 8003fbe:	4613      	mov	r3, r2
 8003fc0:	009b      	lsls	r3, r3, #2
 8003fc2:	4413      	add	r3, r2
 8003fc4:	00db      	lsls	r3, r3, #3
 8003fc6:	440b      	add	r3, r1
 8003fc8:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8003fcc:	2200      	movs	r2, #0
 8003fce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003fd0:	7bfa      	ldrb	r2, [r7, #15]
 8003fd2:	6879      	ldr	r1, [r7, #4]
 8003fd4:	4613      	mov	r3, r2
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	4413      	add	r3, r2
 8003fda:	00db      	lsls	r3, r3, #3
 8003fdc:	440b      	add	r3, r1
 8003fde:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003fe6:	7bfa      	ldrb	r2, [r7, #15]
 8003fe8:	6879      	ldr	r1, [r7, #4]
 8003fea:	4613      	mov	r3, r2
 8003fec:	009b      	lsls	r3, r3, #2
 8003fee:	4413      	add	r3, r2
 8003ff0:	00db      	lsls	r3, r3, #3
 8003ff2:	440b      	add	r3, r1
 8003ff4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003ffc:	7bfa      	ldrb	r2, [r7, #15]
 8003ffe:	6879      	ldr	r1, [r7, #4]
 8004000:	4613      	mov	r3, r2
 8004002:	009b      	lsls	r3, r3, #2
 8004004:	4413      	add	r3, r2
 8004006:	00db      	lsls	r3, r3, #3
 8004008:	440b      	add	r3, r1
 800400a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800400e:	2200      	movs	r2, #0
 8004010:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004012:	7bfb      	ldrb	r3, [r7, #15]
 8004014:	3301      	adds	r3, #1
 8004016:	73fb      	strb	r3, [r7, #15]
 8004018:	7bfa      	ldrb	r2, [r7, #15]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	429a      	cmp	r2, r3
 8004020:	d3b5      	bcc.n	8003f8e <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	603b      	str	r3, [r7, #0]
 8004028:	687e      	ldr	r6, [r7, #4]
 800402a:	466d      	mov	r5, sp
 800402c:	f106 0410 	add.w	r4, r6, #16
 8004030:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004032:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004034:	6823      	ldr	r3, [r4, #0]
 8004036:	602b      	str	r3, [r5, #0]
 8004038:	1d33      	adds	r3, r6, #4
 800403a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800403c:	6838      	ldr	r0, [r7, #0]
 800403e:	f001 ff50 	bl	8005ee2 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2201      	movs	r2, #1
 800404e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	69db      	ldr	r3, [r3, #28]
 8004056:	2b01      	cmp	r3, #1
 8004058:	d102      	bne.n	8004060 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f000 f805 	bl	800406a <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 8004060:	2300      	movs	r3, #0
}
 8004062:	4618      	mov	r0, r3
 8004064:	3714      	adds	r7, #20
 8004066:	46bd      	mov	sp, r7
 8004068:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800406a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800406a:	b480      	push	{r7}
 800406c:	b085      	sub	sp, #20
 800406e:	af00      	add	r7, sp, #0
 8004070:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800408e:	b29b      	uxth	r3, r3
 8004090:	f043 0301 	orr.w	r3, r3, #1
 8004094:	b29a      	uxth	r2, r3
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80040a2:	b29b      	uxth	r3, r3
 80040a4:	f043 0302 	orr.w	r3, r3, #2
 80040a8:	b29a      	uxth	r2, r3
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80040b0:	2300      	movs	r3, #0
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3714      	adds	r7, #20
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr
	...

080040c0 <HAL_PWR_ConfigPVD>:
  *         more details about the voltage thresholds corresponding to each
  *         detection level.
  * @retval None
  */
HAL_StatusTypeDef HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b083      	sub	sp, #12
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS bits according to PVDLevel value */
  MODIFY_REG(PWR->CR2, PWR_CR2_PLS, sConfigPVD->PVDLevel);
 80040c8:	4b2b      	ldr	r3, [pc, #172]	; (8004178 <HAL_PWR_ConfigPVD+0xb8>)
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	f023 020e 	bic.w	r2, r3, #14
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4928      	ldr	r1, [pc, #160]	; (8004178 <HAL_PWR_ConfigPVD+0xb8>)
 80040d6:	4313      	orrs	r3, r2
 80040d8:	604b      	str	r3, [r1, #4]

  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 80040da:	4b28      	ldr	r3, [pc, #160]	; (800417c <HAL_PWR_ConfigPVD+0xbc>)
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	4a27      	ldr	r2, [pc, #156]	; (800417c <HAL_PWR_ConfigPVD+0xbc>)
 80040e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040e4:	6053      	str	r3, [r2, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 80040e6:	4b25      	ldr	r3, [pc, #148]	; (800417c <HAL_PWR_ConfigPVD+0xbc>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a24      	ldr	r2, [pc, #144]	; (800417c <HAL_PWR_ConfigPVD+0xbc>)
 80040ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040f0:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE();
 80040f2:	4b22      	ldr	r3, [pc, #136]	; (800417c <HAL_PWR_ConfigPVD+0xbc>)
 80040f4:	68db      	ldr	r3, [r3, #12]
 80040f6:	4a21      	ldr	r2, [pc, #132]	; (800417c <HAL_PWR_ConfigPVD+0xbc>)
 80040f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040fc:	60d3      	str	r3, [r2, #12]
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 80040fe:	4b1f      	ldr	r3, [pc, #124]	; (800417c <HAL_PWR_ConfigPVD+0xbc>)
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	4a1e      	ldr	r2, [pc, #120]	; (800417c <HAL_PWR_ConfigPVD+0xbc>)
 8004104:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004108:	6093      	str	r3, [r2, #8]

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004112:	2b00      	cmp	r3, #0
 8004114:	d005      	beq.n	8004122 <HAL_PWR_ConfigPVD+0x62>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 8004116:	4b19      	ldr	r3, [pc, #100]	; (800417c <HAL_PWR_ConfigPVD+0xbc>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a18      	ldr	r2, [pc, #96]	; (800417c <HAL_PWR_ConfigPVD+0xbc>)
 800411c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004120:	6013      	str	r3, [r2, #0]
  }

  /* Configure event mode */
  if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d005      	beq.n	800413a <HAL_PWR_ConfigPVD+0x7a>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 800412e:	4b13      	ldr	r3, [pc, #76]	; (800417c <HAL_PWR_ConfigPVD+0xbc>)
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	4a12      	ldr	r2, [pc, #72]	; (800417c <HAL_PWR_ConfigPVD+0xbc>)
 8004134:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004138:	6053      	str	r3, [r2, #4]
  }

  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	f003 0301 	and.w	r3, r3, #1
 8004142:	2b00      	cmp	r3, #0
 8004144:	d005      	beq.n	8004152 <HAL_PWR_ConfigPVD+0x92>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 8004146:	4b0d      	ldr	r3, [pc, #52]	; (800417c <HAL_PWR_ConfigPVD+0xbc>)
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	4a0c      	ldr	r2, [pc, #48]	; (800417c <HAL_PWR_ConfigPVD+0xbc>)
 800414c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004150:	6093      	str	r3, [r2, #8]
  }

  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	f003 0302 	and.w	r3, r3, #2
 800415a:	2b00      	cmp	r3, #0
 800415c:	d005      	beq.n	800416a <HAL_PWR_ConfigPVD+0xaa>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 800415e:	4b07      	ldr	r3, [pc, #28]	; (800417c <HAL_PWR_ConfigPVD+0xbc>)
 8004160:	68db      	ldr	r3, [r3, #12]
 8004162:	4a06      	ldr	r2, [pc, #24]	; (800417c <HAL_PWR_ConfigPVD+0xbc>)
 8004164:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004168:	60d3      	str	r3, [r2, #12]
  }

  return HAL_OK;
 800416a:	2300      	movs	r3, #0
}
 800416c:	4618      	mov	r0, r3
 800416e:	370c      	adds	r7, #12
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr
 8004178:	40007000 	.word	0x40007000
 800417c:	40010400 	.word	0x40010400

08004180 <HAL_PWR_EnablePVD>:
/**
  * @brief Enable the Power Voltage Detector (PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 8004180:	b480      	push	{r7}
 8004182:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_PVDE);
 8004184:	4b05      	ldr	r3, [pc, #20]	; (800419c <HAL_PWR_EnablePVD+0x1c>)
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	4a04      	ldr	r2, [pc, #16]	; (800419c <HAL_PWR_EnablePVD+0x1c>)
 800418a:	f043 0301 	orr.w	r3, r3, #1
 800418e:	6053      	str	r3, [r2, #4]
}
 8004190:	bf00      	nop
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr
 800419a:	bf00      	nop
 800419c:	40007000 	.word	0x40007000

080041a0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b085      	sub	sp, #20
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d141      	bne.n	8004232 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80041ae:	4b4b      	ldr	r3, [pc, #300]	; (80042dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80041b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041ba:	d131      	bne.n	8004220 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80041bc:	4b47      	ldr	r3, [pc, #284]	; (80042dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041c2:	4a46      	ldr	r2, [pc, #280]	; (80042dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041c8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80041cc:	4b43      	ldr	r3, [pc, #268]	; (80042dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80041d4:	4a41      	ldr	r2, [pc, #260]	; (80042dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80041da:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80041dc:	4b40      	ldr	r3, [pc, #256]	; (80042e0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	2232      	movs	r2, #50	; 0x32
 80041e2:	fb02 f303 	mul.w	r3, r2, r3
 80041e6:	4a3f      	ldr	r2, [pc, #252]	; (80042e4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80041e8:	fba2 2303 	umull	r2, r3, r2, r3
 80041ec:	0c9b      	lsrs	r3, r3, #18
 80041ee:	3301      	adds	r3, #1
 80041f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80041f2:	e002      	b.n	80041fa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	3b01      	subs	r3, #1
 80041f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80041fa:	4b38      	ldr	r3, [pc, #224]	; (80042dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041fc:	695b      	ldr	r3, [r3, #20]
 80041fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004202:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004206:	d102      	bne.n	800420e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d1f2      	bne.n	80041f4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800420e:	4b33      	ldr	r3, [pc, #204]	; (80042dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004210:	695b      	ldr	r3, [r3, #20]
 8004212:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004216:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800421a:	d158      	bne.n	80042ce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800421c:	2303      	movs	r3, #3
 800421e:	e057      	b.n	80042d0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004220:	4b2e      	ldr	r3, [pc, #184]	; (80042dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004222:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004226:	4a2d      	ldr	r2, [pc, #180]	; (80042dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004228:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800422c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004230:	e04d      	b.n	80042ce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004238:	d141      	bne.n	80042be <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800423a:	4b28      	ldr	r3, [pc, #160]	; (80042dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004242:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004246:	d131      	bne.n	80042ac <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004248:	4b24      	ldr	r3, [pc, #144]	; (80042dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800424a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800424e:	4a23      	ldr	r2, [pc, #140]	; (80042dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004250:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004254:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004258:	4b20      	ldr	r3, [pc, #128]	; (80042dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004260:	4a1e      	ldr	r2, [pc, #120]	; (80042dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004262:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004266:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004268:	4b1d      	ldr	r3, [pc, #116]	; (80042e0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	2232      	movs	r2, #50	; 0x32
 800426e:	fb02 f303 	mul.w	r3, r2, r3
 8004272:	4a1c      	ldr	r2, [pc, #112]	; (80042e4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004274:	fba2 2303 	umull	r2, r3, r2, r3
 8004278:	0c9b      	lsrs	r3, r3, #18
 800427a:	3301      	adds	r3, #1
 800427c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800427e:	e002      	b.n	8004286 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	3b01      	subs	r3, #1
 8004284:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004286:	4b15      	ldr	r3, [pc, #84]	; (80042dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004288:	695b      	ldr	r3, [r3, #20]
 800428a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800428e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004292:	d102      	bne.n	800429a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d1f2      	bne.n	8004280 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800429a:	4b10      	ldr	r3, [pc, #64]	; (80042dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800429c:	695b      	ldr	r3, [r3, #20]
 800429e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042a6:	d112      	bne.n	80042ce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80042a8:	2303      	movs	r3, #3
 80042aa:	e011      	b.n	80042d0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80042ac:	4b0b      	ldr	r3, [pc, #44]	; (80042dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042b2:	4a0a      	ldr	r2, [pc, #40]	; (80042dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042b8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80042bc:	e007      	b.n	80042ce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80042be:	4b07      	ldr	r3, [pc, #28]	; (80042dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80042c6:	4a05      	ldr	r2, [pc, #20]	; (80042dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80042cc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80042ce:	2300      	movs	r3, #0
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3714      	adds	r7, #20
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr
 80042dc:	40007000 	.word	0x40007000
 80042e0:	20000000 	.word	0x20000000
 80042e4:	431bde83 	.word	0x431bde83

080042e8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80042e8:	b480      	push	{r7}
 80042ea:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80042ec:	4b05      	ldr	r3, [pc, #20]	; (8004304 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	4a04      	ldr	r2, [pc, #16]	; (8004304 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80042f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80042f6:	6093      	str	r3, [r2, #8]
}
 80042f8:	bf00      	nop
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr
 8004302:	bf00      	nop
 8004304:	40007000 	.word	0x40007000

08004308 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b088      	sub	sp, #32
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d101      	bne.n	800431a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	e308      	b.n	800492c <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 0301 	and.w	r3, r3, #1
 8004322:	2b00      	cmp	r3, #0
 8004324:	d075      	beq.n	8004412 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004326:	4ba3      	ldr	r3, [pc, #652]	; (80045b4 <HAL_RCC_OscConfig+0x2ac>)
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	f003 030c 	and.w	r3, r3, #12
 800432e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004330:	4ba0      	ldr	r3, [pc, #640]	; (80045b4 <HAL_RCC_OscConfig+0x2ac>)
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	f003 0303 	and.w	r3, r3, #3
 8004338:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800433a:	69bb      	ldr	r3, [r7, #24]
 800433c:	2b0c      	cmp	r3, #12
 800433e:	d102      	bne.n	8004346 <HAL_RCC_OscConfig+0x3e>
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	2b03      	cmp	r3, #3
 8004344:	d002      	beq.n	800434c <HAL_RCC_OscConfig+0x44>
 8004346:	69bb      	ldr	r3, [r7, #24]
 8004348:	2b08      	cmp	r3, #8
 800434a:	d10b      	bne.n	8004364 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800434c:	4b99      	ldr	r3, [pc, #612]	; (80045b4 <HAL_RCC_OscConfig+0x2ac>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004354:	2b00      	cmp	r3, #0
 8004356:	d05b      	beq.n	8004410 <HAL_RCC_OscConfig+0x108>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d157      	bne.n	8004410 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	e2e3      	b.n	800492c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800436c:	d106      	bne.n	800437c <HAL_RCC_OscConfig+0x74>
 800436e:	4b91      	ldr	r3, [pc, #580]	; (80045b4 <HAL_RCC_OscConfig+0x2ac>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a90      	ldr	r2, [pc, #576]	; (80045b4 <HAL_RCC_OscConfig+0x2ac>)
 8004374:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004378:	6013      	str	r3, [r2, #0]
 800437a:	e01d      	b.n	80043b8 <HAL_RCC_OscConfig+0xb0>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004384:	d10c      	bne.n	80043a0 <HAL_RCC_OscConfig+0x98>
 8004386:	4b8b      	ldr	r3, [pc, #556]	; (80045b4 <HAL_RCC_OscConfig+0x2ac>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a8a      	ldr	r2, [pc, #552]	; (80045b4 <HAL_RCC_OscConfig+0x2ac>)
 800438c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004390:	6013      	str	r3, [r2, #0]
 8004392:	4b88      	ldr	r3, [pc, #544]	; (80045b4 <HAL_RCC_OscConfig+0x2ac>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a87      	ldr	r2, [pc, #540]	; (80045b4 <HAL_RCC_OscConfig+0x2ac>)
 8004398:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800439c:	6013      	str	r3, [r2, #0]
 800439e:	e00b      	b.n	80043b8 <HAL_RCC_OscConfig+0xb0>
 80043a0:	4b84      	ldr	r3, [pc, #528]	; (80045b4 <HAL_RCC_OscConfig+0x2ac>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a83      	ldr	r2, [pc, #524]	; (80045b4 <HAL_RCC_OscConfig+0x2ac>)
 80043a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043aa:	6013      	str	r3, [r2, #0]
 80043ac:	4b81      	ldr	r3, [pc, #516]	; (80045b4 <HAL_RCC_OscConfig+0x2ac>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a80      	ldr	r2, [pc, #512]	; (80045b4 <HAL_RCC_OscConfig+0x2ac>)
 80043b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d013      	beq.n	80043e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043c0:	f7fd f874 	bl	80014ac <HAL_GetTick>
 80043c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80043c6:	e008      	b.n	80043da <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043c8:	f7fd f870 	bl	80014ac <HAL_GetTick>
 80043cc:	4602      	mov	r2, r0
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	2b64      	cmp	r3, #100	; 0x64
 80043d4:	d901      	bls.n	80043da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80043d6:	2303      	movs	r3, #3
 80043d8:	e2a8      	b.n	800492c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80043da:	4b76      	ldr	r3, [pc, #472]	; (80045b4 <HAL_RCC_OscConfig+0x2ac>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d0f0      	beq.n	80043c8 <HAL_RCC_OscConfig+0xc0>
 80043e6:	e014      	b.n	8004412 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043e8:	f7fd f860 	bl	80014ac <HAL_GetTick>
 80043ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80043ee:	e008      	b.n	8004402 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043f0:	f7fd f85c 	bl	80014ac <HAL_GetTick>
 80043f4:	4602      	mov	r2, r0
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	2b64      	cmp	r3, #100	; 0x64
 80043fc:	d901      	bls.n	8004402 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80043fe:	2303      	movs	r3, #3
 8004400:	e294      	b.n	800492c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004402:	4b6c      	ldr	r3, [pc, #432]	; (80045b4 <HAL_RCC_OscConfig+0x2ac>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800440a:	2b00      	cmp	r3, #0
 800440c:	d1f0      	bne.n	80043f0 <HAL_RCC_OscConfig+0xe8>
 800440e:	e000      	b.n	8004412 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004410:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 0302 	and.w	r3, r3, #2
 800441a:	2b00      	cmp	r3, #0
 800441c:	d075      	beq.n	800450a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800441e:	4b65      	ldr	r3, [pc, #404]	; (80045b4 <HAL_RCC_OscConfig+0x2ac>)
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	f003 030c 	and.w	r3, r3, #12
 8004426:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004428:	4b62      	ldr	r3, [pc, #392]	; (80045b4 <HAL_RCC_OscConfig+0x2ac>)
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	f003 0303 	and.w	r3, r3, #3
 8004430:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004432:	69bb      	ldr	r3, [r7, #24]
 8004434:	2b0c      	cmp	r3, #12
 8004436:	d102      	bne.n	800443e <HAL_RCC_OscConfig+0x136>
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	2b02      	cmp	r3, #2
 800443c:	d002      	beq.n	8004444 <HAL_RCC_OscConfig+0x13c>
 800443e:	69bb      	ldr	r3, [r7, #24]
 8004440:	2b04      	cmp	r3, #4
 8004442:	d11f      	bne.n	8004484 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004444:	4b5b      	ldr	r3, [pc, #364]	; (80045b4 <HAL_RCC_OscConfig+0x2ac>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800444c:	2b00      	cmp	r3, #0
 800444e:	d005      	beq.n	800445c <HAL_RCC_OscConfig+0x154>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d101      	bne.n	800445c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	e267      	b.n	800492c <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800445c:	4b55      	ldr	r3, [pc, #340]	; (80045b4 <HAL_RCC_OscConfig+0x2ac>)
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	691b      	ldr	r3, [r3, #16]
 8004468:	061b      	lsls	r3, r3, #24
 800446a:	4952      	ldr	r1, [pc, #328]	; (80045b4 <HAL_RCC_OscConfig+0x2ac>)
 800446c:	4313      	orrs	r3, r2
 800446e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004470:	4b51      	ldr	r3, [pc, #324]	; (80045b8 <HAL_RCC_OscConfig+0x2b0>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4618      	mov	r0, r3
 8004476:	f7fc ffcd 	bl	8001414 <HAL_InitTick>
 800447a:	4603      	mov	r3, r0
 800447c:	2b00      	cmp	r3, #0
 800447e:	d043      	beq.n	8004508 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	e253      	b.n	800492c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d023      	beq.n	80044d4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800448c:	4b49      	ldr	r3, [pc, #292]	; (80045b4 <HAL_RCC_OscConfig+0x2ac>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a48      	ldr	r2, [pc, #288]	; (80045b4 <HAL_RCC_OscConfig+0x2ac>)
 8004492:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004496:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004498:	f7fd f808 	bl	80014ac <HAL_GetTick>
 800449c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800449e:	e008      	b.n	80044b2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044a0:	f7fd f804 	bl	80014ac <HAL_GetTick>
 80044a4:	4602      	mov	r2, r0
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	2b02      	cmp	r3, #2
 80044ac:	d901      	bls.n	80044b2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80044ae:	2303      	movs	r3, #3
 80044b0:	e23c      	b.n	800492c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80044b2:	4b40      	ldr	r3, [pc, #256]	; (80045b4 <HAL_RCC_OscConfig+0x2ac>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d0f0      	beq.n	80044a0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044be:	4b3d      	ldr	r3, [pc, #244]	; (80045b4 <HAL_RCC_OscConfig+0x2ac>)
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	691b      	ldr	r3, [r3, #16]
 80044ca:	061b      	lsls	r3, r3, #24
 80044cc:	4939      	ldr	r1, [pc, #228]	; (80045b4 <HAL_RCC_OscConfig+0x2ac>)
 80044ce:	4313      	orrs	r3, r2
 80044d0:	604b      	str	r3, [r1, #4]
 80044d2:	e01a      	b.n	800450a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044d4:	4b37      	ldr	r3, [pc, #220]	; (80045b4 <HAL_RCC_OscConfig+0x2ac>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a36      	ldr	r2, [pc, #216]	; (80045b4 <HAL_RCC_OscConfig+0x2ac>)
 80044da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044e0:	f7fc ffe4 	bl	80014ac <HAL_GetTick>
 80044e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80044e6:	e008      	b.n	80044fa <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044e8:	f7fc ffe0 	bl	80014ac <HAL_GetTick>
 80044ec:	4602      	mov	r2, r0
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	1ad3      	subs	r3, r2, r3
 80044f2:	2b02      	cmp	r3, #2
 80044f4:	d901      	bls.n	80044fa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80044f6:	2303      	movs	r3, #3
 80044f8:	e218      	b.n	800492c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80044fa:	4b2e      	ldr	r3, [pc, #184]	; (80045b4 <HAL_RCC_OscConfig+0x2ac>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004502:	2b00      	cmp	r3, #0
 8004504:	d1f0      	bne.n	80044e8 <HAL_RCC_OscConfig+0x1e0>
 8004506:	e000      	b.n	800450a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004508:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f003 0308 	and.w	r3, r3, #8
 8004512:	2b00      	cmp	r3, #0
 8004514:	d03c      	beq.n	8004590 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	695b      	ldr	r3, [r3, #20]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d01c      	beq.n	8004558 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800451e:	4b25      	ldr	r3, [pc, #148]	; (80045b4 <HAL_RCC_OscConfig+0x2ac>)
 8004520:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004524:	4a23      	ldr	r2, [pc, #140]	; (80045b4 <HAL_RCC_OscConfig+0x2ac>)
 8004526:	f043 0301 	orr.w	r3, r3, #1
 800452a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800452e:	f7fc ffbd 	bl	80014ac <HAL_GetTick>
 8004532:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004534:	e008      	b.n	8004548 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004536:	f7fc ffb9 	bl	80014ac <HAL_GetTick>
 800453a:	4602      	mov	r2, r0
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	1ad3      	subs	r3, r2, r3
 8004540:	2b02      	cmp	r3, #2
 8004542:	d901      	bls.n	8004548 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004544:	2303      	movs	r3, #3
 8004546:	e1f1      	b.n	800492c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004548:	4b1a      	ldr	r3, [pc, #104]	; (80045b4 <HAL_RCC_OscConfig+0x2ac>)
 800454a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800454e:	f003 0302 	and.w	r3, r3, #2
 8004552:	2b00      	cmp	r3, #0
 8004554:	d0ef      	beq.n	8004536 <HAL_RCC_OscConfig+0x22e>
 8004556:	e01b      	b.n	8004590 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004558:	4b16      	ldr	r3, [pc, #88]	; (80045b4 <HAL_RCC_OscConfig+0x2ac>)
 800455a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800455e:	4a15      	ldr	r2, [pc, #84]	; (80045b4 <HAL_RCC_OscConfig+0x2ac>)
 8004560:	f023 0301 	bic.w	r3, r3, #1
 8004564:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004568:	f7fc ffa0 	bl	80014ac <HAL_GetTick>
 800456c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800456e:	e008      	b.n	8004582 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004570:	f7fc ff9c 	bl	80014ac <HAL_GetTick>
 8004574:	4602      	mov	r2, r0
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	1ad3      	subs	r3, r2, r3
 800457a:	2b02      	cmp	r3, #2
 800457c:	d901      	bls.n	8004582 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800457e:	2303      	movs	r3, #3
 8004580:	e1d4      	b.n	800492c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004582:	4b0c      	ldr	r3, [pc, #48]	; (80045b4 <HAL_RCC_OscConfig+0x2ac>)
 8004584:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004588:	f003 0302 	and.w	r3, r3, #2
 800458c:	2b00      	cmp	r3, #0
 800458e:	d1ef      	bne.n	8004570 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f003 0304 	and.w	r3, r3, #4
 8004598:	2b00      	cmp	r3, #0
 800459a:	f000 80ab 	beq.w	80046f4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800459e:	2300      	movs	r3, #0
 80045a0:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80045a2:	4b04      	ldr	r3, [pc, #16]	; (80045b4 <HAL_RCC_OscConfig+0x2ac>)
 80045a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d106      	bne.n	80045bc <HAL_RCC_OscConfig+0x2b4>
 80045ae:	2301      	movs	r3, #1
 80045b0:	e005      	b.n	80045be <HAL_RCC_OscConfig+0x2b6>
 80045b2:	bf00      	nop
 80045b4:	40021000 	.word	0x40021000
 80045b8:	20000004 	.word	0x20000004
 80045bc:	2300      	movs	r3, #0
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d00d      	beq.n	80045de <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045c2:	4baf      	ldr	r3, [pc, #700]	; (8004880 <HAL_RCC_OscConfig+0x578>)
 80045c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045c6:	4aae      	ldr	r2, [pc, #696]	; (8004880 <HAL_RCC_OscConfig+0x578>)
 80045c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045cc:	6593      	str	r3, [r2, #88]	; 0x58
 80045ce:	4bac      	ldr	r3, [pc, #688]	; (8004880 <HAL_RCC_OscConfig+0x578>)
 80045d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045d6:	60fb      	str	r3, [r7, #12]
 80045d8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80045da:	2301      	movs	r3, #1
 80045dc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045de:	4ba9      	ldr	r3, [pc, #676]	; (8004884 <HAL_RCC_OscConfig+0x57c>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d118      	bne.n	800461c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80045ea:	4ba6      	ldr	r3, [pc, #664]	; (8004884 <HAL_RCC_OscConfig+0x57c>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4aa5      	ldr	r2, [pc, #660]	; (8004884 <HAL_RCC_OscConfig+0x57c>)
 80045f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045f6:	f7fc ff59 	bl	80014ac <HAL_GetTick>
 80045fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045fc:	e008      	b.n	8004610 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045fe:	f7fc ff55 	bl	80014ac <HAL_GetTick>
 8004602:	4602      	mov	r2, r0
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	1ad3      	subs	r3, r2, r3
 8004608:	2b02      	cmp	r3, #2
 800460a:	d901      	bls.n	8004610 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800460c:	2303      	movs	r3, #3
 800460e:	e18d      	b.n	800492c <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004610:	4b9c      	ldr	r3, [pc, #624]	; (8004884 <HAL_RCC_OscConfig+0x57c>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004618:	2b00      	cmp	r3, #0
 800461a:	d0f0      	beq.n	80045fe <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	2b01      	cmp	r3, #1
 8004622:	d108      	bne.n	8004636 <HAL_RCC_OscConfig+0x32e>
 8004624:	4b96      	ldr	r3, [pc, #600]	; (8004880 <HAL_RCC_OscConfig+0x578>)
 8004626:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800462a:	4a95      	ldr	r2, [pc, #596]	; (8004880 <HAL_RCC_OscConfig+0x578>)
 800462c:	f043 0301 	orr.w	r3, r3, #1
 8004630:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004634:	e024      	b.n	8004680 <HAL_RCC_OscConfig+0x378>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	2b05      	cmp	r3, #5
 800463c:	d110      	bne.n	8004660 <HAL_RCC_OscConfig+0x358>
 800463e:	4b90      	ldr	r3, [pc, #576]	; (8004880 <HAL_RCC_OscConfig+0x578>)
 8004640:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004644:	4a8e      	ldr	r2, [pc, #568]	; (8004880 <HAL_RCC_OscConfig+0x578>)
 8004646:	f043 0304 	orr.w	r3, r3, #4
 800464a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800464e:	4b8c      	ldr	r3, [pc, #560]	; (8004880 <HAL_RCC_OscConfig+0x578>)
 8004650:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004654:	4a8a      	ldr	r2, [pc, #552]	; (8004880 <HAL_RCC_OscConfig+0x578>)
 8004656:	f043 0301 	orr.w	r3, r3, #1
 800465a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800465e:	e00f      	b.n	8004680 <HAL_RCC_OscConfig+0x378>
 8004660:	4b87      	ldr	r3, [pc, #540]	; (8004880 <HAL_RCC_OscConfig+0x578>)
 8004662:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004666:	4a86      	ldr	r2, [pc, #536]	; (8004880 <HAL_RCC_OscConfig+0x578>)
 8004668:	f023 0301 	bic.w	r3, r3, #1
 800466c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004670:	4b83      	ldr	r3, [pc, #524]	; (8004880 <HAL_RCC_OscConfig+0x578>)
 8004672:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004676:	4a82      	ldr	r2, [pc, #520]	; (8004880 <HAL_RCC_OscConfig+0x578>)
 8004678:	f023 0304 	bic.w	r3, r3, #4
 800467c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d016      	beq.n	80046b6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004688:	f7fc ff10 	bl	80014ac <HAL_GetTick>
 800468c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800468e:	e00a      	b.n	80046a6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004690:	f7fc ff0c 	bl	80014ac <HAL_GetTick>
 8004694:	4602      	mov	r2, r0
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	1ad3      	subs	r3, r2, r3
 800469a:	f241 3288 	movw	r2, #5000	; 0x1388
 800469e:	4293      	cmp	r3, r2
 80046a0:	d901      	bls.n	80046a6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80046a2:	2303      	movs	r3, #3
 80046a4:	e142      	b.n	800492c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046a6:	4b76      	ldr	r3, [pc, #472]	; (8004880 <HAL_RCC_OscConfig+0x578>)
 80046a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046ac:	f003 0302 	and.w	r3, r3, #2
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d0ed      	beq.n	8004690 <HAL_RCC_OscConfig+0x388>
 80046b4:	e015      	b.n	80046e2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046b6:	f7fc fef9 	bl	80014ac <HAL_GetTick>
 80046ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80046bc:	e00a      	b.n	80046d4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046be:	f7fc fef5 	bl	80014ac <HAL_GetTick>
 80046c2:	4602      	mov	r2, r0
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	1ad3      	subs	r3, r2, r3
 80046c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d901      	bls.n	80046d4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80046d0:	2303      	movs	r3, #3
 80046d2:	e12b      	b.n	800492c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80046d4:	4b6a      	ldr	r3, [pc, #424]	; (8004880 <HAL_RCC_OscConfig+0x578>)
 80046d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046da:	f003 0302 	and.w	r3, r3, #2
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d1ed      	bne.n	80046be <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80046e2:	7ffb      	ldrb	r3, [r7, #31]
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d105      	bne.n	80046f4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046e8:	4b65      	ldr	r3, [pc, #404]	; (8004880 <HAL_RCC_OscConfig+0x578>)
 80046ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046ec:	4a64      	ldr	r2, [pc, #400]	; (8004880 <HAL_RCC_OscConfig+0x578>)
 80046ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046f2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 0320 	and.w	r3, r3, #32
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d03c      	beq.n	800477a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	699b      	ldr	r3, [r3, #24]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d01c      	beq.n	8004742 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004708:	4b5d      	ldr	r3, [pc, #372]	; (8004880 <HAL_RCC_OscConfig+0x578>)
 800470a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800470e:	4a5c      	ldr	r2, [pc, #368]	; (8004880 <HAL_RCC_OscConfig+0x578>)
 8004710:	f043 0301 	orr.w	r3, r3, #1
 8004714:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004718:	f7fc fec8 	bl	80014ac <HAL_GetTick>
 800471c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800471e:	e008      	b.n	8004732 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004720:	f7fc fec4 	bl	80014ac <HAL_GetTick>
 8004724:	4602      	mov	r2, r0
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	1ad3      	subs	r3, r2, r3
 800472a:	2b02      	cmp	r3, #2
 800472c:	d901      	bls.n	8004732 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800472e:	2303      	movs	r3, #3
 8004730:	e0fc      	b.n	800492c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004732:	4b53      	ldr	r3, [pc, #332]	; (8004880 <HAL_RCC_OscConfig+0x578>)
 8004734:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004738:	f003 0302 	and.w	r3, r3, #2
 800473c:	2b00      	cmp	r3, #0
 800473e:	d0ef      	beq.n	8004720 <HAL_RCC_OscConfig+0x418>
 8004740:	e01b      	b.n	800477a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004742:	4b4f      	ldr	r3, [pc, #316]	; (8004880 <HAL_RCC_OscConfig+0x578>)
 8004744:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004748:	4a4d      	ldr	r2, [pc, #308]	; (8004880 <HAL_RCC_OscConfig+0x578>)
 800474a:	f023 0301 	bic.w	r3, r3, #1
 800474e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004752:	f7fc feab 	bl	80014ac <HAL_GetTick>
 8004756:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004758:	e008      	b.n	800476c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800475a:	f7fc fea7 	bl	80014ac <HAL_GetTick>
 800475e:	4602      	mov	r2, r0
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	1ad3      	subs	r3, r2, r3
 8004764:	2b02      	cmp	r3, #2
 8004766:	d901      	bls.n	800476c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004768:	2303      	movs	r3, #3
 800476a:	e0df      	b.n	800492c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800476c:	4b44      	ldr	r3, [pc, #272]	; (8004880 <HAL_RCC_OscConfig+0x578>)
 800476e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004772:	f003 0302 	and.w	r3, r3, #2
 8004776:	2b00      	cmp	r3, #0
 8004778:	d1ef      	bne.n	800475a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	69db      	ldr	r3, [r3, #28]
 800477e:	2b00      	cmp	r3, #0
 8004780:	f000 80d3 	beq.w	800492a <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004784:	4b3e      	ldr	r3, [pc, #248]	; (8004880 <HAL_RCC_OscConfig+0x578>)
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	f003 030c 	and.w	r3, r3, #12
 800478c:	2b0c      	cmp	r3, #12
 800478e:	f000 808d 	beq.w	80048ac <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	69db      	ldr	r3, [r3, #28]
 8004796:	2b02      	cmp	r3, #2
 8004798:	d15a      	bne.n	8004850 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800479a:	4b39      	ldr	r3, [pc, #228]	; (8004880 <HAL_RCC_OscConfig+0x578>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a38      	ldr	r2, [pc, #224]	; (8004880 <HAL_RCC_OscConfig+0x578>)
 80047a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047a6:	f7fc fe81 	bl	80014ac <HAL_GetTick>
 80047aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047ac:	e008      	b.n	80047c0 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047ae:	f7fc fe7d 	bl	80014ac <HAL_GetTick>
 80047b2:	4602      	mov	r2, r0
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	1ad3      	subs	r3, r2, r3
 80047b8:	2b02      	cmp	r3, #2
 80047ba:	d901      	bls.n	80047c0 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 80047bc:	2303      	movs	r3, #3
 80047be:	e0b5      	b.n	800492c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047c0:	4b2f      	ldr	r3, [pc, #188]	; (8004880 <HAL_RCC_OscConfig+0x578>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d1f0      	bne.n	80047ae <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80047cc:	4b2c      	ldr	r3, [pc, #176]	; (8004880 <HAL_RCC_OscConfig+0x578>)
 80047ce:	68da      	ldr	r2, [r3, #12]
 80047d0:	4b2d      	ldr	r3, [pc, #180]	; (8004888 <HAL_RCC_OscConfig+0x580>)
 80047d2:	4013      	ands	r3, r2
 80047d4:	687a      	ldr	r2, [r7, #4]
 80047d6:	6a11      	ldr	r1, [r2, #32]
 80047d8:	687a      	ldr	r2, [r7, #4]
 80047da:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80047dc:	3a01      	subs	r2, #1
 80047de:	0112      	lsls	r2, r2, #4
 80047e0:	4311      	orrs	r1, r2
 80047e2:	687a      	ldr	r2, [r7, #4]
 80047e4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80047e6:	0212      	lsls	r2, r2, #8
 80047e8:	4311      	orrs	r1, r2
 80047ea:	687a      	ldr	r2, [r7, #4]
 80047ec:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80047ee:	0852      	lsrs	r2, r2, #1
 80047f0:	3a01      	subs	r2, #1
 80047f2:	0552      	lsls	r2, r2, #21
 80047f4:	4311      	orrs	r1, r2
 80047f6:	687a      	ldr	r2, [r7, #4]
 80047f8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80047fa:	0852      	lsrs	r2, r2, #1
 80047fc:	3a01      	subs	r2, #1
 80047fe:	0652      	lsls	r2, r2, #25
 8004800:	4311      	orrs	r1, r2
 8004802:	687a      	ldr	r2, [r7, #4]
 8004804:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004806:	06d2      	lsls	r2, r2, #27
 8004808:	430a      	orrs	r2, r1
 800480a:	491d      	ldr	r1, [pc, #116]	; (8004880 <HAL_RCC_OscConfig+0x578>)
 800480c:	4313      	orrs	r3, r2
 800480e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004810:	4b1b      	ldr	r3, [pc, #108]	; (8004880 <HAL_RCC_OscConfig+0x578>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a1a      	ldr	r2, [pc, #104]	; (8004880 <HAL_RCC_OscConfig+0x578>)
 8004816:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800481a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800481c:	4b18      	ldr	r3, [pc, #96]	; (8004880 <HAL_RCC_OscConfig+0x578>)
 800481e:	68db      	ldr	r3, [r3, #12]
 8004820:	4a17      	ldr	r2, [pc, #92]	; (8004880 <HAL_RCC_OscConfig+0x578>)
 8004822:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004826:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004828:	f7fc fe40 	bl	80014ac <HAL_GetTick>
 800482c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800482e:	e008      	b.n	8004842 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004830:	f7fc fe3c 	bl	80014ac <HAL_GetTick>
 8004834:	4602      	mov	r2, r0
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	1ad3      	subs	r3, r2, r3
 800483a:	2b02      	cmp	r3, #2
 800483c:	d901      	bls.n	8004842 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 800483e:	2303      	movs	r3, #3
 8004840:	e074      	b.n	800492c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004842:	4b0f      	ldr	r3, [pc, #60]	; (8004880 <HAL_RCC_OscConfig+0x578>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800484a:	2b00      	cmp	r3, #0
 800484c:	d0f0      	beq.n	8004830 <HAL_RCC_OscConfig+0x528>
 800484e:	e06c      	b.n	800492a <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004850:	4b0b      	ldr	r3, [pc, #44]	; (8004880 <HAL_RCC_OscConfig+0x578>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a0a      	ldr	r2, [pc, #40]	; (8004880 <HAL_RCC_OscConfig+0x578>)
 8004856:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800485a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800485c:	4b08      	ldr	r3, [pc, #32]	; (8004880 <HAL_RCC_OscConfig+0x578>)
 800485e:	68db      	ldr	r3, [r3, #12]
 8004860:	4a07      	ldr	r2, [pc, #28]	; (8004880 <HAL_RCC_OscConfig+0x578>)
 8004862:	f023 0303 	bic.w	r3, r3, #3
 8004866:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004868:	4b05      	ldr	r3, [pc, #20]	; (8004880 <HAL_RCC_OscConfig+0x578>)
 800486a:	68db      	ldr	r3, [r3, #12]
 800486c:	4a04      	ldr	r2, [pc, #16]	; (8004880 <HAL_RCC_OscConfig+0x578>)
 800486e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004872:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004876:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004878:	f7fc fe18 	bl	80014ac <HAL_GetTick>
 800487c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800487e:	e00e      	b.n	800489e <HAL_RCC_OscConfig+0x596>
 8004880:	40021000 	.word	0x40021000
 8004884:	40007000 	.word	0x40007000
 8004888:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800488c:	f7fc fe0e 	bl	80014ac <HAL_GetTick>
 8004890:	4602      	mov	r2, r0
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	1ad3      	subs	r3, r2, r3
 8004896:	2b02      	cmp	r3, #2
 8004898:	d901      	bls.n	800489e <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800489a:	2303      	movs	r3, #3
 800489c:	e046      	b.n	800492c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800489e:	4b25      	ldr	r3, [pc, #148]	; (8004934 <HAL_RCC_OscConfig+0x62c>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d1f0      	bne.n	800488c <HAL_RCC_OscConfig+0x584>
 80048aa:	e03e      	b.n	800492a <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	69db      	ldr	r3, [r3, #28]
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d101      	bne.n	80048b8 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	e039      	b.n	800492c <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80048b8:	4b1e      	ldr	r3, [pc, #120]	; (8004934 <HAL_RCC_OscConfig+0x62c>)
 80048ba:	68db      	ldr	r3, [r3, #12]
 80048bc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	f003 0203 	and.w	r2, r3, #3
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6a1b      	ldr	r3, [r3, #32]
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d12c      	bne.n	8004926 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d6:	3b01      	subs	r3, #1
 80048d8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048da:	429a      	cmp	r2, r3
 80048dc:	d123      	bne.n	8004926 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048e8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d11b      	bne.n	8004926 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80048fa:	429a      	cmp	r2, r3
 80048fc:	d113      	bne.n	8004926 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004908:	085b      	lsrs	r3, r3, #1
 800490a:	3b01      	subs	r3, #1
 800490c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800490e:	429a      	cmp	r2, r3
 8004910:	d109      	bne.n	8004926 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800491c:	085b      	lsrs	r3, r3, #1
 800491e:	3b01      	subs	r3, #1
 8004920:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004922:	429a      	cmp	r2, r3
 8004924:	d001      	beq.n	800492a <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e000      	b.n	800492c <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 800492a:	2300      	movs	r3, #0
}
 800492c:	4618      	mov	r0, r3
 800492e:	3720      	adds	r7, #32
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}
 8004934:	40021000 	.word	0x40021000

08004938 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b086      	sub	sp, #24
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
 8004940:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004942:	2300      	movs	r3, #0
 8004944:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d101      	bne.n	8004950 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	e11e      	b.n	8004b8e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004950:	4b91      	ldr	r3, [pc, #580]	; (8004b98 <HAL_RCC_ClockConfig+0x260>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 030f 	and.w	r3, r3, #15
 8004958:	683a      	ldr	r2, [r7, #0]
 800495a:	429a      	cmp	r2, r3
 800495c:	d910      	bls.n	8004980 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800495e:	4b8e      	ldr	r3, [pc, #568]	; (8004b98 <HAL_RCC_ClockConfig+0x260>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f023 020f 	bic.w	r2, r3, #15
 8004966:	498c      	ldr	r1, [pc, #560]	; (8004b98 <HAL_RCC_ClockConfig+0x260>)
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	4313      	orrs	r3, r2
 800496c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800496e:	4b8a      	ldr	r3, [pc, #552]	; (8004b98 <HAL_RCC_ClockConfig+0x260>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f003 030f 	and.w	r3, r3, #15
 8004976:	683a      	ldr	r2, [r7, #0]
 8004978:	429a      	cmp	r2, r3
 800497a:	d001      	beq.n	8004980 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	e106      	b.n	8004b8e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f003 0301 	and.w	r3, r3, #1
 8004988:	2b00      	cmp	r3, #0
 800498a:	d073      	beq.n	8004a74 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	2b03      	cmp	r3, #3
 8004992:	d129      	bne.n	80049e8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004994:	4b81      	ldr	r3, [pc, #516]	; (8004b9c <HAL_RCC_ClockConfig+0x264>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800499c:	2b00      	cmp	r3, #0
 800499e:	d101      	bne.n	80049a4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	e0f4      	b.n	8004b8e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80049a4:	f000 f99c 	bl	8004ce0 <RCC_GetSysClockFreqFromPLLSource>
 80049a8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	4a7c      	ldr	r2, [pc, #496]	; (8004ba0 <HAL_RCC_ClockConfig+0x268>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d93f      	bls.n	8004a32 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80049b2:	4b7a      	ldr	r3, [pc, #488]	; (8004b9c <HAL_RCC_ClockConfig+0x264>)
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d009      	beq.n	80049d2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d033      	beq.n	8004a32 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d12f      	bne.n	8004a32 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80049d2:	4b72      	ldr	r3, [pc, #456]	; (8004b9c <HAL_RCC_ClockConfig+0x264>)
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049da:	4a70      	ldr	r2, [pc, #448]	; (8004b9c <HAL_RCC_ClockConfig+0x264>)
 80049dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049e0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80049e2:	2380      	movs	r3, #128	; 0x80
 80049e4:	617b      	str	r3, [r7, #20]
 80049e6:	e024      	b.n	8004a32 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	2b02      	cmp	r3, #2
 80049ee:	d107      	bne.n	8004a00 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80049f0:	4b6a      	ldr	r3, [pc, #424]	; (8004b9c <HAL_RCC_ClockConfig+0x264>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d109      	bne.n	8004a10 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80049fc:	2301      	movs	r3, #1
 80049fe:	e0c6      	b.n	8004b8e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a00:	4b66      	ldr	r3, [pc, #408]	; (8004b9c <HAL_RCC_ClockConfig+0x264>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d101      	bne.n	8004a10 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	e0be      	b.n	8004b8e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004a10:	f000 f8ce 	bl	8004bb0 <HAL_RCC_GetSysClockFreq>
 8004a14:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	4a61      	ldr	r2, [pc, #388]	; (8004ba0 <HAL_RCC_ClockConfig+0x268>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d909      	bls.n	8004a32 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004a1e:	4b5f      	ldr	r3, [pc, #380]	; (8004b9c <HAL_RCC_ClockConfig+0x264>)
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a26:	4a5d      	ldr	r2, [pc, #372]	; (8004b9c <HAL_RCC_ClockConfig+0x264>)
 8004a28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a2c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004a2e:	2380      	movs	r3, #128	; 0x80
 8004a30:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004a32:	4b5a      	ldr	r3, [pc, #360]	; (8004b9c <HAL_RCC_ClockConfig+0x264>)
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	f023 0203 	bic.w	r2, r3, #3
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	4957      	ldr	r1, [pc, #348]	; (8004b9c <HAL_RCC_ClockConfig+0x264>)
 8004a40:	4313      	orrs	r3, r2
 8004a42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a44:	f7fc fd32 	bl	80014ac <HAL_GetTick>
 8004a48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a4a:	e00a      	b.n	8004a62 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a4c:	f7fc fd2e 	bl	80014ac <HAL_GetTick>
 8004a50:	4602      	mov	r2, r0
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d901      	bls.n	8004a62 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004a5e:	2303      	movs	r3, #3
 8004a60:	e095      	b.n	8004b8e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a62:	4b4e      	ldr	r3, [pc, #312]	; (8004b9c <HAL_RCC_ClockConfig+0x264>)
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	f003 020c 	and.w	r2, r3, #12
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d1eb      	bne.n	8004a4c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f003 0302 	and.w	r3, r3, #2
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d023      	beq.n	8004ac8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f003 0304 	and.w	r3, r3, #4
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d005      	beq.n	8004a98 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a8c:	4b43      	ldr	r3, [pc, #268]	; (8004b9c <HAL_RCC_ClockConfig+0x264>)
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	4a42      	ldr	r2, [pc, #264]	; (8004b9c <HAL_RCC_ClockConfig+0x264>)
 8004a92:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004a96:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f003 0308 	and.w	r3, r3, #8
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d007      	beq.n	8004ab4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004aa4:	4b3d      	ldr	r3, [pc, #244]	; (8004b9c <HAL_RCC_ClockConfig+0x264>)
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004aac:	4a3b      	ldr	r2, [pc, #236]	; (8004b9c <HAL_RCC_ClockConfig+0x264>)
 8004aae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004ab2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ab4:	4b39      	ldr	r3, [pc, #228]	; (8004b9c <HAL_RCC_ClockConfig+0x264>)
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	4936      	ldr	r1, [pc, #216]	; (8004b9c <HAL_RCC_ClockConfig+0x264>)
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	608b      	str	r3, [r1, #8]
 8004ac6:	e008      	b.n	8004ada <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	2b80      	cmp	r3, #128	; 0x80
 8004acc:	d105      	bne.n	8004ada <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004ace:	4b33      	ldr	r3, [pc, #204]	; (8004b9c <HAL_RCC_ClockConfig+0x264>)
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	4a32      	ldr	r2, [pc, #200]	; (8004b9c <HAL_RCC_ClockConfig+0x264>)
 8004ad4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ad8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ada:	4b2f      	ldr	r3, [pc, #188]	; (8004b98 <HAL_RCC_ClockConfig+0x260>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 030f 	and.w	r3, r3, #15
 8004ae2:	683a      	ldr	r2, [r7, #0]
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d21d      	bcs.n	8004b24 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ae8:	4b2b      	ldr	r3, [pc, #172]	; (8004b98 <HAL_RCC_ClockConfig+0x260>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f023 020f 	bic.w	r2, r3, #15
 8004af0:	4929      	ldr	r1, [pc, #164]	; (8004b98 <HAL_RCC_ClockConfig+0x260>)
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	4313      	orrs	r3, r2
 8004af6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004af8:	f7fc fcd8 	bl	80014ac <HAL_GetTick>
 8004afc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004afe:	e00a      	b.n	8004b16 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b00:	f7fc fcd4 	bl	80014ac <HAL_GetTick>
 8004b04:	4602      	mov	r2, r0
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	1ad3      	subs	r3, r2, r3
 8004b0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d901      	bls.n	8004b16 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004b12:	2303      	movs	r3, #3
 8004b14:	e03b      	b.n	8004b8e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b16:	4b20      	ldr	r3, [pc, #128]	; (8004b98 <HAL_RCC_ClockConfig+0x260>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 030f 	and.w	r3, r3, #15
 8004b1e:	683a      	ldr	r2, [r7, #0]
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d1ed      	bne.n	8004b00 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 0304 	and.w	r3, r3, #4
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d008      	beq.n	8004b42 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b30:	4b1a      	ldr	r3, [pc, #104]	; (8004b9c <HAL_RCC_ClockConfig+0x264>)
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	68db      	ldr	r3, [r3, #12]
 8004b3c:	4917      	ldr	r1, [pc, #92]	; (8004b9c <HAL_RCC_ClockConfig+0x264>)
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f003 0308 	and.w	r3, r3, #8
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d009      	beq.n	8004b62 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b4e:	4b13      	ldr	r3, [pc, #76]	; (8004b9c <HAL_RCC_ClockConfig+0x264>)
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	691b      	ldr	r3, [r3, #16]
 8004b5a:	00db      	lsls	r3, r3, #3
 8004b5c:	490f      	ldr	r1, [pc, #60]	; (8004b9c <HAL_RCC_ClockConfig+0x264>)
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004b62:	f000 f825 	bl	8004bb0 <HAL_RCC_GetSysClockFreq>
 8004b66:	4601      	mov	r1, r0
 8004b68:	4b0c      	ldr	r3, [pc, #48]	; (8004b9c <HAL_RCC_ClockConfig+0x264>)
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	091b      	lsrs	r3, r3, #4
 8004b6e:	f003 030f 	and.w	r3, r3, #15
 8004b72:	4a0c      	ldr	r2, [pc, #48]	; (8004ba4 <HAL_RCC_ClockConfig+0x26c>)
 8004b74:	5cd3      	ldrb	r3, [r2, r3]
 8004b76:	f003 031f 	and.w	r3, r3, #31
 8004b7a:	fa21 f303 	lsr.w	r3, r1, r3
 8004b7e:	4a0a      	ldr	r2, [pc, #40]	; (8004ba8 <HAL_RCC_ClockConfig+0x270>)
 8004b80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004b82:	4b0a      	ldr	r3, [pc, #40]	; (8004bac <HAL_RCC_ClockConfig+0x274>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4618      	mov	r0, r3
 8004b88:	f7fc fc44 	bl	8001414 <HAL_InitTick>
 8004b8c:	4603      	mov	r3, r0
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3718      	adds	r7, #24
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}
 8004b96:	bf00      	nop
 8004b98:	40022000 	.word	0x40022000
 8004b9c:	40021000 	.word	0x40021000
 8004ba0:	04c4b400 	.word	0x04c4b400
 8004ba4:	08005fa4 	.word	0x08005fa4
 8004ba8:	20000000 	.word	0x20000000
 8004bac:	20000004 	.word	0x20000004

08004bb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b087      	sub	sp, #28
 8004bb4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004bb6:	4b2c      	ldr	r3, [pc, #176]	; (8004c68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	f003 030c 	and.w	r3, r3, #12
 8004bbe:	2b04      	cmp	r3, #4
 8004bc0:	d102      	bne.n	8004bc8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004bc2:	4b2a      	ldr	r3, [pc, #168]	; (8004c6c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004bc4:	613b      	str	r3, [r7, #16]
 8004bc6:	e047      	b.n	8004c58 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004bc8:	4b27      	ldr	r3, [pc, #156]	; (8004c68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	f003 030c 	and.w	r3, r3, #12
 8004bd0:	2b08      	cmp	r3, #8
 8004bd2:	d102      	bne.n	8004bda <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004bd4:	4b25      	ldr	r3, [pc, #148]	; (8004c6c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004bd6:	613b      	str	r3, [r7, #16]
 8004bd8:	e03e      	b.n	8004c58 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004bda:	4b23      	ldr	r3, [pc, #140]	; (8004c68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	f003 030c 	and.w	r3, r3, #12
 8004be2:	2b0c      	cmp	r3, #12
 8004be4:	d136      	bne.n	8004c54 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004be6:	4b20      	ldr	r3, [pc, #128]	; (8004c68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004be8:	68db      	ldr	r3, [r3, #12]
 8004bea:	f003 0303 	and.w	r3, r3, #3
 8004bee:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004bf0:	4b1d      	ldr	r3, [pc, #116]	; (8004c68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	091b      	lsrs	r3, r3, #4
 8004bf6:	f003 030f 	and.w	r3, r3, #15
 8004bfa:	3301      	adds	r3, #1
 8004bfc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2b03      	cmp	r3, #3
 8004c02:	d10c      	bne.n	8004c1e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004c04:	4a19      	ldr	r2, [pc, #100]	; (8004c6c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c0c:	4a16      	ldr	r2, [pc, #88]	; (8004c68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c0e:	68d2      	ldr	r2, [r2, #12]
 8004c10:	0a12      	lsrs	r2, r2, #8
 8004c12:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004c16:	fb02 f303 	mul.w	r3, r2, r3
 8004c1a:	617b      	str	r3, [r7, #20]
      break;
 8004c1c:	e00c      	b.n	8004c38 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004c1e:	4a13      	ldr	r2, [pc, #76]	; (8004c6c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c26:	4a10      	ldr	r2, [pc, #64]	; (8004c68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c28:	68d2      	ldr	r2, [r2, #12]
 8004c2a:	0a12      	lsrs	r2, r2, #8
 8004c2c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004c30:	fb02 f303 	mul.w	r3, r2, r3
 8004c34:	617b      	str	r3, [r7, #20]
      break;
 8004c36:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004c38:	4b0b      	ldr	r3, [pc, #44]	; (8004c68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c3a:	68db      	ldr	r3, [r3, #12]
 8004c3c:	0e5b      	lsrs	r3, r3, #25
 8004c3e:	f003 0303 	and.w	r3, r3, #3
 8004c42:	3301      	adds	r3, #1
 8004c44:	005b      	lsls	r3, r3, #1
 8004c46:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004c48:	697a      	ldr	r2, [r7, #20]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c50:	613b      	str	r3, [r7, #16]
 8004c52:	e001      	b.n	8004c58 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004c54:	2300      	movs	r3, #0
 8004c56:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004c58:	693b      	ldr	r3, [r7, #16]
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	371c      	adds	r7, #28
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c64:	4770      	bx	lr
 8004c66:	bf00      	nop
 8004c68:	40021000 	.word	0x40021000
 8004c6c:	00f42400 	.word	0x00f42400

08004c70 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c70:	b480      	push	{r7}
 8004c72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c74:	4b03      	ldr	r3, [pc, #12]	; (8004c84 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c76:	681b      	ldr	r3, [r3, #0]
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr
 8004c82:	bf00      	nop
 8004c84:	20000000 	.word	0x20000000

08004c88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004c8c:	f7ff fff0 	bl	8004c70 <HAL_RCC_GetHCLKFreq>
 8004c90:	4601      	mov	r1, r0
 8004c92:	4b06      	ldr	r3, [pc, #24]	; (8004cac <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	0a1b      	lsrs	r3, r3, #8
 8004c98:	f003 0307 	and.w	r3, r3, #7
 8004c9c:	4a04      	ldr	r2, [pc, #16]	; (8004cb0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004c9e:	5cd3      	ldrb	r3, [r2, r3]
 8004ca0:	f003 031f 	and.w	r3, r3, #31
 8004ca4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	bd80      	pop	{r7, pc}
 8004cac:	40021000 	.word	0x40021000
 8004cb0:	08005fb4 	.word	0x08005fb4

08004cb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004cb8:	f7ff ffda 	bl	8004c70 <HAL_RCC_GetHCLKFreq>
 8004cbc:	4601      	mov	r1, r0
 8004cbe:	4b06      	ldr	r3, [pc, #24]	; (8004cd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	0adb      	lsrs	r3, r3, #11
 8004cc4:	f003 0307 	and.w	r3, r3, #7
 8004cc8:	4a04      	ldr	r2, [pc, #16]	; (8004cdc <HAL_RCC_GetPCLK2Freq+0x28>)
 8004cca:	5cd3      	ldrb	r3, [r2, r3]
 8004ccc:	f003 031f 	and.w	r3, r3, #31
 8004cd0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	bd80      	pop	{r7, pc}
 8004cd8:	40021000 	.word	0x40021000
 8004cdc:	08005fb4 	.word	0x08005fb4

08004ce0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b087      	sub	sp, #28
 8004ce4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004ce6:	4b1e      	ldr	r3, [pc, #120]	; (8004d60 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004ce8:	68db      	ldr	r3, [r3, #12]
 8004cea:	f003 0303 	and.w	r3, r3, #3
 8004cee:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004cf0:	4b1b      	ldr	r3, [pc, #108]	; (8004d60 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	091b      	lsrs	r3, r3, #4
 8004cf6:	f003 030f 	and.w	r3, r3, #15
 8004cfa:	3301      	adds	r3, #1
 8004cfc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	2b03      	cmp	r3, #3
 8004d02:	d10c      	bne.n	8004d1e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004d04:	4a17      	ldr	r2, [pc, #92]	; (8004d64 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d0c:	4a14      	ldr	r2, [pc, #80]	; (8004d60 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004d0e:	68d2      	ldr	r2, [r2, #12]
 8004d10:	0a12      	lsrs	r2, r2, #8
 8004d12:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004d16:	fb02 f303 	mul.w	r3, r2, r3
 8004d1a:	617b      	str	r3, [r7, #20]
    break;
 8004d1c:	e00c      	b.n	8004d38 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004d1e:	4a11      	ldr	r2, [pc, #68]	; (8004d64 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d26:	4a0e      	ldr	r2, [pc, #56]	; (8004d60 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004d28:	68d2      	ldr	r2, [r2, #12]
 8004d2a:	0a12      	lsrs	r2, r2, #8
 8004d2c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004d30:	fb02 f303 	mul.w	r3, r2, r3
 8004d34:	617b      	str	r3, [r7, #20]
    break;
 8004d36:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004d38:	4b09      	ldr	r3, [pc, #36]	; (8004d60 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004d3a:	68db      	ldr	r3, [r3, #12]
 8004d3c:	0e5b      	lsrs	r3, r3, #25
 8004d3e:	f003 0303 	and.w	r3, r3, #3
 8004d42:	3301      	adds	r3, #1
 8004d44:	005b      	lsls	r3, r3, #1
 8004d46:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004d48:	697a      	ldr	r2, [r7, #20]
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d50:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004d52:	687b      	ldr	r3, [r7, #4]
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	371c      	adds	r7, #28
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr
 8004d60:	40021000 	.word	0x40021000
 8004d64:	00f42400 	.word	0x00f42400

08004d68 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b086      	sub	sp, #24
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004d70:	2300      	movs	r3, #0
 8004d72:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004d74:	2300      	movs	r3, #0
 8004d76:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	f000 8098 	beq.w	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d86:	2300      	movs	r3, #0
 8004d88:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d8a:	4b43      	ldr	r3, [pc, #268]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d10d      	bne.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d96:	4b40      	ldr	r3, [pc, #256]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d9a:	4a3f      	ldr	r2, [pc, #252]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004da0:	6593      	str	r3, [r2, #88]	; 0x58
 8004da2:	4b3d      	ldr	r3, [pc, #244]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004da4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004da6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004daa:	60bb      	str	r3, [r7, #8]
 8004dac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004dae:	2301      	movs	r3, #1
 8004db0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004db2:	4b3a      	ldr	r3, [pc, #232]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a39      	ldr	r2, [pc, #228]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004db8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dbc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004dbe:	f7fc fb75 	bl	80014ac <HAL_GetTick>
 8004dc2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004dc4:	e009      	b.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dc6:	f7fc fb71 	bl	80014ac <HAL_GetTick>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	1ad3      	subs	r3, r2, r3
 8004dd0:	2b02      	cmp	r3, #2
 8004dd2:	d902      	bls.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004dd4:	2303      	movs	r3, #3
 8004dd6:	74fb      	strb	r3, [r7, #19]
        break;
 8004dd8:	e005      	b.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004dda:	4b30      	ldr	r3, [pc, #192]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d0ef      	beq.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004de6:	7cfb      	ldrb	r3, [r7, #19]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d159      	bne.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004dec:	4b2a      	ldr	r3, [pc, #168]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004df2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004df6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d01e      	beq.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e02:	697a      	ldr	r2, [r7, #20]
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d019      	beq.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004e08:	4b23      	ldr	r3, [pc, #140]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e12:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004e14:	4b20      	ldr	r3, [pc, #128]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e1a:	4a1f      	ldr	r2, [pc, #124]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004e24:	4b1c      	ldr	r3, [pc, #112]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e2a:	4a1b      	ldr	r2, [pc, #108]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004e34:	4a18      	ldr	r2, [pc, #96]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	f003 0301 	and.w	r3, r3, #1
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d016      	beq.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e46:	f7fc fb31 	bl	80014ac <HAL_GetTick>
 8004e4a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e4c:	e00b      	b.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e4e:	f7fc fb2d 	bl	80014ac <HAL_GetTick>
 8004e52:	4602      	mov	r2, r0
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	1ad3      	subs	r3, r2, r3
 8004e58:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d902      	bls.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004e60:	2303      	movs	r3, #3
 8004e62:	74fb      	strb	r3, [r7, #19]
            break;
 8004e64:	e006      	b.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e66:	4b0c      	ldr	r3, [pc, #48]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e6c:	f003 0302 	and.w	r3, r3, #2
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d0ec      	beq.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004e74:	7cfb      	ldrb	r3, [r7, #19]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d10b      	bne.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e7a:	4b07      	ldr	r3, [pc, #28]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e88:	4903      	ldr	r1, [pc, #12]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004e90:	e008      	b.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004e92:	7cfb      	ldrb	r3, [r7, #19]
 8004e94:	74bb      	strb	r3, [r7, #18]
 8004e96:	e005      	b.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004e98:	40021000 	.word	0x40021000
 8004e9c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ea0:	7cfb      	ldrb	r3, [r7, #19]
 8004ea2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ea4:	7c7b      	ldrb	r3, [r7, #17]
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d105      	bne.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004eaa:	4baf      	ldr	r3, [pc, #700]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eae:	4aae      	ldr	r2, [pc, #696]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004eb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004eb4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f003 0301 	and.w	r3, r3, #1
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d00a      	beq.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004ec2:	4ba9      	ldr	r3, [pc, #676]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004ec4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ec8:	f023 0203 	bic.w	r2, r3, #3
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	49a5      	ldr	r1, [pc, #660]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f003 0302 	and.w	r3, r3, #2
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d00a      	beq.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004ee4:	4ba0      	ldr	r3, [pc, #640]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eea:	f023 020c 	bic.w	r2, r3, #12
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	499d      	ldr	r1, [pc, #628]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f003 0304 	and.w	r3, r3, #4
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d00a      	beq.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004f06:	4b98      	ldr	r3, [pc, #608]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004f08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f0c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	68db      	ldr	r3, [r3, #12]
 8004f14:	4994      	ldr	r1, [pc, #592]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004f16:	4313      	orrs	r3, r2
 8004f18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f003 0308 	and.w	r3, r3, #8
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d00a      	beq.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004f28:	4b8f      	ldr	r3, [pc, #572]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f2e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	691b      	ldr	r3, [r3, #16]
 8004f36:	498c      	ldr	r1, [pc, #560]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f003 0310 	and.w	r3, r3, #16
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d00a      	beq.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004f4a:	4b87      	ldr	r3, [pc, #540]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004f4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	695b      	ldr	r3, [r3, #20]
 8004f58:	4983      	ldr	r1, [pc, #524]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f003 0320 	and.w	r3, r3, #32
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d00a      	beq.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004f6c:	4b7e      	ldr	r3, [pc, #504]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f72:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	699b      	ldr	r3, [r3, #24]
 8004f7a:	497b      	ldr	r1, [pc, #492]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d00a      	beq.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004f8e:	4b76      	ldr	r3, [pc, #472]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f94:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	69db      	ldr	r3, [r3, #28]
 8004f9c:	4972      	ldr	r1, [pc, #456]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d00a      	beq.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004fb0:	4b6d      	ldr	r3, [pc, #436]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fb6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6a1b      	ldr	r3, [r3, #32]
 8004fbe:	496a      	ldr	r1, [pc, #424]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d00a      	beq.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004fd2:	4b65      	ldr	r3, [pc, #404]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fd8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe0:	4961      	ldr	r1, [pc, #388]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d00a      	beq.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004ff4:	4b5c      	ldr	r3, [pc, #368]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004ff6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004ffa:	f023 0203 	bic.w	r2, r3, #3
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005002:	4959      	ldr	r1, [pc, #356]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005004:	4313      	orrs	r3, r2
 8005006:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005012:	2b00      	cmp	r3, #0
 8005014:	d00a      	beq.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005016:	4b54      	ldr	r3, [pc, #336]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005018:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800501c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005024:	4950      	ldr	r1, [pc, #320]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005026:	4313      	orrs	r3, r2
 8005028:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005034:	2b00      	cmp	r3, #0
 8005036:	d015      	beq.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005038:	4b4b      	ldr	r3, [pc, #300]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800503a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800503e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005046:	4948      	ldr	r1, [pc, #288]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005048:	4313      	orrs	r3, r2
 800504a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005052:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005056:	d105      	bne.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005058:	4b43      	ldr	r3, [pc, #268]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800505a:	68db      	ldr	r3, [r3, #12]
 800505c:	4a42      	ldr	r2, [pc, #264]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800505e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005062:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800506c:	2b00      	cmp	r3, #0
 800506e:	d015      	beq.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005070:	4b3d      	ldr	r3, [pc, #244]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005072:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005076:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800507e:	493a      	ldr	r1, [pc, #232]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005080:	4313      	orrs	r3, r2
 8005082:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800508a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800508e:	d105      	bne.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005090:	4b35      	ldr	r3, [pc, #212]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005092:	68db      	ldr	r3, [r3, #12]
 8005094:	4a34      	ldr	r2, [pc, #208]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005096:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800509a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d015      	beq.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80050a8:	4b2f      	ldr	r3, [pc, #188]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80050aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050ae:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050b6:	492c      	ldr	r1, [pc, #176]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80050b8:	4313      	orrs	r3, r2
 80050ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050c2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80050c6:	d105      	bne.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80050c8:	4b27      	ldr	r3, [pc, #156]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80050ca:	68db      	ldr	r3, [r3, #12]
 80050cc:	4a26      	ldr	r2, [pc, #152]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80050ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80050d2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d015      	beq.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80050e0:	4b21      	ldr	r3, [pc, #132]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80050e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050e6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050ee:	491e      	ldr	r1, [pc, #120]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80050f0:	4313      	orrs	r3, r2
 80050f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80050fe:	d105      	bne.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005100:	4b19      	ldr	r3, [pc, #100]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	4a18      	ldr	r2, [pc, #96]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005106:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800510a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005114:	2b00      	cmp	r3, #0
 8005116:	d015      	beq.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005118:	4b13      	ldr	r3, [pc, #76]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800511a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800511e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005126:	4910      	ldr	r1, [pc, #64]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005128:	4313      	orrs	r3, r2
 800512a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005132:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005136:	d105      	bne.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005138:	4b0b      	ldr	r3, [pc, #44]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800513a:	68db      	ldr	r3, [r3, #12]
 800513c:	4a0a      	ldr	r2, [pc, #40]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800513e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005142:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800514c:	2b00      	cmp	r3, #0
 800514e:	d018      	beq.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005150:	4b05      	ldr	r3, [pc, #20]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005152:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005156:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800515e:	4902      	ldr	r1, [pc, #8]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005160:	4313      	orrs	r3, r2
 8005162:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005166:	e001      	b.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x404>
 8005168:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005170:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005174:	d105      	bne.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005176:	4b21      	ldr	r3, [pc, #132]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005178:	68db      	ldr	r3, [r3, #12]
 800517a:	4a20      	ldr	r2, [pc, #128]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800517c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005180:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800518a:	2b00      	cmp	r3, #0
 800518c:	d015      	beq.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800518e:	4b1b      	ldr	r3, [pc, #108]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005190:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005194:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800519c:	4917      	ldr	r1, [pc, #92]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800519e:	4313      	orrs	r3, r2
 80051a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051ac:	d105      	bne.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80051ae:	4b13      	ldr	r3, [pc, #76]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80051b0:	68db      	ldr	r3, [r3, #12]
 80051b2:	4a12      	ldr	r2, [pc, #72]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80051b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051b8:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d015      	beq.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80051c6:	4b0d      	ldr	r3, [pc, #52]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80051c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80051cc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051d4:	4909      	ldr	r1, [pc, #36]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80051d6:	4313      	orrs	r3, r2
 80051d8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80051e4:	d105      	bne.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051e6:	4b05      	ldr	r3, [pc, #20]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80051e8:	68db      	ldr	r3, [r3, #12]
 80051ea:	4a04      	ldr	r2, [pc, #16]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80051ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80051f0:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80051f2:	7cbb      	ldrb	r3, [r7, #18]
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	3718      	adds	r7, #24
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}
 80051fc:	40021000 	.word	0x40021000

08005200 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b084      	sub	sp, #16
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d101      	bne.n	8005212 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	e09d      	b.n	800534e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005216:	2b00      	cmp	r3, #0
 8005218:	d108      	bne.n	800522c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005222:	d009      	beq.n	8005238 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2200      	movs	r2, #0
 8005228:	61da      	str	r2, [r3, #28]
 800522a:	e005      	b.n	8005238 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2200      	movs	r2, #0
 8005230:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2200      	movs	r2, #0
 8005236:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2200      	movs	r2, #0
 800523c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005244:	b2db      	uxtb	r3, r3
 8005246:	2b00      	cmp	r3, #0
 8005248:	d106      	bne.n	8005258 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2200      	movs	r2, #0
 800524e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f7fb ff74 	bl	8001140 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2202      	movs	r2, #2
 800525c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	681a      	ldr	r2, [r3, #0]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800526e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	68db      	ldr	r3, [r3, #12]
 8005274:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005278:	d902      	bls.n	8005280 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800527a:	2300      	movs	r3, #0
 800527c:	60fb      	str	r3, [r7, #12]
 800527e:	e002      	b.n	8005286 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005280:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005284:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	68db      	ldr	r3, [r3, #12]
 800528a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800528e:	d007      	beq.n	80052a0 <HAL_SPI_Init+0xa0>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	68db      	ldr	r3, [r3, #12]
 8005294:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005298:	d002      	beq.n	80052a0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2200      	movs	r2, #0
 800529e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80052b0:	431a      	orrs	r2, r3
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	691b      	ldr	r3, [r3, #16]
 80052b6:	f003 0302 	and.w	r3, r3, #2
 80052ba:	431a      	orrs	r2, r3
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	695b      	ldr	r3, [r3, #20]
 80052c0:	f003 0301 	and.w	r3, r3, #1
 80052c4:	431a      	orrs	r2, r3
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	699b      	ldr	r3, [r3, #24]
 80052ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052ce:	431a      	orrs	r2, r3
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	69db      	ldr	r3, [r3, #28]
 80052d4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80052d8:	431a      	orrs	r2, r3
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6a1b      	ldr	r3, [r3, #32]
 80052de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052e2:	ea42 0103 	orr.w	r1, r2, r3
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ea:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	430a      	orrs	r2, r1
 80052f4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	699b      	ldr	r3, [r3, #24]
 80052fa:	0c1b      	lsrs	r3, r3, #16
 80052fc:	f003 0204 	and.w	r2, r3, #4
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005304:	f003 0310 	and.w	r3, r3, #16
 8005308:	431a      	orrs	r2, r3
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800530e:	f003 0308 	and.w	r3, r3, #8
 8005312:	431a      	orrs	r2, r3
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	68db      	ldr	r3, [r3, #12]
 8005318:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800531c:	ea42 0103 	orr.w	r1, r2, r3
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	430a      	orrs	r2, r1
 800532c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	69da      	ldr	r2, [r3, #28]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800533c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2200      	movs	r2, #0
 8005342:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2201      	movs	r2, #1
 8005348:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800534c:	2300      	movs	r3, #0
}
 800534e:	4618      	mov	r0, r3
 8005350:	3710      	adds	r7, #16
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}

08005356 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005356:	b580      	push	{r7, lr}
 8005358:	b082      	sub	sp, #8
 800535a:	af00      	add	r7, sp, #0
 800535c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d101      	bne.n	8005368 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	e042      	b.n	80053ee <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800536e:	2b00      	cmp	r3, #0
 8005370:	d106      	bne.n	8005380 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2200      	movs	r2, #0
 8005376:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f7fb ff42 	bl	8001204 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2224      	movs	r2, #36	; 0x24
 8005384:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f022 0201 	bic.w	r2, r2, #1
 8005396:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	f000 f82d 	bl	80053f8 <UART_SetConfig>
 800539e:	4603      	mov	r3, r0
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d101      	bne.n	80053a8 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80053a4:	2301      	movs	r3, #1
 80053a6:	e022      	b.n	80053ee <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d002      	beq.n	80053b6 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	f000 faf3 	bl	800599c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	685a      	ldr	r2, [r3, #4]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80053c4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	689a      	ldr	r2, [r3, #8]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80053d4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f042 0201 	orr.w	r2, r2, #1
 80053e4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f000 fb7a 	bl	8005ae0 <UART_CheckIdleState>
 80053ec:	4603      	mov	r3, r0
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	3708      	adds	r7, #8
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}
	...

080053f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053f8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80053fc:	b088      	sub	sp, #32
 80053fe:	af00      	add	r7, sp, #0
 8005400:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005402:	2300      	movs	r3, #0
 8005404:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	689a      	ldr	r2, [r3, #8]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	691b      	ldr	r3, [r3, #16]
 800540e:	431a      	orrs	r2, r3
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	695b      	ldr	r3, [r3, #20]
 8005414:	431a      	orrs	r2, r3
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	69db      	ldr	r3, [r3, #28]
 800541a:	4313      	orrs	r3, r2
 800541c:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)huart->FifoMode;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005422:	69fa      	ldr	r2, [r7, #28]
 8005424:	4313      	orrs	r3, r2
 8005426:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	681a      	ldr	r2, [r3, #0]
 800542e:	4bb1      	ldr	r3, [pc, #708]	; (80056f4 <UART_SetConfig+0x2fc>)
 8005430:	4013      	ands	r3, r2
 8005432:	687a      	ldr	r2, [r7, #4]
 8005434:	6812      	ldr	r2, [r2, #0]
 8005436:	69f9      	ldr	r1, [r7, #28]
 8005438:	430b      	orrs	r3, r1
 800543a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	68da      	ldr	r2, [r3, #12]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	430a      	orrs	r2, r1
 8005450:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	699b      	ldr	r3, [r3, #24]
 8005456:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4aa6      	ldr	r2, [pc, #664]	; (80056f8 <UART_SetConfig+0x300>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d004      	beq.n	800546c <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6a1b      	ldr	r3, [r3, #32]
 8005466:	69fa      	ldr	r2, [r7, #28]
 8005468:	4313      	orrs	r3, r2
 800546a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005476:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	6812      	ldr	r2, [r2, #0]
 800547e:	69f9      	ldr	r1, [r7, #28]
 8005480:	430b      	orrs	r3, r1
 8005482:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800548a:	f023 010f 	bic.w	r1, r3, #15
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	430a      	orrs	r2, r1
 8005498:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a97      	ldr	r2, [pc, #604]	; (80056fc <UART_SetConfig+0x304>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d121      	bne.n	80054e8 <UART_SetConfig+0xf0>
 80054a4:	4b96      	ldr	r3, [pc, #600]	; (8005700 <UART_SetConfig+0x308>)
 80054a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054aa:	f003 0303 	and.w	r3, r3, #3
 80054ae:	2b03      	cmp	r3, #3
 80054b0:	d816      	bhi.n	80054e0 <UART_SetConfig+0xe8>
 80054b2:	a201      	add	r2, pc, #4	; (adr r2, 80054b8 <UART_SetConfig+0xc0>)
 80054b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054b8:	080054c9 	.word	0x080054c9
 80054bc:	080054d5 	.word	0x080054d5
 80054c0:	080054cf 	.word	0x080054cf
 80054c4:	080054db 	.word	0x080054db
 80054c8:	2301      	movs	r3, #1
 80054ca:	76fb      	strb	r3, [r7, #27]
 80054cc:	e0e8      	b.n	80056a0 <UART_SetConfig+0x2a8>
 80054ce:	2302      	movs	r3, #2
 80054d0:	76fb      	strb	r3, [r7, #27]
 80054d2:	e0e5      	b.n	80056a0 <UART_SetConfig+0x2a8>
 80054d4:	2304      	movs	r3, #4
 80054d6:	76fb      	strb	r3, [r7, #27]
 80054d8:	e0e2      	b.n	80056a0 <UART_SetConfig+0x2a8>
 80054da:	2308      	movs	r3, #8
 80054dc:	76fb      	strb	r3, [r7, #27]
 80054de:	e0df      	b.n	80056a0 <UART_SetConfig+0x2a8>
 80054e0:	2310      	movs	r3, #16
 80054e2:	76fb      	strb	r3, [r7, #27]
 80054e4:	bf00      	nop
 80054e6:	e0db      	b.n	80056a0 <UART_SetConfig+0x2a8>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a85      	ldr	r2, [pc, #532]	; (8005704 <UART_SetConfig+0x30c>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d134      	bne.n	800555c <UART_SetConfig+0x164>
 80054f2:	4b83      	ldr	r3, [pc, #524]	; (8005700 <UART_SetConfig+0x308>)
 80054f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054f8:	f003 030c 	and.w	r3, r3, #12
 80054fc:	2b0c      	cmp	r3, #12
 80054fe:	d829      	bhi.n	8005554 <UART_SetConfig+0x15c>
 8005500:	a201      	add	r2, pc, #4	; (adr r2, 8005508 <UART_SetConfig+0x110>)
 8005502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005506:	bf00      	nop
 8005508:	0800553d 	.word	0x0800553d
 800550c:	08005555 	.word	0x08005555
 8005510:	08005555 	.word	0x08005555
 8005514:	08005555 	.word	0x08005555
 8005518:	08005549 	.word	0x08005549
 800551c:	08005555 	.word	0x08005555
 8005520:	08005555 	.word	0x08005555
 8005524:	08005555 	.word	0x08005555
 8005528:	08005543 	.word	0x08005543
 800552c:	08005555 	.word	0x08005555
 8005530:	08005555 	.word	0x08005555
 8005534:	08005555 	.word	0x08005555
 8005538:	0800554f 	.word	0x0800554f
 800553c:	2300      	movs	r3, #0
 800553e:	76fb      	strb	r3, [r7, #27]
 8005540:	e0ae      	b.n	80056a0 <UART_SetConfig+0x2a8>
 8005542:	2302      	movs	r3, #2
 8005544:	76fb      	strb	r3, [r7, #27]
 8005546:	e0ab      	b.n	80056a0 <UART_SetConfig+0x2a8>
 8005548:	2304      	movs	r3, #4
 800554a:	76fb      	strb	r3, [r7, #27]
 800554c:	e0a8      	b.n	80056a0 <UART_SetConfig+0x2a8>
 800554e:	2308      	movs	r3, #8
 8005550:	76fb      	strb	r3, [r7, #27]
 8005552:	e0a5      	b.n	80056a0 <UART_SetConfig+0x2a8>
 8005554:	2310      	movs	r3, #16
 8005556:	76fb      	strb	r3, [r7, #27]
 8005558:	bf00      	nop
 800555a:	e0a1      	b.n	80056a0 <UART_SetConfig+0x2a8>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a69      	ldr	r2, [pc, #420]	; (8005708 <UART_SetConfig+0x310>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d120      	bne.n	80055a8 <UART_SetConfig+0x1b0>
 8005566:	4b66      	ldr	r3, [pc, #408]	; (8005700 <UART_SetConfig+0x308>)
 8005568:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800556c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005570:	2b10      	cmp	r3, #16
 8005572:	d00f      	beq.n	8005594 <UART_SetConfig+0x19c>
 8005574:	2b10      	cmp	r3, #16
 8005576:	d802      	bhi.n	800557e <UART_SetConfig+0x186>
 8005578:	2b00      	cmp	r3, #0
 800557a:	d005      	beq.n	8005588 <UART_SetConfig+0x190>
 800557c:	e010      	b.n	80055a0 <UART_SetConfig+0x1a8>
 800557e:	2b20      	cmp	r3, #32
 8005580:	d005      	beq.n	800558e <UART_SetConfig+0x196>
 8005582:	2b30      	cmp	r3, #48	; 0x30
 8005584:	d009      	beq.n	800559a <UART_SetConfig+0x1a2>
 8005586:	e00b      	b.n	80055a0 <UART_SetConfig+0x1a8>
 8005588:	2300      	movs	r3, #0
 800558a:	76fb      	strb	r3, [r7, #27]
 800558c:	e088      	b.n	80056a0 <UART_SetConfig+0x2a8>
 800558e:	2302      	movs	r3, #2
 8005590:	76fb      	strb	r3, [r7, #27]
 8005592:	e085      	b.n	80056a0 <UART_SetConfig+0x2a8>
 8005594:	2304      	movs	r3, #4
 8005596:	76fb      	strb	r3, [r7, #27]
 8005598:	e082      	b.n	80056a0 <UART_SetConfig+0x2a8>
 800559a:	2308      	movs	r3, #8
 800559c:	76fb      	strb	r3, [r7, #27]
 800559e:	e07f      	b.n	80056a0 <UART_SetConfig+0x2a8>
 80055a0:	2310      	movs	r3, #16
 80055a2:	76fb      	strb	r3, [r7, #27]
 80055a4:	bf00      	nop
 80055a6:	e07b      	b.n	80056a0 <UART_SetConfig+0x2a8>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a57      	ldr	r2, [pc, #348]	; (800570c <UART_SetConfig+0x314>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d120      	bne.n	80055f4 <UART_SetConfig+0x1fc>
 80055b2:	4b53      	ldr	r3, [pc, #332]	; (8005700 <UART_SetConfig+0x308>)
 80055b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055b8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80055bc:	2b40      	cmp	r3, #64	; 0x40
 80055be:	d00f      	beq.n	80055e0 <UART_SetConfig+0x1e8>
 80055c0:	2b40      	cmp	r3, #64	; 0x40
 80055c2:	d802      	bhi.n	80055ca <UART_SetConfig+0x1d2>
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d005      	beq.n	80055d4 <UART_SetConfig+0x1dc>
 80055c8:	e010      	b.n	80055ec <UART_SetConfig+0x1f4>
 80055ca:	2b80      	cmp	r3, #128	; 0x80
 80055cc:	d005      	beq.n	80055da <UART_SetConfig+0x1e2>
 80055ce:	2bc0      	cmp	r3, #192	; 0xc0
 80055d0:	d009      	beq.n	80055e6 <UART_SetConfig+0x1ee>
 80055d2:	e00b      	b.n	80055ec <UART_SetConfig+0x1f4>
 80055d4:	2300      	movs	r3, #0
 80055d6:	76fb      	strb	r3, [r7, #27]
 80055d8:	e062      	b.n	80056a0 <UART_SetConfig+0x2a8>
 80055da:	2302      	movs	r3, #2
 80055dc:	76fb      	strb	r3, [r7, #27]
 80055de:	e05f      	b.n	80056a0 <UART_SetConfig+0x2a8>
 80055e0:	2304      	movs	r3, #4
 80055e2:	76fb      	strb	r3, [r7, #27]
 80055e4:	e05c      	b.n	80056a0 <UART_SetConfig+0x2a8>
 80055e6:	2308      	movs	r3, #8
 80055e8:	76fb      	strb	r3, [r7, #27]
 80055ea:	e059      	b.n	80056a0 <UART_SetConfig+0x2a8>
 80055ec:	2310      	movs	r3, #16
 80055ee:	76fb      	strb	r3, [r7, #27]
 80055f0:	bf00      	nop
 80055f2:	e055      	b.n	80056a0 <UART_SetConfig+0x2a8>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a45      	ldr	r2, [pc, #276]	; (8005710 <UART_SetConfig+0x318>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d124      	bne.n	8005648 <UART_SetConfig+0x250>
 80055fe:	4b40      	ldr	r3, [pc, #256]	; (8005700 <UART_SetConfig+0x308>)
 8005600:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005604:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005608:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800560c:	d012      	beq.n	8005634 <UART_SetConfig+0x23c>
 800560e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005612:	d802      	bhi.n	800561a <UART_SetConfig+0x222>
 8005614:	2b00      	cmp	r3, #0
 8005616:	d007      	beq.n	8005628 <UART_SetConfig+0x230>
 8005618:	e012      	b.n	8005640 <UART_SetConfig+0x248>
 800561a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800561e:	d006      	beq.n	800562e <UART_SetConfig+0x236>
 8005620:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005624:	d009      	beq.n	800563a <UART_SetConfig+0x242>
 8005626:	e00b      	b.n	8005640 <UART_SetConfig+0x248>
 8005628:	2300      	movs	r3, #0
 800562a:	76fb      	strb	r3, [r7, #27]
 800562c:	e038      	b.n	80056a0 <UART_SetConfig+0x2a8>
 800562e:	2302      	movs	r3, #2
 8005630:	76fb      	strb	r3, [r7, #27]
 8005632:	e035      	b.n	80056a0 <UART_SetConfig+0x2a8>
 8005634:	2304      	movs	r3, #4
 8005636:	76fb      	strb	r3, [r7, #27]
 8005638:	e032      	b.n	80056a0 <UART_SetConfig+0x2a8>
 800563a:	2308      	movs	r3, #8
 800563c:	76fb      	strb	r3, [r7, #27]
 800563e:	e02f      	b.n	80056a0 <UART_SetConfig+0x2a8>
 8005640:	2310      	movs	r3, #16
 8005642:	76fb      	strb	r3, [r7, #27]
 8005644:	bf00      	nop
 8005646:	e02b      	b.n	80056a0 <UART_SetConfig+0x2a8>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a2a      	ldr	r2, [pc, #168]	; (80056f8 <UART_SetConfig+0x300>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d124      	bne.n	800569c <UART_SetConfig+0x2a4>
 8005652:	4b2b      	ldr	r3, [pc, #172]	; (8005700 <UART_SetConfig+0x308>)
 8005654:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005658:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800565c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005660:	d012      	beq.n	8005688 <UART_SetConfig+0x290>
 8005662:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005666:	d802      	bhi.n	800566e <UART_SetConfig+0x276>
 8005668:	2b00      	cmp	r3, #0
 800566a:	d007      	beq.n	800567c <UART_SetConfig+0x284>
 800566c:	e012      	b.n	8005694 <UART_SetConfig+0x29c>
 800566e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005672:	d006      	beq.n	8005682 <UART_SetConfig+0x28a>
 8005674:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005678:	d009      	beq.n	800568e <UART_SetConfig+0x296>
 800567a:	e00b      	b.n	8005694 <UART_SetConfig+0x29c>
 800567c:	2300      	movs	r3, #0
 800567e:	76fb      	strb	r3, [r7, #27]
 8005680:	e00e      	b.n	80056a0 <UART_SetConfig+0x2a8>
 8005682:	2302      	movs	r3, #2
 8005684:	76fb      	strb	r3, [r7, #27]
 8005686:	e00b      	b.n	80056a0 <UART_SetConfig+0x2a8>
 8005688:	2304      	movs	r3, #4
 800568a:	76fb      	strb	r3, [r7, #27]
 800568c:	e008      	b.n	80056a0 <UART_SetConfig+0x2a8>
 800568e:	2308      	movs	r3, #8
 8005690:	76fb      	strb	r3, [r7, #27]
 8005692:	e005      	b.n	80056a0 <UART_SetConfig+0x2a8>
 8005694:	2310      	movs	r3, #16
 8005696:	76fb      	strb	r3, [r7, #27]
 8005698:	bf00      	nop
 800569a:	e001      	b.n	80056a0 <UART_SetConfig+0x2a8>
 800569c:	2310      	movs	r3, #16
 800569e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a14      	ldr	r2, [pc, #80]	; (80056f8 <UART_SetConfig+0x300>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	f040 80a1 	bne.w	80057ee <UART_SetConfig+0x3f6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80056ac:	7efb      	ldrb	r3, [r7, #27]
 80056ae:	2b08      	cmp	r3, #8
 80056b0:	d836      	bhi.n	8005720 <UART_SetConfig+0x328>
 80056b2:	a201      	add	r2, pc, #4	; (adr r2, 80056b8 <UART_SetConfig+0x2c0>)
 80056b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056b8:	080056dd 	.word	0x080056dd
 80056bc:	08005721 	.word	0x08005721
 80056c0:	080056e5 	.word	0x080056e5
 80056c4:	08005721 	.word	0x08005721
 80056c8:	080056eb 	.word	0x080056eb
 80056cc:	08005721 	.word	0x08005721
 80056d0:	08005721 	.word	0x08005721
 80056d4:	08005721 	.word	0x08005721
 80056d8:	08005719 	.word	0x08005719
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056dc:	f7ff fad4 	bl	8004c88 <HAL_RCC_GetPCLK1Freq>
 80056e0:	6178      	str	r0, [r7, #20]
        break;
 80056e2:	e022      	b.n	800572a <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056e4:	4b0b      	ldr	r3, [pc, #44]	; (8005714 <UART_SetConfig+0x31c>)
 80056e6:	617b      	str	r3, [r7, #20]
        break;
 80056e8:	e01f      	b.n	800572a <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056ea:	f7ff fa61 	bl	8004bb0 <HAL_RCC_GetSysClockFreq>
 80056ee:	6178      	str	r0, [r7, #20]
        break;
 80056f0:	e01b      	b.n	800572a <UART_SetConfig+0x332>
 80056f2:	bf00      	nop
 80056f4:	cfff69f3 	.word	0xcfff69f3
 80056f8:	40008000 	.word	0x40008000
 80056fc:	40013800 	.word	0x40013800
 8005700:	40021000 	.word	0x40021000
 8005704:	40004400 	.word	0x40004400
 8005708:	40004800 	.word	0x40004800
 800570c:	40004c00 	.word	0x40004c00
 8005710:	40005000 	.word	0x40005000
 8005714:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005718:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800571c:	617b      	str	r3, [r7, #20]
        break;
 800571e:	e004      	b.n	800572a <UART_SetConfig+0x332>
      default:
        pclk = 0U;
 8005720:	2300      	movs	r3, #0
 8005722:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005724:	2301      	movs	r3, #1
 8005726:	76bb      	strb	r3, [r7, #26]
        break;
 8005728:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	2b00      	cmp	r3, #0
 800572e:	f000 811d 	beq.w	800596c <UART_SetConfig+0x574>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005736:	4a97      	ldr	r2, [pc, #604]	; (8005994 <UART_SetConfig+0x59c>)
 8005738:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800573c:	461a      	mov	r2, r3
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	fbb3 f3f2 	udiv	r3, r3, r2
 8005744:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	685a      	ldr	r2, [r3, #4]
 800574a:	4613      	mov	r3, r2
 800574c:	005b      	lsls	r3, r3, #1
 800574e:	4413      	add	r3, r2
 8005750:	68ba      	ldr	r2, [r7, #8]
 8005752:	429a      	cmp	r2, r3
 8005754:	d305      	bcc.n	8005762 <UART_SetConfig+0x36a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800575c:	68ba      	ldr	r2, [r7, #8]
 800575e:	429a      	cmp	r2, r3
 8005760:	d902      	bls.n	8005768 <UART_SetConfig+0x370>
      {
        ret = HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	76bb      	strb	r3, [r7, #26]
 8005766:	e101      	b.n	800596c <UART_SetConfig+0x574>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	4618      	mov	r0, r3
 800576c:	f04f 0100 	mov.w	r1, #0
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005774:	4a87      	ldr	r2, [pc, #540]	; (8005994 <UART_SetConfig+0x59c>)
 8005776:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800577a:	b29b      	uxth	r3, r3
 800577c:	f04f 0400 	mov.w	r4, #0
 8005780:	461a      	mov	r2, r3
 8005782:	4623      	mov	r3, r4
 8005784:	f7fa fd48 	bl	8000218 <__aeabi_uldivmod>
 8005788:	4603      	mov	r3, r0
 800578a:	460c      	mov	r4, r1
 800578c:	4619      	mov	r1, r3
 800578e:	4622      	mov	r2, r4
 8005790:	f04f 0300 	mov.w	r3, #0
 8005794:	f04f 0400 	mov.w	r4, #0
 8005798:	0214      	lsls	r4, r2, #8
 800579a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800579e:	020b      	lsls	r3, r1, #8
 80057a0:	687a      	ldr	r2, [r7, #4]
 80057a2:	6852      	ldr	r2, [r2, #4]
 80057a4:	0852      	lsrs	r2, r2, #1
 80057a6:	4611      	mov	r1, r2
 80057a8:	f04f 0200 	mov.w	r2, #0
 80057ac:	eb13 0b01 	adds.w	fp, r3, r1
 80057b0:	eb44 0c02 	adc.w	ip, r4, r2
 80057b4:	4658      	mov	r0, fp
 80057b6:	4661      	mov	r1, ip
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	f04f 0400 	mov.w	r4, #0
 80057c0:	461a      	mov	r2, r3
 80057c2:	4623      	mov	r3, r4
 80057c4:	f7fa fd28 	bl	8000218 <__aeabi_uldivmod>
 80057c8:	4603      	mov	r3, r0
 80057ca:	460c      	mov	r4, r1
 80057cc:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80057d4:	d308      	bcc.n	80057e8 <UART_SetConfig+0x3f0>
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057dc:	d204      	bcs.n	80057e8 <UART_SetConfig+0x3f0>
        {
          huart->Instance->BRR = usartdiv;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	693a      	ldr	r2, [r7, #16]
 80057e4:	60da      	str	r2, [r3, #12]
 80057e6:	e0c1      	b.n	800596c <UART_SetConfig+0x574>
        }
        else
        {
          ret = HAL_ERROR;
 80057e8:	2301      	movs	r3, #1
 80057ea:	76bb      	strb	r3, [r7, #26]
 80057ec:	e0be      	b.n	800596c <UART_SetConfig+0x574>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	69db      	ldr	r3, [r3, #28]
 80057f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057f6:	d164      	bne.n	80058c2 <UART_SetConfig+0x4ca>
  {
    switch (clocksource)
 80057f8:	7efb      	ldrb	r3, [r7, #27]
 80057fa:	2b08      	cmp	r3, #8
 80057fc:	d827      	bhi.n	800584e <UART_SetConfig+0x456>
 80057fe:	a201      	add	r2, pc, #4	; (adr r2, 8005804 <UART_SetConfig+0x40c>)
 8005800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005804:	08005829 	.word	0x08005829
 8005808:	08005831 	.word	0x08005831
 800580c:	08005839 	.word	0x08005839
 8005810:	0800584f 	.word	0x0800584f
 8005814:	0800583f 	.word	0x0800583f
 8005818:	0800584f 	.word	0x0800584f
 800581c:	0800584f 	.word	0x0800584f
 8005820:	0800584f 	.word	0x0800584f
 8005824:	08005847 	.word	0x08005847
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005828:	f7ff fa2e 	bl	8004c88 <HAL_RCC_GetPCLK1Freq>
 800582c:	6178      	str	r0, [r7, #20]
        break;
 800582e:	e013      	b.n	8005858 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005830:	f7ff fa40 	bl	8004cb4 <HAL_RCC_GetPCLK2Freq>
 8005834:	6178      	str	r0, [r7, #20]
        break;
 8005836:	e00f      	b.n	8005858 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005838:	4b57      	ldr	r3, [pc, #348]	; (8005998 <UART_SetConfig+0x5a0>)
 800583a:	617b      	str	r3, [r7, #20]
        break;
 800583c:	e00c      	b.n	8005858 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800583e:	f7ff f9b7 	bl	8004bb0 <HAL_RCC_GetSysClockFreq>
 8005842:	6178      	str	r0, [r7, #20]
        break;
 8005844:	e008      	b.n	8005858 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005846:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800584a:	617b      	str	r3, [r7, #20]
        break;
 800584c:	e004      	b.n	8005858 <UART_SetConfig+0x460>
      default:
        pclk = 0U;
 800584e:	2300      	movs	r3, #0
 8005850:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005852:	2301      	movs	r3, #1
 8005854:	76bb      	strb	r3, [r7, #26]
        break;
 8005856:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	2b00      	cmp	r3, #0
 800585c:	f000 8086 	beq.w	800596c <UART_SetConfig+0x574>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005864:	4a4b      	ldr	r2, [pc, #300]	; (8005994 <UART_SetConfig+0x59c>)
 8005866:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800586a:	461a      	mov	r2, r3
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005872:	005a      	lsls	r2, r3, #1
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	085b      	lsrs	r3, r3, #1
 800587a:	441a      	add	r2, r3
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	fbb2 f3f3 	udiv	r3, r2, r3
 8005884:	b29b      	uxth	r3, r3
 8005886:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	2b0f      	cmp	r3, #15
 800588c:	d916      	bls.n	80058bc <UART_SetConfig+0x4c4>
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005894:	d212      	bcs.n	80058bc <UART_SetConfig+0x4c4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	b29b      	uxth	r3, r3
 800589a:	f023 030f 	bic.w	r3, r3, #15
 800589e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	085b      	lsrs	r3, r3, #1
 80058a4:	b29b      	uxth	r3, r3
 80058a6:	f003 0307 	and.w	r3, r3, #7
 80058aa:	b29a      	uxth	r2, r3
 80058ac:	89fb      	ldrh	r3, [r7, #14]
 80058ae:	4313      	orrs	r3, r2
 80058b0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	89fa      	ldrh	r2, [r7, #14]
 80058b8:	60da      	str	r2, [r3, #12]
 80058ba:	e057      	b.n	800596c <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 80058bc:	2301      	movs	r3, #1
 80058be:	76bb      	strb	r3, [r7, #26]
 80058c0:	e054      	b.n	800596c <UART_SetConfig+0x574>
      }
    }
  }
  else
  {
    switch (clocksource)
 80058c2:	7efb      	ldrb	r3, [r7, #27]
 80058c4:	2b08      	cmp	r3, #8
 80058c6:	d828      	bhi.n	800591a <UART_SetConfig+0x522>
 80058c8:	a201      	add	r2, pc, #4	; (adr r2, 80058d0 <UART_SetConfig+0x4d8>)
 80058ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ce:	bf00      	nop
 80058d0:	080058f5 	.word	0x080058f5
 80058d4:	080058fd 	.word	0x080058fd
 80058d8:	08005905 	.word	0x08005905
 80058dc:	0800591b 	.word	0x0800591b
 80058e0:	0800590b 	.word	0x0800590b
 80058e4:	0800591b 	.word	0x0800591b
 80058e8:	0800591b 	.word	0x0800591b
 80058ec:	0800591b 	.word	0x0800591b
 80058f0:	08005913 	.word	0x08005913
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058f4:	f7ff f9c8 	bl	8004c88 <HAL_RCC_GetPCLK1Freq>
 80058f8:	6178      	str	r0, [r7, #20]
        break;
 80058fa:	e013      	b.n	8005924 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80058fc:	f7ff f9da 	bl	8004cb4 <HAL_RCC_GetPCLK2Freq>
 8005900:	6178      	str	r0, [r7, #20]
        break;
 8005902:	e00f      	b.n	8005924 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005904:	4b24      	ldr	r3, [pc, #144]	; (8005998 <UART_SetConfig+0x5a0>)
 8005906:	617b      	str	r3, [r7, #20]
        break;
 8005908:	e00c      	b.n	8005924 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800590a:	f7ff f951 	bl	8004bb0 <HAL_RCC_GetSysClockFreq>
 800590e:	6178      	str	r0, [r7, #20]
        break;
 8005910:	e008      	b.n	8005924 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005912:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005916:	617b      	str	r3, [r7, #20]
        break;
 8005918:	e004      	b.n	8005924 <UART_SetConfig+0x52c>
      default:
        pclk = 0U;
 800591a:	2300      	movs	r3, #0
 800591c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800591e:	2301      	movs	r3, #1
 8005920:	76bb      	strb	r3, [r7, #26]
        break;
 8005922:	bf00      	nop
    }

    if (pclk != 0U)
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d020      	beq.n	800596c <UART_SetConfig+0x574>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800592e:	4a19      	ldr	r2, [pc, #100]	; (8005994 <UART_SetConfig+0x59c>)
 8005930:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005934:	461a      	mov	r2, r3
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	fbb3 f2f2 	udiv	r2, r3, r2
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	085b      	lsrs	r3, r3, #1
 8005942:	441a      	add	r2, r3
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	fbb2 f3f3 	udiv	r3, r2, r3
 800594c:	b29b      	uxth	r3, r3
 800594e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	2b0f      	cmp	r3, #15
 8005954:	d908      	bls.n	8005968 <UART_SetConfig+0x570>
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800595c:	d204      	bcs.n	8005968 <UART_SetConfig+0x570>
      {
        huart->Instance->BRR = usartdiv;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	693a      	ldr	r2, [r7, #16]
 8005964:	60da      	str	r2, [r3, #12]
 8005966:	e001      	b.n	800596c <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 8005968:	2301      	movs	r3, #1
 800596a:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2201      	movs	r2, #1
 8005970:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2201      	movs	r2, #1
 8005978:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2200      	movs	r2, #0
 8005980:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2200      	movs	r2, #0
 8005986:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8005988:	7ebb      	ldrb	r3, [r7, #26]
}
 800598a:	4618      	mov	r0, r3
 800598c:	3720      	adds	r7, #32
 800598e:	46bd      	mov	sp, r7
 8005990:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8005994:	08005fbc 	.word	0x08005fbc
 8005998:	00f42400 	.word	0x00f42400

0800599c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800599c:	b480      	push	{r7}
 800599e:	b083      	sub	sp, #12
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059a8:	f003 0301 	and.w	r3, r3, #1
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d00a      	beq.n	80059c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	430a      	orrs	r2, r1
 80059c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059ca:	f003 0302 	and.w	r3, r3, #2
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d00a      	beq.n	80059e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	430a      	orrs	r2, r1
 80059e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059ec:	f003 0304 	and.w	r3, r3, #4
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d00a      	beq.n	8005a0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	430a      	orrs	r2, r1
 8005a08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a0e:	f003 0308 	and.w	r3, r3, #8
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d00a      	beq.n	8005a2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	430a      	orrs	r2, r1
 8005a2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a30:	f003 0310 	and.w	r3, r3, #16
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d00a      	beq.n	8005a4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	689b      	ldr	r3, [r3, #8]
 8005a3e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	430a      	orrs	r2, r1
 8005a4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a52:	f003 0320 	and.w	r3, r3, #32
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d00a      	beq.n	8005a70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	689b      	ldr	r3, [r3, #8]
 8005a60:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	430a      	orrs	r2, r1
 8005a6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d01a      	beq.n	8005ab2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	430a      	orrs	r2, r1
 8005a90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a9a:	d10a      	bne.n	8005ab2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	430a      	orrs	r2, r1
 8005ab0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ab6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d00a      	beq.n	8005ad4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	430a      	orrs	r2, r1
 8005ad2:	605a      	str	r2, [r3, #4]
  }
}
 8005ad4:	bf00      	nop
 8005ad6:	370c      	adds	r7, #12
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ade:	4770      	bx	lr

08005ae0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b086      	sub	sp, #24
 8005ae4:	af02      	add	r7, sp, #8
 8005ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2200      	movs	r2, #0
 8005aec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005af0:	f7fb fcdc 	bl	80014ac <HAL_GetTick>
 8005af4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f003 0308 	and.w	r3, r3, #8
 8005b00:	2b08      	cmp	r3, #8
 8005b02:	d10e      	bne.n	8005b22 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b04:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b08:	9300      	str	r3, [sp, #0]
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f000 f82c 	bl	8005b70 <UART_WaitOnFlagUntilTimeout>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d001      	beq.n	8005b22 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b1e:	2303      	movs	r3, #3
 8005b20:	e022      	b.n	8005b68 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f003 0304 	and.w	r3, r3, #4
 8005b2c:	2b04      	cmp	r3, #4
 8005b2e:	d10e      	bne.n	8005b4e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b30:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b34:	9300      	str	r3, [sp, #0]
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f000 f816 	bl	8005b70 <UART_WaitOnFlagUntilTimeout>
 8005b44:	4603      	mov	r3, r0
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d001      	beq.n	8005b4e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b4a:	2303      	movs	r3, #3
 8005b4c:	e00c      	b.n	8005b68 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2220      	movs	r2, #32
 8005b52:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2220      	movs	r2, #32
 8005b5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2200      	movs	r2, #0
 8005b62:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005b66:	2300      	movs	r3, #0
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	3710      	adds	r7, #16
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd80      	pop	{r7, pc}

08005b70 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b084      	sub	sp, #16
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	60f8      	str	r0, [r7, #12]
 8005b78:	60b9      	str	r1, [r7, #8]
 8005b7a:	603b      	str	r3, [r7, #0]
 8005b7c:	4613      	mov	r3, r2
 8005b7e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b80:	e062      	b.n	8005c48 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b82:	69bb      	ldr	r3, [r7, #24]
 8005b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b88:	d05e      	beq.n	8005c48 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b8a:	f7fb fc8f 	bl	80014ac <HAL_GetTick>
 8005b8e:	4602      	mov	r2, r0
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	1ad3      	subs	r3, r2, r3
 8005b94:	69ba      	ldr	r2, [r7, #24]
 8005b96:	429a      	cmp	r2, r3
 8005b98:	d302      	bcc.n	8005ba0 <UART_WaitOnFlagUntilTimeout+0x30>
 8005b9a:	69bb      	ldr	r3, [r7, #24]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d11d      	bne.n	8005bdc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	681a      	ldr	r2, [r3, #0]
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005bae:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	689a      	ldr	r2, [r3, #8]
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f022 0201 	bic.w	r2, r2, #1
 8005bbe:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	2220      	movs	r2, #32
 8005bc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2220      	movs	r2, #32
 8005bcc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005bd8:	2303      	movs	r3, #3
 8005bda:	e045      	b.n	8005c68 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f003 0304 	and.w	r3, r3, #4
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d02e      	beq.n	8005c48 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	69db      	ldr	r3, [r3, #28]
 8005bf0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005bf4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bf8:	d126      	bne.n	8005c48 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c02:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	681a      	ldr	r2, [r3, #0]
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005c12:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	689a      	ldr	r2, [r3, #8]
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f022 0201 	bic.w	r2, r2, #1
 8005c22:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2220      	movs	r2, #32
 8005c28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2220      	movs	r2, #32
 8005c30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2220      	movs	r2, #32
 8005c38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8005c44:	2303      	movs	r3, #3
 8005c46:	e00f      	b.n	8005c68 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	69da      	ldr	r2, [r3, #28]
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	4013      	ands	r3, r2
 8005c52:	68ba      	ldr	r2, [r7, #8]
 8005c54:	429a      	cmp	r2, r3
 8005c56:	bf0c      	ite	eq
 8005c58:	2301      	moveq	r3, #1
 8005c5a:	2300      	movne	r3, #0
 8005c5c:	b2db      	uxtb	r3, r3
 8005c5e:	461a      	mov	r2, r3
 8005c60:	79fb      	ldrb	r3, [r7, #7]
 8005c62:	429a      	cmp	r2, r3
 8005c64:	d08d      	beq.n	8005b82 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c66:	2300      	movs	r3, #0
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	3710      	adds	r7, #16
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}

08005c70 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b085      	sub	sp, #20
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005c7e:	2b01      	cmp	r3, #1
 8005c80:	d101      	bne.n	8005c86 <HAL_UARTEx_DisableFifoMode+0x16>
 8005c82:	2302      	movs	r3, #2
 8005c84:	e027      	b.n	8005cd6 <HAL_UARTEx_DisableFifoMode+0x66>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2201      	movs	r2, #1
 8005c8a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2224      	movs	r2, #36	; 0x24
 8005c92:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	681a      	ldr	r2, [r3, #0]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f022 0201 	bic.w	r2, r2, #1
 8005cac:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005cb4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	68fa      	ldr	r2, [r7, #12]
 8005cc2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2220      	movs	r2, #32
 8005cc8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005cd4:	2300      	movs	r3, #0
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	3714      	adds	r7, #20
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce0:	4770      	bx	lr

08005ce2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005ce2:	b580      	push	{r7, lr}
 8005ce4:	b084      	sub	sp, #16
 8005ce6:	af00      	add	r7, sp, #0
 8005ce8:	6078      	str	r0, [r7, #4]
 8005cea:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005cf2:	2b01      	cmp	r3, #1
 8005cf4:	d101      	bne.n	8005cfa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005cf6:	2302      	movs	r3, #2
 8005cf8:	e02d      	b.n	8005d56 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2201      	movs	r2, #1
 8005cfe:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2224      	movs	r2, #36	; 0x24
 8005d06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	681a      	ldr	r2, [r3, #0]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f022 0201 	bic.w	r2, r2, #1
 8005d20:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	689b      	ldr	r3, [r3, #8]
 8005d28:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	683a      	ldr	r2, [r7, #0]
 8005d32:	430a      	orrs	r2, r1
 8005d34:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f000 f850 	bl	8005ddc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	68fa      	ldr	r2, [r7, #12]
 8005d42:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2220      	movs	r2, #32
 8005d48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005d54:	2300      	movs	r3, #0
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	3710      	adds	r7, #16
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}

08005d5e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005d5e:	b580      	push	{r7, lr}
 8005d60:	b084      	sub	sp, #16
 8005d62:	af00      	add	r7, sp, #0
 8005d64:	6078      	str	r0, [r7, #4]
 8005d66:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005d6e:	2b01      	cmp	r3, #1
 8005d70:	d101      	bne.n	8005d76 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005d72:	2302      	movs	r3, #2
 8005d74:	e02d      	b.n	8005dd2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2201      	movs	r2, #1
 8005d7a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2224      	movs	r2, #36	; 0x24
 8005d82:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	681a      	ldr	r2, [r3, #0]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f022 0201 	bic.w	r2, r2, #1
 8005d9c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	689b      	ldr	r3, [r3, #8]
 8005da4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	683a      	ldr	r2, [r7, #0]
 8005dae:	430a      	orrs	r2, r1
 8005db0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f000 f812 	bl	8005ddc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	68fa      	ldr	r2, [r7, #12]
 8005dbe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2220      	movs	r2, #32
 8005dc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005dd0:	2300      	movs	r3, #0
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3710      	adds	r7, #16
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}
	...

08005ddc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b089      	sub	sp, #36	; 0x24
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8005de4:	4a2f      	ldr	r2, [pc, #188]	; (8005ea4 <UARTEx_SetNbDataToProcess+0xc8>)
 8005de6:	f107 0314 	add.w	r3, r7, #20
 8005dea:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005dee:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8005df2:	4a2d      	ldr	r2, [pc, #180]	; (8005ea8 <UARTEx_SetNbDataToProcess+0xcc>)
 8005df4:	f107 030c 	add.w	r3, r7, #12
 8005df8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005dfc:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d108      	bne.n	8005e1a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2201      	movs	r2, #1
 8005e14:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005e18:	e03d      	b.n	8005e96 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005e1a:	2308      	movs	r3, #8
 8005e1c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005e1e:	2308      	movs	r3, #8
 8005e20:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	689b      	ldr	r3, [r3, #8]
 8005e28:	0e5b      	lsrs	r3, r3, #25
 8005e2a:	b2db      	uxtb	r3, r3
 8005e2c:	f003 0307 	and.w	r3, r3, #7
 8005e30:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	689b      	ldr	r3, [r3, #8]
 8005e38:	0f5b      	lsrs	r3, r3, #29
 8005e3a:	b2db      	uxtb	r3, r3
 8005e3c:	f003 0307 	and.w	r3, r3, #7
 8005e40:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005e42:	7fbb      	ldrb	r3, [r7, #30]
 8005e44:	7f3a      	ldrb	r2, [r7, #28]
 8005e46:	f107 0120 	add.w	r1, r7, #32
 8005e4a:	440a      	add	r2, r1
 8005e4c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8005e50:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005e54:	7f3a      	ldrb	r2, [r7, #28]
 8005e56:	f107 0120 	add.w	r1, r7, #32
 8005e5a:	440a      	add	r2, r1
 8005e5c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005e60:	fb93 f3f2 	sdiv	r3, r3, r2
 8005e64:	b29a      	uxth	r2, r3
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005e6c:	7ffb      	ldrb	r3, [r7, #31]
 8005e6e:	7f7a      	ldrb	r2, [r7, #29]
 8005e70:	f107 0120 	add.w	r1, r7, #32
 8005e74:	440a      	add	r2, r1
 8005e76:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8005e7a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005e7e:	7f7a      	ldrb	r2, [r7, #29]
 8005e80:	f107 0120 	add.w	r1, r7, #32
 8005e84:	440a      	add	r2, r1
 8005e86:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005e8a:	fb93 f3f2 	sdiv	r3, r3, r2
 8005e8e:	b29a      	uxth	r2, r3
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005e96:	bf00      	nop
 8005e98:	3724      	adds	r7, #36	; 0x24
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea0:	4770      	bx	lr
 8005ea2:	bf00      	nop
 8005ea4:	08005f94 	.word	0x08005f94
 8005ea8:	08005f9c 	.word	0x08005f9c

08005eac <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b085      	sub	sp, #20
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005eb4:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005eb8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005ec0:	b29a      	uxth	r2, r3
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	b29b      	uxth	r3, r3
 8005ec6:	43db      	mvns	r3, r3
 8005ec8:	b29b      	uxth	r3, r3
 8005eca:	4013      	ands	r3, r2
 8005ecc:	b29a      	uxth	r2, r3
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005ed4:	2300      	movs	r3, #0
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	3714      	adds	r7, #20
 8005eda:	46bd      	mov	sp, r7
 8005edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee0:	4770      	bx	lr

08005ee2 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005ee2:	b084      	sub	sp, #16
 8005ee4:	b480      	push	{r7}
 8005ee6:	b083      	sub	sp, #12
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
 8005eec:	f107 0014 	add.w	r0, r7, #20
 8005ef0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2200      	movs	r2, #0
 8005f00:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2200      	movs	r2, #0
 8005f08:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005f14:	2300      	movs	r3, #0
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	370c      	adds	r7, #12
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f20:	b004      	add	sp, #16
 8005f22:	4770      	bx	lr

08005f24 <__libc_init_array>:
 8005f24:	b570      	push	{r4, r5, r6, lr}
 8005f26:	4e0d      	ldr	r6, [pc, #52]	; (8005f5c <__libc_init_array+0x38>)
 8005f28:	4c0d      	ldr	r4, [pc, #52]	; (8005f60 <__libc_init_array+0x3c>)
 8005f2a:	1ba4      	subs	r4, r4, r6
 8005f2c:	10a4      	asrs	r4, r4, #2
 8005f2e:	2500      	movs	r5, #0
 8005f30:	42a5      	cmp	r5, r4
 8005f32:	d109      	bne.n	8005f48 <__libc_init_array+0x24>
 8005f34:	4e0b      	ldr	r6, [pc, #44]	; (8005f64 <__libc_init_array+0x40>)
 8005f36:	4c0c      	ldr	r4, [pc, #48]	; (8005f68 <__libc_init_array+0x44>)
 8005f38:	f000 f820 	bl	8005f7c <_init>
 8005f3c:	1ba4      	subs	r4, r4, r6
 8005f3e:	10a4      	asrs	r4, r4, #2
 8005f40:	2500      	movs	r5, #0
 8005f42:	42a5      	cmp	r5, r4
 8005f44:	d105      	bne.n	8005f52 <__libc_init_array+0x2e>
 8005f46:	bd70      	pop	{r4, r5, r6, pc}
 8005f48:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005f4c:	4798      	blx	r3
 8005f4e:	3501      	adds	r5, #1
 8005f50:	e7ee      	b.n	8005f30 <__libc_init_array+0xc>
 8005f52:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005f56:	4798      	blx	r3
 8005f58:	3501      	adds	r5, #1
 8005f5a:	e7f2      	b.n	8005f42 <__libc_init_array+0x1e>
 8005f5c:	08005fdc 	.word	0x08005fdc
 8005f60:	08005fdc 	.word	0x08005fdc
 8005f64:	08005fdc 	.word	0x08005fdc
 8005f68:	08005fe0 	.word	0x08005fe0

08005f6c <memset>:
 8005f6c:	4402      	add	r2, r0
 8005f6e:	4603      	mov	r3, r0
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d100      	bne.n	8005f76 <memset+0xa>
 8005f74:	4770      	bx	lr
 8005f76:	f803 1b01 	strb.w	r1, [r3], #1
 8005f7a:	e7f9      	b.n	8005f70 <memset+0x4>

08005f7c <_init>:
 8005f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f7e:	bf00      	nop
 8005f80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f82:	bc08      	pop	{r3}
 8005f84:	469e      	mov	lr, r3
 8005f86:	4770      	bx	lr

08005f88 <_fini>:
 8005f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f8a:	bf00      	nop
 8005f8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f8e:	bc08      	pop	{r3}
 8005f90:	469e      	mov	lr, r3
 8005f92:	4770      	bx	lr
