
RcMPPT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000805c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  0800823c  0800823c  0001823c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080083a8  080083a8  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  080083a8  080083a8  000183a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080083b0  080083b0  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080083b0  080083b0  000183b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080083b4  080083b4  000183b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  080083b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c1c  200001e8  080085a0  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001e04  080085a0  00021e04  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003355e  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005072  00000000  00000000  00053776  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0001b101  00000000  00000000  000587e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001718  00000000  00000000  000738f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000029c8  00000000  00000000  00075008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002f4ea  00000000  00000000  000779d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00027537  00000000  00000000  000a6eba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0011f44a  00000000  00000000  000ce3f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001ed83b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004210  00000000  00000000  001ed890  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e8 	.word	0x200001e8
 80001fc:	00000000 	.word	0x00000000
 8000200:	08008224 	.word	0x08008224

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001ec 	.word	0x200001ec
 800021c:	08008224 	.word	0x08008224

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__aeabi_d2iz>:
 8000a6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a74:	d215      	bcs.n	8000aa2 <__aeabi_d2iz+0x36>
 8000a76:	d511      	bpl.n	8000a9c <__aeabi_d2iz+0x30>
 8000a78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a80:	d912      	bls.n	8000aa8 <__aeabi_d2iz+0x3c>
 8000a82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a92:	fa23 f002 	lsr.w	r0, r3, r2
 8000a96:	bf18      	it	ne
 8000a98:	4240      	negne	r0, r0
 8000a9a:	4770      	bx	lr
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa6:	d105      	bne.n	8000ab4 <__aeabi_d2iz+0x48>
 8000aa8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aac:	bf08      	it	eq
 8000aae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_uldivmod>:
 8000abc:	b953      	cbnz	r3, 8000ad4 <__aeabi_uldivmod+0x18>
 8000abe:	b94a      	cbnz	r2, 8000ad4 <__aeabi_uldivmod+0x18>
 8000ac0:	2900      	cmp	r1, #0
 8000ac2:	bf08      	it	eq
 8000ac4:	2800      	cmpeq	r0, #0
 8000ac6:	bf1c      	itt	ne
 8000ac8:	f04f 31ff 	movne.w	r1, #4294967295
 8000acc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ad0:	f000 b96e 	b.w	8000db0 <__aeabi_idiv0>
 8000ad4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ad8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000adc:	f000 f806 	bl	8000aec <__udivmoddi4>
 8000ae0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ae4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ae8:	b004      	add	sp, #16
 8000aea:	4770      	bx	lr

08000aec <__udivmoddi4>:
 8000aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000af0:	9d08      	ldr	r5, [sp, #32]
 8000af2:	4604      	mov	r4, r0
 8000af4:	468c      	mov	ip, r1
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	f040 8083 	bne.w	8000c02 <__udivmoddi4+0x116>
 8000afc:	428a      	cmp	r2, r1
 8000afe:	4617      	mov	r7, r2
 8000b00:	d947      	bls.n	8000b92 <__udivmoddi4+0xa6>
 8000b02:	fab2 f282 	clz	r2, r2
 8000b06:	b142      	cbz	r2, 8000b1a <__udivmoddi4+0x2e>
 8000b08:	f1c2 0020 	rsb	r0, r2, #32
 8000b0c:	fa24 f000 	lsr.w	r0, r4, r0
 8000b10:	4091      	lsls	r1, r2
 8000b12:	4097      	lsls	r7, r2
 8000b14:	ea40 0c01 	orr.w	ip, r0, r1
 8000b18:	4094      	lsls	r4, r2
 8000b1a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b1e:	0c23      	lsrs	r3, r4, #16
 8000b20:	fbbc f6f8 	udiv	r6, ip, r8
 8000b24:	fa1f fe87 	uxth.w	lr, r7
 8000b28:	fb08 c116 	mls	r1, r8, r6, ip
 8000b2c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b30:	fb06 f10e 	mul.w	r1, r6, lr
 8000b34:	4299      	cmp	r1, r3
 8000b36:	d909      	bls.n	8000b4c <__udivmoddi4+0x60>
 8000b38:	18fb      	adds	r3, r7, r3
 8000b3a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b3e:	f080 8119 	bcs.w	8000d74 <__udivmoddi4+0x288>
 8000b42:	4299      	cmp	r1, r3
 8000b44:	f240 8116 	bls.w	8000d74 <__udivmoddi4+0x288>
 8000b48:	3e02      	subs	r6, #2
 8000b4a:	443b      	add	r3, r7
 8000b4c:	1a5b      	subs	r3, r3, r1
 8000b4e:	b2a4      	uxth	r4, r4
 8000b50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b54:	fb08 3310 	mls	r3, r8, r0, r3
 8000b58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b5c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b60:	45a6      	cmp	lr, r4
 8000b62:	d909      	bls.n	8000b78 <__udivmoddi4+0x8c>
 8000b64:	193c      	adds	r4, r7, r4
 8000b66:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b6a:	f080 8105 	bcs.w	8000d78 <__udivmoddi4+0x28c>
 8000b6e:	45a6      	cmp	lr, r4
 8000b70:	f240 8102 	bls.w	8000d78 <__udivmoddi4+0x28c>
 8000b74:	3802      	subs	r0, #2
 8000b76:	443c      	add	r4, r7
 8000b78:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b7c:	eba4 040e 	sub.w	r4, r4, lr
 8000b80:	2600      	movs	r6, #0
 8000b82:	b11d      	cbz	r5, 8000b8c <__udivmoddi4+0xa0>
 8000b84:	40d4      	lsrs	r4, r2
 8000b86:	2300      	movs	r3, #0
 8000b88:	e9c5 4300 	strd	r4, r3, [r5]
 8000b8c:	4631      	mov	r1, r6
 8000b8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b92:	b902      	cbnz	r2, 8000b96 <__udivmoddi4+0xaa>
 8000b94:	deff      	udf	#255	; 0xff
 8000b96:	fab2 f282 	clz	r2, r2
 8000b9a:	2a00      	cmp	r2, #0
 8000b9c:	d150      	bne.n	8000c40 <__udivmoddi4+0x154>
 8000b9e:	1bcb      	subs	r3, r1, r7
 8000ba0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ba4:	fa1f f887 	uxth.w	r8, r7
 8000ba8:	2601      	movs	r6, #1
 8000baa:	fbb3 fcfe 	udiv	ip, r3, lr
 8000bae:	0c21      	lsrs	r1, r4, #16
 8000bb0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000bb4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bb8:	fb08 f30c 	mul.w	r3, r8, ip
 8000bbc:	428b      	cmp	r3, r1
 8000bbe:	d907      	bls.n	8000bd0 <__udivmoddi4+0xe4>
 8000bc0:	1879      	adds	r1, r7, r1
 8000bc2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bc6:	d202      	bcs.n	8000bce <__udivmoddi4+0xe2>
 8000bc8:	428b      	cmp	r3, r1
 8000bca:	f200 80e9 	bhi.w	8000da0 <__udivmoddi4+0x2b4>
 8000bce:	4684      	mov	ip, r0
 8000bd0:	1ac9      	subs	r1, r1, r3
 8000bd2:	b2a3      	uxth	r3, r4
 8000bd4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bd8:	fb0e 1110 	mls	r1, lr, r0, r1
 8000bdc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000be0:	fb08 f800 	mul.w	r8, r8, r0
 8000be4:	45a0      	cmp	r8, r4
 8000be6:	d907      	bls.n	8000bf8 <__udivmoddi4+0x10c>
 8000be8:	193c      	adds	r4, r7, r4
 8000bea:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bee:	d202      	bcs.n	8000bf6 <__udivmoddi4+0x10a>
 8000bf0:	45a0      	cmp	r8, r4
 8000bf2:	f200 80d9 	bhi.w	8000da8 <__udivmoddi4+0x2bc>
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	eba4 0408 	sub.w	r4, r4, r8
 8000bfc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c00:	e7bf      	b.n	8000b82 <__udivmoddi4+0x96>
 8000c02:	428b      	cmp	r3, r1
 8000c04:	d909      	bls.n	8000c1a <__udivmoddi4+0x12e>
 8000c06:	2d00      	cmp	r5, #0
 8000c08:	f000 80b1 	beq.w	8000d6e <__udivmoddi4+0x282>
 8000c0c:	2600      	movs	r6, #0
 8000c0e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c12:	4630      	mov	r0, r6
 8000c14:	4631      	mov	r1, r6
 8000c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1a:	fab3 f683 	clz	r6, r3
 8000c1e:	2e00      	cmp	r6, #0
 8000c20:	d14a      	bne.n	8000cb8 <__udivmoddi4+0x1cc>
 8000c22:	428b      	cmp	r3, r1
 8000c24:	d302      	bcc.n	8000c2c <__udivmoddi4+0x140>
 8000c26:	4282      	cmp	r2, r0
 8000c28:	f200 80b8 	bhi.w	8000d9c <__udivmoddi4+0x2b0>
 8000c2c:	1a84      	subs	r4, r0, r2
 8000c2e:	eb61 0103 	sbc.w	r1, r1, r3
 8000c32:	2001      	movs	r0, #1
 8000c34:	468c      	mov	ip, r1
 8000c36:	2d00      	cmp	r5, #0
 8000c38:	d0a8      	beq.n	8000b8c <__udivmoddi4+0xa0>
 8000c3a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c3e:	e7a5      	b.n	8000b8c <__udivmoddi4+0xa0>
 8000c40:	f1c2 0320 	rsb	r3, r2, #32
 8000c44:	fa20 f603 	lsr.w	r6, r0, r3
 8000c48:	4097      	lsls	r7, r2
 8000c4a:	fa01 f002 	lsl.w	r0, r1, r2
 8000c4e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c52:	40d9      	lsrs	r1, r3
 8000c54:	4330      	orrs	r0, r6
 8000c56:	0c03      	lsrs	r3, r0, #16
 8000c58:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c5c:	fa1f f887 	uxth.w	r8, r7
 8000c60:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c68:	fb06 f108 	mul.w	r1, r6, r8
 8000c6c:	4299      	cmp	r1, r3
 8000c6e:	fa04 f402 	lsl.w	r4, r4, r2
 8000c72:	d909      	bls.n	8000c88 <__udivmoddi4+0x19c>
 8000c74:	18fb      	adds	r3, r7, r3
 8000c76:	f106 3cff 	add.w	ip, r6, #4294967295
 8000c7a:	f080 808d 	bcs.w	8000d98 <__udivmoddi4+0x2ac>
 8000c7e:	4299      	cmp	r1, r3
 8000c80:	f240 808a 	bls.w	8000d98 <__udivmoddi4+0x2ac>
 8000c84:	3e02      	subs	r6, #2
 8000c86:	443b      	add	r3, r7
 8000c88:	1a5b      	subs	r3, r3, r1
 8000c8a:	b281      	uxth	r1, r0
 8000c8c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c90:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c98:	fb00 f308 	mul.w	r3, r0, r8
 8000c9c:	428b      	cmp	r3, r1
 8000c9e:	d907      	bls.n	8000cb0 <__udivmoddi4+0x1c4>
 8000ca0:	1879      	adds	r1, r7, r1
 8000ca2:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ca6:	d273      	bcs.n	8000d90 <__udivmoddi4+0x2a4>
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d971      	bls.n	8000d90 <__udivmoddi4+0x2a4>
 8000cac:	3802      	subs	r0, #2
 8000cae:	4439      	add	r1, r7
 8000cb0:	1acb      	subs	r3, r1, r3
 8000cb2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000cb6:	e778      	b.n	8000baa <__udivmoddi4+0xbe>
 8000cb8:	f1c6 0c20 	rsb	ip, r6, #32
 8000cbc:	fa03 f406 	lsl.w	r4, r3, r6
 8000cc0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000cc4:	431c      	orrs	r4, r3
 8000cc6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000cca:	fa01 f306 	lsl.w	r3, r1, r6
 8000cce:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000cd2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000cd6:	431f      	orrs	r7, r3
 8000cd8:	0c3b      	lsrs	r3, r7, #16
 8000cda:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cde:	fa1f f884 	uxth.w	r8, r4
 8000ce2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ce6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000cea:	fb09 fa08 	mul.w	sl, r9, r8
 8000cee:	458a      	cmp	sl, r1
 8000cf0:	fa02 f206 	lsl.w	r2, r2, r6
 8000cf4:	fa00 f306 	lsl.w	r3, r0, r6
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0x220>
 8000cfa:	1861      	adds	r1, r4, r1
 8000cfc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d00:	d248      	bcs.n	8000d94 <__udivmoddi4+0x2a8>
 8000d02:	458a      	cmp	sl, r1
 8000d04:	d946      	bls.n	8000d94 <__udivmoddi4+0x2a8>
 8000d06:	f1a9 0902 	sub.w	r9, r9, #2
 8000d0a:	4421      	add	r1, r4
 8000d0c:	eba1 010a 	sub.w	r1, r1, sl
 8000d10:	b2bf      	uxth	r7, r7
 8000d12:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d16:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d1a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d1e:	fb00 f808 	mul.w	r8, r0, r8
 8000d22:	45b8      	cmp	r8, r7
 8000d24:	d907      	bls.n	8000d36 <__udivmoddi4+0x24a>
 8000d26:	19e7      	adds	r7, r4, r7
 8000d28:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d2c:	d22e      	bcs.n	8000d8c <__udivmoddi4+0x2a0>
 8000d2e:	45b8      	cmp	r8, r7
 8000d30:	d92c      	bls.n	8000d8c <__udivmoddi4+0x2a0>
 8000d32:	3802      	subs	r0, #2
 8000d34:	4427      	add	r7, r4
 8000d36:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d3a:	eba7 0708 	sub.w	r7, r7, r8
 8000d3e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d42:	454f      	cmp	r7, r9
 8000d44:	46c6      	mov	lr, r8
 8000d46:	4649      	mov	r1, r9
 8000d48:	d31a      	bcc.n	8000d80 <__udivmoddi4+0x294>
 8000d4a:	d017      	beq.n	8000d7c <__udivmoddi4+0x290>
 8000d4c:	b15d      	cbz	r5, 8000d66 <__udivmoddi4+0x27a>
 8000d4e:	ebb3 020e 	subs.w	r2, r3, lr
 8000d52:	eb67 0701 	sbc.w	r7, r7, r1
 8000d56:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d5a:	40f2      	lsrs	r2, r6
 8000d5c:	ea4c 0202 	orr.w	r2, ip, r2
 8000d60:	40f7      	lsrs	r7, r6
 8000d62:	e9c5 2700 	strd	r2, r7, [r5]
 8000d66:	2600      	movs	r6, #0
 8000d68:	4631      	mov	r1, r6
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	462e      	mov	r6, r5
 8000d70:	4628      	mov	r0, r5
 8000d72:	e70b      	b.n	8000b8c <__udivmoddi4+0xa0>
 8000d74:	4606      	mov	r6, r0
 8000d76:	e6e9      	b.n	8000b4c <__udivmoddi4+0x60>
 8000d78:	4618      	mov	r0, r3
 8000d7a:	e6fd      	b.n	8000b78 <__udivmoddi4+0x8c>
 8000d7c:	4543      	cmp	r3, r8
 8000d7e:	d2e5      	bcs.n	8000d4c <__udivmoddi4+0x260>
 8000d80:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d84:	eb69 0104 	sbc.w	r1, r9, r4
 8000d88:	3801      	subs	r0, #1
 8000d8a:	e7df      	b.n	8000d4c <__udivmoddi4+0x260>
 8000d8c:	4608      	mov	r0, r1
 8000d8e:	e7d2      	b.n	8000d36 <__udivmoddi4+0x24a>
 8000d90:	4660      	mov	r0, ip
 8000d92:	e78d      	b.n	8000cb0 <__udivmoddi4+0x1c4>
 8000d94:	4681      	mov	r9, r0
 8000d96:	e7b9      	b.n	8000d0c <__udivmoddi4+0x220>
 8000d98:	4666      	mov	r6, ip
 8000d9a:	e775      	b.n	8000c88 <__udivmoddi4+0x19c>
 8000d9c:	4630      	mov	r0, r6
 8000d9e:	e74a      	b.n	8000c36 <__udivmoddi4+0x14a>
 8000da0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000da4:	4439      	add	r1, r7
 8000da6:	e713      	b.n	8000bd0 <__udivmoddi4+0xe4>
 8000da8:	3802      	subs	r0, #2
 8000daa:	443c      	add	r4, r7
 8000dac:	e724      	b.n	8000bf8 <__udivmoddi4+0x10c>
 8000dae:	bf00      	nop

08000db0 <__aeabi_idiv0>:
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop

08000db4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000db4:	b570      	push	{r4, r5, r6, lr}
 8000db6:	b08c      	sub	sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db8:	2400      	movs	r4, #0
 8000dba:	9407      	str	r4, [sp, #28]
 8000dbc:	9408      	str	r4, [sp, #32]
 8000dbe:	9409      	str	r4, [sp, #36]	; 0x24
 8000dc0:	940a      	str	r4, [sp, #40]	; 0x28
 8000dc2:	940b      	str	r4, [sp, #44]	; 0x2c

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000dc4:	4b3b      	ldr	r3, [pc, #236]	; (8000eb4 <MX_GPIO_Init+0x100>)
 8000dc6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000dc8:	f042 0220 	orr.w	r2, r2, #32
 8000dcc:	64da      	str	r2, [r3, #76]	; 0x4c
 8000dce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000dd0:	f002 0220 	and.w	r2, r2, #32
 8000dd4:	9201      	str	r2, [sp, #4]
 8000dd6:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000dd8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000dda:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000dde:	64da      	str	r2, [r3, #76]	; 0x4c
 8000de0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000de2:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8000de6:	9202      	str	r2, [sp, #8]
 8000de8:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000dec:	f042 0204 	orr.w	r2, r2, #4
 8000df0:	64da      	str	r2, [r3, #76]	; 0x4c
 8000df2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000df4:	f002 0204 	and.w	r2, r2, #4
 8000df8:	9203      	str	r2, [sp, #12]
 8000dfa:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000dfe:	f042 0201 	orr.w	r2, r2, #1
 8000e02:	64da      	str	r2, [r3, #76]	; 0x4c
 8000e04:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e06:	f002 0201 	and.w	r2, r2, #1
 8000e0a:	9204      	str	r2, [sp, #16]
 8000e0c:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e0e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e10:	f042 0202 	orr.w	r2, r2, #2
 8000e14:	64da      	str	r2, [r3, #76]	; 0x4c
 8000e16:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e18:	f002 0202 	and.w	r2, r2, #2
 8000e1c:	9205      	str	r2, [sp, #20]
 8000e1e:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e20:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e22:	f042 0208 	orr.w	r2, r2, #8
 8000e26:	64da      	str	r2, [r3, #76]	; 0x4c
 8000e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e2a:	f003 0308 	and.w	r3, r3, #8
 8000e2e:	9306      	str	r3, [sp, #24]
 8000e30:	9b06      	ldr	r3, [sp, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TP1_GPIO_Port, TP1_Pin, GPIO_PIN_RESET);
 8000e32:	4622      	mov	r2, r4
 8000e34:	2110      	movs	r1, #16
 8000e36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e3a:	f002 f899 	bl	8002f70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_14
 8000e3e:	4d1e      	ldr	r5, [pc, #120]	; (8000eb8 <MX_GPIO_Init+0x104>)
 8000e40:	4622      	mov	r2, r4
 8000e42:	f644 6104 	movw	r1, #19972	; 0x4e04
 8000e46:	4628      	mov	r0, r5
 8000e48:	f002 f892 	bl	8002f70 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin : PG10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e50:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e52:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e54:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e56:	a907      	add	r1, sp, #28
 8000e58:	4818      	ldr	r0, [pc, #96]	; (8000ebc <MX_GPIO_Init+0x108>)
 8000e5a:	f001 ffb7 	bl	8002dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : TP1_Pin */
  GPIO_InitStruct.Pin = TP1_Pin;
 8000e5e:	2310      	movs	r3, #16
 8000e60:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e62:	2601      	movs	r6, #1
 8000e64:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e66:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e68:	2303      	movs	r3, #3
 8000e6a:	930a      	str	r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(TP1_GPIO_Port, &GPIO_InitStruct);
 8000e6c:	a907      	add	r1, sp, #28
 8000e6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e72:	f001 ffab 	bl	8002dcc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000e76:	23e0      	movs	r3, #224	; 0xe0
 8000e78:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e7a:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e7e:	a907      	add	r1, sp, #28
 8000e80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e84:	f001 ffa2 	bl	8002dcc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 PB11 PB14
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_14
 8000e88:	f644 6304 	movw	r3, #19972	; 0x4e04
 8000e8c:	9307      	str	r3, [sp, #28]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e8e:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e90:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e92:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e94:	a907      	add	r1, sp, #28
 8000e96:	4628      	mov	r0, r5
 8000e98:	f001 ff98 	bl	8002dcc <HAL_GPIO_Init>

  /*Configure GPIO pins : SW2_Pin BOOT0_Pin */
  GPIO_InitStruct.Pin = SW2_Pin|BOOT0_Pin;
 8000e9c:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000ea0:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ea2:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea4:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ea6:	a907      	add	r1, sp, #28
 8000ea8:	4628      	mov	r0, r5
 8000eaa:	f001 ff8f 	bl	8002dcc <HAL_GPIO_Init>

}
 8000eae:	b00c      	add	sp, #48	; 0x30
 8000eb0:	bd70      	pop	{r4, r5, r6, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40021000 	.word	0x40021000
 8000eb8:	48000400 	.word	0x48000400
 8000ebc:	48001800 	.word	0x48001800

08000ec0 <LL_HRTIM_OUT_SetPolarity>:
  *         @arg @ref LL_HRTIM_OUT_POSITIVE_POLARITY
  *         @arg @ref LL_HRTIM_OUT_NEGATIVE_POLARITY
  * @retval None
  */
__STATIC_INLINE void LL_HRTIM_OUT_SetPolarity(HRTIM_TypeDef *HRTIMx, uint32_t Output, uint32_t Polarity)
{
 8000ec0:	b430      	push	{r4, r5}
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ec2:	fa91 f1a1 	rbit	r1, r1
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000ec6:	b1c9      	cbz	r1, 8000efc <LL_HRTIM_OUT_SetPolarity+0x3c>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8000ec8:	fab1 f381 	clz	r3, r1
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ecc:	2101      	movs	r1, #1
 8000ece:	fa91 f1a1 	rbit	r1, r1
  if (value == 0U)
 8000ed2:	b1a9      	cbz	r1, 8000f00 <LL_HRTIM_OUT_SetPolarity+0x40>
  return __builtin_clz(value);
 8000ed4:	fab1 f181 	clz	r1, r1
  uint32_t iOutput = (uint8_t)(POSITION_VAL(Output) - POSITION_VAL(LL_HRTIM_OUTPUT_TA1));
 8000ed8:	1a5b      	subs	r3, r3, r1
 8000eda:	b2db      	uxtb	r3, r3
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sTimerxRegs[0].OUTxR) +
 8000edc:	30e4      	adds	r0, #228	; 0xe4
                                                              REG_OFFSET_TAB_OUTxR[iOutput]));
 8000ede:	4909      	ldr	r1, [pc, #36]	; (8000f04 <LL_HRTIM_OUT_SetPolarity+0x44>)
 8000ee0:	f831 4013 	ldrh.w	r4, [r1, r3, lsl #1]
  MODIFY_REG(*pReg, (HRTIM_OUTR_POL1 << REG_SHIFT_TAB_OUTxR[iOutput]), (Polarity << REG_SHIFT_TAB_OUTxR[iOutput]));
 8000ee4:	5901      	ldr	r1, [r0, r4]
 8000ee6:	4d08      	ldr	r5, [pc, #32]	; (8000f08 <LL_HRTIM_OUT_SetPolarity+0x48>)
 8000ee8:	5ced      	ldrb	r5, [r5, r3]
 8000eea:	2302      	movs	r3, #2
 8000eec:	40ab      	lsls	r3, r5
 8000eee:	ea21 0303 	bic.w	r3, r1, r3
 8000ef2:	40aa      	lsls	r2, r5
 8000ef4:	431a      	orrs	r2, r3
 8000ef6:	5102      	str	r2, [r0, r4]
}
 8000ef8:	bc30      	pop	{r4, r5}
 8000efa:	4770      	bx	lr
    return 32U;
 8000efc:	2320      	movs	r3, #32
 8000efe:	e7e5      	b.n	8000ecc <LL_HRTIM_OUT_SetPolarity+0xc>
 8000f00:	2120      	movs	r1, #32
 8000f02:	e7e9      	b.n	8000ed8 <LL_HRTIM_OUT_SetPolarity+0x18>
 8000f04:	0800829c 	.word	0x0800829c
 8000f08:	080082e4 	.word	0x080082e4

08000f0c <LL_HRTIM_OUT_SetIdleMode>:
  *         @arg @ref LL_HRTIM_OUT_NO_IDLE
  *         @arg @ref LL_HRTIM_OUT_IDLE_WHEN_BURST
  * @retval None
  */
__STATIC_INLINE void LL_HRTIM_OUT_SetIdleMode(HRTIM_TypeDef *HRTIMx, uint32_t Output, uint32_t IdleMode)
{
 8000f0c:	b430      	push	{r4, r5}
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f0e:	fa91 f1a1 	rbit	r1, r1
  if (value == 0U)
 8000f12:	b1c9      	cbz	r1, 8000f48 <LL_HRTIM_OUT_SetIdleMode+0x3c>
  return __builtin_clz(value);
 8000f14:	fab1 f381 	clz	r3, r1
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f18:	2101      	movs	r1, #1
 8000f1a:	fa91 f1a1 	rbit	r1, r1
  if (value == 0U)
 8000f1e:	b1a9      	cbz	r1, 8000f4c <LL_HRTIM_OUT_SetIdleMode+0x40>
  return __builtin_clz(value);
 8000f20:	fab1 f181 	clz	r1, r1
  uint32_t iOutput = (uint8_t)(POSITION_VAL(Output) - POSITION_VAL(LL_HRTIM_OUTPUT_TA1));
 8000f24:	1a5b      	subs	r3, r3, r1
 8000f26:	b2db      	uxtb	r3, r3
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sTimerxRegs[0].OUTxR) +
 8000f28:	30e4      	adds	r0, #228	; 0xe4
                                                              REG_OFFSET_TAB_OUTxR[iOutput]));
 8000f2a:	4909      	ldr	r1, [pc, #36]	; (8000f50 <LL_HRTIM_OUT_SetIdleMode+0x44>)
 8000f2c:	f831 4013 	ldrh.w	r4, [r1, r3, lsl #1]
  MODIFY_REG(*pReg, (HRTIM_OUTR_IDLM1 << (REG_SHIFT_TAB_OUTxR[iOutput])), (IdleMode << (REG_SHIFT_TAB_OUTxR[iOutput])));
 8000f30:	5901      	ldr	r1, [r0, r4]
 8000f32:	4d08      	ldr	r5, [pc, #32]	; (8000f54 <LL_HRTIM_OUT_SetIdleMode+0x48>)
 8000f34:	5ced      	ldrb	r5, [r5, r3]
 8000f36:	2304      	movs	r3, #4
 8000f38:	40ab      	lsls	r3, r5
 8000f3a:	ea21 0303 	bic.w	r3, r1, r3
 8000f3e:	40aa      	lsls	r2, r5
 8000f40:	431a      	orrs	r2, r3
 8000f42:	5102      	str	r2, [r0, r4]
}
 8000f44:	bc30      	pop	{r4, r5}
 8000f46:	4770      	bx	lr
    return 32U;
 8000f48:	2320      	movs	r3, #32
 8000f4a:	e7e5      	b.n	8000f18 <LL_HRTIM_OUT_SetIdleMode+0xc>
 8000f4c:	2120      	movs	r1, #32
 8000f4e:	e7e9      	b.n	8000f24 <LL_HRTIM_OUT_SetIdleMode+0x18>
 8000f50:	0800829c 	.word	0x0800829c
 8000f54:	080082e4 	.word	0x080082e4

08000f58 <LL_HRTIM_OUT_SetIdleLevel>:
  *         @arg @ref LL_HRTIM_OUT_IDLELEVEL_INACTIVE
  *         @arg @ref LL_HRTIM_OUT_IDLELEVEL_ACTIVE
  * @retval None
  */
__STATIC_INLINE void LL_HRTIM_OUT_SetIdleLevel(HRTIM_TypeDef *HRTIMx, uint32_t Output, uint32_t IdleLevel)
{
 8000f58:	b430      	push	{r4, r5}
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f5a:	fa91 f1a1 	rbit	r1, r1
  if (value == 0U)
 8000f5e:	b1c9      	cbz	r1, 8000f94 <LL_HRTIM_OUT_SetIdleLevel+0x3c>
  return __builtin_clz(value);
 8000f60:	fab1 f381 	clz	r3, r1
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f64:	2101      	movs	r1, #1
 8000f66:	fa91 f1a1 	rbit	r1, r1
  if (value == 0U)
 8000f6a:	b1a9      	cbz	r1, 8000f98 <LL_HRTIM_OUT_SetIdleLevel+0x40>
  return __builtin_clz(value);
 8000f6c:	fab1 f181 	clz	r1, r1
  uint32_t iOutput = (uint8_t)(POSITION_VAL(Output) - POSITION_VAL(LL_HRTIM_OUTPUT_TA1));
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2db      	uxtb	r3, r3
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sTimerxRegs[0].OUTxR) +
 8000f74:	30e4      	adds	r0, #228	; 0xe4
                                                              REG_OFFSET_TAB_OUTxR[iOutput]));
 8000f76:	4909      	ldr	r1, [pc, #36]	; (8000f9c <LL_HRTIM_OUT_SetIdleLevel+0x44>)
 8000f78:	f831 4013 	ldrh.w	r4, [r1, r3, lsl #1]
  MODIFY_REG(*pReg, (HRTIM_OUTR_IDLES1 << REG_SHIFT_TAB_OUTxR[iOutput]), (IdleLevel << REG_SHIFT_TAB_OUTxR[iOutput]));
 8000f7c:	5901      	ldr	r1, [r0, r4]
 8000f7e:	4d08      	ldr	r5, [pc, #32]	; (8000fa0 <LL_HRTIM_OUT_SetIdleLevel+0x48>)
 8000f80:	5ced      	ldrb	r5, [r5, r3]
 8000f82:	2308      	movs	r3, #8
 8000f84:	40ab      	lsls	r3, r5
 8000f86:	ea21 0303 	bic.w	r3, r1, r3
 8000f8a:	40aa      	lsls	r2, r5
 8000f8c:	431a      	orrs	r2, r3
 8000f8e:	5102      	str	r2, [r0, r4]
}
 8000f90:	bc30      	pop	{r4, r5}
 8000f92:	4770      	bx	lr
    return 32U;
 8000f94:	2320      	movs	r3, #32
 8000f96:	e7e5      	b.n	8000f64 <LL_HRTIM_OUT_SetIdleLevel+0xc>
 8000f98:	2120      	movs	r1, #32
 8000f9a:	e7e9      	b.n	8000f70 <LL_HRTIM_OUT_SetIdleLevel+0x18>
 8000f9c:	0800829c 	.word	0x0800829c
 8000fa0:	080082e4 	.word	0x080082e4

08000fa4 <LL_HRTIM_OUT_SetFaultState>:
  *         @arg @ref LL_HRTIM_OUT_FAULTSTATE_INACTIVE
  *         @arg @ref LL_HRTIM_OUT_FAULTSTATE_HIGHZ
  * @retval None
  */
__STATIC_INLINE void LL_HRTIM_OUT_SetFaultState(HRTIM_TypeDef *HRTIMx, uint32_t Output, uint32_t FaultState)
{
 8000fa4:	b430      	push	{r4, r5}
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fa6:	fa91 f1a1 	rbit	r1, r1
  if (value == 0U)
 8000faa:	b1c9      	cbz	r1, 8000fe0 <LL_HRTIM_OUT_SetFaultState+0x3c>
  return __builtin_clz(value);
 8000fac:	fab1 f381 	clz	r3, r1
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fb0:	2101      	movs	r1, #1
 8000fb2:	fa91 f1a1 	rbit	r1, r1
  if (value == 0U)
 8000fb6:	b1a9      	cbz	r1, 8000fe4 <LL_HRTIM_OUT_SetFaultState+0x40>
  return __builtin_clz(value);
 8000fb8:	fab1 f181 	clz	r1, r1
  uint32_t iOutput = (uint8_t)(POSITION_VAL(Output) - POSITION_VAL(LL_HRTIM_OUTPUT_TA1));
 8000fbc:	1a5b      	subs	r3, r3, r1
 8000fbe:	b2db      	uxtb	r3, r3
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sTimerxRegs[0].OUTxR) +
 8000fc0:	30e4      	adds	r0, #228	; 0xe4
                                                              REG_OFFSET_TAB_OUTxR[iOutput]));
 8000fc2:	4909      	ldr	r1, [pc, #36]	; (8000fe8 <LL_HRTIM_OUT_SetFaultState+0x44>)
 8000fc4:	f831 4013 	ldrh.w	r4, [r1, r3, lsl #1]
  MODIFY_REG(*pReg, (HRTIM_OUTR_FAULT1 << REG_SHIFT_TAB_OUTxR[iOutput]), (FaultState << REG_SHIFT_TAB_OUTxR[iOutput]));
 8000fc8:	5901      	ldr	r1, [r0, r4]
 8000fca:	4d08      	ldr	r5, [pc, #32]	; (8000fec <LL_HRTIM_OUT_SetFaultState+0x48>)
 8000fcc:	5ced      	ldrb	r5, [r5, r3]
 8000fce:	2330      	movs	r3, #48	; 0x30
 8000fd0:	40ab      	lsls	r3, r5
 8000fd2:	ea21 0303 	bic.w	r3, r1, r3
 8000fd6:	40aa      	lsls	r2, r5
 8000fd8:	431a      	orrs	r2, r3
 8000fda:	5102      	str	r2, [r0, r4]
}
 8000fdc:	bc30      	pop	{r4, r5}
 8000fde:	4770      	bx	lr
    return 32U;
 8000fe0:	2320      	movs	r3, #32
 8000fe2:	e7e5      	b.n	8000fb0 <LL_HRTIM_OUT_SetFaultState+0xc>
 8000fe4:	2120      	movs	r1, #32
 8000fe6:	e7e9      	b.n	8000fbc <LL_HRTIM_OUT_SetFaultState+0x18>
 8000fe8:	0800829c 	.word	0x0800829c
 8000fec:	080082e4 	.word	0x080082e4

08000ff0 <LL_HRTIM_OUT_SetChopperMode>:
  *         @arg @ref LL_HRTIM_OUT_CHOPPERMODE_DISABLED
  *         @arg @ref LL_HRTIM_OUT_CHOPPERMODE_ENABLED
  * @retval None
  */
__STATIC_INLINE void LL_HRTIM_OUT_SetChopperMode(HRTIM_TypeDef *HRTIMx, uint32_t Output, uint32_t ChopperMode)
{
 8000ff0:	b430      	push	{r4, r5}
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ff2:	fa91 f1a1 	rbit	r1, r1
  if (value == 0U)
 8000ff6:	b1c9      	cbz	r1, 800102c <LL_HRTIM_OUT_SetChopperMode+0x3c>
  return __builtin_clz(value);
 8000ff8:	fab1 f381 	clz	r3, r1
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ffc:	2101      	movs	r1, #1
 8000ffe:	fa91 f1a1 	rbit	r1, r1
  if (value == 0U)
 8001002:	b1a9      	cbz	r1, 8001030 <LL_HRTIM_OUT_SetChopperMode+0x40>
  return __builtin_clz(value);
 8001004:	fab1 f181 	clz	r1, r1
  uint32_t iOutput = (uint8_t)(POSITION_VAL(Output) - POSITION_VAL(LL_HRTIM_OUTPUT_TA1));
 8001008:	1a5b      	subs	r3, r3, r1
 800100a:	b2db      	uxtb	r3, r3
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sTimerxRegs[0].OUTxR) +
 800100c:	30e4      	adds	r0, #228	; 0xe4
                                                              REG_OFFSET_TAB_OUTxR[iOutput]));
 800100e:	4909      	ldr	r1, [pc, #36]	; (8001034 <LL_HRTIM_OUT_SetChopperMode+0x44>)
 8001010:	f831 4013 	ldrh.w	r4, [r1, r3, lsl #1]
  MODIFY_REG(*pReg, (HRTIM_OUTR_CHP1 << REG_SHIFT_TAB_OUTxR[iOutput]), (ChopperMode << REG_SHIFT_TAB_OUTxR[iOutput]));
 8001014:	5901      	ldr	r1, [r0, r4]
 8001016:	4d08      	ldr	r5, [pc, #32]	; (8001038 <LL_HRTIM_OUT_SetChopperMode+0x48>)
 8001018:	5ced      	ldrb	r5, [r5, r3]
 800101a:	2340      	movs	r3, #64	; 0x40
 800101c:	40ab      	lsls	r3, r5
 800101e:	ea21 0303 	bic.w	r3, r1, r3
 8001022:	40aa      	lsls	r2, r5
 8001024:	431a      	orrs	r2, r3
 8001026:	5102      	str	r2, [r0, r4]
}
 8001028:	bc30      	pop	{r4, r5}
 800102a:	4770      	bx	lr
    return 32U;
 800102c:	2320      	movs	r3, #32
 800102e:	e7e5      	b.n	8000ffc <LL_HRTIM_OUT_SetChopperMode+0xc>
 8001030:	2120      	movs	r1, #32
 8001032:	e7e9      	b.n	8001008 <LL_HRTIM_OUT_SetChopperMode+0x18>
 8001034:	0800829c 	.word	0x0800829c
 8001038:	080082e4 	.word	0x080082e4

0800103c <MX_HRTIM1_Init>:
{
 800103c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001040:	b089      	sub	sp, #36	; 0x24
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001042:	2300      	movs	r3, #0
 8001044:	9302      	str	r3, [sp, #8]
 8001046:	9303      	str	r3, [sp, #12]
 8001048:	9304      	str	r3, [sp, #16]
 800104a:	9305      	str	r3, [sp, #20]
 800104c:	9306      	str	r3, [sp, #24]
 800104e:	9307      	str	r3, [sp, #28]
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001050:	4ac5      	ldr	r2, [pc, #788]	; (8001368 <MX_HRTIM1_Init+0x32c>)
 8001052:	6e11      	ldr	r1, [r2, #96]	; 0x60
 8001054:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 8001058:	6611      	str	r1, [r2, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800105a:	6e12      	ldr	r2, [r2, #96]	; 0x60
 800105c:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8001060:	9200      	str	r2, [sp, #0]
  (void)tmpreg;
 8001062:	9a00      	ldr	r2, [sp, #0]
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001064:	4ac1      	ldr	r2, [pc, #772]	; (800136c <MX_HRTIM1_Init+0x330>)
 8001066:	68d2      	ldr	r2, [r2, #12]
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001068:	4ac1      	ldr	r2, [pc, #772]	; (8001370 <MX_HRTIM1_Init+0x334>)
 800106a:	f882 334a 	strb.w	r3, [r2, #842]	; 0x34a
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800106e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001072:	6093      	str	r3, [r2, #8]
  MODIFY_REG(HRTIMx->sCommonRegs.DLLCR, (HRTIM_DLLCR_CALEN | HRTIM_DLLCR_CALRTE), (Mode | Period));
 8001074:	4abf      	ldr	r2, [pc, #764]	; (8001374 <MX_HRTIM1_Init+0x338>)
 8001076:	f8d2 33cc 	ldr.w	r3, [r2, #972]	; 0x3cc
 800107a:	f043 030e 	orr.w	r3, r3, #14
 800107e:	f8c2 33cc 	str.w	r3, [r2, #972]	; 0x3cc
  * @param  HRTIMx High Resolution Timer instance
  * @retval State of DLLRDY bit in HRTIM_ISR register (1 or 0).
  */
__STATIC_INLINE uint32_t LL_HRTIM_IsActiveFlag_DLLRDY(HRTIM_TypeDef *HRTIMx)
{
  return ((READ_BIT(HRTIMx->sCommonRegs.ISR, HRTIM_ISR_DLLRDY) == (HRTIM_ISR_DLLRDY)) ? 1UL : 0UL);
 8001082:	4bbc      	ldr	r3, [pc, #752]	; (8001374 <MX_HRTIM1_Init+0x338>)
 8001084:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 8001088:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800108c:	d0f9      	beq.n	8001082 <MX_HRTIM1_Init+0x46>
  __IO uint32_t *padcur = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sCommonRegs.CR1) +
 800108e:	49ba      	ldr	r1, [pc, #744]	; (8001378 <MX_HRTIM1_Init+0x33c>)
  __IO uint32_t *padcer = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sCommonRegs.ADC1R) +
 8001090:	4aba      	ldr	r2, [pc, #744]	; (800137c <MX_HRTIM1_Init+0x340>)
  MODIFY_REG(*padcur, REG_MASK_TAB_ADCUR[ADCTrig], (Update << REG_SHIFT_TAB_ADCUR[ADCTrig]));
 8001092:	680b      	ldr	r3, [r1, #0]
 8001094:	f423 1360 	bic.w	r3, r3, #3670016	; 0x380000
 8001098:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800109c:	600b      	str	r3, [r1, #0]
  MODIFY_REG(*padcer, REG_MASK_TAB_ADCER[ADCTrig], (Src << REG_SHIFT_TAB_ADCER[ADCTrig]));
 800109e:	6853      	ldr	r3, [r2, #4]
 80010a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80010a4:	6053      	str	r3, [r2, #4]
  MODIFY_REG(HRTIMx->sCommonRegs.ADCPS1, (uint32_t)mask, (uint32_t)ratio);
 80010a6:	4bb3      	ldr	r3, [pc, #716]	; (8001374 <MX_HRTIM1_Init+0x338>)
 80010a8:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80010ac:	f422 62f8 	bic.w	r2, r2, #1984	; 0x7c0
 80010b0:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  MODIFY_REG(HRTIMx->sCommonRegs.ADCPS2, (uint32_t)(mask >> 32U), (uint32_t)(ratio >> 32U));
 80010b4:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80010b8:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010bc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80010c0:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	f000 861a 	beq.w	8001cfe <MX_HRTIM1_Init+0xcc2>
  return __builtin_clz(value);
 80010ca:	fab3 f383 	clz	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_MCEN_Pos);
 80010ce:	3b10      	subs	r3, #16
 80010d0:	b2db      	uxtb	r3, r3
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sMasterRegs.MCR) + REG_OFFSET_TAB_TIMER[iTimer]));
 80010d2:	4ca8      	ldr	r4, [pc, #672]	; (8001374 <MX_HRTIM1_Init+0x338>)
 80010d4:	4aaa      	ldr	r2, [pc, #680]	; (8001380 <MX_HRTIM1_Init+0x344>)
 80010d6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
  MODIFY_REG(*pReg, HRTIM_MCR_CK_PSC, Prescaler);
 80010da:	58a3      	ldr	r3, [r4, r2]
 80010dc:	f023 0307 	bic.w	r3, r3, #7
 80010e0:	50a3      	str	r3, [r4, r2]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010e2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80010e6:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	f000 860a 	beq.w	8001d04 <MX_HRTIM1_Init+0xcc8>
  return __builtin_clz(value);
 80010f0:	fab3 f383 	clz	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_MCEN_Pos);
 80010f4:	3b10      	subs	r3, #16
 80010f6:	b2db      	uxtb	r3, r3
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sMasterRegs.MCR) + REG_OFFSET_TAB_TIMER[iTimer]));
 80010f8:	4aa1      	ldr	r2, [pc, #644]	; (8001380 <MX_HRTIM1_Init+0x344>)
 80010fa:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
  MODIFY_REG(*pReg, (HRTIM_TIMCR_RETRIG | HRTIM_MCR_CONT), Mode);
 80010fe:	5913      	ldr	r3, [r2, r4]
 8001100:	f023 0318 	bic.w	r3, r3, #24
 8001104:	f043 0308 	orr.w	r3, r3, #8
 8001108:	5113      	str	r3, [r2, r4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800110a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800110e:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8001112:	2b00      	cmp	r3, #0
 8001114:	f000 85f9 	beq.w	8001d0a <MX_HRTIM1_Init+0xcce>
  return __builtin_clz(value);
 8001118:	fab3 f383 	clz	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_MCEN_Pos);
 800111c:	3b10      	subs	r3, #16
 800111e:	b2db      	uxtb	r3, r3
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sMasterRegs.MPER) +
 8001120:	f8df a284 	ldr.w	sl, [pc, #644]	; 80013a8 <MX_HRTIM1_Init+0x36c>
                                                              REG_OFFSET_TAB_TIMER[iTimer]));
 8001124:	4a96      	ldr	r2, [pc, #600]	; (8001380 <MX_HRTIM1_Init+0x344>)
 8001126:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
  MODIFY_REG(* pReg, HRTIM_MPER_MPER, Period);
 800112a:	f85a 3002 	ldr.w	r3, [sl, r2]
 800112e:	0c1b      	lsrs	r3, r3, #16
 8001130:	041b      	lsls	r3, r3, #16
 8001132:	f443 43aa 	orr.w	r3, r3, #21760	; 0x5500
 8001136:	f84a 3002 	str.w	r3, [sl, r2]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800113a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800113e:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8001142:	2b00      	cmp	r3, #0
 8001144:	f000 85e4 	beq.w	8001d10 <MX_HRTIM1_Init+0xcd4>
  return __builtin_clz(value);
 8001148:	fab3 f383 	clz	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_MCEN_Pos);
 800114c:	3b10      	subs	r3, #16
 800114e:	b2db      	uxtb	r3, r3
                                                              REG_OFFSET_TAB_TIMER[iTimer]));
 8001150:	4a8b      	ldr	r2, [pc, #556]	; (8001380 <MX_HRTIM1_Init+0x344>)
 8001152:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
  MODIFY_REG(* pReg, HRTIM_MREP_MREP, Repetition);
 8001156:	498b      	ldr	r1, [pc, #556]	; (8001384 <MX_HRTIM1_Init+0x348>)
 8001158:	588b      	ldr	r3, [r1, r2]
 800115a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800115e:	508b      	str	r3, [r1, r2]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001160:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001164:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8001168:	2b00      	cmp	r3, #0
 800116a:	f000 85d4 	beq.w	8001d16 <MX_HRTIM1_Init+0xcda>
  return __builtin_clz(value);
 800116e:	fab3 f383 	clz	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_MCEN_Pos);
 8001172:	3b10      	subs	r3, #16
 8001174:	b2db      	uxtb	r3, r3
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sMasterRegs.MCR) + REG_OFFSET_TAB_TIMER[iTimer]));
 8001176:	4a82      	ldr	r2, [pc, #520]	; (8001380 <MX_HRTIM1_Init+0x344>)
 8001178:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
  MODIFY_REG(*pReg, REG_MASK_TAB_UPDATEGATING[iTimer], (UpdateGating << REG_SHIFT_TAB_UPDATEGATING[iTimer]));
 800117c:	590a      	ldr	r2, [r1, r4]
 800117e:	4882      	ldr	r0, [pc, #520]	; (8001388 <MX_HRTIM1_Init+0x34c>)
 8001180:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001184:	ea22 0303 	bic.w	r3, r2, r3
 8001188:	510b      	str	r3, [r1, r4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800118a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800118e:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8001192:	2b00      	cmp	r3, #0
 8001194:	f000 85c2 	beq.w	8001d1c <MX_HRTIM1_Init+0xce0>
  return __builtin_clz(value);
 8001198:	fab3 f383 	clz	r3, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800119c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80011a0:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 80011a4:	2a00      	cmp	r2, #0
 80011a6:	f000 85bc 	beq.w	8001d22 <MX_HRTIM1_Init+0xce6>
  return __builtin_clz(value);
 80011aa:	fab2 f282 	clz	r2, r2
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - POSITION_VAL(LL_HRTIM_TIMER_A));
 80011ae:	1a9b      	subs	r3, r3, r2
 80011b0:	b2db      	uxtb	r3, r3
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sTimerxRegs[0].TIMxCR2) +
 80011b2:	4e76      	ldr	r6, [pc, #472]	; (800138c <MX_HRTIM1_Init+0x350>)
                                                              REG_OFFSET_TAB_TIMER[iTimer]));
 80011b4:	4a72      	ldr	r2, [pc, #456]	; (8001380 <MX_HRTIM1_Init+0x344>)
 80011b6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
  MODIFY_REG(* pReg, HRTIM_TIMCR2_UDM, Mode);
 80011ba:	58b3      	ldr	r3, [r6, r2]
 80011bc:	f023 0310 	bic.w	r3, r3, #16
 80011c0:	50b3      	str	r3, [r6, r2]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011c2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80011c6:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	f000 85ac 	beq.w	8001d28 <MX_HRTIM1_Init+0xcec>
  return __builtin_clz(value);
 80011d0:	fab3 f383 	clz	r3, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011d4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80011d8:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 80011dc:	2a00      	cmp	r2, #0
 80011de:	f000 85a6 	beq.w	8001d2e <MX_HRTIM1_Init+0xcf2>
  return __builtin_clz(value);
 80011e2:	fab2 f282 	clz	r2, r2
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - POSITION_VAL(LL_HRTIM_TIMER_A));
 80011e6:	1a9b      	subs	r3, r3, r2
 80011e8:	b2db      	uxtb	r3, r3
                                                              REG_OFFSET_TAB_TIMER[iTimer]));
 80011ea:	4a65      	ldr	r2, [pc, #404]	; (8001380 <MX_HRTIM1_Init+0x344>)
 80011ec:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
  MODIFY_REG(* pReg, HRTIM_TIMCR2_GTCMP1, Mode);
 80011f0:	5993      	ldr	r3, [r2, r6]
 80011f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011f6:	5193      	str	r3, [r2, r6]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011f8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80011fc:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8001200:	2b00      	cmp	r3, #0
 8001202:	f000 8597 	beq.w	8001d34 <MX_HRTIM1_Init+0xcf8>
  return __builtin_clz(value);
 8001206:	fab3 f383 	clz	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_MCEN_Pos);
 800120a:	3b10      	subs	r3, #16
 800120c:	b2db      	uxtb	r3, r3
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sMasterRegs.MCR) + REG_OFFSET_TAB_TIMER[iTimer]));
 800120e:	4a5c      	ldr	r2, [pc, #368]	; (8001380 <MX_HRTIM1_Init+0x344>)
 8001210:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
  MODIFY_REG(*pReg, HRTIM_MCR_DACSYNC, DACTrig);
 8001214:	5913      	ldr	r3, [r2, r4]
 8001216:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800121a:	5113      	str	r3, [r2, r4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800121c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001220:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8001224:	2b00      	cmp	r3, #0
 8001226:	f000 8588 	beq.w	8001d3a <MX_HRTIM1_Init+0xcfe>
  return __builtin_clz(value);
 800122a:	fab3 f383 	clz	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_MCEN_Pos);
 800122e:	3b10      	subs	r3, #16
 8001230:	b2db      	uxtb	r3, r3
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sMasterRegs.MCR) + REG_OFFSET_TAB_TIMER[iTimer]));
 8001232:	4a53      	ldr	r2, [pc, #332]	; (8001380 <MX_HRTIM1_Init+0x344>)
 8001234:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
  CLEAR_BIT(*pReg, HRTIM_MCR_HALF);
 8001238:	5911      	ldr	r1, [r2, r4]
 800123a:	f021 0120 	bic.w	r1, r1, #32
 800123e:	5111      	str	r1, [r2, r4]
  CLEAR_BIT(*pReg, HRTIM_MCR_INTLVD << REG_SHIFT_TAB_INTLVD[iTimer]);
 8001240:	5911      	ldr	r1, [r2, r4]
 8001242:	4853      	ldr	r0, [pc, #332]	; (8001390 <MX_HRTIM1_Init+0x354>)
 8001244:	5cc0      	ldrb	r0, [r0, r3]
 8001246:	23c0      	movs	r3, #192	; 0xc0
 8001248:	4083      	lsls	r3, r0
 800124a:	ea21 0303 	bic.w	r3, r1, r3
 800124e:	5113      	str	r3, [r2, r4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001250:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001254:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8001258:	2b00      	cmp	r3, #0
 800125a:	f000 8571 	beq.w	8001d40 <MX_HRTIM1_Init+0xd04>
  return __builtin_clz(value);
 800125e:	fab3 f383 	clz	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_MCEN_Pos);
 8001262:	3b10      	subs	r3, #16
 8001264:	b2db      	uxtb	r3, r3
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sMasterRegs.MCR) + REG_OFFSET_TAB_TIMER[iTimer]));
 8001266:	4a46      	ldr	r2, [pc, #280]	; (8001380 <MX_HRTIM1_Init+0x344>)
 8001268:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
  MODIFY_REG(*pReg, REG_MASK_TAB_INTLVD[iTimer],
 800126c:	590a      	ldr	r2, [r1, r4]
 800126e:	4849      	ldr	r0, [pc, #292]	; (8001394 <MX_HRTIM1_Init+0x358>)
 8001270:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001274:	ea22 0303 	bic.w	r3, r2, r3
 8001278:	510b      	str	r3, [r1, r4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800127a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800127e:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8001282:	2b00      	cmp	r3, #0
 8001284:	f000 855f 	beq.w	8001d46 <MX_HRTIM1_Init+0xd0a>
  return __builtin_clz(value);
 8001288:	fab3 f383 	clz	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_MCEN_Pos);
 800128c:	3b10      	subs	r3, #16
 800128e:	b2db      	uxtb	r3, r3
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sMasterRegs.MCR) + REG_OFFSET_TAB_TIMER[iTimer]));
 8001290:	4a3b      	ldr	r2, [pc, #236]	; (8001380 <MX_HRTIM1_Init+0x344>)
 8001292:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
  CLEAR_BIT(*pReg, HRTIM_MCR_SYNCSTRTM);
 8001296:	5913      	ldr	r3, [r2, r4]
 8001298:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800129c:	5113      	str	r3, [r2, r4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800129e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80012a2:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	f000 8550 	beq.w	8001d4c <MX_HRTIM1_Init+0xd10>
  return __builtin_clz(value);
 80012ac:	fab3 f383 	clz	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_MCEN_Pos);
 80012b0:	3b10      	subs	r3, #16
 80012b2:	b2db      	uxtb	r3, r3
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sMasterRegs.MCR) + REG_OFFSET_TAB_TIMER[iTimer]));
 80012b4:	4a32      	ldr	r2, [pc, #200]	; (8001380 <MX_HRTIM1_Init+0x344>)
 80012b6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
  CLEAR_BIT(*pReg, HRTIM_MCR_SYNCRSTM);
 80012ba:	5913      	ldr	r3, [r2, r4]
 80012bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80012c0:	5113      	str	r3, [r2, r4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012c2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80012c6:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	f000 8541 	beq.w	8001d52 <MX_HRTIM1_Init+0xd16>
  return __builtin_clz(value);
 80012d0:	fab3 f383 	clz	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_MCEN_Pos);
 80012d4:	3b10      	subs	r3, #16
 80012d6:	b2db      	uxtb	r3, r3
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sMasterRegs.MCR) + REG_OFFSET_TAB_TIMER[iTimer]));
 80012d8:	4a29      	ldr	r2, [pc, #164]	; (8001380 <MX_HRTIM1_Init+0x344>)
 80012da:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
  SET_BIT(*pReg, HRTIM_MCR_PREEN);
 80012de:	5913      	ldr	r3, [r2, r4]
 80012e0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80012e4:	5113      	str	r3, [r2, r4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012e6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80012ea:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	f000 8532 	beq.w	8001d58 <MX_HRTIM1_Init+0xd1c>
  return __builtin_clz(value);
 80012f4:	fab3 f383 	clz	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_TACEN_Pos);
 80012f8:	3b11      	subs	r3, #17
 80012fa:	b2db      	uxtb	r3, r3
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sTimerxRegs[0].TIMxCR) +
 80012fc:	4f26      	ldr	r7, [pc, #152]	; (8001398 <MX_HRTIM1_Init+0x35c>)
                                                              REG_OFFSET_TAB_TIMER[iTimer]));
 80012fe:	4a20      	ldr	r2, [pc, #128]	; (8001380 <MX_HRTIM1_Init+0x344>)
 8001300:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
  CLEAR_BIT(*pReg, HRTIM_TIMCR_RSYNCU);
 8001304:	58bb      	ldr	r3, [r7, r2]
 8001306:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800130a:	50bb      	str	r3, [r7, r2]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800130c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001310:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8001314:	2b00      	cmp	r3, #0
 8001316:	f000 8522 	beq.w	8001d5e <MX_HRTIM1_Init+0xd22>
  return __builtin_clz(value);
 800131a:	fab3 f383 	clz	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_MCEN_Pos);
 800131e:	3b10      	subs	r3, #16
 8001320:	b2db      	uxtb	r3, r3
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sMasterRegs.MCR) + REG_OFFSET_TAB_TIMER[iTimer]));
 8001322:	4a17      	ldr	r2, [pc, #92]	; (8001380 <MX_HRTIM1_Init+0x344>)
 8001324:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
  MODIFY_REG(*pReg, REG_MASK_TAB_UPDATETRIG[iTimer], UpdateTrig << REG_SHIFT_TAB_UPDATETRIG[iTimer]);
 8001328:	590a      	ldr	r2, [r1, r4]
 800132a:	481c      	ldr	r0, [pc, #112]	; (800139c <MX_HRTIM1_Init+0x360>)
 800132c:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8001330:	ea22 0200 	bic.w	r2, r2, r0
 8001334:	481a      	ldr	r0, [pc, #104]	; (80013a0 <MX_HRTIM1_Init+0x364>)
 8001336:	5cc0      	ldrb	r0, [r0, r3]
 8001338:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800133c:	4083      	lsls	r3, r0
 800133e:	4313      	orrs	r3, r2
 8001340:	510b      	str	r3, [r1, r4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001342:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001346:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 800134a:	2b00      	cmp	r3, #0
 800134c:	f000 850a 	beq.w	8001d64 <MX_HRTIM1_Init+0xd28>
  return __builtin_clz(value);
 8001350:	fab3 f383 	clz	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_TACEN_Pos);
 8001354:	3b11      	subs	r3, #17
 8001356:	b2db      	uxtb	r3, r3
                                                              REG_OFFSET_TAB_TIMER[iTimer]));
 8001358:	4a09      	ldr	r2, [pc, #36]	; (8001380 <MX_HRTIM1_Init+0x344>)
 800135a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
  WRITE_REG(*pReg, ResetTrig);
 800135e:	2200      	movs	r2, #0
 8001360:	4910      	ldr	r1, [pc, #64]	; (80013a4 <MX_HRTIM1_Init+0x368>)
 8001362:	50ca      	str	r2, [r1, r3]
 8001364:	e022      	b.n	80013ac <MX_HRTIM1_Init+0x370>
 8001366:	bf00      	nop
 8001368:	40021000 	.word	0x40021000
 800136c:	e000ed00 	.word	0xe000ed00
 8001370:	e000e100 	.word	0xe000e100
 8001374:	40016800 	.word	0x40016800
 8001378:	40016b80 	.word	0x40016b80
 800137c:	40016bbc 	.word	0x40016bbc
 8001380:	080082cc 	.word	0x080082cc
 8001384:	40016818 	.word	0x40016818
 8001388:	08008260 	.word	0x08008260
 800138c:	400168ec 	.word	0x400168ec
 8001390:	080082dc 	.word	0x080082dc
 8001394:	08008244 	.word	0x08008244
 8001398:	40016880 	.word	0x40016880
 800139c:	0800827c 	.word	0x0800827c
 80013a0:	080082f0 	.word	0x080082f0
 80013a4:	400168d4 	.word	0x400168d4
 80013a8:	40016814 	.word	0x40016814
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013ac:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80013b0:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	f000 84d8 	beq.w	8001d6a <MX_HRTIM1_Init+0xd2e>
  return __builtin_clz(value);
 80013ba:	fab3 f383 	clz	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_TACEN_Pos);
 80013be:	3b11      	subs	r3, #17
 80013c0:	b2db      	uxtb	r3, r3
                                                              REG_OFFSET_TAB_TIMER[iTimer]));
 80013c2:	4ad3      	ldr	r2, [pc, #844]	; (8001710 <MX_HRTIM1_Init+0x6d4>)
 80013c4:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
  CLEAR_BIT(*pReg, HRTIM_TIMCR_PSHPLL);
 80013c8:	59d3      	ldr	r3, [r2, r7]
 80013ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80013ce:	51d3      	str	r3, [r2, r7]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013d0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80013d4:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 80013d8:	2b00      	cmp	r3, #0
 80013da:	f000 84c9 	beq.w	8001d70 <MX_HRTIM1_Init+0xd34>
  return __builtin_clz(value);
 80013de:	fab3 f383 	clz	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_TACEN_Pos);
 80013e2:	3b11      	subs	r3, #17
 80013e4:	b2db      	uxtb	r3, r3
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sTimerxRegs[0].OUTxR) +
 80013e6:	f8df 8344 	ldr.w	r8, [pc, #836]	; 800172c <MX_HRTIM1_Init+0x6f0>
                                                              REG_OFFSET_TAB_TIMER[iTimer]));
 80013ea:	4ac9      	ldr	r2, [pc, #804]	; (8001710 <MX_HRTIM1_Init+0x6d4>)
 80013ec:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
  SET_BIT(*pReg, HRTIM_OUTR_DTEN);
 80013f0:	f858 3002 	ldr.w	r3, [r8, r2]
 80013f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013f8:	f848 3002 	str.w	r3, [r8, r2]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013fc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001400:	fa93 f2a3 	rbit	r2, r3
  MODIFY_REG(HRTIMx->sCommonRegs.BMCR, Timer, BurtsModeOption << iTimer);
 8001404:	4ac3      	ldr	r2, [pc, #780]	; (8001714 <MX_HRTIM1_Init+0x6d8>)
 8001406:	f8d2 13a0 	ldr.w	r1, [r2, #928]	; 0x3a0
 800140a:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
 800140e:	f8c2 13a0 	str.w	r1, [r2, #928]	; 0x3a0
  SET_BIT(HRTIMx->sCommonRegs.CR2, ((Timers >> HRTIM_MCR_MCEN_Pos) & HRTIM_CR2_SWUPD_MASK));
 8001412:	f8d2 1384 	ldr.w	r1, [r2, #900]	; 0x384
 8001416:	f041 0120 	orr.w	r1, r1, #32
 800141a:	f8c2 1384 	str.w	r1, [r2, #900]	; 0x384
 800141e:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8001422:	2b00      	cmp	r3, #0
 8001424:	f000 84a7 	beq.w	8001d76 <MX_HRTIM1_Init+0xd3a>
  return __builtin_clz(value);
 8001428:	fab3 f383 	clz	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_MCEN_Pos);
 800142c:	3b10      	subs	r3, #16
 800142e:	b2db      	uxtb	r3, r3
                                                              REG_OFFSET_TAB_TIMER[iTimer]));
 8001430:	4ab7      	ldr	r2, [pc, #732]	; (8001710 <MX_HRTIM1_Init+0x6d4>)
 8001432:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
  MODIFY_REG(* pReg, HRTIM_MCMP1R_MCMP1R, CompareValue);
 8001436:	49b8      	ldr	r1, [pc, #736]	; (8001718 <MX_HRTIM1_Init+0x6dc>)
 8001438:	588b      	ldr	r3, [r1, r2]
 800143a:	0c1b      	lsrs	r3, r3, #16
 800143c:	041b      	lsls	r3, r3, #16
 800143e:	f443 532a 	orr.w	r3, r3, #10880	; 0x2a80
 8001442:	508b      	str	r3, [r1, r2]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001444:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001448:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 800144c:	2b00      	cmp	r3, #0
 800144e:	f000 8495 	beq.w	8001d7c <MX_HRTIM1_Init+0xd40>
  return __builtin_clz(value);
 8001452:	fab3 f383 	clz	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_TACEN_Pos);
 8001456:	3b11      	subs	r3, #17
 8001458:	b2db      	uxtb	r3, r3
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sTimerxRegs[0].DTxR) +
 800145a:	4db0      	ldr	r5, [pc, #704]	; (800171c <MX_HRTIM1_Init+0x6e0>)
                                                              REG_OFFSET_TAB_TIMER[iTimer]));
 800145c:	4aac      	ldr	r2, [pc, #688]	; (8001710 <MX_HRTIM1_Init+0x6d4>)
 800145e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
  MODIFY_REG(*pReg, HRTIM_DTR_DTPRSC, Prescaler);
 8001462:	58ab      	ldr	r3, [r5, r2]
 8001464:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001468:	50ab      	str	r3, [r5, r2]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800146a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800146e:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8001472:	2b00      	cmp	r3, #0
 8001474:	f000 8485 	beq.w	8001d82 <MX_HRTIM1_Init+0xd46>
  return __builtin_clz(value);
 8001478:	fab3 f383 	clz	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_TACEN_Pos);
 800147c:	3b11      	subs	r3, #17
 800147e:	b2db      	uxtb	r3, r3
                                                              REG_OFFSET_TAB_TIMER[iTimer]));
 8001480:	4aa3      	ldr	r2, [pc, #652]	; (8001710 <MX_HRTIM1_Init+0x6d4>)
 8001482:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
  MODIFY_REG(*pReg, HRTIM_DTR_DTR, RisingValue);
 8001486:	5953      	ldr	r3, [r2, r5]
 8001488:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800148c:	f023 0301 	bic.w	r3, r3, #1
 8001490:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 8001494:	5153      	str	r3, [r2, r5]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001496:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800149a:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 800149e:	2b00      	cmp	r3, #0
 80014a0:	f000 8472 	beq.w	8001d88 <MX_HRTIM1_Init+0xd4c>
  return __builtin_clz(value);
 80014a4:	fab3 f383 	clz	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_TACEN_Pos);
 80014a8:	3b11      	subs	r3, #17
 80014aa:	b2db      	uxtb	r3, r3
                                                              REG_OFFSET_TAB_TIMER[iTimer]));
 80014ac:	4a98      	ldr	r2, [pc, #608]	; (8001710 <MX_HRTIM1_Init+0x6d4>)
 80014ae:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
  MODIFY_REG(*pReg, HRTIM_DTR_SDTR, RisingSign);
 80014b2:	5953      	ldr	r3, [r2, r5]
 80014b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80014b8:	5153      	str	r3, [r2, r5]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ba:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80014be:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	f000 8463 	beq.w	8001d8e <MX_HRTIM1_Init+0xd52>
  return __builtin_clz(value);
 80014c8:	fab3 f383 	clz	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_TACEN_Pos);
 80014cc:	3b11      	subs	r3, #17
 80014ce:	b2db      	uxtb	r3, r3
                                                              REG_OFFSET_TAB_TIMER[iTimer]));
 80014d0:	4a8f      	ldr	r2, [pc, #572]	; (8001710 <MX_HRTIM1_Init+0x6d4>)
 80014d2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
  MODIFY_REG(*pReg, HRTIM_DTR_DTF, FallingValue << HRTIM_DTR_DTF_Pos);
 80014d6:	5953      	ldr	r3, [r2, r5]
 80014d8:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80014dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014e0:	f443 0308 	orr.w	r3, r3, #8912896	; 0x880000
 80014e4:	5153      	str	r3, [r2, r5]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014e6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80014ea:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	f000 8450 	beq.w	8001d94 <MX_HRTIM1_Init+0xd58>
  return __builtin_clz(value);
 80014f4:	fab3 f383 	clz	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_TACEN_Pos);
 80014f8:	3b11      	subs	r3, #17
 80014fa:	b2db      	uxtb	r3, r3
                                                              REG_OFFSET_TAB_TIMER[iTimer]));
 80014fc:	4a84      	ldr	r2, [pc, #528]	; (8001710 <MX_HRTIM1_Init+0x6d4>)
 80014fe:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
  MODIFY_REG(*pReg, HRTIM_DTR_SDTF, FallingSign);
 8001502:	5953      	ldr	r3, [r2, r5]
 8001504:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8001508:	5153      	str	r3, [r2, r5]
  LL_HRTIM_OUT_SetPolarity(HRTIM1, LL_HRTIM_OUTPUT_TE1, LL_HRTIM_OUT_POSITIVE_POLARITY);
 800150a:	2200      	movs	r2, #0
 800150c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001510:	4880      	ldr	r0, [pc, #512]	; (8001714 <MX_HRTIM1_Init+0x6d8>)
 8001512:	f7ff fcd5 	bl	8000ec0 <LL_HRTIM_OUT_SetPolarity>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001516:	f44f 7380 	mov.w	r3, #256	; 0x100
 800151a:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 800151e:	2b00      	cmp	r3, #0
 8001520:	f000 843b 	beq.w	8001d9a <MX_HRTIM1_Init+0xd5e>
  return __builtin_clz(value);
 8001524:	fab3 f383 	clz	r3, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001528:	2201      	movs	r2, #1
 800152a:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 800152e:	2a00      	cmp	r2, #0
 8001530:	f000 8436 	beq.w	8001da0 <MX_HRTIM1_Init+0xd64>
  return __builtin_clz(value);
 8001534:	fab2 f282 	clz	r2, r2
  uint32_t iOutput = (uint8_t)(POSITION_VAL(Output) - POSITION_VAL(LL_HRTIM_OUTPUT_TA1));
 8001538:	1a9b      	subs	r3, r3, r2
 800153a:	b2db      	uxtb	r3, r3
                                                              REG_OFFSET_TAB_SETxR[iOutput]));
 800153c:	4a78      	ldr	r2, [pc, #480]	; (8001720 <MX_HRTIM1_Init+0x6e4>)
 800153e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
  WRITE_REG(*pReg, SetSrc);
 8001542:	2208      	movs	r2, #8
 8001544:	4977      	ldr	r1, [pc, #476]	; (8001724 <MX_HRTIM1_Init+0x6e8>)
 8001546:	50ca      	str	r2, [r1, r3]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001548:	f44f 7380 	mov.w	r3, #256	; 0x100
 800154c:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8001550:	2b00      	cmp	r3, #0
 8001552:	f000 8428 	beq.w	8001da6 <MX_HRTIM1_Init+0xd6a>
  return __builtin_clz(value);
 8001556:	fab3 f383 	clz	r3, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800155a:	2201      	movs	r2, #1
 800155c:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8001560:	2a00      	cmp	r2, #0
 8001562:	f000 8423 	beq.w	8001dac <MX_HRTIM1_Init+0xd70>
  return __builtin_clz(value);
 8001566:	fab2 f282 	clz	r2, r2
  uint32_t iOutput = (uint8_t)(POSITION_VAL(Output) - POSITION_VAL(LL_HRTIM_OUTPUT_TA1));
 800156a:	1a9b      	subs	r3, r3, r2
 800156c:	b2db      	uxtb	r3, r3
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sTimerxRegs[0].RSTx1R) +
 800156e:	f8df b1c0 	ldr.w	fp, [pc, #448]	; 8001730 <MX_HRTIM1_Init+0x6f4>
                                                              REG_OFFSET_TAB_SETxR[iOutput]));
 8001572:	4a6b      	ldr	r2, [pc, #428]	; (8001720 <MX_HRTIM1_Init+0x6e4>)
 8001574:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
  WRITE_REG(*pReg, ResetSrc);
 8001578:	2204      	movs	r2, #4
 800157a:	f84b 2003 	str.w	r2, [fp, r3]
  LL_HRTIM_OUT_SetIdleMode(HRTIM1, LL_HRTIM_OUTPUT_TE1, LL_HRTIM_OUT_NO_IDLE);
 800157e:	f8df 9194 	ldr.w	r9, [pc, #404]	; 8001714 <MX_HRTIM1_Init+0x6d8>
 8001582:	2200      	movs	r2, #0
 8001584:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001588:	4648      	mov	r0, r9
 800158a:	f7ff fcbf 	bl	8000f0c <LL_HRTIM_OUT_SetIdleMode>
  LL_HRTIM_OUT_SetIdleLevel(HRTIM1, LL_HRTIM_OUTPUT_TE1, LL_HRTIM_OUT_IDLELEVEL_INACTIVE);
 800158e:	2200      	movs	r2, #0
 8001590:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001594:	4648      	mov	r0, r9
 8001596:	f7ff fcdf 	bl	8000f58 <LL_HRTIM_OUT_SetIdleLevel>
  LL_HRTIM_OUT_SetFaultState(HRTIM1, LL_HRTIM_OUTPUT_TE1, LL_HRTIM_OUT_FAULTSTATE_NO_ACTION);
 800159a:	2200      	movs	r2, #0
 800159c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015a0:	4648      	mov	r0, r9
 80015a2:	f7ff fcff 	bl	8000fa4 <LL_HRTIM_OUT_SetFaultState>
  LL_HRTIM_OUT_SetChopperMode(HRTIM1, LL_HRTIM_OUTPUT_TE1, LL_HRTIM_OUT_CHOPPERMODE_DISABLED);
 80015a6:	2200      	movs	r2, #0
 80015a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015ac:	4648      	mov	r0, r9
 80015ae:	f7ff fd1f 	bl	8000ff0 <LL_HRTIM_OUT_SetChopperMode>
  LL_HRTIM_OUT_SetPolarity(HRTIM1, LL_HRTIM_OUTPUT_TE2, LL_HRTIM_OUT_POSITIVE_POLARITY);
 80015b2:	2200      	movs	r2, #0
 80015b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015b8:	4648      	mov	r0, r9
 80015ba:	f7ff fc81 	bl	8000ec0 <LL_HRTIM_OUT_SetPolarity>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015c2:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	f000 83f3 	beq.w	8001db2 <MX_HRTIM1_Init+0xd76>
  return __builtin_clz(value);
 80015cc:	fab3 f383 	clz	r3, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015d0:	2201      	movs	r2, #1
 80015d2:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 80015d6:	2a00      	cmp	r2, #0
 80015d8:	f000 83ed 	beq.w	8001db6 <MX_HRTIM1_Init+0xd7a>
  return __builtin_clz(value);
 80015dc:	fab2 f282 	clz	r2, r2
  uint32_t iOutput = (uint8_t)(POSITION_VAL(Output) - POSITION_VAL(LL_HRTIM_OUTPUT_TA1));
 80015e0:	1a9b      	subs	r3, r3, r2
 80015e2:	b2db      	uxtb	r3, r3
                                                              REG_OFFSET_TAB_SETxR[iOutput]));
 80015e4:	4a4e      	ldr	r2, [pc, #312]	; (8001720 <MX_HRTIM1_Init+0x6e4>)
 80015e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
  WRITE_REG(*pReg, SetSrc);
 80015ea:	2200      	movs	r2, #0
 80015ec:	494d      	ldr	r1, [pc, #308]	; (8001724 <MX_HRTIM1_Init+0x6e8>)
 80015ee:	505a      	str	r2, [r3, r1]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015f4:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	f000 83de 	beq.w	8001dba <MX_HRTIM1_Init+0xd7e>
  return __builtin_clz(value);
 80015fe:	fab3 f383 	clz	r3, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001602:	2201      	movs	r2, #1
 8001604:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8001608:	2a00      	cmp	r2, #0
 800160a:	f000 83d8 	beq.w	8001dbe <MX_HRTIM1_Init+0xd82>
  return __builtin_clz(value);
 800160e:	fab2 f282 	clz	r2, r2
  uint32_t iOutput = (uint8_t)(POSITION_VAL(Output) - POSITION_VAL(LL_HRTIM_OUTPUT_TA1));
 8001612:	1a9b      	subs	r3, r3, r2
 8001614:	b2db      	uxtb	r3, r3
                                                              REG_OFFSET_TAB_SETxR[iOutput]));
 8001616:	4a42      	ldr	r2, [pc, #264]	; (8001720 <MX_HRTIM1_Init+0x6e4>)
 8001618:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
  WRITE_REG(*pReg, ResetSrc);
 800161c:	f04f 0900 	mov.w	r9, #0
 8001620:	f843 900b 	str.w	r9, [r3, fp]
  LL_HRTIM_OUT_SetIdleMode(HRTIM1, LL_HRTIM_OUTPUT_TE2, LL_HRTIM_OUT_NO_IDLE);
 8001624:	464a      	mov	r2, r9
 8001626:	f44f 7100 	mov.w	r1, #512	; 0x200
 800162a:	483a      	ldr	r0, [pc, #232]	; (8001714 <MX_HRTIM1_Init+0x6d8>)
 800162c:	f7ff fc6e 	bl	8000f0c <LL_HRTIM_OUT_SetIdleMode>
  LL_HRTIM_OUT_SetIdleLevel(HRTIM1, LL_HRTIM_OUTPUT_TE2, LL_HRTIM_OUT_IDLELEVEL_INACTIVE);
 8001630:	464a      	mov	r2, r9
 8001632:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001636:	4837      	ldr	r0, [pc, #220]	; (8001714 <MX_HRTIM1_Init+0x6d8>)
 8001638:	f7ff fc8e 	bl	8000f58 <LL_HRTIM_OUT_SetIdleLevel>
  LL_HRTIM_OUT_SetFaultState(HRTIM1, LL_HRTIM_OUTPUT_TE2, LL_HRTIM_OUT_FAULTSTATE_NO_ACTION);
 800163c:	464a      	mov	r2, r9
 800163e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001642:	4834      	ldr	r0, [pc, #208]	; (8001714 <MX_HRTIM1_Init+0x6d8>)
 8001644:	f7ff fcae 	bl	8000fa4 <LL_HRTIM_OUT_SetFaultState>
  LL_HRTIM_OUT_SetChopperMode(HRTIM1, LL_HRTIM_OUTPUT_TE2, LL_HRTIM_OUT_CHOPPERMODE_DISABLED);
 8001648:	464a      	mov	r2, r9
 800164a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800164e:	4831      	ldr	r0, [pc, #196]	; (8001714 <MX_HRTIM1_Init+0x6d8>)
 8001650:	f7ff fcce 	bl	8000ff0 <LL_HRTIM_OUT_SetChopperMode>
  return ((READ_BIT(HRTIMx->sCommonRegs.ISR, HRTIM_ISR_DLLRDY) == (HRTIM_ISR_DLLRDY)) ? 1UL : 0UL);
 8001654:	4b2f      	ldr	r3, [pc, #188]	; (8001714 <MX_HRTIM1_Init+0x6d8>)
 8001656:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 800165a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800165e:	d0f9      	beq.n	8001654 <MX_HRTIM1_Init+0x618>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001660:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001664:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8001668:	2b00      	cmp	r3, #0
 800166a:	f000 83aa 	beq.w	8001dc2 <MX_HRTIM1_Init+0xd86>
  return __builtin_clz(value);
 800166e:	fab3 f383 	clz	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_MCEN_Pos);
 8001672:	3b10      	subs	r3, #16
 8001674:	b2db      	uxtb	r3, r3
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sMasterRegs.MCR) + REG_OFFSET_TAB_TIMER[iTimer]));
 8001676:	4a26      	ldr	r2, [pc, #152]	; (8001710 <MX_HRTIM1_Init+0x6d4>)
 8001678:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
  MODIFY_REG(*pReg, HRTIM_MCR_CK_PSC, Prescaler);
 800167c:	58a3      	ldr	r3, [r4, r2]
 800167e:	f023 0307 	bic.w	r3, r3, #7
 8001682:	50a3      	str	r3, [r4, r2]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001684:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001688:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 800168c:	2b00      	cmp	r3, #0
 800168e:	f000 839a 	beq.w	8001dc6 <MX_HRTIM1_Init+0xd8a>
  return __builtin_clz(value);
 8001692:	fab3 f383 	clz	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_MCEN_Pos);
 8001696:	3b10      	subs	r3, #16
 8001698:	b2db      	uxtb	r3, r3
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sMasterRegs.MCR) + REG_OFFSET_TAB_TIMER[iTimer]));
 800169a:	4a1d      	ldr	r2, [pc, #116]	; (8001710 <MX_HRTIM1_Init+0x6d4>)
 800169c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
  MODIFY_REG(*pReg, (HRTIM_TIMCR_RETRIG | HRTIM_MCR_CONT), Mode);
 80016a0:	58a3      	ldr	r3, [r4, r2]
 80016a2:	f023 0318 	bic.w	r3, r3, #24
 80016a6:	f043 0308 	orr.w	r3, r3, #8
 80016aa:	50a3      	str	r3, [r4, r2]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ac:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80016b0:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	f000 8388 	beq.w	8001dca <MX_HRTIM1_Init+0xd8e>
  return __builtin_clz(value);
 80016ba:	fab3 f383 	clz	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_MCEN_Pos);
 80016be:	3b10      	subs	r3, #16
 80016c0:	b2db      	uxtb	r3, r3
                                                              REG_OFFSET_TAB_TIMER[iTimer]));
 80016c2:	4a13      	ldr	r2, [pc, #76]	; (8001710 <MX_HRTIM1_Init+0x6d4>)
 80016c4:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
  MODIFY_REG(* pReg, HRTIM_MPER_MPER, Period);
 80016c8:	f85a 3002 	ldr.w	r3, [sl, r2]
 80016cc:	0c1b      	lsrs	r3, r3, #16
 80016ce:	041b      	lsls	r3, r3, #16
 80016d0:	f443 43aa 	orr.w	r3, r3, #21760	; 0x5500
 80016d4:	f84a 3002 	str.w	r3, [sl, r2]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016d8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80016dc:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	f000 8374 	beq.w	8001dce <MX_HRTIM1_Init+0xd92>
  return __builtin_clz(value);
 80016e6:	fab3 f383 	clz	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_MCEN_Pos);
 80016ea:	3b10      	subs	r3, #16
 80016ec:	b2db      	uxtb	r3, r3
                                                              REG_OFFSET_TAB_TIMER[iTimer]));
 80016ee:	4a08      	ldr	r2, [pc, #32]	; (8001710 <MX_HRTIM1_Init+0x6d4>)
 80016f0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
  MODIFY_REG(* pReg, HRTIM_MREP_MREP, Repetition);
 80016f4:	490c      	ldr	r1, [pc, #48]	; (8001728 <MX_HRTIM1_Init+0x6ec>)
 80016f6:	588b      	ldr	r3, [r1, r2]
 80016f8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80016fc:	508b      	str	r3, [r1, r2]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001702:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8001706:	2b00      	cmp	r3, #0
 8001708:	f000 8363 	beq.w	8001dd2 <MX_HRTIM1_Init+0xd96>
 800170c:	e012      	b.n	8001734 <MX_HRTIM1_Init+0x6f8>
 800170e:	bf00      	nop
 8001710:	080082cc 	.word	0x080082cc
 8001714:	40016800 	.word	0x40016800
 8001718:	4001681c 	.word	0x4001681c
 800171c:	400168b8 	.word	0x400168b8
 8001720:	080082b4 	.word	0x080082b4
 8001724:	400168bc 	.word	0x400168bc
 8001728:	40016818 	.word	0x40016818
 800172c:	400168e4 	.word	0x400168e4
 8001730:	400168c0 	.word	0x400168c0
  return __builtin_clz(value);
 8001734:	fab3 f383 	clz	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_MCEN_Pos);
 8001738:	3b10      	subs	r3, #16
 800173a:	b2db      	uxtb	r3, r3
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sMasterRegs.MCR) + REG_OFFSET_TAB_TIMER[iTimer]));
 800173c:	4aca      	ldr	r2, [pc, #808]	; (8001a68 <MX_HRTIM1_Init+0xa2c>)
 800173e:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
  MODIFY_REG(*pReg, REG_MASK_TAB_UPDATEGATING[iTimer], (UpdateGating << REG_SHIFT_TAB_UPDATEGATING[iTimer]));
 8001742:	5862      	ldr	r2, [r4, r1]
 8001744:	48c9      	ldr	r0, [pc, #804]	; (8001a6c <MX_HRTIM1_Init+0xa30>)
 8001746:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800174a:	ea22 0303 	bic.w	r3, r2, r3
 800174e:	5063      	str	r3, [r4, r1]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001750:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001754:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8001758:	2b00      	cmp	r3, #0
 800175a:	f000 833c 	beq.w	8001dd6 <MX_HRTIM1_Init+0xd9a>
  return __builtin_clz(value);
 800175e:	fab3 f383 	clz	r3, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001762:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001766:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 800176a:	2a00      	cmp	r2, #0
 800176c:	f000 8335 	beq.w	8001dda <MX_HRTIM1_Init+0xd9e>
  return __builtin_clz(value);
 8001770:	fab2 f282 	clz	r2, r2
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - POSITION_VAL(LL_HRTIM_TIMER_A));
 8001774:	1a9b      	subs	r3, r3, r2
 8001776:	b2db      	uxtb	r3, r3
                                                              REG_OFFSET_TAB_TIMER[iTimer]));
 8001778:	4abb      	ldr	r2, [pc, #748]	; (8001a68 <MX_HRTIM1_Init+0xa2c>)
 800177a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
  MODIFY_REG(* pReg, HRTIM_TIMCR2_UDM, Mode);
 800177e:	58b3      	ldr	r3, [r6, r2]
 8001780:	f023 0310 	bic.w	r3, r3, #16
 8001784:	50b3      	str	r3, [r6, r2]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001786:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800178a:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 800178e:	2b00      	cmp	r3, #0
 8001790:	f000 8325 	beq.w	8001dde <MX_HRTIM1_Init+0xda2>
  return __builtin_clz(value);
 8001794:	fab3 f383 	clz	r3, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001798:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800179c:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 80017a0:	2a00      	cmp	r2, #0
 80017a2:	f000 831e 	beq.w	8001de2 <MX_HRTIM1_Init+0xda6>
  return __builtin_clz(value);
 80017a6:	fab2 f282 	clz	r2, r2
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - POSITION_VAL(LL_HRTIM_TIMER_A));
 80017aa:	1a9b      	subs	r3, r3, r2
 80017ac:	b2db      	uxtb	r3, r3
                                                              REG_OFFSET_TAB_TIMER[iTimer]));
 80017ae:	4aae      	ldr	r2, [pc, #696]	; (8001a68 <MX_HRTIM1_Init+0xa2c>)
 80017b0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
  MODIFY_REG(* pReg, HRTIM_TIMCR2_GTCMP1, Mode);
 80017b4:	58b3      	ldr	r3, [r6, r2]
 80017b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017ba:	50b3      	str	r3, [r6, r2]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017bc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017c0:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	f000 830e 	beq.w	8001de6 <MX_HRTIM1_Init+0xdaa>
  return __builtin_clz(value);
 80017ca:	fab3 f383 	clz	r3, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80017d2:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 80017d6:	2a00      	cmp	r2, #0
 80017d8:	f000 8307 	beq.w	8001dea <MX_HRTIM1_Init+0xdae>
  return __builtin_clz(value);
 80017dc:	fab2 f282 	clz	r2, r2
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - POSITION_VAL(LL_HRTIM_TIMER_A));
 80017e0:	1a9b      	subs	r3, r3, r2
 80017e2:	b2db      	uxtb	r3, r3
                                                              REG_OFFSET_TAB_TIMER[iTimer]));
 80017e4:	4aa0      	ldr	r2, [pc, #640]	; (8001a68 <MX_HRTIM1_Init+0xa2c>)
 80017e6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
  MODIFY_REG(* pReg, HRTIM_TIMCR2_GTCMP3, (Mode));
 80017ea:	58b3      	ldr	r3, [r6, r2]
 80017ec:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80017f0:	50b3      	str	r3, [r6, r2]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017f6:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	f000 8304 	beq.w	8001e08 <MX_HRTIM1_Init+0xdcc>
  return __builtin_clz(value);
 8001800:	fab3 f383 	clz	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_MCEN_Pos);
 8001804:	3b10      	subs	r3, #16
 8001806:	b2db      	uxtb	r3, r3
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sMasterRegs.MCR) + REG_OFFSET_TAB_TIMER[iTimer]));
 8001808:	4a97      	ldr	r2, [pc, #604]	; (8001a68 <MX_HRTIM1_Init+0xa2c>)
 800180a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
  MODIFY_REG(*pReg, HRTIM_MCR_DACSYNC, DACTrig);
 800180e:	58a3      	ldr	r3, [r4, r2]
 8001810:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8001814:	50a3      	str	r3, [r4, r2]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001816:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800181a:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 800181e:	2b00      	cmp	r3, #0
 8001820:	f000 82f4 	beq.w	8001e0c <MX_HRTIM1_Init+0xdd0>
  return __builtin_clz(value);
 8001824:	fab3 f383 	clz	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_MCEN_Pos);
 8001828:	3b10      	subs	r3, #16
 800182a:	b2db      	uxtb	r3, r3
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sMasterRegs.MCR) + REG_OFFSET_TAB_TIMER[iTimer]));
 800182c:	4a8e      	ldr	r2, [pc, #568]	; (8001a68 <MX_HRTIM1_Init+0xa2c>)
 800182e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
  CLEAR_BIT(*pReg, HRTIM_MCR_HALF);
 8001832:	58a1      	ldr	r1, [r4, r2]
 8001834:	f021 0120 	bic.w	r1, r1, #32
 8001838:	50a1      	str	r1, [r4, r2]
  CLEAR_BIT(*pReg, HRTIM_MCR_INTLVD << REG_SHIFT_TAB_INTLVD[iTimer]);
 800183a:	58a1      	ldr	r1, [r4, r2]
 800183c:	488c      	ldr	r0, [pc, #560]	; (8001a70 <MX_HRTIM1_Init+0xa34>)
 800183e:	5cc0      	ldrb	r0, [r0, r3]
 8001840:	23c0      	movs	r3, #192	; 0xc0
 8001842:	4083      	lsls	r3, r0
 8001844:	ea21 0303 	bic.w	r3, r1, r3
 8001848:	50a3      	str	r3, [r4, r2]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800184a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800184e:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8001852:	2b00      	cmp	r3, #0
 8001854:	f000 82dc 	beq.w	8001e10 <MX_HRTIM1_Init+0xdd4>
  return __builtin_clz(value);
 8001858:	fab3 f383 	clz	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_MCEN_Pos);
 800185c:	3b10      	subs	r3, #16
 800185e:	b2db      	uxtb	r3, r3
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sMasterRegs.MCR) + REG_OFFSET_TAB_TIMER[iTimer]));
 8001860:	4a81      	ldr	r2, [pc, #516]	; (8001a68 <MX_HRTIM1_Init+0xa2c>)
 8001862:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
  MODIFY_REG(*pReg, REG_MASK_TAB_INTLVD[iTimer],
 8001866:	5862      	ldr	r2, [r4, r1]
 8001868:	4882      	ldr	r0, [pc, #520]	; (8001a74 <MX_HRTIM1_Init+0xa38>)
 800186a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800186e:	ea22 0303 	bic.w	r3, r2, r3
 8001872:	5063      	str	r3, [r4, r1]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001874:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001878:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 800187c:	2b00      	cmp	r3, #0
 800187e:	f000 82c9 	beq.w	8001e14 <MX_HRTIM1_Init+0xdd8>
  return __builtin_clz(value);
 8001882:	fab3 f383 	clz	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_MCEN_Pos);
 8001886:	3b10      	subs	r3, #16
 8001888:	b2db      	uxtb	r3, r3
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sMasterRegs.MCR) + REG_OFFSET_TAB_TIMER[iTimer]));
 800188a:	4a77      	ldr	r2, [pc, #476]	; (8001a68 <MX_HRTIM1_Init+0xa2c>)
 800188c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
  CLEAR_BIT(*pReg, HRTIM_MCR_SYNCSTRTM);
 8001890:	58a3      	ldr	r3, [r4, r2]
 8001892:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001896:	50a3      	str	r3, [r4, r2]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001898:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800189c:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	f000 82b9 	beq.w	8001e18 <MX_HRTIM1_Init+0xddc>
  return __builtin_clz(value);
 80018a6:	fab3 f383 	clz	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_MCEN_Pos);
 80018aa:	3b10      	subs	r3, #16
 80018ac:	b2db      	uxtb	r3, r3
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sMasterRegs.MCR) + REG_OFFSET_TAB_TIMER[iTimer]));
 80018ae:	4a6e      	ldr	r2, [pc, #440]	; (8001a68 <MX_HRTIM1_Init+0xa2c>)
 80018b0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
  CLEAR_BIT(*pReg, HRTIM_MCR_SYNCRSTM);
 80018b4:	58a3      	ldr	r3, [r4, r2]
 80018b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80018ba:	50a3      	str	r3, [r4, r2]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018bc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80018c0:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	f000 82a9 	beq.w	8001e1c <MX_HRTIM1_Init+0xde0>
  return __builtin_clz(value);
 80018ca:	fab3 f383 	clz	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_MCEN_Pos);
 80018ce:	3b10      	subs	r3, #16
 80018d0:	b2db      	uxtb	r3, r3
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sMasterRegs.MCR) + REG_OFFSET_TAB_TIMER[iTimer]));
 80018d2:	4a65      	ldr	r2, [pc, #404]	; (8001a68 <MX_HRTIM1_Init+0xa2c>)
 80018d4:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
  SET_BIT(*pReg, HRTIM_MCR_PREEN);
 80018d8:	58a3      	ldr	r3, [r4, r2]
 80018da:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80018de:	50a3      	str	r3, [r4, r2]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018e0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80018e4:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	f000 8299 	beq.w	8001e20 <MX_HRTIM1_Init+0xde4>
  return __builtin_clz(value);
 80018ee:	fab3 f383 	clz	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_TACEN_Pos);
 80018f2:	3b11      	subs	r3, #17
 80018f4:	b2db      	uxtb	r3, r3
                                                              REG_OFFSET_TAB_TIMER[iTimer]));
 80018f6:	4a5c      	ldr	r2, [pc, #368]	; (8001a68 <MX_HRTIM1_Init+0xa2c>)
 80018f8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
  CLEAR_BIT(*pReg, HRTIM_TIMCR_RSYNCU);
 80018fc:	58bb      	ldr	r3, [r7, r2]
 80018fe:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001902:	50bb      	str	r3, [r7, r2]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001904:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001908:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 800190c:	2b00      	cmp	r3, #0
 800190e:	f000 8289 	beq.w	8001e24 <MX_HRTIM1_Init+0xde8>
  return __builtin_clz(value);
 8001912:	fab3 f383 	clz	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_MCEN_Pos);
 8001916:	3b10      	subs	r3, #16
 8001918:	b2db      	uxtb	r3, r3
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sMasterRegs.MCR) + REG_OFFSET_TAB_TIMER[iTimer]));
 800191a:	4a53      	ldr	r2, [pc, #332]	; (8001a68 <MX_HRTIM1_Init+0xa2c>)
 800191c:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
  MODIFY_REG(*pReg, REG_MASK_TAB_UPDATETRIG[iTimer], UpdateTrig << REG_SHIFT_TAB_UPDATETRIG[iTimer]);
 8001920:	5862      	ldr	r2, [r4, r1]
 8001922:	4855      	ldr	r0, [pc, #340]	; (8001a78 <MX_HRTIM1_Init+0xa3c>)
 8001924:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8001928:	ea22 0200 	bic.w	r2, r2, r0
 800192c:	4853      	ldr	r0, [pc, #332]	; (8001a7c <MX_HRTIM1_Init+0xa40>)
 800192e:	5cc0      	ldrb	r0, [r0, r3]
 8001930:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001934:	4083      	lsls	r3, r0
 8001936:	4313      	orrs	r3, r2
 8001938:	5063      	str	r3, [r4, r1]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800193a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800193e:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8001942:	2b00      	cmp	r3, #0
 8001944:	f000 8270 	beq.w	8001e28 <MX_HRTIM1_Init+0xdec>
  return __builtin_clz(value);
 8001948:	fab3 f383 	clz	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_TACEN_Pos);
 800194c:	3b11      	subs	r3, #17
 800194e:	b2db      	uxtb	r3, r3
                                                              REG_OFFSET_TAB_TIMER[iTimer]));
 8001950:	4a45      	ldr	r2, [pc, #276]	; (8001a68 <MX_HRTIM1_Init+0xa2c>)
 8001952:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
  WRITE_REG(*pReg, ResetTrig);
 8001956:	2200      	movs	r2, #0
 8001958:	4949      	ldr	r1, [pc, #292]	; (8001a80 <MX_HRTIM1_Init+0xa44>)
 800195a:	50ca      	str	r2, [r1, r3]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800195c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001960:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8001964:	2b00      	cmp	r3, #0
 8001966:	f000 8261 	beq.w	8001e2c <MX_HRTIM1_Init+0xdf0>
  return __builtin_clz(value);
 800196a:	fab3 f383 	clz	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_TACEN_Pos);
 800196e:	3b11      	subs	r3, #17
 8001970:	b2db      	uxtb	r3, r3
                                                              REG_OFFSET_TAB_TIMER[iTimer]));
 8001972:	4a3d      	ldr	r2, [pc, #244]	; (8001a68 <MX_HRTIM1_Init+0xa2c>)
 8001974:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
  CLEAR_BIT(*pReg, HRTIM_TIMCR_PSHPLL);
 8001978:	58bb      	ldr	r3, [r7, r2]
 800197a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800197e:	50bb      	str	r3, [r7, r2]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001980:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001984:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8001988:	2b00      	cmp	r3, #0
 800198a:	f000 8251 	beq.w	8001e30 <MX_HRTIM1_Init+0xdf4>
  return __builtin_clz(value);
 800198e:	fab3 f383 	clz	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_TACEN_Pos);
 8001992:	3b11      	subs	r3, #17
 8001994:	b2db      	uxtb	r3, r3
                                                              REG_OFFSET_TAB_TIMER[iTimer]));
 8001996:	4a34      	ldr	r2, [pc, #208]	; (8001a68 <MX_HRTIM1_Init+0xa2c>)
 8001998:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
  SET_BIT(*pReg, HRTIM_OUTR_DTEN);
 800199c:	f858 3002 	ldr.w	r3, [r8, r2]
 80019a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019a4:	f848 3002 	str.w	r3, [r8, r2]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019a8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80019ac:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	f000 823f 	beq.w	8001e34 <MX_HRTIM1_Init+0xdf8>
  return __builtin_clz(value);
 80019b6:	fab3 f383 	clz	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_TACEN_Pos);
 80019ba:	3b11      	subs	r3, #17
 80019bc:	b2db      	uxtb	r3, r3
                                                              REG_OFFSET_TAB_TIMER[iTimer]));
 80019be:	4a2a      	ldr	r2, [pc, #168]	; (8001a68 <MX_HRTIM1_Init+0xa2c>)
 80019c0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
  SET_BIT(*pReg, HRTIM_OUTR_DLYPRTEN);
 80019c4:	f858 3002 	ldr.w	r3, [r8, r2]
 80019c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019cc:	f848 3002 	str.w	r3, [r8, r2]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019d0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80019d4:	fa93 f2a3 	rbit	r2, r3
  MODIFY_REG(HRTIMx->sCommonRegs.BMCR, Timer, BurtsModeOption << iTimer);
 80019d8:	4a2a      	ldr	r2, [pc, #168]	; (8001a84 <MX_HRTIM1_Init+0xa48>)
 80019da:	f8d2 13a0 	ldr.w	r1, [r2, #928]	; 0x3a0
 80019de:	f421 0180 	bic.w	r1, r1, #4194304	; 0x400000
 80019e2:	f8c2 13a0 	str.w	r1, [r2, #928]	; 0x3a0
  SET_BIT(HRTIMx->sCommonRegs.CR2, ((Timers >> HRTIM_MCR_MCEN_Pos) & HRTIM_CR2_SWUPD_MASK));
 80019e6:	f8d2 1384 	ldr.w	r1, [r2, #900]	; 0x384
 80019ea:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 80019ee:	f8c2 1384 	str.w	r1, [r2, #900]	; 0x384
 80019f2:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	f000 821e 	beq.w	8001e38 <MX_HRTIM1_Init+0xdfc>
  return __builtin_clz(value);
 80019fc:	fab3 f383 	clz	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_MCEN_Pos);
 8001a00:	3b10      	subs	r3, #16
 8001a02:	b2db      	uxtb	r3, r3
                                                              REG_OFFSET_TAB_TIMER[iTimer]));
 8001a04:	4a18      	ldr	r2, [pc, #96]	; (8001a68 <MX_HRTIM1_Init+0xa2c>)
 8001a06:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
  MODIFY_REG(* pReg, HRTIM_MCMP1R_MCMP1R, CompareValue);
 8001a0a:	491f      	ldr	r1, [pc, #124]	; (8001a88 <MX_HRTIM1_Init+0xa4c>)
 8001a0c:	588b      	ldr	r3, [r1, r2]
 8001a0e:	0c1b      	lsrs	r3, r3, #16
 8001a10:	041b      	lsls	r3, r3, #16
 8001a12:	f443 532a 	orr.w	r3, r3, #10880	; 0x2a80
 8001a16:	508b      	str	r3, [r1, r2]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a18:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a1c:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	f000 820b 	beq.w	8001e3c <MX_HRTIM1_Init+0xe00>
  return __builtin_clz(value);
 8001a26:	fab3 f383 	clz	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_MCEN_Pos);
 8001a2a:	3b10      	subs	r3, #16
 8001a2c:	b2db      	uxtb	r3, r3
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sMasterRegs.MCMP3R) +
 8001a2e:	4917      	ldr	r1, [pc, #92]	; (8001a8c <MX_HRTIM1_Init+0xa50>)
                                                              REG_OFFSET_TAB_TIMER[iTimer]));
 8001a30:	4a0d      	ldr	r2, [pc, #52]	; (8001a68 <MX_HRTIM1_Init+0xa2c>)
 8001a32:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
  MODIFY_REG(* pReg, HRTIM_MCMP1R_MCMP3R, CompareValue);
 8001a36:	588b      	ldr	r3, [r1, r2]
 8001a38:	0c1b      	lsrs	r3, r3, #16
 8001a3a:	041b      	lsls	r3, r3, #16
 8001a3c:	f443 539c 	orr.w	r3, r3, #4992	; 0x1380
 8001a40:	f043 0308 	orr.w	r3, r3, #8
 8001a44:	508b      	str	r3, [r1, r2]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a46:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a4a:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	f000 81f6 	beq.w	8001e40 <MX_HRTIM1_Init+0xe04>
  return __builtin_clz(value);
 8001a54:	fab3 f383 	clz	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_TACEN_Pos);
 8001a58:	3b11      	subs	r3, #17
 8001a5a:	b2db      	uxtb	r3, r3
                                                              REG_OFFSET_TAB_TIMER[iTimer]));
 8001a5c:	4a02      	ldr	r2, [pc, #8]	; (8001a68 <MX_HRTIM1_Init+0xa2c>)
 8001a5e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
  MODIFY_REG(*pReg, HRTIM_DTR_DTPRSC, Prescaler);
 8001a62:	58ab      	ldr	r3, [r5, r2]
 8001a64:	e014      	b.n	8001a90 <MX_HRTIM1_Init+0xa54>
 8001a66:	bf00      	nop
 8001a68:	080082cc 	.word	0x080082cc
 8001a6c:	08008260 	.word	0x08008260
 8001a70:	080082dc 	.word	0x080082dc
 8001a74:	08008244 	.word	0x08008244
 8001a78:	0800827c 	.word	0x0800827c
 8001a7c:	080082f0 	.word	0x080082f0
 8001a80:	400168d4 	.word	0x400168d4
 8001a84:	40016800 	.word	0x40016800
 8001a88:	4001681c 	.word	0x4001681c
 8001a8c:	40016828 	.word	0x40016828
 8001a90:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001a94:	50ab      	str	r3, [r5, r2]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a96:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a9a:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	f000 81d0 	beq.w	8001e44 <MX_HRTIM1_Init+0xe08>
  return __builtin_clz(value);
 8001aa4:	fab3 f383 	clz	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_TACEN_Pos);
 8001aa8:	3b11      	subs	r3, #17
 8001aaa:	b2db      	uxtb	r3, r3
                                                              REG_OFFSET_TAB_TIMER[iTimer]));
 8001aac:	4ad0      	ldr	r2, [pc, #832]	; (8001df0 <MX_HRTIM1_Init+0xdb4>)
 8001aae:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
  MODIFY_REG(*pReg, HRTIM_DTR_DTR, RisingValue);
 8001ab2:	58ab      	ldr	r3, [r5, r2]
 8001ab4:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8001ab8:	f023 0301 	bic.w	r3, r3, #1
 8001abc:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 8001ac0:	50ab      	str	r3, [r5, r2]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ac2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ac6:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	f000 81bc 	beq.w	8001e48 <MX_HRTIM1_Init+0xe0c>
  return __builtin_clz(value);
 8001ad0:	fab3 f383 	clz	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_TACEN_Pos);
 8001ad4:	3b11      	subs	r3, #17
 8001ad6:	b2db      	uxtb	r3, r3
                                                              REG_OFFSET_TAB_TIMER[iTimer]));
 8001ad8:	4ac5      	ldr	r2, [pc, #788]	; (8001df0 <MX_HRTIM1_Init+0xdb4>)
 8001ada:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
  MODIFY_REG(*pReg, HRTIM_DTR_SDTR, RisingSign);
 8001ade:	58ab      	ldr	r3, [r5, r2]
 8001ae0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001ae4:	50ab      	str	r3, [r5, r2]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001aea:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	f000 81ac 	beq.w	8001e4c <MX_HRTIM1_Init+0xe10>
  return __builtin_clz(value);
 8001af4:	fab3 f383 	clz	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_TACEN_Pos);
 8001af8:	3b11      	subs	r3, #17
 8001afa:	b2db      	uxtb	r3, r3
                                                              REG_OFFSET_TAB_TIMER[iTimer]));
 8001afc:	4abc      	ldr	r2, [pc, #752]	; (8001df0 <MX_HRTIM1_Init+0xdb4>)
 8001afe:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
  MODIFY_REG(*pReg, HRTIM_DTR_DTF, FallingValue << HRTIM_DTR_DTF_Pos);
 8001b02:	58ab      	ldr	r3, [r5, r2]
 8001b04:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8001b08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b0c:	f443 0308 	orr.w	r3, r3, #8912896	; 0x880000
 8001b10:	50ab      	str	r3, [r5, r2]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b12:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b16:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	f000 8198 	beq.w	8001e50 <MX_HRTIM1_Init+0xe14>
  return __builtin_clz(value);
 8001b20:	fab3 f383 	clz	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_TACEN_Pos);
 8001b24:	3b11      	subs	r3, #17
 8001b26:	b2db      	uxtb	r3, r3
                                                              REG_OFFSET_TAB_TIMER[iTimer]));
 8001b28:	4ab1      	ldr	r2, [pc, #708]	; (8001df0 <MX_HRTIM1_Init+0xdb4>)
 8001b2a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
  MODIFY_REG(*pReg, HRTIM_DTR_SDTF, FallingSign);
 8001b2e:	58ab      	ldr	r3, [r5, r2]
 8001b30:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8001b34:	50ab      	str	r3, [r5, r2]
  LL_HRTIM_OUT_SetPolarity(HRTIM1, LL_HRTIM_OUTPUT_TF1, LL_HRTIM_OUT_POSITIVE_POLARITY);
 8001b36:	2200      	movs	r2, #0
 8001b38:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b3c:	48ad      	ldr	r0, [pc, #692]	; (8001df4 <MX_HRTIM1_Init+0xdb8>)
 8001b3e:	f7ff f9bf 	bl	8000ec0 <LL_HRTIM_OUT_SetPolarity>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b46:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	f000 8182 	beq.w	8001e54 <MX_HRTIM1_Init+0xe18>
  return __builtin_clz(value);
 8001b50:	fab3 f383 	clz	r3, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b54:	2201      	movs	r2, #1
 8001b56:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8001b5a:	2a00      	cmp	r2, #0
 8001b5c:	f000 817c 	beq.w	8001e58 <MX_HRTIM1_Init+0xe1c>
  return __builtin_clz(value);
 8001b60:	fab2 f282 	clz	r2, r2
  uint32_t iOutput = (uint8_t)(POSITION_VAL(Output) - POSITION_VAL(LL_HRTIM_OUTPUT_TA1));
 8001b64:	1a9b      	subs	r3, r3, r2
 8001b66:	b2db      	uxtb	r3, r3
                                                              REG_OFFSET_TAB_SETxR[iOutput]));
 8001b68:	4aa3      	ldr	r2, [pc, #652]	; (8001df8 <MX_HRTIM1_Init+0xdbc>)
 8001b6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
  WRITE_REG(*pReg, SetSrc);
 8001b6e:	2204      	movs	r2, #4
 8001b70:	49a2      	ldr	r1, [pc, #648]	; (8001dfc <MX_HRTIM1_Init+0xdc0>)
 8001b72:	50ca      	str	r2, [r1, r3]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b78:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	f000 816d 	beq.w	8001e5c <MX_HRTIM1_Init+0xe20>
  return __builtin_clz(value);
 8001b82:	fab3 f383 	clz	r3, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b86:	2201      	movs	r2, #1
 8001b88:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8001b8c:	2a00      	cmp	r2, #0
 8001b8e:	f000 8167 	beq.w	8001e60 <MX_HRTIM1_Init+0xe24>
  return __builtin_clz(value);
 8001b92:	fab2 f282 	clz	r2, r2
  uint32_t iOutput = (uint8_t)(POSITION_VAL(Output) - POSITION_VAL(LL_HRTIM_OUTPUT_TA1));
 8001b96:	1a9b      	subs	r3, r3, r2
 8001b98:	b2db      	uxtb	r3, r3
                                                              REG_OFFSET_TAB_SETxR[iOutput]));
 8001b9a:	4a97      	ldr	r2, [pc, #604]	; (8001df8 <MX_HRTIM1_Init+0xdbc>)
 8001b9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
  WRITE_REG(*pReg, ResetSrc);
 8001ba0:	2208      	movs	r2, #8
 8001ba2:	f84b 2003 	str.w	r2, [fp, r3]
  LL_HRTIM_OUT_SetIdleMode(HRTIM1, LL_HRTIM_OUTPUT_TF1, LL_HRTIM_OUT_NO_IDLE);
 8001ba6:	4c93      	ldr	r4, [pc, #588]	; (8001df4 <MX_HRTIM1_Init+0xdb8>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001bae:	4620      	mov	r0, r4
 8001bb0:	f7ff f9ac 	bl	8000f0c <LL_HRTIM_OUT_SetIdleMode>
  LL_HRTIM_OUT_SetIdleLevel(HRTIM1, LL_HRTIM_OUTPUT_TF1, LL_HRTIM_OUT_IDLELEVEL_INACTIVE);
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001bba:	4620      	mov	r0, r4
 8001bbc:	f7ff f9cc 	bl	8000f58 <LL_HRTIM_OUT_SetIdleLevel>
  LL_HRTIM_OUT_SetFaultState(HRTIM1, LL_HRTIM_OUTPUT_TF1, LL_HRTIM_OUT_FAULTSTATE_NO_ACTION);
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001bc6:	4620      	mov	r0, r4
 8001bc8:	f7ff f9ec 	bl	8000fa4 <LL_HRTIM_OUT_SetFaultState>
  LL_HRTIM_OUT_SetChopperMode(HRTIM1, LL_HRTIM_OUTPUT_TF1, LL_HRTIM_OUT_CHOPPERMODE_DISABLED);
 8001bcc:	2200      	movs	r2, #0
 8001bce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001bd2:	4620      	mov	r0, r4
 8001bd4:	f7ff fa0c 	bl	8000ff0 <LL_HRTIM_OUT_SetChopperMode>
  LL_HRTIM_OUT_SetPolarity(HRTIM1, LL_HRTIM_OUTPUT_TF2, LL_HRTIM_OUT_POSITIVE_POLARITY);
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001bde:	4620      	mov	r0, r4
 8001be0:	f7ff f96e 	bl	8000ec0 <LL_HRTIM_OUT_SetPolarity>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001be8:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	f000 8139 	beq.w	8001e64 <MX_HRTIM1_Init+0xe28>
  return __builtin_clz(value);
 8001bf2:	fab3 f383 	clz	r3, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8001bfc:	2a00      	cmp	r2, #0
 8001bfe:	f000 8133 	beq.w	8001e68 <MX_HRTIM1_Init+0xe2c>
  return __builtin_clz(value);
 8001c02:	fab2 f282 	clz	r2, r2
  uint32_t iOutput = (uint8_t)(POSITION_VAL(Output) - POSITION_VAL(LL_HRTIM_OUTPUT_TA1));
 8001c06:	1a9b      	subs	r3, r3, r2
 8001c08:	b2db      	uxtb	r3, r3
                                                              REG_OFFSET_TAB_SETxR[iOutput]));
 8001c0a:	4a7b      	ldr	r2, [pc, #492]	; (8001df8 <MX_HRTIM1_Init+0xdbc>)
 8001c0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
  WRITE_REG(*pReg, SetSrc);
 8001c10:	2200      	movs	r2, #0
 8001c12:	497a      	ldr	r1, [pc, #488]	; (8001dfc <MX_HRTIM1_Init+0xdc0>)
 8001c14:	50ca      	str	r2, [r1, r3]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c16:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001c1a:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	f000 8124 	beq.w	8001e6c <MX_HRTIM1_Init+0xe30>
  return __builtin_clz(value);
 8001c24:	fab3 f383 	clz	r3, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c28:	2201      	movs	r2, #1
 8001c2a:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8001c2e:	2a00      	cmp	r2, #0
 8001c30:	f000 811e 	beq.w	8001e70 <MX_HRTIM1_Init+0xe34>
  return __builtin_clz(value);
 8001c34:	fab2 f282 	clz	r2, r2
  uint32_t iOutput = (uint8_t)(POSITION_VAL(Output) - POSITION_VAL(LL_HRTIM_OUTPUT_TA1));
 8001c38:	1a9b      	subs	r3, r3, r2
 8001c3a:	b2db      	uxtb	r3, r3
                                                              REG_OFFSET_TAB_SETxR[iOutput]));
 8001c3c:	4a6e      	ldr	r2, [pc, #440]	; (8001df8 <MX_HRTIM1_Init+0xdbc>)
 8001c3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
  WRITE_REG(*pReg, ResetSrc);
 8001c42:	2400      	movs	r4, #0
 8001c44:	f84b 4003 	str.w	r4, [fp, r3]
  LL_HRTIM_OUT_SetIdleMode(HRTIM1, LL_HRTIM_OUTPUT_TF2, LL_HRTIM_OUT_NO_IDLE);
 8001c48:	4d6a      	ldr	r5, [pc, #424]	; (8001df4 <MX_HRTIM1_Init+0xdb8>)
 8001c4a:	4622      	mov	r2, r4
 8001c4c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c50:	4628      	mov	r0, r5
 8001c52:	f7ff f95b 	bl	8000f0c <LL_HRTIM_OUT_SetIdleMode>
  LL_HRTIM_OUT_SetIdleLevel(HRTIM1, LL_HRTIM_OUTPUT_TF2, LL_HRTIM_OUT_IDLELEVEL_INACTIVE);
 8001c56:	4622      	mov	r2, r4
 8001c58:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c5c:	4628      	mov	r0, r5
 8001c5e:	f7ff f97b 	bl	8000f58 <LL_HRTIM_OUT_SetIdleLevel>
  LL_HRTIM_OUT_SetFaultState(HRTIM1, LL_HRTIM_OUTPUT_TF2, LL_HRTIM_OUT_FAULTSTATE_NO_ACTION);
 8001c62:	4622      	mov	r2, r4
 8001c64:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c68:	4628      	mov	r0, r5
 8001c6a:	f7ff f99b 	bl	8000fa4 <LL_HRTIM_OUT_SetFaultState>
  LL_HRTIM_OUT_SetChopperMode(HRTIM1, LL_HRTIM_OUTPUT_TF2, LL_HRTIM_OUT_CHOPPERMODE_DISABLED);
 8001c6e:	4622      	mov	r2, r4
 8001c70:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c74:	4628      	mov	r0, r5
 8001c76:	f7ff f9bb 	bl	8000ff0 <LL_HRTIM_OUT_SetChopperMode>
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001c7a:	4b61      	ldr	r3, [pc, #388]	; (8001e00 <MX_HRTIM1_Init+0xdc4>)
 8001c7c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c7e:	f042 0204 	orr.w	r2, r2, #4
 8001c82:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001c84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c86:	f003 0304 	and.w	r3, r3, #4
 8001c8a:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001c8c:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8001c8e:	2340      	movs	r3, #64	; 0x40
 8001c90:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001c92:	2702      	movs	r7, #2
 8001c94:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001c96:	2503      	movs	r5, #3
 8001c98:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001c9a:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001c9c:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_13;
 8001c9e:	f04f 080d 	mov.w	r8, #13
 8001ca2:	f8cd 801c 	str.w	r8, [sp, #28]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ca6:	4e57      	ldr	r6, [pc, #348]	; (8001e04 <MX_HRTIM1_Init+0xdc8>)
 8001ca8:	a902      	add	r1, sp, #8
 8001caa:	4630      	mov	r0, r6
 8001cac:	f003 fcc0 	bl	8005630 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8001cb0:	2380      	movs	r3, #128	; 0x80
 8001cb2:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001cb4:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001cb6:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001cb8:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001cba:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_13;
 8001cbc:	f8cd 801c 	str.w	r8, [sp, #28]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cc0:	a902      	add	r1, sp, #8
 8001cc2:	4630      	mov	r0, r6
 8001cc4:	f003 fcb4 	bl	8005630 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8001cc8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ccc:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001cce:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001cd0:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001cd2:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001cd4:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_3;
 8001cd6:	9507      	str	r5, [sp, #28]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cd8:	a902      	add	r1, sp, #8
 8001cda:	4630      	mov	r0, r6
 8001cdc:	f003 fca8 	bl	8005630 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8001ce0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ce4:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001ce6:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001ce8:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001cea:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001cec:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_3;
 8001cee:	9507      	str	r5, [sp, #28]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cf0:	a902      	add	r1, sp, #8
 8001cf2:	4630      	mov	r0, r6
 8001cf4:	f003 fc9c 	bl	8005630 <LL_GPIO_Init>
}
 8001cf8:	b009      	add	sp, #36	; 0x24
 8001cfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return 32U;
 8001cfe:	2320      	movs	r3, #32
 8001d00:	f7ff b9e5 	b.w	80010ce <MX_HRTIM1_Init+0x92>
 8001d04:	2320      	movs	r3, #32
 8001d06:	f7ff b9f5 	b.w	80010f4 <MX_HRTIM1_Init+0xb8>
 8001d0a:	2320      	movs	r3, #32
 8001d0c:	f7ff ba06 	b.w	800111c <MX_HRTIM1_Init+0xe0>
 8001d10:	2320      	movs	r3, #32
 8001d12:	f7ff ba1b 	b.w	800114c <MX_HRTIM1_Init+0x110>
 8001d16:	2320      	movs	r3, #32
 8001d18:	f7ff ba2b 	b.w	8001172 <MX_HRTIM1_Init+0x136>
 8001d1c:	2320      	movs	r3, #32
 8001d1e:	f7ff ba3d 	b.w	800119c <MX_HRTIM1_Init+0x160>
 8001d22:	2220      	movs	r2, #32
 8001d24:	f7ff ba43 	b.w	80011ae <MX_HRTIM1_Init+0x172>
 8001d28:	2320      	movs	r3, #32
 8001d2a:	f7ff ba53 	b.w	80011d4 <MX_HRTIM1_Init+0x198>
 8001d2e:	2220      	movs	r2, #32
 8001d30:	f7ff ba59 	b.w	80011e6 <MX_HRTIM1_Init+0x1aa>
 8001d34:	2320      	movs	r3, #32
 8001d36:	f7ff ba68 	b.w	800120a <MX_HRTIM1_Init+0x1ce>
 8001d3a:	2320      	movs	r3, #32
 8001d3c:	f7ff ba77 	b.w	800122e <MX_HRTIM1_Init+0x1f2>
 8001d40:	2320      	movs	r3, #32
 8001d42:	f7ff ba8e 	b.w	8001262 <MX_HRTIM1_Init+0x226>
 8001d46:	2320      	movs	r3, #32
 8001d48:	f7ff baa0 	b.w	800128c <MX_HRTIM1_Init+0x250>
 8001d4c:	2320      	movs	r3, #32
 8001d4e:	f7ff baaf 	b.w	80012b0 <MX_HRTIM1_Init+0x274>
 8001d52:	2320      	movs	r3, #32
 8001d54:	f7ff babe 	b.w	80012d4 <MX_HRTIM1_Init+0x298>
 8001d58:	2320      	movs	r3, #32
 8001d5a:	f7ff bacd 	b.w	80012f8 <MX_HRTIM1_Init+0x2bc>
 8001d5e:	2320      	movs	r3, #32
 8001d60:	f7ff badd 	b.w	800131e <MX_HRTIM1_Init+0x2e2>
 8001d64:	2320      	movs	r3, #32
 8001d66:	f7ff baf5 	b.w	8001354 <MX_HRTIM1_Init+0x318>
 8001d6a:	2320      	movs	r3, #32
 8001d6c:	f7ff bb27 	b.w	80013be <MX_HRTIM1_Init+0x382>
 8001d70:	2320      	movs	r3, #32
 8001d72:	f7ff bb36 	b.w	80013e2 <MX_HRTIM1_Init+0x3a6>
 8001d76:	2320      	movs	r3, #32
 8001d78:	f7ff bb58 	b.w	800142c <MX_HRTIM1_Init+0x3f0>
 8001d7c:	2320      	movs	r3, #32
 8001d7e:	f7ff bb6a 	b.w	8001456 <MX_HRTIM1_Init+0x41a>
 8001d82:	2320      	movs	r3, #32
 8001d84:	f7ff bb7a 	b.w	800147c <MX_HRTIM1_Init+0x440>
 8001d88:	2320      	movs	r3, #32
 8001d8a:	f7ff bb8d 	b.w	80014a8 <MX_HRTIM1_Init+0x46c>
 8001d8e:	2320      	movs	r3, #32
 8001d90:	f7ff bb9c 	b.w	80014cc <MX_HRTIM1_Init+0x490>
 8001d94:	2320      	movs	r3, #32
 8001d96:	f7ff bbaf 	b.w	80014f8 <MX_HRTIM1_Init+0x4bc>
 8001d9a:	2320      	movs	r3, #32
 8001d9c:	f7ff bbc4 	b.w	8001528 <MX_HRTIM1_Init+0x4ec>
 8001da0:	2220      	movs	r2, #32
 8001da2:	f7ff bbc9 	b.w	8001538 <MX_HRTIM1_Init+0x4fc>
 8001da6:	2320      	movs	r3, #32
 8001da8:	f7ff bbd7 	b.w	800155a <MX_HRTIM1_Init+0x51e>
 8001dac:	2220      	movs	r2, #32
 8001dae:	f7ff bbdc 	b.w	800156a <MX_HRTIM1_Init+0x52e>
 8001db2:	2320      	movs	r3, #32
 8001db4:	e40c      	b.n	80015d0 <MX_HRTIM1_Init+0x594>
 8001db6:	2220      	movs	r2, #32
 8001db8:	e412      	b.n	80015e0 <MX_HRTIM1_Init+0x5a4>
 8001dba:	2320      	movs	r3, #32
 8001dbc:	e421      	b.n	8001602 <MX_HRTIM1_Init+0x5c6>
 8001dbe:	2220      	movs	r2, #32
 8001dc0:	e427      	b.n	8001612 <MX_HRTIM1_Init+0x5d6>
 8001dc2:	2320      	movs	r3, #32
 8001dc4:	e455      	b.n	8001672 <MX_HRTIM1_Init+0x636>
 8001dc6:	2320      	movs	r3, #32
 8001dc8:	e465      	b.n	8001696 <MX_HRTIM1_Init+0x65a>
 8001dca:	2320      	movs	r3, #32
 8001dcc:	e477      	b.n	80016be <MX_HRTIM1_Init+0x682>
 8001dce:	2320      	movs	r3, #32
 8001dd0:	e48b      	b.n	80016ea <MX_HRTIM1_Init+0x6ae>
 8001dd2:	2320      	movs	r3, #32
 8001dd4:	e4b0      	b.n	8001738 <MX_HRTIM1_Init+0x6fc>
 8001dd6:	2320      	movs	r3, #32
 8001dd8:	e4c3      	b.n	8001762 <MX_HRTIM1_Init+0x726>
 8001dda:	2220      	movs	r2, #32
 8001ddc:	e4ca      	b.n	8001774 <MX_HRTIM1_Init+0x738>
 8001dde:	2320      	movs	r3, #32
 8001de0:	e4da      	b.n	8001798 <MX_HRTIM1_Init+0x75c>
 8001de2:	2220      	movs	r2, #32
 8001de4:	e4e1      	b.n	80017aa <MX_HRTIM1_Init+0x76e>
 8001de6:	2320      	movs	r3, #32
 8001de8:	e4f1      	b.n	80017ce <MX_HRTIM1_Init+0x792>
 8001dea:	2220      	movs	r2, #32
 8001dec:	e4f8      	b.n	80017e0 <MX_HRTIM1_Init+0x7a4>
 8001dee:	bf00      	nop
 8001df0:	080082cc 	.word	0x080082cc
 8001df4:	40016800 	.word	0x40016800
 8001df8:	080082b4 	.word	0x080082b4
 8001dfc:	400168bc 	.word	0x400168bc
 8001e00:	40021000 	.word	0x40021000
 8001e04:	48000800 	.word	0x48000800
 8001e08:	2320      	movs	r3, #32
 8001e0a:	e4fb      	b.n	8001804 <MX_HRTIM1_Init+0x7c8>
 8001e0c:	2320      	movs	r3, #32
 8001e0e:	e50b      	b.n	8001828 <MX_HRTIM1_Init+0x7ec>
 8001e10:	2320      	movs	r3, #32
 8001e12:	e523      	b.n	800185c <MX_HRTIM1_Init+0x820>
 8001e14:	2320      	movs	r3, #32
 8001e16:	e536      	b.n	8001886 <MX_HRTIM1_Init+0x84a>
 8001e18:	2320      	movs	r3, #32
 8001e1a:	e546      	b.n	80018aa <MX_HRTIM1_Init+0x86e>
 8001e1c:	2320      	movs	r3, #32
 8001e1e:	e556      	b.n	80018ce <MX_HRTIM1_Init+0x892>
 8001e20:	2320      	movs	r3, #32
 8001e22:	e566      	b.n	80018f2 <MX_HRTIM1_Init+0x8b6>
 8001e24:	2320      	movs	r3, #32
 8001e26:	e576      	b.n	8001916 <MX_HRTIM1_Init+0x8da>
 8001e28:	2320      	movs	r3, #32
 8001e2a:	e58f      	b.n	800194c <MX_HRTIM1_Init+0x910>
 8001e2c:	2320      	movs	r3, #32
 8001e2e:	e59e      	b.n	800196e <MX_HRTIM1_Init+0x932>
 8001e30:	2320      	movs	r3, #32
 8001e32:	e5ae      	b.n	8001992 <MX_HRTIM1_Init+0x956>
 8001e34:	2320      	movs	r3, #32
 8001e36:	e5c0      	b.n	80019ba <MX_HRTIM1_Init+0x97e>
 8001e38:	2320      	movs	r3, #32
 8001e3a:	e5e1      	b.n	8001a00 <MX_HRTIM1_Init+0x9c4>
 8001e3c:	2320      	movs	r3, #32
 8001e3e:	e5f4      	b.n	8001a2a <MX_HRTIM1_Init+0x9ee>
 8001e40:	2320      	movs	r3, #32
 8001e42:	e609      	b.n	8001a58 <MX_HRTIM1_Init+0xa1c>
 8001e44:	2320      	movs	r3, #32
 8001e46:	e62f      	b.n	8001aa8 <MX_HRTIM1_Init+0xa6c>
 8001e48:	2320      	movs	r3, #32
 8001e4a:	e643      	b.n	8001ad4 <MX_HRTIM1_Init+0xa98>
 8001e4c:	2320      	movs	r3, #32
 8001e4e:	e653      	b.n	8001af8 <MX_HRTIM1_Init+0xabc>
 8001e50:	2320      	movs	r3, #32
 8001e52:	e667      	b.n	8001b24 <MX_HRTIM1_Init+0xae8>
 8001e54:	2320      	movs	r3, #32
 8001e56:	e67d      	b.n	8001b54 <MX_HRTIM1_Init+0xb18>
 8001e58:	2220      	movs	r2, #32
 8001e5a:	e683      	b.n	8001b64 <MX_HRTIM1_Init+0xb28>
 8001e5c:	2320      	movs	r3, #32
 8001e5e:	e692      	b.n	8001b86 <MX_HRTIM1_Init+0xb4a>
 8001e60:	2220      	movs	r2, #32
 8001e62:	e698      	b.n	8001b96 <MX_HRTIM1_Init+0xb5a>
 8001e64:	2320      	movs	r3, #32
 8001e66:	e6c6      	b.n	8001bf6 <MX_HRTIM1_Init+0xbba>
 8001e68:	2220      	movs	r2, #32
 8001e6a:	e6cc      	b.n	8001c06 <MX_HRTIM1_Init+0xbca>
 8001e6c:	2320      	movs	r3, #32
 8001e6e:	e6db      	b.n	8001c28 <MX_HRTIM1_Init+0xbec>
 8001e70:	2220      	movs	r2, #32
 8001e72:	e6e1      	b.n	8001c38 <MX_HRTIM1_Init+0xbfc>

08001e74 <MX_ADC1_Init>:
{
 8001e74:	b570      	push	{r4, r5, r6, lr}
 8001e76:	b09a      	sub	sp, #104	; 0x68
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8001e78:	2400      	movs	r4, #0
 8001e7a:	9417      	str	r4, [sp, #92]	; 0x5c
 8001e7c:	9418      	str	r4, [sp, #96]	; 0x60
 8001e7e:	9419      	str	r4, [sp, #100]	; 0x64
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8001e80:	9411      	str	r4, [sp, #68]	; 0x44
 8001e82:	9412      	str	r4, [sp, #72]	; 0x48
 8001e84:	9413      	str	r4, [sp, #76]	; 0x4c
 8001e86:	9414      	str	r4, [sp, #80]	; 0x50
 8001e88:	9415      	str	r4, [sp, #84]	; 0x54
 8001e8a:	9416      	str	r4, [sp, #88]	; 0x58
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8001e8c:	940d      	str	r4, [sp, #52]	; 0x34
 8001e8e:	940e      	str	r4, [sp, #56]	; 0x38
 8001e90:	940f      	str	r4, [sp, #60]	; 0x3c
 8001e92:	9410      	str	r4, [sp, #64]	; 0x40
  LL_ADC_INJ_InitTypeDef ADC_INJ_InitStruct = {0};
 8001e94:	9409      	str	r4, [sp, #36]	; 0x24
 8001e96:	940a      	str	r4, [sp, #40]	; 0x28
 8001e98:	940b      	str	r4, [sp, #44]	; 0x2c
 8001e9a:	940c      	str	r4, [sp, #48]	; 0x30
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e9c:	9405      	str	r4, [sp, #20]
 8001e9e:	9406      	str	r4, [sp, #24]
 8001ea0:	9407      	str	r4, [sp, #28]
 8001ea2:	9408      	str	r4, [sp, #32]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001ea4:	4b76      	ldr	r3, [pc, #472]	; (8002080 <MX_ADC1_Init+0x20c>)
 8001ea6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001ea8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001eac:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001eae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001eb0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001eb4:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8001eb6:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001eb8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001eba:	f042 0204 	orr.w	r2, r2, #4
 8001ebe:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001ec0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ec2:	f003 0304 	and.w	r3, r3, #4
 8001ec6:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001ec8:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001ece:	2603      	movs	r6, #3
 8001ed0:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001ed2:	9407      	str	r4, [sp, #28]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ed4:	4d6b      	ldr	r5, [pc, #428]	; (8002084 <MX_ADC1_Init+0x210>)
 8001ed6:	a903      	add	r1, sp, #12
 8001ed8:	4628      	mov	r0, r5
 8001eda:	f003 fba9 	bl	8005630 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8001ede:	2302      	movs	r3, #2
 8001ee0:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001ee2:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001ee4:	9407      	str	r4, [sp, #28]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ee6:	a903      	add	r1, sp, #12
 8001ee8:	4628      	mov	r0, r5
 8001eea:	f003 fba1 	bl	8005630 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8001eee:	2304      	movs	r3, #4
 8001ef0:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001ef2:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001ef4:	9407      	str	r4, [sp, #28]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ef6:	a903      	add	r1, sp, #12
 8001ef8:	4628      	mov	r0, r5
 8001efa:	f003 fb99 	bl	8005630 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8001efe:	2308      	movs	r3, #8
 8001f00:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001f02:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001f04:	9407      	str	r4, [sp, #28]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f06:	a903      	add	r1, sp, #12
 8001f08:	4628      	mov	r0, r5
 8001f0a:	f003 fb91 	bl	8005630 <LL_GPIO_Init>
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f0e:	4b5e      	ldr	r3, [pc, #376]	; (8002088 <MX_ADC1_Init+0x214>)
 8001f10:	68db      	ldr	r3, [r3, #12]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f12:	4b5e      	ldr	r3, [pc, #376]	; (800208c <MX_ADC1_Init+0x218>)
 8001f14:	f883 4312 	strb.w	r4, [r3, #786]	; 0x312
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f18:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001f1c:	601a      	str	r2, [r3, #0]
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8001f1e:	9417      	str	r4, [sp, #92]	; 0x5c
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8001f20:	9418      	str	r4, [sp, #96]	; 0x60
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 8001f22:	9419      	str	r4, [sp, #100]	; 0x64
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8001f24:	a917      	add	r1, sp, #92	; 0x5c
 8001f26:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001f2a:	f003 fb13 	bl	8005554 <LL_ADC_Init>
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 8001f2e:	9412      	str	r4, [sp, #72]	; 0x48
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8001f30:	9413      	str	r4, [sp, #76]	; 0x4c
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8001f32:	9414      	str	r4, [sp, #80]	; 0x50
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 8001f34:	9415      	str	r4, [sp, #84]	; 0x54
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 8001f36:	9416      	str	r4, [sp, #88]	; 0x58
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8001f38:	a911      	add	r1, sp, #68	; 0x44
 8001f3a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001f3e:	f003 fb21 	bl	8005584 <LL_ADC_REG_Init>
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 8001f42:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
 8001f46:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
 8001f4a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001f4e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f52:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_CFGR2_GCOMP_Pos);
 8001f56:	692b      	ldr	r3, [r5, #16]
 8001f58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f5c:	612b      	str	r3, [r5, #16]
  *         @arg @ref LL_ADC_OVS_GRP_INJ_REG_RESUMED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOverSamplingScope(ADC_TypeDef *ADCx, uint32_t OvsScope)
{
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_ROVSE | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSM, OvsScope);
 8001f5e:	692b      	ldr	r3, [r5, #16]
 8001f60:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001f64:	f023 0303 	bic.w	r3, r3, #3
 8001f68:	612b      	str	r3, [r5, #16]
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_SYNC_PCLK_DIV4;
 8001f6a:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001f6e:	930d      	str	r3, [sp, #52]	; 0x34
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 8001f70:	940e      	str	r4, [sp, #56]	; 0x38
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 8001f72:	a90d      	add	r1, sp, #52	; 0x34
 8001f74:	4846      	ldr	r0, [pc, #280]	; (8002090 <MX_ADC1_Init+0x21c>)
 8001f76:	f003 fa97 	bl	80054a8 <LL_ADC_CommonInit>
  ADC_INJ_InitStruct.TriggerSource = LL_ADC_INJ_TRIG_EXT_HRTIM_TRG2;
 8001f7a:	23cc      	movs	r3, #204	; 0xcc
 8001f7c:	9309      	str	r3, [sp, #36]	; 0x24
  ADC_INJ_InitStruct.SequencerLength = LL_ADC_INJ_SEQ_SCAN_ENABLE_4RANKS;
 8001f7e:	960a      	str	r6, [sp, #40]	; 0x28
  ADC_INJ_InitStruct.SequencerDiscont = LL_ADC_INJ_SEQ_DISCONT_DISABLE;
 8001f80:	940b      	str	r4, [sp, #44]	; 0x2c
  ADC_INJ_InitStruct.TrigAuto = LL_ADC_INJ_TRIG_INDEPENDENT;
 8001f82:	940c      	str	r4, [sp, #48]	; 0x30
  LL_ADC_INJ_Init(ADC1, &ADC_INJ_InitStruct);
 8001f84:	a909      	add	r1, sp, #36	; 0x24
 8001f86:	4628      	mov	r0, r5
 8001f88:	f003 fb2c 	bl	80055e4 <LL_ADC_INJ_Init>
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_JQM | ADC_CFGR_JQDIS, QueueMode);
 8001f8c:	68eb      	ldr	r3, [r5, #12]
 8001f8e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001f92:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001f96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001f9a:	60eb      	str	r3, [r5, #12]
  MODIFY_REG(ADCx->JSQR, ADC_JSQR_JEXTEN, ExternalTriggerEdge);
 8001f9c:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8001f9e:	f423 73c0 	bic.w	r3, r3, #384	; 0x180
 8001fa2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fa6:	64eb      	str	r3, [r5, #76]	; 0x4c
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001fa8:	68ab      	ldr	r3, [r5, #8]
 8001faa:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001fae:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001fb2:	60ab      	str	r3, [r5, #8]
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001fb4:	68ab      	ldr	r3, [r5, #8]
 8001fb6:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001fba:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001fbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fc2:	60ab      	str	r3, [r5, #8]
  wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 8001fc4:	4b33      	ldr	r3, [pc, #204]	; (8002094 <MX_ADC1_Init+0x220>)
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	0992      	lsrs	r2, r2, #6
 8001fca:	4b33      	ldr	r3, [pc, #204]	; (8002098 <MX_ADC1_Init+0x224>)
 8001fcc:	fba3 3202 	umull	r3, r2, r3, r2
 8001fd0:	0992      	lsrs	r2, r2, #6
 8001fd2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001fd6:	0093      	lsls	r3, r2, #2
 8001fd8:	4a30      	ldr	r2, [pc, #192]	; (800209c <MX_ADC1_Init+0x228>)
 8001fda:	fba2 2303 	umull	r2, r3, r2, r3
 8001fde:	40f3      	lsrs	r3, r6
  while(wait_loop_index != 0)
 8001fe0:	b10b      	cbz	r3, 8001fe6 <MX_ADC1_Init+0x172>
    wait_loop_index--;
 8001fe2:	3b01      	subs	r3, #1
 8001fe4:	e7fc      	b.n	8001fe0 <MX_ADC1_Init+0x16c>
  MODIFY_REG(ADCx->JSQR,
 8001fe6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001fea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001fec:	f422 5278 	bic.w	r2, r2, #15872	; 0x3e00
 8001ff0:	f442 6240 	orr.w	r2, r2, #3072	; 0xc00
 8001ff4:	64da      	str	r2, [r3, #76]	; 0x4c
  MODIFY_REG(*preg,
 8001ff6:	695a      	ldr	r2, [r3, #20]
 8001ff8:	f422 12e0 	bic.w	r2, r2, #1835008	; 0x1c0000
 8001ffc:	f442 12c0 	orr.w	r2, r2, #1572864	; 0x180000
 8002000:	615a      	str	r2, [r3, #20]
  MODIFY_REG(ADCx->DIFSEL,
 8002002:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002006:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800200a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  MODIFY_REG(ADCx->JSQR,
 800200e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002010:	f422 2278 	bic.w	r2, r2, #1015808	; 0xf8000
 8002014:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002018:	64da      	str	r2, [r3, #76]	; 0x4c
  MODIFY_REG(*preg,
 800201a:	695a      	ldr	r2, [r3, #20]
 800201c:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 8002020:	f042 62c0 	orr.w	r2, r2, #100663296	; 0x6000000
 8002024:	615a      	str	r2, [r3, #20]
  MODIFY_REG(ADCx->DIFSEL,
 8002026:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800202a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800202e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  MODIFY_REG(ADCx->JSQR,
 8002032:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002034:	f022 7278 	bic.w	r2, r2, #65011712	; 0x3e00000
 8002038:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
 800203c:	64da      	str	r2, [r3, #76]	; 0x4c
  MODIFY_REG(*preg,
 800203e:	695a      	ldr	r2, [r3, #20]
 8002040:	f422 0260 	bic.w	r2, r2, #14680064	; 0xe00000
 8002044:	f442 0240 	orr.w	r2, r2, #12582912	; 0xc00000
 8002048:	615a      	str	r2, [r3, #20]
  MODIFY_REG(ADCx->DIFSEL,
 800204a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800204e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002052:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  MODIFY_REG(ADCx->JSQR,
 8002056:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002058:	f022 4278 	bic.w	r2, r2, #4160749568	; 0xf8000000
 800205c:	f042 4290 	orr.w	r2, r2, #1207959552	; 0x48000000
 8002060:	64da      	str	r2, [r3, #76]	; 0x4c
  MODIFY_REG(*preg,
 8002062:	695a      	ldr	r2, [r3, #20]
 8002064:	f022 5260 	bic.w	r2, r2, #939524096	; 0x38000000
 8002068:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 800206c:	615a      	str	r2, [r3, #20]
  MODIFY_REG(ADCx->DIFSEL,
 800206e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002072:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002076:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 800207a:	b01a      	add	sp, #104	; 0x68
 800207c:	bd70      	pop	{r4, r5, r6, pc}
 800207e:	bf00      	nop
 8002080:	40021000 	.word	0x40021000
 8002084:	48000800 	.word	0x48000800
 8002088:	e000ed00 	.word	0xe000ed00
 800208c:	e000e100 	.word	0xe000e100
 8002090:	50000300 	.word	0x50000300
 8002094:	20000000 	.word	0x20000000
 8002098:	053e2d63 	.word	0x053e2d63
 800209c:	cccccccd 	.word	0xcccccccd

080020a0 <Error_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
 80020a0:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80020a2:	e7fe      	b.n	80020a2 <Error_Handler+0x2>

080020a4 <MX_FDCAN2_Init>:
{
 80020a4:	b508      	push	{r3, lr}
  hfdcan2.Instance = FDCAN2;
 80020a6:	480e      	ldr	r0, [pc, #56]	; (80020e0 <MX_FDCAN2_Init+0x3c>)
 80020a8:	4b0e      	ldr	r3, [pc, #56]	; (80020e4 <MX_FDCAN2_Init+0x40>)
 80020aa:	6003      	str	r3, [r0, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80020ac:	2300      	movs	r3, #0
 80020ae:	6083      	str	r3, [r0, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 80020b0:	60c3      	str	r3, [r0, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 80020b2:	7403      	strb	r3, [r0, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 80020b4:	7443      	strb	r3, [r0, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 80020b6:	7483      	strb	r3, [r0, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 80020b8:	2201      	movs	r2, #1
 80020ba:	6142      	str	r2, [r0, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 80020bc:	6182      	str	r2, [r0, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 80020be:	2102      	movs	r1, #2
 80020c0:	61c1      	str	r1, [r0, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 80020c2:	6201      	str	r1, [r0, #32]
  hfdcan2.Init.DataPrescaler = 1;
 80020c4:	6242      	str	r2, [r0, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 80020c6:	6282      	str	r2, [r0, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 80020c8:	62c2      	str	r2, [r0, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 80020ca:	6302      	str	r2, [r0, #48]	; 0x30
  hfdcan2.Init.StdFiltersNbr = 0;
 80020cc:	6343      	str	r3, [r0, #52]	; 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 80020ce:	6383      	str	r3, [r0, #56]	; 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80020d0:	63c3      	str	r3, [r0, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 80020d2:	f000 fd91 	bl	8002bf8 <HAL_FDCAN_Init>
 80020d6:	b900      	cbnz	r0, 80020da <MX_FDCAN2_Init+0x36>
}
 80020d8:	bd08      	pop	{r3, pc}
    Error_Handler();
 80020da:	f7ff ffe1 	bl	80020a0 <Error_Handler>
 80020de:	bf00      	nop
 80020e0:	200005c8 	.word	0x200005c8
 80020e4:	40006800 	.word	0x40006800

080020e8 <MX_I2C1_Init>:
{
 80020e8:	b508      	push	{r3, lr}
  hi2c1.Instance = I2C1;
 80020ea:	4813      	ldr	r0, [pc, #76]	; (8002138 <MX_I2C1_Init+0x50>)
 80020ec:	4b13      	ldr	r3, [pc, #76]	; (800213c <MX_I2C1_Init+0x54>)
 80020ee:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 80020f0:	f1a3 6375 	sub.w	r3, r3, #256901120	; 0xf500000
 80020f4:	f5a3 237a 	sub.w	r3, r3, #1024000	; 0xfa000
 80020f8:	f6a3 4305 	subw	r3, r3, #3077	; 0xc05
 80020fc:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80020fe:	2300      	movs	r3, #0
 8002100:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002102:	2201      	movs	r2, #1
 8002104:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002106:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002108:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800210a:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800210c:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800210e:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002110:	f000 ff33 	bl	8002f7a <HAL_I2C_Init>
 8002114:	b950      	cbnz	r0, 800212c <MX_I2C1_Init+0x44>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002116:	2100      	movs	r1, #0
 8002118:	4807      	ldr	r0, [pc, #28]	; (8002138 <MX_I2C1_Init+0x50>)
 800211a:	f000 ff8c 	bl	8003036 <HAL_I2CEx_ConfigAnalogFilter>
 800211e:	b938      	cbnz	r0, 8002130 <MX_I2C1_Init+0x48>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002120:	2100      	movs	r1, #0
 8002122:	4805      	ldr	r0, [pc, #20]	; (8002138 <MX_I2C1_Init+0x50>)
 8002124:	f000 ffb5 	bl	8003092 <HAL_I2CEx_ConfigDigitalFilter>
 8002128:	b920      	cbnz	r0, 8002134 <MX_I2C1_Init+0x4c>
}
 800212a:	bd08      	pop	{r3, pc}
    Error_Handler();
 800212c:	f7ff ffb8 	bl	80020a0 <Error_Handler>
    Error_Handler();
 8002130:	f7ff ffb6 	bl	80020a0 <Error_Handler>
    Error_Handler();
 8002134:	f7ff ffb4 	bl	80020a0 <Error_Handler>
 8002138:	20000434 	.word	0x20000434
 800213c:	40005400 	.word	0x40005400

08002140 <MX_I2C2_Init>:
{
 8002140:	b508      	push	{r3, lr}
  hi2c2.Instance = I2C2;
 8002142:	4813      	ldr	r0, [pc, #76]	; (8002190 <MX_I2C2_Init+0x50>)
 8002144:	4b13      	ldr	r3, [pc, #76]	; (8002194 <MX_I2C2_Init+0x54>)
 8002146:	6003      	str	r3, [r0, #0]
  hi2c2.Init.Timing = 0x30A0A7FB;
 8002148:	f1a3 6375 	sub.w	r3, r3, #256901120	; 0xf500000
 800214c:	f5a3 237b 	sub.w	r3, r3, #1028096	; 0xfb000
 8002150:	3b05      	subs	r3, #5
 8002152:	6043      	str	r3, [r0, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002154:	2300      	movs	r3, #0
 8002156:	6083      	str	r3, [r0, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002158:	2201      	movs	r2, #1
 800215a:	60c2      	str	r2, [r0, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800215c:	6103      	str	r3, [r0, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800215e:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002160:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002162:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002164:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002166:	f000 ff08 	bl	8002f7a <HAL_I2C_Init>
 800216a:	b950      	cbnz	r0, 8002182 <MX_I2C2_Init+0x42>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800216c:	2100      	movs	r1, #0
 800216e:	4808      	ldr	r0, [pc, #32]	; (8002190 <MX_I2C2_Init+0x50>)
 8002170:	f000 ff61 	bl	8003036 <HAL_I2CEx_ConfigAnalogFilter>
 8002174:	b938      	cbnz	r0, 8002186 <MX_I2C2_Init+0x46>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002176:	2100      	movs	r1, #0
 8002178:	4805      	ldr	r0, [pc, #20]	; (8002190 <MX_I2C2_Init+0x50>)
 800217a:	f000 ff8a 	bl	8003092 <HAL_I2CEx_ConfigDigitalFilter>
 800217e:	b920      	cbnz	r0, 800218a <MX_I2C2_Init+0x4a>
}
 8002180:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002182:	f7ff ff8d 	bl	80020a0 <Error_Handler>
    Error_Handler();
 8002186:	f7ff ff8b 	bl	80020a0 <Error_Handler>
    Error_Handler();
 800218a:	f7ff ff89 	bl	80020a0 <Error_Handler>
 800218e:	bf00      	nop
 8002190:	20000480 	.word	0x20000480
 8002194:	40005800 	.word	0x40005800

08002198 <MX_SPI3_Init>:
{
 8002198:	b508      	push	{r3, lr}
  hspi3.Instance = SPI3;
 800219a:	480f      	ldr	r0, [pc, #60]	; (80021d8 <MX_SPI3_Init+0x40>)
 800219c:	4b0f      	ldr	r3, [pc, #60]	; (80021dc <MX_SPI3_Init+0x44>)
 800219e:	6003      	str	r3, [r0, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80021a0:	f44f 7382 	mov.w	r3, #260	; 0x104
 80021a4:	6043      	str	r3, [r0, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80021a6:	2300      	movs	r3, #0
 80021a8:	6083      	str	r3, [r0, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80021aa:	f44f 7240 	mov.w	r2, #768	; 0x300
 80021ae:	60c2      	str	r2, [r0, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80021b0:	6103      	str	r3, [r0, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80021b2:	6143      	str	r3, [r0, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80021b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021b8:	6182      	str	r2, [r0, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80021ba:	2208      	movs	r2, #8
 80021bc:	61c2      	str	r2, [r0, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80021be:	6203      	str	r3, [r0, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80021c0:	6243      	str	r3, [r0, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021c2:	6283      	str	r3, [r0, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80021c4:	2107      	movs	r1, #7
 80021c6:	62c1      	str	r1, [r0, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80021c8:	6303      	str	r3, [r0, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80021ca:	6342      	str	r2, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80021cc:	f002 fd78 	bl	8004cc0 <HAL_SPI_Init>
 80021d0:	b900      	cbnz	r0, 80021d4 <MX_SPI3_Init+0x3c>
}
 80021d2:	bd08      	pop	{r3, pc}
    Error_Handler();
 80021d4:	f7ff ff64 	bl	80020a0 <Error_Handler>
 80021d8:	200004cc 	.word	0x200004cc
 80021dc:	40003c00 	.word	0x40003c00

080021e0 <MX_UART5_Init>:
{
 80021e0:	b508      	push	{r3, lr}
  huart5.Instance = UART5;
 80021e2:	4815      	ldr	r0, [pc, #84]	; (8002238 <MX_UART5_Init+0x58>)
 80021e4:	4b15      	ldr	r3, [pc, #84]	; (800223c <MX_UART5_Init+0x5c>)
 80021e6:	6003      	str	r3, [r0, #0]
  huart5.Init.BaudRate = 115200;
 80021e8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80021ec:	6043      	str	r3, [r0, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80021ee:	2300      	movs	r3, #0
 80021f0:	6083      	str	r3, [r0, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80021f2:	60c3      	str	r3, [r0, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80021f4:	6103      	str	r3, [r0, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80021f6:	220c      	movs	r2, #12
 80021f8:	6142      	str	r2, [r0, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021fa:	6183      	str	r3, [r0, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80021fc:	61c3      	str	r3, [r0, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021fe:	6203      	str	r3, [r0, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002200:	6243      	str	r3, [r0, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002202:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002204:	f003 f88d 	bl	8005322 <HAL_UART_Init>
 8002208:	b970      	cbnz	r0, 8002228 <MX_UART5_Init+0x48>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800220a:	2100      	movs	r1, #0
 800220c:	480a      	ldr	r0, [pc, #40]	; (8002238 <MX_UART5_Init+0x58>)
 800220e:	f003 f900 	bl	8005412 <HAL_UARTEx_SetTxFifoThreshold>
 8002212:	b958      	cbnz	r0, 800222c <MX_UART5_Init+0x4c>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002214:	2100      	movs	r1, #0
 8002216:	4808      	ldr	r0, [pc, #32]	; (8002238 <MX_UART5_Init+0x58>)
 8002218:	f003 f920 	bl	800545c <HAL_UARTEx_SetRxFifoThreshold>
 800221c:	b940      	cbnz	r0, 8002230 <MX_UART5_Init+0x50>
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 800221e:	4806      	ldr	r0, [pc, #24]	; (8002238 <MX_UART5_Init+0x58>)
 8002220:	f003 f8d8 	bl	80053d4 <HAL_UARTEx_DisableFifoMode>
 8002224:	b930      	cbnz	r0, 8002234 <MX_UART5_Init+0x54>
}
 8002226:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002228:	f7ff ff3a 	bl	80020a0 <Error_Handler>
    Error_Handler();
 800222c:	f7ff ff38 	bl	80020a0 <Error_Handler>
    Error_Handler();
 8002230:	f7ff ff36 	bl	80020a0 <Error_Handler>
    Error_Handler();
 8002234:	f7ff ff34 	bl	80020a0 <Error_Handler>
 8002238:	20000530 	.word	0x20000530
 800223c:	40005000 	.word	0x40005000

08002240 <SystemClock_Config>:
{
 8002240:	b510      	push	{r4, lr}
 8002242:	b0a8      	sub	sp, #160	; 0xa0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002244:	2238      	movs	r2, #56	; 0x38
 8002246:	2100      	movs	r1, #0
 8002248:	a81a      	add	r0, sp, #104	; 0x68
 800224a:	f005 fbb5 	bl	80079b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800224e:	2400      	movs	r4, #0
 8002250:	9415      	str	r4, [sp, #84]	; 0x54
 8002252:	9416      	str	r4, [sp, #88]	; 0x58
 8002254:	9417      	str	r4, [sp, #92]	; 0x5c
 8002256:	9418      	str	r4, [sp, #96]	; 0x60
 8002258:	9419      	str	r4, [sp, #100]	; 0x64
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800225a:	2254      	movs	r2, #84	; 0x54
 800225c:	4621      	mov	r1, r4
 800225e:	4668      	mov	r0, sp
 8002260:	f005 fbaa 	bl	80079b8 <memset>
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8002264:	4620      	mov	r0, r4
 8002266:	f001 fec1 	bl	8003fec <HAL_PWREx_ControlVoltageScaling>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800226a:	2321      	movs	r3, #33	; 0x21
 800226c:	931a      	str	r3, [sp, #104]	; 0x68
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800226e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002272:	931b      	str	r3, [sp, #108]	; 0x6c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002274:	2301      	movs	r3, #1
 8002276:	9320      	str	r3, [sp, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002278:	2302      	movs	r3, #2
 800227a:	9321      	str	r3, [sp, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800227c:	2203      	movs	r2, #3
 800227e:	9222      	str	r2, [sp, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8002280:	2204      	movs	r2, #4
 8002282:	9223      	str	r2, [sp, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8002284:	2255      	movs	r2, #85	; 0x55
 8002286:	9224      	str	r2, [sp, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002288:	9325      	str	r3, [sp, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV6;
 800228a:	2206      	movs	r2, #6
 800228c:	9226      	str	r2, [sp, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800228e:	9327      	str	r3, [sp, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002290:	a81a      	add	r0, sp, #104	; 0x68
 8002292:	f001 ff63 	bl	800415c <HAL_RCC_OscConfig>
 8002296:	bb40      	cbnz	r0, 80022ea <SystemClock_Config+0xaa>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002298:	230f      	movs	r3, #15
 800229a:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800229c:	2303      	movs	r3, #3
 800229e:	9316      	str	r3, [sp, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022a0:	2300      	movs	r3, #0
 80022a2:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80022a4:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80022a6:	9319      	str	r3, [sp, #100]	; 0x64
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80022a8:	2104      	movs	r1, #4
 80022aa:	a815      	add	r0, sp, #84	; 0x54
 80022ac:	f002 fa0c 	bl	80046c8 <HAL_RCC_ClockConfig>
 80022b0:	b9e8      	cbnz	r0, 80022ee <SystemClock_Config+0xae>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5|RCC_PERIPHCLK_I2C1
 80022b2:	f24b 03d0 	movw	r3, #45264	; 0xb0d0
 80022b6:	9300      	str	r3, [sp, #0]
  PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_SYSCLK;
 80022b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022bc:	9305      	str	r3, [sp, #20]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 80022be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022c2:	9307      	str	r3, [sp, #28]
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_SYSCLK;
 80022c4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80022c8:	9308      	str	r3, [sp, #32]
  PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80022ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022ce:	930e      	str	r3, [sp, #56]	; 0x38
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80022d0:	2300      	movs	r3, #0
 80022d2:	930f      	str	r3, [sp, #60]	; 0x3c
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80022d4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80022d8:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022da:	4668      	mov	r0, sp
 80022dc:	f002 fb34 	bl	8004948 <HAL_RCCEx_PeriphCLKConfig>
 80022e0:	b938      	cbnz	r0, 80022f2 <SystemClock_Config+0xb2>
  HAL_RCC_EnableCSS();
 80022e2:	f002 fb17 	bl	8004914 <HAL_RCC_EnableCSS>
}
 80022e6:	b028      	add	sp, #160	; 0xa0
 80022e8:	bd10      	pop	{r4, pc}
    Error_Handler();
 80022ea:	f7ff fed9 	bl	80020a0 <Error_Handler>
    Error_Handler();
 80022ee:	f7ff fed7 	bl	80020a0 <Error_Handler>
    Error_Handler();
 80022f2:	f7ff fed5 	bl	80020a0 <Error_Handler>
	...

080022f8 <main>:
{
 80022f8:	b570      	push	{r4, r5, r6, lr}
 80022fa:	b08e      	sub	sp, #56	; 0x38
  HAL_Init();
 80022fc:	f000 fb84 	bl	8002a08 <HAL_Init>
  SET_BIT(HRTIMx->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 8002300:	4a61      	ldr	r2, [pc, #388]	; (8002488 <main+0x190>)
 8002302:	f8d2 33cc 	ldr.w	r3, [r2, #972]	; 0x3cc
 8002306:	f043 0301 	orr.w	r3, r3, #1
 800230a:	f8c2 33cc 	str.w	r3, [r2, #972]	; 0x3cc
  SystemClock_Config();
 800230e:	f7ff ff97 	bl	8002240 <SystemClock_Config>
  MX_GPIO_Init();
 8002312:	f7fe fd4f 	bl	8000db4 <MX_GPIO_Init>
  MX_HRTIM1_Init();
 8002316:	f7fe fe91 	bl	800103c <MX_HRTIM1_Init>
  MX_ADC1_Init();
 800231a:	f7ff fdab 	bl	8001e74 <MX_ADC1_Init>
  MX_FDCAN2_Init();
 800231e:	f7ff fec1 	bl	80020a4 <MX_FDCAN2_Init>
  MX_I2C1_Init();
 8002322:	f7ff fee1 	bl	80020e8 <MX_I2C1_Init>
  MX_I2C2_Init();
 8002326:	f7ff ff0b 	bl	8002140 <MX_I2C2_Init>
  MX_SPI3_Init();
 800232a:	f7ff ff35 	bl	8002198 <MX_SPI3_Init>
  MX_UART5_Init();
 800232e:	f7ff ff57 	bl	80021e0 <MX_UART5_Init>
  MX_USB_Device_Init();
 8002332:	f005 f8c7 	bl	80074c4 <MX_USB_Device_Init>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002336:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
 800233a:	68a3      	ldr	r3, [r4, #8]
 800233c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002340:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002344:	60a3      	str	r3, [r4, #8]
	HAL_Delay(1);
 8002346:	2001      	movs	r0, #1
 8002348:	f000 fb80 	bl	8002a4c <HAL_Delay>
  MODIFY_REG(ADCx->CR,
 800234c:	68a3      	ldr	r3, [r4, #8]
 800234e:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002352:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002356:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800235a:	60a3      	str	r3, [r4, #8]
	HAL_Delay(1);
 800235c:	2001      	movs	r0, #1
 800235e:	f000 fb75 	bl	8002a4c <HAL_Delay>
__STATIC_INLINE void LL_ADC_StartCalibration(ADC_TypeDef *ADCx, uint32_t SingleDiff)
{
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002362:	68a3      	ldr	r3, [r4, #8]
 8002364:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002368:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800236c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002370:	60a3      	str	r3, [r4, #8]
  * @param  ADCx ADC instance
  * @retval 0: calibration complete, 1: calibration in progress.
  */
__STATIC_INLINE uint32_t LL_ADC_IsCalibrationOnGoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002372:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	2b00      	cmp	r3, #0
 800237a:	dbfa      	blt.n	8002372 <main+0x7a>
	HAL_Delay(1);
 800237c:	2001      	movs	r0, #1
 800237e:	f000 fb65 	bl	8002a4c <HAL_Delay>
  MODIFY_REG(ADCx->CR,
 8002382:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002386:	6893      	ldr	r3, [r2, #8]
 8002388:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800238c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002390:	f043 0301 	orr.w	r3, r3, #1
 8002394:	6093      	str	r3, [r2, #8]
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_ADRDY(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8002396:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f013 0f01 	tst.w	r3, #1
 80023a0:	d0f9      	beq.n	8002396 <main+0x9e>
	HAL_Delay(1);
 80023a2:	2001      	movs	r0, #1
 80023a4:	f000 fb52 	bl	8002a4c <HAL_Delay>
  MODIFY_REG(ADCx->CR,
 80023a8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80023ac:	6893      	ldr	r3, [r2, #8]
 80023ae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80023b2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80023b6:	f043 0308 	orr.w	r3, r3, #8
 80023ba:	6093      	str	r3, [r2, #8]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_JEOS(ADC_TypeDef *ADCx)
{
  SET_BIT(ADCx->IER, LL_ADC_IT_JEOS);
 80023bc:	6853      	ldr	r3, [r2, #4]
 80023be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023c2:	6053      	str	r3, [r2, #4]
  SET_BIT(HRTIMx->sMasterRegs.MCR, Timers);
 80023c4:	4a30      	ldr	r2, [pc, #192]	; (8002488 <main+0x190>)
 80023c6:	6813      	ldr	r3, [r2, #0]
 80023c8:	f443 03c0 	orr.w	r3, r3, #6291456	; 0x600000
 80023cc:	6013      	str	r3, [r2, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80023d2:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d04f      	beq.n	800247a <main+0x182>
  return __builtin_clz(value);
 80023da:	fab3 f383 	clz	r3, r3
  *         @arg @ref LL_HRTIM_TIMER_F
  * @retval None
  */
__STATIC_INLINE void LL_HRTIM_EnableIT_REP(HRTIM_TypeDef *HRTIMx, uint32_t Timer)
{
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_MCEN_Pos);
 80023de:	3b10      	subs	r3, #16
 80023e0:	b2db      	uxtb	r3, r3
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sMasterRegs.MDIER) +
 80023e2:	492a      	ldr	r1, [pc, #168]	; (800248c <main+0x194>)
                                                    REG_OFFSET_TAB_TIMER[iTimer]));
 80023e4:	4a2a      	ldr	r2, [pc, #168]	; (8002490 <main+0x198>)
 80023e6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
  SET_BIT(*pReg, HRTIM_MDIER_MREPIE);
 80023ea:	588b      	ldr	r3, [r1, r2]
 80023ec:	f043 0310 	orr.w	r3, r3, #16
 80023f0:	508b      	str	r3, [r1, r2]
  return (uint16_t)(READ_BIT(*preg,
 80023f2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80023f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
		uint16_t vinRawVolt = __LL_ADC_CALC_DATA_TO_VOLTAGE(VDDA, vinRawADC, LL_ADC_RESOLUTION_12B);
 80023fa:	b29b      	uxth	r3, r3
 80023fc:	f640 45e4 	movw	r5, #3300	; 0xce4
 8002400:	fb05 f303 	mul.w	r3, r5, r3
 8002404:	4c23      	ldr	r4, [pc, #140]	; (8002494 <main+0x19c>)
 8002406:	fba4 2003 	umull	r2, r0, r4, r3
 800240a:	1a1b      	subs	r3, r3, r0
 800240c:	eb00 0053 	add.w	r0, r0, r3, lsr #1
		Vin = vinRawVolt / (33.0/1033.0);
 8002410:	f3c0 20cf 	ubfx	r0, r0, #11, #16
 8002414:	f7fe f8ae 	bl	8000574 <__aeabi_i2d>
 8002418:	a319      	add	r3, pc, #100	; (adr r3, 8002480 <main+0x188>)
 800241a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800241e:	f7fe fa3d 	bl	800089c <__aeabi_ddiv>
 8002422:	f7fe fb23 	bl	8000a6c <__aeabi_d2iz>
 8002426:	4e1c      	ldr	r6, [pc, #112]	; (8002498 <main+0x1a0>)
 8002428:	6030      	str	r0, [r6, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->JDR1, ((Rank & ADC_INJ_JDRX_REGOFFSET_MASK) >> ADC_JDRX_REGOFFSET_POS));
 800242a:	4b1c      	ldr	r3, [pc, #112]	; (800249c <main+0x1a4>)
  return (uint16_t)(READ_BIT(*preg,
 800242c:	6858      	ldr	r0, [r3, #4]
		uint16_t voutRawVolt = __LL_ADC_CALC_DATA_TO_VOLTAGE(VDDA, voutRawADC, LL_ADC_RESOLUTION_12B);
 800242e:	b280      	uxth	r0, r0
 8002430:	fb05 f500 	mul.w	r5, r5, r0
 8002434:	fba4 3405 	umull	r3, r4, r4, r5
 8002438:	1b2d      	subs	r5, r5, r4
 800243a:	eb04 0455 	add.w	r4, r4, r5, lsr #1
		Vout = voutRawVolt / (33.0/1033.0);
 800243e:	f3c4 20cf 	ubfx	r0, r4, #11, #16
 8002442:	f7fe f897 	bl	8000574 <__aeabi_i2d>
 8002446:	a30e      	add	r3, pc, #56	; (adr r3, 8002480 <main+0x188>)
 8002448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800244c:	f7fe fa26 	bl	800089c <__aeabi_ddiv>
 8002450:	f7fe fb0c 	bl	8000a6c <__aeabi_d2iz>
 8002454:	4b12      	ldr	r3, [pc, #72]	; (80024a0 <main+0x1a8>)
 8002456:	6018      	str	r0, [r3, #0]
		sprintf(txBuf, "%d,%d\r\n", Vin, Vout);
 8002458:	6832      	ldr	r2, [r6, #0]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4911      	ldr	r1, [pc, #68]	; (80024a4 <main+0x1ac>)
 800245e:	a801      	add	r0, sp, #4
 8002460:	f005 fab2 	bl	80079c8 <siprintf>
		CDC_Transmit_FS((uint8_t*) txBuf, strlen(txBuf));
 8002464:	a801      	add	r0, sp, #4
 8002466:	f7fd fedb 	bl	8000220 <strlen>
 800246a:	b281      	uxth	r1, r0
 800246c:	a801      	add	r0, sp, #4
 800246e:	f005 f87b 	bl	8007568 <CDC_Transmit_FS>
		HAL_Delay(1);
 8002472:	2001      	movs	r0, #1
 8002474:	f000 faea 	bl	8002a4c <HAL_Delay>
	while (1)
 8002478:	e7bb      	b.n	80023f2 <main+0xfa>
    return 32U;
 800247a:	2320      	movs	r3, #32
 800247c:	e7af      	b.n	80023de <main+0xe6>
 800247e:	bf00      	nop
 8002480:	cdb13151 	.word	0xcdb13151
 8002484:	3fa05b32 	.word	0x3fa05b32
 8002488:	40016800 	.word	0x40016800
 800248c:	4001680c 	.word	0x4001680c
 8002490:	080082cc 	.word	0x080082cc
 8002494:	00100101 	.word	0x00100101
 8002498:	200005c4 	.word	0x200005c4
 800249c:	50000080 	.word	0x50000080
 80024a0:	200005c0 	.word	0x200005c0
 80024a4:	0800823c 	.word	0x0800823c

080024a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024a8:	b500      	push	{lr}
 80024aa:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024ac:	4b0e      	ldr	r3, [pc, #56]	; (80024e8 <HAL_MspInit+0x40>)
 80024ae:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80024b0:	f042 0201 	orr.w	r2, r2, #1
 80024b4:	661a      	str	r2, [r3, #96]	; 0x60
 80024b6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80024b8:	f002 0201 	and.w	r2, r2, #1
 80024bc:	9200      	str	r2, [sp, #0]
 80024be:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024c0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80024c2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80024c6:	659a      	str	r2, [r3, #88]	; 0x58
 80024c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ce:	9301      	str	r3, [sp, #4]
 80024d0:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** Disable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_DisableVREFBUF();
 80024d2:	f000 fad9 	bl	8002a88 <HAL_SYSCFG_DisableVREFBUF>
  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 80024d6:	2000      	movs	r0, #0
 80024d8:	f000 facc 	bl	8002a74 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>
  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80024dc:	f001 fe0c 	bl	80040f8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024e0:	b003      	add	sp, #12
 80024e2:	f85d fb04 	ldr.w	pc, [sp], #4
 80024e6:	bf00      	nop
 80024e8:	40021000 	.word	0x40021000

080024ec <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80024ec:	b500      	push	{lr}
 80024ee:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024f0:	2300      	movs	r3, #0
 80024f2:	9303      	str	r3, [sp, #12]
 80024f4:	9304      	str	r3, [sp, #16]
 80024f6:	9305      	str	r3, [sp, #20]
 80024f8:	9306      	str	r3, [sp, #24]
 80024fa:	9307      	str	r3, [sp, #28]
  if(hfdcan->Instance==FDCAN2)
 80024fc:	6802      	ldr	r2, [r0, #0]
 80024fe:	4b14      	ldr	r3, [pc, #80]	; (8002550 <HAL_FDCAN_MspInit+0x64>)
 8002500:	429a      	cmp	r2, r3
 8002502:	d002      	beq.n	800250a <HAL_FDCAN_MspInit+0x1e>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8002504:	b009      	add	sp, #36	; 0x24
 8002506:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800250a:	f503 33d4 	add.w	r3, r3, #108544	; 0x1a800
 800250e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002510:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8002514:	659a      	str	r2, [r3, #88]	; 0x58
 8002516:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002518:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 800251c:	9201      	str	r2, [sp, #4]
 800251e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002520:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002522:	f042 0202 	orr.w	r2, r2, #2
 8002526:	64da      	str	r2, [r3, #76]	; 0x4c
 8002528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800252a:	f003 0302 	and.w	r3, r3, #2
 800252e:	9302      	str	r3, [sp, #8]
 8002530:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002532:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002536:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002538:	2302      	movs	r3, #2
 800253a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253c:	2300      	movs	r3, #0
 800253e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002540:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8002542:	2309      	movs	r3, #9
 8002544:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002546:	a903      	add	r1, sp, #12
 8002548:	4802      	ldr	r0, [pc, #8]	; (8002554 <HAL_FDCAN_MspInit+0x68>)
 800254a:	f000 fc3f 	bl	8002dcc <HAL_GPIO_Init>
}
 800254e:	e7d9      	b.n	8002504 <HAL_FDCAN_MspInit+0x18>
 8002550:	40006800 	.word	0x40006800
 8002554:	48000400 	.word	0x48000400

08002558 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800255c:	b08c      	sub	sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800255e:	2300      	movs	r3, #0
 8002560:	9307      	str	r3, [sp, #28]
 8002562:	9308      	str	r3, [sp, #32]
 8002564:	9309      	str	r3, [sp, #36]	; 0x24
 8002566:	930a      	str	r3, [sp, #40]	; 0x28
 8002568:	930b      	str	r3, [sp, #44]	; 0x2c
  if(hi2c->Instance==I2C1)
 800256a:	6803      	ldr	r3, [r0, #0]
 800256c:	4a3e      	ldr	r2, [pc, #248]	; (8002668 <HAL_I2C_MspInit+0x110>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d005      	beq.n	800257e <HAL_I2C_MspInit+0x26>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
  else if(hi2c->Instance==I2C2)
 8002572:	4a3e      	ldr	r2, [pc, #248]	; (800266c <HAL_I2C_MspInit+0x114>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d03c      	beq.n	80025f2 <HAL_I2C_MspInit+0x9a>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002578:	b00c      	add	sp, #48	; 0x30
 800257a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800257e:	4c3c      	ldr	r4, [pc, #240]	; (8002670 <HAL_I2C_MspInit+0x118>)
 8002580:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002582:	f043 0301 	orr.w	r3, r3, #1
 8002586:	64e3      	str	r3, [r4, #76]	; 0x4c
 8002588:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800258a:	f003 0301 	and.w	r3, r3, #1
 800258e:	9301      	str	r3, [sp, #4]
 8002590:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002592:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002594:	f043 0302 	orr.w	r3, r3, #2
 8002598:	64e3      	str	r3, [r4, #76]	; 0x4c
 800259a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800259c:	f003 0302 	and.w	r3, r3, #2
 80025a0:	9302      	str	r3, [sp, #8]
 80025a2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80025a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025a8:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025aa:	f04f 0812 	mov.w	r8, #18
 80025ae:	f8cd 8020 	str.w	r8, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025b2:	2701      	movs	r7, #1
 80025b4:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025b6:	2600      	movs	r6, #0
 80025b8:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80025ba:	2504      	movs	r5, #4
 80025bc:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025be:	a907      	add	r1, sp, #28
 80025c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025c4:	f000 fc02 	bl	8002dcc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80025c8:	2380      	movs	r3, #128	; 0x80
 80025ca:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025cc:	f8cd 8020 	str.w	r8, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025d0:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025d2:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80025d4:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025d6:	a907      	add	r1, sp, #28
 80025d8:	4826      	ldr	r0, [pc, #152]	; (8002674 <HAL_I2C_MspInit+0x11c>)
 80025da:	f000 fbf7 	bl	8002dcc <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 80025de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80025e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80025e4:	65a3      	str	r3, [r4, #88]	; 0x58
 80025e6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80025e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025ec:	9303      	str	r3, [sp, #12]
 80025ee:	9b03      	ldr	r3, [sp, #12]
 80025f0:	e7c2      	b.n	8002578 <HAL_I2C_MspInit+0x20>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025f2:	4c1f      	ldr	r4, [pc, #124]	; (8002670 <HAL_I2C_MspInit+0x118>)
 80025f4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80025f6:	f043 0304 	orr.w	r3, r3, #4
 80025fa:	64e3      	str	r3, [r4, #76]	; 0x4c
 80025fc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80025fe:	f003 0304 	and.w	r3, r3, #4
 8002602:	9304      	str	r3, [sp, #16]
 8002604:	9b04      	ldr	r3, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002606:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002608:	f043 0301 	orr.w	r3, r3, #1
 800260c:	64e3      	str	r3, [r4, #76]	; 0x4c
 800260e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002610:	f003 0301 	and.w	r3, r3, #1
 8002614:	9305      	str	r3, [sp, #20]
 8002616:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002618:	2310      	movs	r3, #16
 800261a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800261c:	f04f 0812 	mov.w	r8, #18
 8002620:	f8cd 8020 	str.w	r8, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002624:	2701      	movs	r7, #1
 8002626:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002628:	2600      	movs	r6, #0
 800262a:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800262c:	2504      	movs	r5, #4
 800262e:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002630:	a907      	add	r1, sp, #28
 8002632:	4811      	ldr	r0, [pc, #68]	; (8002678 <HAL_I2C_MspInit+0x120>)
 8002634:	f000 fbca 	bl	8002dcc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002638:	f44f 7380 	mov.w	r3, #256	; 0x100
 800263c:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800263e:	f8cd 8020 	str.w	r8, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002642:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002644:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002646:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002648:	a907      	add	r1, sp, #28
 800264a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800264e:	f000 fbbd 	bl	8002dcc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002652:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002654:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002658:	65a3      	str	r3, [r4, #88]	; 0x58
 800265a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800265c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002660:	9306      	str	r3, [sp, #24]
 8002662:	9b06      	ldr	r3, [sp, #24]
}
 8002664:	e788      	b.n	8002578 <HAL_I2C_MspInit+0x20>
 8002666:	bf00      	nop
 8002668:	40005400 	.word	0x40005400
 800266c:	40005800 	.word	0x40005800
 8002670:	40021000 	.word	0x40021000
 8002674:	48000400 	.word	0x48000400
 8002678:	48000800 	.word	0x48000800

0800267c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800267c:	b570      	push	{r4, r5, r6, lr}
 800267e:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002680:	2300      	movs	r3, #0
 8002682:	9303      	str	r3, [sp, #12]
 8002684:	9304      	str	r3, [sp, #16]
 8002686:	9305      	str	r3, [sp, #20]
 8002688:	9306      	str	r3, [sp, #24]
 800268a:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI3)
 800268c:	6802      	ldr	r2, [r0, #0]
 800268e:	4b1d      	ldr	r3, [pc, #116]	; (8002704 <HAL_SPI_MspInit+0x88>)
 8002690:	429a      	cmp	r2, r3
 8002692:	d001      	beq.n	8002698 <HAL_SPI_MspInit+0x1c>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002694:	b008      	add	sp, #32
 8002696:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002698:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 800269c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800269e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026a2:	659a      	str	r2, [r3, #88]	; 0x58
 80026a4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80026a6:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 80026aa:	9200      	str	r2, [sp, #0]
 80026ac:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80026b0:	f042 0204 	orr.w	r2, r2, #4
 80026b4:	64da      	str	r2, [r3, #76]	; 0x4c
 80026b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80026b8:	f002 0204 	and.w	r2, r2, #4
 80026bc:	9201      	str	r2, [sp, #4]
 80026be:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80026c2:	f042 0202 	orr.w	r2, r2, #2
 80026c6:	64da      	str	r2, [r3, #76]	; 0x4c
 80026c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026ca:	f003 0302 	and.w	r3, r3, #2
 80026ce:	9302      	str	r3, [sp, #8]
 80026d0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80026d2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80026d6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026d8:	2602      	movs	r6, #2
 80026da:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026dc:	2400      	movs	r4, #0
 80026de:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026e0:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80026e2:	2506      	movs	r5, #6
 80026e4:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026e6:	a903      	add	r1, sp, #12
 80026e8:	4807      	ldr	r0, [pc, #28]	; (8002708 <HAL_SPI_MspInit+0x8c>)
 80026ea:	f000 fb6f 	bl	8002dcc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80026ee:	2320      	movs	r3, #32
 80026f0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026f2:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f4:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026f6:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80026f8:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026fa:	a903      	add	r1, sp, #12
 80026fc:	4803      	ldr	r0, [pc, #12]	; (800270c <HAL_SPI_MspInit+0x90>)
 80026fe:	f000 fb65 	bl	8002dcc <HAL_GPIO_Init>
}
 8002702:	e7c7      	b.n	8002694 <HAL_SPI_MspInit+0x18>
 8002704:	40003c00 	.word	0x40003c00
 8002708:	48000800 	.word	0x48000800
 800270c:	48000400 	.word	0x48000400

08002710 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002710:	b570      	push	{r4, r5, r6, lr}
 8002712:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002714:	2300      	movs	r3, #0
 8002716:	9303      	str	r3, [sp, #12]
 8002718:	9304      	str	r3, [sp, #16]
 800271a:	9305      	str	r3, [sp, #20]
 800271c:	9306      	str	r3, [sp, #24]
 800271e:	9307      	str	r3, [sp, #28]
  if(huart->Instance==UART5)
 8002720:	6802      	ldr	r2, [r0, #0]
 8002722:	4b1d      	ldr	r3, [pc, #116]	; (8002798 <HAL_UART_MspInit+0x88>)
 8002724:	429a      	cmp	r2, r3
 8002726:	d001      	beq.n	800272c <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 8002728:	b008      	add	sp, #32
 800272a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_UART5_CLK_ENABLE();
 800272c:	f503 33e0 	add.w	r3, r3, #114688	; 0x1c000
 8002730:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002732:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002736:	659a      	str	r2, [r3, #88]	; 0x58
 8002738:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800273a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800273e:	9200      	str	r2, [sp, #0]
 8002740:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002742:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002744:	f042 0204 	orr.w	r2, r2, #4
 8002748:	64da      	str	r2, [r3, #76]	; 0x4c
 800274a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800274c:	f002 0204 	and.w	r2, r2, #4
 8002750:	9201      	str	r2, [sp, #4]
 8002752:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002754:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002756:	f042 0208 	orr.w	r2, r2, #8
 800275a:	64da      	str	r2, [r3, #76]	; 0x4c
 800275c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800275e:	f003 0308 	and.w	r3, r3, #8
 8002762:	9302      	str	r3, [sp, #8]
 8002764:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002766:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800276a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800276c:	2602      	movs	r6, #2
 800276e:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002770:	2400      	movs	r4, #0
 8002772:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002774:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8002776:	2505      	movs	r5, #5
 8002778:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800277a:	a903      	add	r1, sp, #12
 800277c:	4807      	ldr	r0, [pc, #28]	; (800279c <HAL_UART_MspInit+0x8c>)
 800277e:	f000 fb25 	bl	8002dcc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002782:	2304      	movs	r3, #4
 8002784:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002786:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002788:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800278a:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 800278c:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800278e:	a903      	add	r1, sp, #12
 8002790:	4803      	ldr	r0, [pc, #12]	; (80027a0 <HAL_UART_MspInit+0x90>)
 8002792:	f000 fb1b 	bl	8002dcc <HAL_GPIO_Init>
}
 8002796:	e7c7      	b.n	8002728 <HAL_UART_MspInit+0x18>
 8002798:	40005000 	.word	0x40005000
 800279c:	48000800 	.word	0x48000800
 80027a0:	48000c00 	.word	0x48000c00

080027a4 <NMI_Handler>:
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 80027a4:	b508      	push	{r3, lr}
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	HAL_RCC_NMI_IRQHandler();
 80027a6:	f002 f8bf 	bl	8004928 <HAL_RCC_NMI_IRQHandler>
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */

	/* USER CODE END NonMaskableInt_IRQn 1 */
}
 80027aa:	bd08      	pop	{r3, pc}

080027ac <HardFault_Handler>:
void HardFault_Handler(void)
{
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1)
 80027ac:	e7fe      	b.n	80027ac <HardFault_Handler>

080027ae <MemManage_Handler>:
void MemManage_Handler(void)
{
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1)
 80027ae:	e7fe      	b.n	80027ae <MemManage_Handler>

080027b0 <BusFault_Handler>:
void BusFault_Handler(void)
{
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1)
 80027b0:	e7fe      	b.n	80027b0 <BusFault_Handler>

080027b2 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1)
 80027b2:	e7fe      	b.n	80027b2 <UsageFault_Handler>

080027b4 <SVC_Handler>:

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 80027b4:	4770      	bx	lr

080027b6 <DebugMon_Handler>:

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 80027b6:	4770      	bx	lr

080027b8 <PendSV_Handler>:

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 80027b8:	4770      	bx	lr

080027ba <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void)
{
 80027ba:	b508      	push	{r3, lr}
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 80027bc:	f000 f934 	bl	8002a28 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 80027c0:	bd08      	pop	{r3, pc}

080027c2 <ADC1_2_IRQHandler>:
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
 80027c2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80027c6:	2240      	movs	r2, #64	; 0x40
 80027c8:	601a      	str	r2, [r3, #0]
	/* USER CODE END ADC1_2_IRQn 0 */

	/* USER CODE BEGIN ADC1_2_IRQn 1 */

	/* USER CODE END ADC1_2_IRQn 1 */
}
 80027ca:	4770      	bx	lr

080027cc <USB_LP_IRQHandler>:

/**
 * @brief This function handles USB low priority interrupt remap.
 */
void USB_LP_IRQHandler(void)
{
 80027cc:	b508      	push	{r3, lr}
	/* USER CODE BEGIN USB_LP_IRQn 0 */

	/* USER CODE END USB_LP_IRQn 0 */
	HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80027ce:	4802      	ldr	r0, [pc, #8]	; (80027d8 <USB_LP_IRQHandler+0xc>)
 80027d0:	f001 f9bf 	bl	8003b52 <HAL_PCD_IRQHandler>
	/* USER CODE BEGIN USB_LP_IRQn 1 */

	/* USER CODE END USB_LP_IRQn 1 */
}
 80027d4:	bd08      	pop	{r3, pc}
 80027d6:	bf00      	nop
 80027d8:	20001b00 	.word	0x20001b00

080027dc <constrain>:
	/* USER CODE END HRTIM1_TIMF_IRQn 1 */
}

/* USER CODE BEGIN 1 */
uint32_t constrain(uint32_t input, uint32_t upperLimit, uint32_t lowerLimit)
{
 80027dc:	4603      	mov	r3, r0
 80027de:	4610      	mov	r0, r2
	return input > lowerLimit ? (input < upperLimit ? input : upperLimit) : lowerLimit;
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d903      	bls.n	80027ec <constrain+0x10>
 80027e4:	428b      	cmp	r3, r1
 80027e6:	bf28      	it	cs
 80027e8:	460b      	movcs	r3, r1
 80027ea:	4618      	mov	r0, r3
}
 80027ec:	4770      	bx	lr
	...

080027f0 <HRTIM1_TIMF_IRQHandler>:
{
 80027f0:	b538      	push	{r3, r4, r5, lr}
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80027f6:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d06c      	beq.n	80028d8 <HRTIM1_TIMF_IRQHandler+0xe8>
  return __builtin_clz(value);
 80027fe:	fab3 f383 	clz	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_MCEN_Pos);
 8002802:	3b10      	subs	r3, #16
 8002804:	b2db      	uxtb	r3, r3
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sMasterRegs.MICR) +
 8002806:	4939      	ldr	r1, [pc, #228]	; (80028ec <HRTIM1_TIMF_IRQHandler+0xfc>)
                                                              REG_OFFSET_TAB_TIMER[iTimer]));
 8002808:	4a39      	ldr	r2, [pc, #228]	; (80028f0 <HRTIM1_TIMF_IRQHandler+0x100>)
 800280a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
  SET_BIT(*pReg, HRTIM_MICR_MREP);
 800280e:	588b      	ldr	r3, [r1, r2]
 8002810:	f043 0310 	orr.w	r3, r3, #16
 8002814:	508b      	str	r3, [r1, r2]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002816:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800281a:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 800281e:	2b00      	cmp	r3, #0
 8002820:	d05c      	beq.n	80028dc <HRTIM1_TIMF_IRQHandler+0xec>
  return __builtin_clz(value);
 8002822:	fab3 f383 	clz	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_MCEN_Pos);
 8002826:	3b10      	subs	r3, #16
 8002828:	b2db      	uxtb	r3, r3
  const __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sMasterRegs.MCMP1R) +
 800282a:	4c32      	ldr	r4, [pc, #200]	; (80028f4 <HRTIM1_TIMF_IRQHandler+0x104>)
                                                                    REG_OFFSET_TAB_TIMER[iTimer]));
 800282c:	4a30      	ldr	r2, [pc, #192]	; (80028f0 <HRTIM1_TIMF_IRQHandler+0x100>)
 800282e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
  return (READ_BIT(*pReg, HRTIM_MCMP1R_MCMP1R));
 8002832:	58e5      	ldr	r5, [r4, r3]
 8002834:	b2ad      	uxth	r5, r5
	if (Vin > TARGET_VOUT)
 8002836:	4b30      	ldr	r3, [pc, #192]	; (80028f8 <HRTIM1_TIMF_IRQHandler+0x108>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 800283e:	dd00      	ble.n	8002842 <HRTIM1_TIMF_IRQHandler+0x52>
		CurrentDuty--;
 8002840:	3d01      	subs	r5, #1
	if (Vin < TARGET_VOUT)
 8002842:	4b2d      	ldr	r3, [pc, #180]	; (80028f8 <HRTIM1_TIMF_IRQHandler+0x108>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 800284a:	da00      	bge.n	800284e <HRTIM1_TIMF_IRQHandler+0x5e>
		CurrentDuty++;
 800284c:	3501      	adds	r5, #1
	LL_HRTIM_TIM_SetCompare1(HRTIM1, LL_HRTIM_TIMER_E, constrain(CurrentDuty, PWM_PERIOD * 0.95, 100));
 800284e:	2264      	movs	r2, #100	; 0x64
 8002850:	f245 01c0 	movw	r1, #20672	; 0x50c0
 8002854:	4628      	mov	r0, r5
 8002856:	f7ff ffc1 	bl	80027dc <constrain>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800285a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800285e:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8002862:	2b00      	cmp	r3, #0
 8002864:	d03c      	beq.n	80028e0 <HRTIM1_TIMF_IRQHandler+0xf0>
  return __builtin_clz(value);
 8002866:	fab3 f383 	clz	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_MCEN_Pos);
 800286a:	3b10      	subs	r3, #16
 800286c:	b2db      	uxtb	r3, r3
                                                              REG_OFFSET_TAB_TIMER[iTimer]));
 800286e:	4a20      	ldr	r2, [pc, #128]	; (80028f0 <HRTIM1_TIMF_IRQHandler+0x100>)
 8002870:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
  MODIFY_REG(* pReg, HRTIM_MCMP1R_MCMP1R, CompareValue);
 8002874:	58a3      	ldr	r3, [r4, r2]
 8002876:	0c1b      	lsrs	r3, r3, #16
 8002878:	041b      	lsls	r3, r3, #16
 800287a:	4318      	orrs	r0, r3
 800287c:	50a0      	str	r0, [r4, r2]
	LL_HRTIM_TIM_SetCompare2(HRTIM1, LL_HRTIM_TIMER_F, constrain(CurrentDuty / 2, PWM_PERIOD * 0.95, 50));
 800287e:	2232      	movs	r2, #50	; 0x32
 8002880:	f245 01c0 	movw	r1, #20672	; 0x50c0
 8002884:	0868      	lsrs	r0, r5, #1
 8002886:	f7ff ffa9 	bl	80027dc <constrain>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800288a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800288e:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8002892:	b33b      	cbz	r3, 80028e4 <HRTIM1_TIMF_IRQHandler+0xf4>
  return __builtin_clz(value);
 8002894:	fab3 f383 	clz	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_MCEN_Pos);
 8002898:	3b10      	subs	r3, #16
 800289a:	b2db      	uxtb	r3, r3
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sMasterRegs.MCMP2R) +
 800289c:	4917      	ldr	r1, [pc, #92]	; (80028fc <HRTIM1_TIMF_IRQHandler+0x10c>)
                                                              REG_OFFSET_TAB_TIMER[iTimer]));
 800289e:	4a14      	ldr	r2, [pc, #80]	; (80028f0 <HRTIM1_TIMF_IRQHandler+0x100>)
 80028a0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
  MODIFY_REG(* pReg, HRTIM_MCMP1R_MCMP2R, CompareValue);
 80028a4:	588b      	ldr	r3, [r1, r2]
 80028a6:	0c1b      	lsrs	r3, r3, #16
 80028a8:	041b      	lsls	r3, r3, #16
 80028aa:	4318      	orrs	r0, r3
 80028ac:	5088      	str	r0, [r1, r2]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80028b2:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 80028b6:	b1bb      	cbz	r3, 80028e8 <HRTIM1_TIMF_IRQHandler+0xf8>
  return __builtin_clz(value);
 80028b8:	fab3 f383 	clz	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_MCEN_Pos);
 80028bc:	3b10      	subs	r3, #16
 80028be:	b2db      	uxtb	r3, r3
                                                              REG_OFFSET_TAB_TIMER[iTimer]));
 80028c0:	4a0b      	ldr	r2, [pc, #44]	; (80028f0 <HRTIM1_TIMF_IRQHandler+0x100>)
 80028c2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
  MODIFY_REG(* pReg, HRTIM_MCMP1R_MCMP1R, CompareValue);
 80028c6:	58a3      	ldr	r3, [r4, r2]
 80028c8:	0c1b      	lsrs	r3, r3, #16
 80028ca:	041b      	lsls	r3, r3, #16
 80028cc:	f443 43aa 	orr.w	r3, r3, #21760	; 0x5500
 80028d0:	f043 0301 	orr.w	r3, r3, #1
 80028d4:	50a3      	str	r3, [r4, r2]
}
 80028d6:	bd38      	pop	{r3, r4, r5, pc}
    return 32U;
 80028d8:	2320      	movs	r3, #32
 80028da:	e792      	b.n	8002802 <HRTIM1_TIMF_IRQHandler+0x12>
 80028dc:	2320      	movs	r3, #32
 80028de:	e7a2      	b.n	8002826 <HRTIM1_TIMF_IRQHandler+0x36>
 80028e0:	2320      	movs	r3, #32
 80028e2:	e7c2      	b.n	800286a <HRTIM1_TIMF_IRQHandler+0x7a>
 80028e4:	2320      	movs	r3, #32
 80028e6:	e7d7      	b.n	8002898 <HRTIM1_TIMF_IRQHandler+0xa8>
 80028e8:	2320      	movs	r3, #32
 80028ea:	e7e7      	b.n	80028bc <HRTIM1_TIMF_IRQHandler+0xcc>
 80028ec:	40016808 	.word	0x40016808
 80028f0:	080082f8 	.word	0x080082f8
 80028f4:	4001681c 	.word	0x4001681c
 80028f8:	200005c4 	.word	0x200005c4
 80028fc:	40016824 	.word	0x40016824

08002900 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002900:	b510      	push	{r4, lr}
 8002902:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002904:	4a0c      	ldr	r2, [pc, #48]	; (8002938 <_sbrk+0x38>)
 8002906:	490d      	ldr	r1, [pc, #52]	; (800293c <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002908:	480d      	ldr	r0, [pc, #52]	; (8002940 <_sbrk+0x40>)
 800290a:	6800      	ldr	r0, [r0, #0]
 800290c:	b140      	cbz	r0, 8002920 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800290e:	480c      	ldr	r0, [pc, #48]	; (8002940 <_sbrk+0x40>)
 8002910:	6800      	ldr	r0, [r0, #0]
 8002912:	4403      	add	r3, r0
 8002914:	1a52      	subs	r2, r2, r1
 8002916:	4293      	cmp	r3, r2
 8002918:	d806      	bhi.n	8002928 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 800291a:	4a09      	ldr	r2, [pc, #36]	; (8002940 <_sbrk+0x40>)
 800291c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 800291e:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8002920:	4807      	ldr	r0, [pc, #28]	; (8002940 <_sbrk+0x40>)
 8002922:	4c08      	ldr	r4, [pc, #32]	; (8002944 <_sbrk+0x44>)
 8002924:	6004      	str	r4, [r0, #0]
 8002926:	e7f2      	b.n	800290e <_sbrk+0xe>
    errno = ENOMEM;
 8002928:	f005 f81c 	bl	8007964 <__errno>
 800292c:	230c      	movs	r3, #12
 800292e:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8002930:	f04f 30ff 	mov.w	r0, #4294967295
 8002934:	e7f3      	b.n	800291e <_sbrk+0x1e>
 8002936:	bf00      	nop
 8002938:	20020000 	.word	0x20020000
 800293c:	00000400 	.word	0x00000400
 8002940:	20000204 	.word	0x20000204
 8002944:	20001e08 	.word	0x20001e08

08002948 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002948:	4b05      	ldr	r3, [pc, #20]	; (8002960 <SystemInit+0x18>)
 800294a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800294e:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8002952:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002956:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800295a:	609a      	str	r2, [r3, #8]
#endif
}
 800295c:	4770      	bx	lr
 800295e:	bf00      	nop
 8002960:	e000ed00 	.word	0xe000ed00

08002964 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002964:	480d      	ldr	r0, [pc, #52]	; (800299c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002966:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002968:	480d      	ldr	r0, [pc, #52]	; (80029a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800296a:	490e      	ldr	r1, [pc, #56]	; (80029a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800296c:	4a0e      	ldr	r2, [pc, #56]	; (80029a8 <LoopForever+0xe>)
  movs r3, #0
 800296e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002970:	e002      	b.n	8002978 <LoopCopyDataInit>

08002972 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002972:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002974:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002976:	3304      	adds	r3, #4

08002978 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002978:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800297a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800297c:	d3f9      	bcc.n	8002972 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800297e:	4a0b      	ldr	r2, [pc, #44]	; (80029ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8002980:	4c0b      	ldr	r4, [pc, #44]	; (80029b0 <LoopForever+0x16>)
  movs r3, #0
 8002982:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002984:	e001      	b.n	800298a <LoopFillZerobss>

08002986 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002986:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002988:	3204      	adds	r2, #4

0800298a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800298a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800298c:	d3fb      	bcc.n	8002986 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800298e:	f7ff ffdb 	bl	8002948 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002992:	f004 ffed 	bl	8007970 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002996:	f7ff fcaf 	bl	80022f8 <main>

0800299a <LoopForever>:

LoopForever:
    b LoopForever
 800299a:	e7fe      	b.n	800299a <LoopForever>
  ldr   r0, =_estack
 800299c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80029a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029a4:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 80029a8:	080083b8 	.word	0x080083b8
  ldr r2, =_sbss
 80029ac:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80029b0:	20001e04 	.word	0x20001e04

080029b4 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80029b4:	e7fe      	b.n	80029b4 <ADC3_IRQHandler>
	...

080029b8 <HAL_InitTick>:
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 80029b8:	4b10      	ldr	r3, [pc, #64]	; (80029fc <HAL_InitTick+0x44>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	b90b      	cbnz	r3, 80029c2 <HAL_InitTick+0xa>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 80029be:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 80029c0:	4770      	bx	lr
{
 80029c2:	b510      	push	{r4, lr}
 80029c4:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80029c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80029ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80029ce:	4a0c      	ldr	r2, [pc, #48]	; (8002a00 <HAL_InitTick+0x48>)
 80029d0:	6810      	ldr	r0, [r2, #0]
 80029d2:	fbb0 f0f3 	udiv	r0, r0, r3
 80029d6:	f000 f8b3 	bl	8002b40 <HAL_SYSTICK_Config>
 80029da:	b968      	cbnz	r0, 80029f8 <HAL_InitTick+0x40>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029dc:	2c0f      	cmp	r4, #15
 80029de:	d901      	bls.n	80029e4 <HAL_InitTick+0x2c>
        status = HAL_ERROR;
 80029e0:	2001      	movs	r0, #1
 80029e2:	e00a      	b.n	80029fa <HAL_InitTick+0x42>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029e4:	2200      	movs	r2, #0
 80029e6:	4621      	mov	r1, r4
 80029e8:	f04f 30ff 	mov.w	r0, #4294967295
 80029ec:	f000 f866 	bl	8002abc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80029f0:	4b04      	ldr	r3, [pc, #16]	; (8002a04 <HAL_InitTick+0x4c>)
 80029f2:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 80029f4:	2000      	movs	r0, #0
 80029f6:	e000      	b.n	80029fa <HAL_InitTick+0x42>
      status = HAL_ERROR;
 80029f8:	2001      	movs	r0, #1
}
 80029fa:	bd10      	pop	{r4, pc}
 80029fc:	20000004 	.word	0x20000004
 8002a00:	20000000 	.word	0x20000000
 8002a04:	20000008 	.word	0x20000008

08002a08 <HAL_Init>:
{
 8002a08:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a0a:	2003      	movs	r0, #3
 8002a0c:	f000 f844 	bl	8002a98 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002a10:	2000      	movs	r0, #0
 8002a12:	f7ff ffd1 	bl	80029b8 <HAL_InitTick>
 8002a16:	b110      	cbz	r0, 8002a1e <HAL_Init+0x16>
    status = HAL_ERROR;
 8002a18:	2401      	movs	r4, #1
}
 8002a1a:	4620      	mov	r0, r4
 8002a1c:	bd10      	pop	{r4, pc}
 8002a1e:	4604      	mov	r4, r0
    HAL_MspInit();
 8002a20:	f7ff fd42 	bl	80024a8 <HAL_MspInit>
 8002a24:	e7f9      	b.n	8002a1a <HAL_Init+0x12>
	...

08002a28 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002a28:	4a03      	ldr	r2, [pc, #12]	; (8002a38 <HAL_IncTick+0x10>)
 8002a2a:	6813      	ldr	r3, [r2, #0]
 8002a2c:	4903      	ldr	r1, [pc, #12]	; (8002a3c <HAL_IncTick+0x14>)
 8002a2e:	6809      	ldr	r1, [r1, #0]
 8002a30:	440b      	add	r3, r1
 8002a32:	6013      	str	r3, [r2, #0]
}
 8002a34:	4770      	bx	lr
 8002a36:	bf00      	nop
 8002a38:	2000062c 	.word	0x2000062c
 8002a3c:	20000004 	.word	0x20000004

08002a40 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002a40:	4b01      	ldr	r3, [pc, #4]	; (8002a48 <HAL_GetTick+0x8>)
 8002a42:	6818      	ldr	r0, [r3, #0]
}
 8002a44:	4770      	bx	lr
 8002a46:	bf00      	nop
 8002a48:	2000062c 	.word	0x2000062c

08002a4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a4c:	b538      	push	{r3, r4, r5, lr}
 8002a4e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002a50:	f7ff fff6 	bl	8002a40 <HAL_GetTick>
 8002a54:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a56:	f1b4 3fff 	cmp.w	r4, #4294967295
 8002a5a:	d002      	beq.n	8002a62 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a5c:	4b04      	ldr	r3, [pc, #16]	; (8002a70 <HAL_Delay+0x24>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a62:	f7ff ffed 	bl	8002a40 <HAL_GetTick>
 8002a66:	1b40      	subs	r0, r0, r5
 8002a68:	42a0      	cmp	r0, r4
 8002a6a:	d3fa      	bcc.n	8002a62 <HAL_Delay+0x16>
  {
  }
}
 8002a6c:	bd38      	pop	{r3, r4, r5, pc}
 8002a6e:	bf00      	nop
 8002a70:	20000004 	.word	0x20000004

08002a74 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8002a74:	4a03      	ldr	r2, [pc, #12]	; (8002a84 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x10>)
 8002a76:	6813      	ldr	r3, [r2, #0]
 8002a78:	f023 0302 	bic.w	r3, r3, #2
 8002a7c:	4303      	orrs	r3, r0
 8002a7e:	6013      	str	r3, [r2, #0]
}
 8002a80:	4770      	bx	lr
 8002a82:	bf00      	nop
 8002a84:	40010030 	.word	0x40010030

08002a88 <HAL_SYSCFG_DisableVREFBUF>:
  *
  * @retval None
  */
void HAL_SYSCFG_DisableVREFBUF(void)
{
  CLEAR_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8002a88:	4a02      	ldr	r2, [pc, #8]	; (8002a94 <HAL_SYSCFG_DisableVREFBUF+0xc>)
 8002a8a:	6813      	ldr	r3, [r2, #0]
 8002a8c:	f023 0301 	bic.w	r3, r3, #1
 8002a90:	6013      	str	r3, [r2, #0]
}
 8002a92:	4770      	bx	lr
 8002a94:	40010030 	.word	0x40010030

08002a98 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a98:	4a07      	ldr	r2, [pc, #28]	; (8002ab8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002a9a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a9c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002aa0:	041b      	lsls	r3, r3, #16
 8002aa2:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002aa4:	0200      	lsls	r0, r0, #8
 8002aa6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002aaa:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8002aac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ab0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002ab4:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002ab6:	4770      	bx	lr
 8002ab8:	e000ed00 	.word	0xe000ed00

08002abc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002abc:	b430      	push	{r4, r5}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002abe:	4b17      	ldr	r3, [pc, #92]	; (8002b1c <HAL_NVIC_SetPriority+0x60>)
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ac6:	f1c3 0407 	rsb	r4, r3, #7
 8002aca:	2c04      	cmp	r4, #4
 8002acc:	bf28      	it	cs
 8002ace:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ad0:	1d1d      	adds	r5, r3, #4
 8002ad2:	2d06      	cmp	r5, #6
 8002ad4:	d918      	bls.n	8002b08 <HAL_NVIC_SetPriority+0x4c>
 8002ad6:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ad8:	f04f 35ff 	mov.w	r5, #4294967295
 8002adc:	fa05 f404 	lsl.w	r4, r5, r4
 8002ae0:	ea21 0104 	bic.w	r1, r1, r4
 8002ae4:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ae6:	fa05 f303 	lsl.w	r3, r5, r3
 8002aea:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002aee:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8002af0:	2800      	cmp	r0, #0
 8002af2:	db0b      	blt.n	8002b0c <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002af4:	0109      	lsls	r1, r1, #4
 8002af6:	b2c9      	uxtb	r1, r1
 8002af8:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8002afc:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8002b00:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002b04:	bc30      	pop	{r4, r5}
 8002b06:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b08:	2300      	movs	r3, #0
 8002b0a:	e7e5      	b.n	8002ad8 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b0c:	f000 000f 	and.w	r0, r0, #15
 8002b10:	0109      	lsls	r1, r1, #4
 8002b12:	b2c9      	uxtb	r1, r1
 8002b14:	4b02      	ldr	r3, [pc, #8]	; (8002b20 <HAL_NVIC_SetPriority+0x64>)
 8002b16:	5419      	strb	r1, [r3, r0]
 8002b18:	e7f4      	b.n	8002b04 <HAL_NVIC_SetPriority+0x48>
 8002b1a:	bf00      	nop
 8002b1c:	e000ed00 	.word	0xe000ed00
 8002b20:	e000ed14 	.word	0xe000ed14

08002b24 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002b24:	2800      	cmp	r0, #0
 8002b26:	db07      	blt.n	8002b38 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b28:	f000 021f 	and.w	r2, r0, #31
 8002b2c:	0940      	lsrs	r0, r0, #5
 8002b2e:	2301      	movs	r3, #1
 8002b30:	4093      	lsls	r3, r2
 8002b32:	4a02      	ldr	r2, [pc, #8]	; (8002b3c <HAL_NVIC_EnableIRQ+0x18>)
 8002b34:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002b38:	4770      	bx	lr
 8002b3a:	bf00      	nop
 8002b3c:	e000e100 	.word	0xe000e100

08002b40 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b40:	3801      	subs	r0, #1
 8002b42:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002b46:	d20a      	bcs.n	8002b5e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b48:	4b06      	ldr	r3, [pc, #24]	; (8002b64 <HAL_SYSTICK_Config+0x24>)
 8002b4a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b4c:	4a06      	ldr	r2, [pc, #24]	; (8002b68 <HAL_SYSTICK_Config+0x28>)
 8002b4e:	21f0      	movs	r1, #240	; 0xf0
 8002b50:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b54:	2000      	movs	r0, #0
 8002b56:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b58:	2207      	movs	r2, #7
 8002b5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b5c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002b5e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002b60:	4770      	bx	lr
 8002b62:	bf00      	nop
 8002b64:	e000e010 	.word	0xe000e010
 8002b68:	e000ed00 	.word	0xe000ed00

08002b6c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8002b6c:	b410      	push	{r4}
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8002b6e:	6802      	ldr	r2, [r0, #0]
 8002b70:	4b1d      	ldr	r3, [pc, #116]	; (8002be8 <FDCAN_CalcultateRamBlockAddresses+0x7c>)
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d02f      	beq.n	8002bd6 <FDCAN_CalcultateRamBlockAddresses+0x6a>
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8002b76:	491d      	ldr	r1, [pc, #116]	; (8002bec <FDCAN_CalcultateRamBlockAddresses+0x80>)
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8002b78:	4b1d      	ldr	r3, [pc, #116]	; (8002bf0 <FDCAN_CalcultateRamBlockAddresses+0x84>)
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d02d      	beq.n	8002bda <FDCAN_CalcultateRamBlockAddresses+0x6e>
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8002b7e:	6401      	str	r1, [r0, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8002b80:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8002b84:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002b88:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8002b8a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8002b8e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8002b92:	f101 0370 	add.w	r3, r1, #112	; 0x70
 8002b96:	6443      	str	r3, [r0, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8002b98:	6802      	ldr	r2, [r0, #0]
 8002b9a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8002b9e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8002ba2:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8002ba4:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
 8002ba8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8002bac:	f101 03b0 	add.w	r3, r1, #176	; 0xb0
 8002bb0:	6483      	str	r3, [r0, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8002bb2:	f501 73c4 	add.w	r3, r1, #392	; 0x188
 8002bb6:	64c3      	str	r3, [r0, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8002bb8:	f501 7318 	add.w	r3, r1, #608	; 0x260
 8002bbc:	6503      	str	r3, [r0, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8002bbe:	f501 731e 	add.w	r3, r1, #632	; 0x278
 8002bc2:	6543      	str	r3, [r0, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002bc4:	460b      	mov	r3, r1
 8002bc6:	f501 7254 	add.w	r2, r1, #848	; 0x350
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d908      	bls.n	8002be0 <FDCAN_CalcultateRamBlockAddresses+0x74>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8002bce:	2200      	movs	r2, #0
 8002bd0:	f843 2b04 	str.w	r2, [r3], #4
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002bd4:	e7f7      	b.n	8002bc6 <FDCAN_CalcultateRamBlockAddresses+0x5a>
    SramCanInstanceBase += SRAMCAN_SIZE;
 8002bd6:	4907      	ldr	r1, [pc, #28]	; (8002bf4 <FDCAN_CalcultateRamBlockAddresses+0x88>)
 8002bd8:	e7ce      	b.n	8002b78 <FDCAN_CalcultateRamBlockAddresses+0xc>
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8002bda:	f501 61d4 	add.w	r1, r1, #1696	; 0x6a0
 8002bde:	e7ce      	b.n	8002b7e <FDCAN_CalcultateRamBlockAddresses+0x12>
  }
}
 8002be0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	40006800 	.word	0x40006800
 8002bec:	4000a400 	.word	0x4000a400
 8002bf0:	40006c00 	.word	0x40006c00
 8002bf4:	4000a750 	.word	0x4000a750

08002bf8 <HAL_FDCAN_Init>:
  if (hfdcan == NULL)
 8002bf8:	2800      	cmp	r0, #0
 8002bfa:	f000 80e2 	beq.w	8002dc2 <HAL_FDCAN_Init+0x1ca>
{
 8002bfe:	b538      	push	{r3, r4, r5, lr}
 8002c00:	4604      	mov	r4, r0
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8002c02:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8002c06:	b1d3      	cbz	r3, 8002c3e <HAL_FDCAN_Init+0x46>
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8002c08:	6822      	ldr	r2, [r4, #0]
 8002c0a:	6993      	ldr	r3, [r2, #24]
 8002c0c:	f023 0310 	bic.w	r3, r3, #16
 8002c10:	6193      	str	r3, [r2, #24]
  tickstart = HAL_GetTick();
 8002c12:	f7ff ff15 	bl	8002a40 <HAL_GetTick>
 8002c16:	4605      	mov	r5, r0
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002c18:	6823      	ldr	r3, [r4, #0]
 8002c1a:	699a      	ldr	r2, [r3, #24]
 8002c1c:	f012 0f08 	tst.w	r2, #8
 8002c20:	d012      	beq.n	8002c48 <HAL_FDCAN_Init+0x50>
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002c22:	f7ff ff0d 	bl	8002a40 <HAL_GetTick>
 8002c26:	1b40      	subs	r0, r0, r5
 8002c28:	280a      	cmp	r0, #10
 8002c2a:	d9f5      	bls.n	8002c18 <HAL_FDCAN_Init+0x20>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002c2c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002c2e:	f043 0301 	orr.w	r3, r3, #1
 8002c32:	6623      	str	r3, [r4, #96]	; 0x60
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002c34:	2303      	movs	r3, #3
 8002c36:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
      return HAL_ERROR;
 8002c3a:	2001      	movs	r0, #1
}
 8002c3c:	bd38      	pop	{r3, r4, r5, pc}
    hfdcan->Lock = HAL_UNLOCKED;
 8002c3e:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
    HAL_FDCAN_MspInit(hfdcan);
 8002c42:	f7ff fc53 	bl	80024ec <HAL_FDCAN_MspInit>
 8002c46:	e7df      	b.n	8002c08 <HAL_FDCAN_Init+0x10>
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002c48:	699a      	ldr	r2, [r3, #24]
 8002c4a:	f042 0201 	orr.w	r2, r2, #1
 8002c4e:	619a      	str	r2, [r3, #24]
  tickstart = HAL_GetTick();
 8002c50:	f7ff fef6 	bl	8002a40 <HAL_GetTick>
 8002c54:	4605      	mov	r5, r0
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002c56:	6823      	ldr	r3, [r4, #0]
 8002c58:	699a      	ldr	r2, [r3, #24]
 8002c5a:	f012 0f01 	tst.w	r2, #1
 8002c5e:	d10d      	bne.n	8002c7c <HAL_FDCAN_Init+0x84>
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002c60:	f7ff feee 	bl	8002a40 <HAL_GetTick>
 8002c64:	1b40      	subs	r0, r0, r5
 8002c66:	280a      	cmp	r0, #10
 8002c68:	d9f5      	bls.n	8002c56 <HAL_FDCAN_Init+0x5e>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002c6a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002c6c:	f043 0301 	orr.w	r3, r3, #1
 8002c70:	6623      	str	r3, [r4, #96]	; 0x60
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002c72:	2303      	movs	r3, #3
 8002c74:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
      return HAL_ERROR;
 8002c78:	2001      	movs	r0, #1
 8002c7a:	e7df      	b.n	8002c3c <HAL_FDCAN_Init+0x44>
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8002c7c:	699a      	ldr	r2, [r3, #24]
 8002c7e:	f042 0202 	orr.w	r2, r2, #2
 8002c82:	619a      	str	r2, [r3, #24]
  if (hfdcan->Instance == FDCAN1)
 8002c84:	6822      	ldr	r2, [r4, #0]
 8002c86:	4b50      	ldr	r3, [pc, #320]	; (8002dc8 <HAL_FDCAN_Init+0x1d0>)
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d042      	beq.n	8002d12 <HAL_FDCAN_Init+0x11a>
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8002c8c:	7c23      	ldrb	r3, [r4, #16]
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d044      	beq.n	8002d1c <HAL_FDCAN_Init+0x124>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002c92:	6822      	ldr	r2, [r4, #0]
 8002c94:	6993      	ldr	r3, [r2, #24]
 8002c96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c9a:	6193      	str	r3, [r2, #24]
  if (hfdcan->Init.TransmitPause == ENABLE)
 8002c9c:	7c63      	ldrb	r3, [r4, #17]
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d042      	beq.n	8002d28 <HAL_FDCAN_Init+0x130>
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002ca2:	6822      	ldr	r2, [r4, #0]
 8002ca4:	6993      	ldr	r3, [r2, #24]
 8002ca6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002caa:	6193      	str	r3, [r2, #24]
  if (hfdcan->Init.ProtocolException == ENABLE)
 8002cac:	7ca3      	ldrb	r3, [r4, #18]
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d040      	beq.n	8002d34 <HAL_FDCAN_Init+0x13c>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002cb2:	6822      	ldr	r2, [r4, #0]
 8002cb4:	6993      	ldr	r3, [r2, #24]
 8002cb6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002cba:	6193      	str	r3, [r2, #24]
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8002cbc:	6822      	ldr	r2, [r4, #0]
 8002cbe:	6993      	ldr	r3, [r2, #24]
 8002cc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cc4:	68a1      	ldr	r1, [r4, #8]
 8002cc6:	430b      	orrs	r3, r1
 8002cc8:	6193      	str	r3, [r2, #24]
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8002cca:	6822      	ldr	r2, [r4, #0]
 8002ccc:	6993      	ldr	r3, [r2, #24]
 8002cce:	f023 03a4 	bic.w	r3, r3, #164	; 0xa4
 8002cd2:	6193      	str	r3, [r2, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002cd4:	6822      	ldr	r2, [r4, #0]
 8002cd6:	6913      	ldr	r3, [r2, #16]
 8002cd8:	f023 0310 	bic.w	r3, r3, #16
 8002cdc:	6113      	str	r3, [r2, #16]
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8002cde:	68e3      	ldr	r3, [r4, #12]
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d02d      	beq.n	8002d40 <HAL_FDCAN_Init+0x148>
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d030      	beq.n	8002d4a <HAL_FDCAN_Init+0x152>
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8002ce8:	2b02      	cmp	r3, #2
 8002cea:	d053      	beq.n	8002d94 <HAL_FDCAN_Init+0x19c>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8002cec:	6822      	ldr	r2, [r4, #0]
 8002cee:	6993      	ldr	r3, [r2, #24]
 8002cf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cf4:	6193      	str	r3, [r2, #24]
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002cf6:	6822      	ldr	r2, [r4, #0]
 8002cf8:	6913      	ldr	r3, [r2, #16]
 8002cfa:	f043 0310 	orr.w	r3, r3, #16
 8002cfe:	6113      	str	r3, [r2, #16]
      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8002d00:	68e3      	ldr	r3, [r4, #12]
 8002d02:	2b03      	cmp	r3, #3
 8002d04:	d121      	bne.n	8002d4a <HAL_FDCAN_Init+0x152>
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002d06:	6822      	ldr	r2, [r4, #0]
 8002d08:	6993      	ldr	r3, [r2, #24]
 8002d0a:	f043 0320 	orr.w	r3, r3, #32
 8002d0e:	6193      	str	r3, [r2, #24]
 8002d10:	e01b      	b.n	8002d4a <HAL_FDCAN_Init+0x152>
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8002d12:	6862      	ldr	r2, [r4, #4]
 8002d14:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002d18:	601a      	str	r2, [r3, #0]
 8002d1a:	e7b7      	b.n	8002c8c <HAL_FDCAN_Init+0x94>
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002d1c:	6822      	ldr	r2, [r4, #0]
 8002d1e:	6993      	ldr	r3, [r2, #24]
 8002d20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d24:	6193      	str	r3, [r2, #24]
 8002d26:	e7b9      	b.n	8002c9c <HAL_FDCAN_Init+0xa4>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002d28:	6822      	ldr	r2, [r4, #0]
 8002d2a:	6993      	ldr	r3, [r2, #24]
 8002d2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d30:	6193      	str	r3, [r2, #24]
 8002d32:	e7bb      	b.n	8002cac <HAL_FDCAN_Init+0xb4>
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002d34:	6822      	ldr	r2, [r4, #0]
 8002d36:	6993      	ldr	r3, [r2, #24]
 8002d38:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002d3c:	6193      	str	r3, [r2, #24]
 8002d3e:	e7bd      	b.n	8002cbc <HAL_FDCAN_Init+0xc4>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8002d40:	6822      	ldr	r2, [r4, #0]
 8002d42:	6993      	ldr	r3, [r2, #24]
 8002d44:	f043 0304 	orr.w	r3, r3, #4
 8002d48:	6193      	str	r3, [r2, #24]
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002d4a:	69a3      	ldr	r3, [r4, #24]
 8002d4c:	1e5a      	subs	r2, r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002d4e:	69e3      	ldr	r3, [r4, #28]
 8002d50:	3b01      	subs	r3, #1
 8002d52:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002d54:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002d58:	6a22      	ldr	r2, [r4, #32]
 8002d5a:	3a01      	subs	r2, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002d5c:	4313      	orrs	r3, r2
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8002d5e:	6962      	ldr	r2, [r4, #20]
 8002d60:	3a01      	subs	r2, #1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002d62:	6821      	ldr	r1, [r4, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002d64:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002d68:	61cb      	str	r3, [r1, #28]
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8002d6a:	68a3      	ldr	r3, [r4, #8]
 8002d6c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d70:	d016      	beq.n	8002da0 <HAL_FDCAN_Init+0x1a8>
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8002d72:	6822      	ldr	r2, [r4, #0]
 8002d74:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8002d78:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8002d7a:	430b      	orrs	r3, r1
 8002d7c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8002d80:	4620      	mov	r0, r4
 8002d82:	f7ff fef3 	bl	8002b6c <FDCAN_CalcultateRamBlockAddresses>
  hfdcan->LatestTxFifoQRequest = 0U;
 8002d86:	2000      	movs	r0, #0
 8002d88:	65a0      	str	r0, [r4, #88]	; 0x58
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002d8a:	6620      	str	r0, [r4, #96]	; 0x60
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  return HAL_OK;
 8002d92:	e753      	b.n	8002c3c <HAL_FDCAN_Init+0x44>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002d94:	6822      	ldr	r2, [r4, #0]
 8002d96:	6993      	ldr	r3, [r2, #24]
 8002d98:	f043 0320 	orr.w	r3, r3, #32
 8002d9c:	6193      	str	r3, [r2, #24]
 8002d9e:	e7d4      	b.n	8002d4a <HAL_FDCAN_Init+0x152>
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002da0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002da2:	3b01      	subs	r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002da4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002da6:	3a01      	subs	r2, #1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002da8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002dac:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002dae:	3a01      	subs	r2, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002db0:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8002db4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002db6:	3a01      	subs	r2, #1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002db8:	6821      	ldr	r1, [r4, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002dba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002dbe:	60cb      	str	r3, [r1, #12]
 8002dc0:	e7d7      	b.n	8002d72 <HAL_FDCAN_Init+0x17a>
    return HAL_ERROR;
 8002dc2:	2001      	movs	r0, #1
}
 8002dc4:	4770      	bx	lr
 8002dc6:	bf00      	nop
 8002dc8:	40006400 	.word	0x40006400

08002dcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002dcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dce:	b083      	sub	sp, #12
  uint32_t position = 0x00U;
 8002dd0:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002dd2:	e036      	b.n	8002e42 <HAL_GPIO_Init+0x76>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002dd4:	2405      	movs	r4, #5
 8002dd6:	e000      	b.n	8002dda <HAL_GPIO_Init+0xe>
 8002dd8:	2400      	movs	r4, #0
 8002dda:	40b4      	lsls	r4, r6
 8002ddc:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002dde:	3502      	adds	r5, #2
 8002de0:	4e5f      	ldr	r6, [pc, #380]	; (8002f60 <HAL_GPIO_Init+0x194>)
 8002de2:	f846 4025 	str.w	r4, [r6, r5, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002de6:	4c5f      	ldr	r4, [pc, #380]	; (8002f64 <HAL_GPIO_Init+0x198>)
 8002de8:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8002dea:	43d4      	mvns	r4, r2
 8002dec:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002df0:	684f      	ldr	r7, [r1, #4]
 8002df2:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8002df6:	d001      	beq.n	8002dfc <HAL_GPIO_Init+0x30>
        {
          temp |= iocurrent;
 8002df8:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->IMR1 = temp;
 8002dfc:	4d59      	ldr	r5, [pc, #356]	; (8002f64 <HAL_GPIO_Init+0x198>)
 8002dfe:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR1;
 8002e00:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8002e02:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e06:	684f      	ldr	r7, [r1, #4]
 8002e08:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8002e0c:	d001      	beq.n	8002e12 <HAL_GPIO_Init+0x46>
        {
          temp |= iocurrent;
 8002e0e:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR1 = temp;
 8002e12:	4d54      	ldr	r5, [pc, #336]	; (8002f64 <HAL_GPIO_Init+0x198>)
 8002e14:	606e      	str	r6, [r5, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002e16:	68ad      	ldr	r5, [r5, #8]
        temp &= ~(iocurrent);
 8002e18:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e1c:	684f      	ldr	r7, [r1, #4]
 8002e1e:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8002e22:	d001      	beq.n	8002e28 <HAL_GPIO_Init+0x5c>
        {
          temp |= iocurrent;
 8002e24:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8002e28:	4d4e      	ldr	r5, [pc, #312]	; (8002f64 <HAL_GPIO_Init+0x198>)
 8002e2a:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR1;
 8002e2c:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
 8002e2e:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e30:	684e      	ldr	r6, [r1, #4]
 8002e32:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8002e36:	d001      	beq.n	8002e3c <HAL_GPIO_Init+0x70>
        {
          temp |= iocurrent;
 8002e38:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR1 = temp;
 8002e3c:	4a49      	ldr	r2, [pc, #292]	; (8002f64 <HAL_GPIO_Init+0x198>)
 8002e3e:	60d4      	str	r4, [r2, #12]
      }
    }

    position++;
 8002e40:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002e42:	680a      	ldr	r2, [r1, #0]
 8002e44:	fa32 f403 	lsrs.w	r4, r2, r3
 8002e48:	f000 8087 	beq.w	8002f5a <HAL_GPIO_Init+0x18e>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002e4c:	2401      	movs	r4, #1
 8002e4e:	409c      	lsls	r4, r3
    if (iocurrent != 0x00u)
 8002e50:	4022      	ands	r2, r4
 8002e52:	d0f5      	beq.n	8002e40 <HAL_GPIO_Init+0x74>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e54:	684d      	ldr	r5, [r1, #4]
 8002e56:	1e6e      	subs	r6, r5, #1
 8002e58:	2e01      	cmp	r6, #1
 8002e5a:	d903      	bls.n	8002e64 <HAL_GPIO_Init+0x98>
 8002e5c:	2d11      	cmp	r5, #17
 8002e5e:	d001      	beq.n	8002e64 <HAL_GPIO_Init+0x98>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e60:	2d12      	cmp	r5, #18
 8002e62:	d112      	bne.n	8002e8a <HAL_GPIO_Init+0xbe>
        temp = GPIOx->OSPEEDR;
 8002e64:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002e66:	005f      	lsls	r7, r3, #1
 8002e68:	2503      	movs	r5, #3
 8002e6a:	40bd      	lsls	r5, r7
 8002e6c:	ea26 0605 	bic.w	r6, r6, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e70:	68cd      	ldr	r5, [r1, #12]
 8002e72:	40bd      	lsls	r5, r7
 8002e74:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 8002e76:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 8002e78:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002e7a:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002e7e:	684d      	ldr	r5, [r1, #4]
 8002e80:	f3c5 1400 	ubfx	r4, r5, #4, #1
 8002e84:	409c      	lsls	r4, r3
 8002e86:	4334      	orrs	r4, r6
        GPIOx->OTYPER = temp;
 8002e88:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 8002e8a:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002e8c:	005e      	lsls	r6, r3, #1
 8002e8e:	2503      	movs	r5, #3
 8002e90:	40b5      	lsls	r5, r6
 8002e92:	43ec      	mvns	r4, r5
 8002e94:	ea27 0705 	bic.w	r7, r7, r5
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e98:	688d      	ldr	r5, [r1, #8]
 8002e9a:	40b5      	lsls	r5, r6
 8002e9c:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8002e9e:	60c5      	str	r5, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ea0:	684d      	ldr	r5, [r1, #4]
 8002ea2:	2d02      	cmp	r5, #2
 8002ea4:	d001      	beq.n	8002eaa <HAL_GPIO_Init+0xde>
 8002ea6:	2d12      	cmp	r5, #18
 8002ea8:	d113      	bne.n	8002ed2 <HAL_GPIO_Init+0x106>
        temp = GPIOx->AFR[position >> 3U];
 8002eaa:	08df      	lsrs	r7, r3, #3
 8002eac:	3708      	adds	r7, #8
 8002eae:	f850 e027 	ldr.w	lr, [r0, r7, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002eb2:	f003 0507 	and.w	r5, r3, #7
 8002eb6:	ea4f 0c85 	mov.w	ip, r5, lsl #2
 8002eba:	250f      	movs	r5, #15
 8002ebc:	fa05 f50c 	lsl.w	r5, r5, ip
 8002ec0:	ea2e 0e05 	bic.w	lr, lr, r5
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002ec4:	690d      	ldr	r5, [r1, #16]
 8002ec6:	fa05 f50c 	lsl.w	r5, r5, ip
 8002eca:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3U] = temp;
 8002ece:	f840 5027 	str.w	r5, [r0, r7, lsl #2]
      temp = GPIOx->MODER;
 8002ed2:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002ed4:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ed6:	684c      	ldr	r4, [r1, #4]
 8002ed8:	f004 0403 	and.w	r4, r4, #3
 8002edc:	40b4      	lsls	r4, r6
 8002ede:	432c      	orrs	r4, r5
      GPIOx->MODER = temp;
 8002ee0:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002ee2:	684c      	ldr	r4, [r1, #4]
 8002ee4:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8002ee8:	d0aa      	beq.n	8002e40 <HAL_GPIO_Init+0x74>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002eea:	4c1f      	ldr	r4, [pc, #124]	; (8002f68 <HAL_GPIO_Init+0x19c>)
 8002eec:	6e25      	ldr	r5, [r4, #96]	; 0x60
 8002eee:	f045 0501 	orr.w	r5, r5, #1
 8002ef2:	6625      	str	r5, [r4, #96]	; 0x60
 8002ef4:	6e24      	ldr	r4, [r4, #96]	; 0x60
 8002ef6:	f004 0401 	and.w	r4, r4, #1
 8002efa:	9401      	str	r4, [sp, #4]
 8002efc:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8002efe:	089d      	lsrs	r5, r3, #2
 8002f00:	1cae      	adds	r6, r5, #2
 8002f02:	4c17      	ldr	r4, [pc, #92]	; (8002f60 <HAL_GPIO_Init+0x194>)
 8002f04:	f854 7026 	ldr.w	r7, [r4, r6, lsl #2]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002f08:	f003 0403 	and.w	r4, r3, #3
 8002f0c:	00a6      	lsls	r6, r4, #2
 8002f0e:	240f      	movs	r4, #15
 8002f10:	40b4      	lsls	r4, r6
 8002f12:	ea27 0704 	bic.w	r7, r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002f16:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8002f1a:	f43f af5d 	beq.w	8002dd8 <HAL_GPIO_Init+0xc>
 8002f1e:	4c13      	ldr	r4, [pc, #76]	; (8002f6c <HAL_GPIO_Init+0x1a0>)
 8002f20:	42a0      	cmp	r0, r4
 8002f22:	d012      	beq.n	8002f4a <HAL_GPIO_Init+0x17e>
 8002f24:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002f28:	42a0      	cmp	r0, r4
 8002f2a:	d010      	beq.n	8002f4e <HAL_GPIO_Init+0x182>
 8002f2c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002f30:	42a0      	cmp	r0, r4
 8002f32:	d00e      	beq.n	8002f52 <HAL_GPIO_Init+0x186>
 8002f34:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002f38:	42a0      	cmp	r0, r4
 8002f3a:	d00c      	beq.n	8002f56 <HAL_GPIO_Init+0x18a>
 8002f3c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002f40:	42a0      	cmp	r0, r4
 8002f42:	f43f af47 	beq.w	8002dd4 <HAL_GPIO_Init+0x8>
 8002f46:	2406      	movs	r4, #6
 8002f48:	e747      	b.n	8002dda <HAL_GPIO_Init+0xe>
 8002f4a:	2401      	movs	r4, #1
 8002f4c:	e745      	b.n	8002dda <HAL_GPIO_Init+0xe>
 8002f4e:	2402      	movs	r4, #2
 8002f50:	e743      	b.n	8002dda <HAL_GPIO_Init+0xe>
 8002f52:	2403      	movs	r4, #3
 8002f54:	e741      	b.n	8002dda <HAL_GPIO_Init+0xe>
 8002f56:	2404      	movs	r4, #4
 8002f58:	e73f      	b.n	8002dda <HAL_GPIO_Init+0xe>
  }
}
 8002f5a:	b003      	add	sp, #12
 8002f5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	40010000 	.word	0x40010000
 8002f64:	40010400 	.word	0x40010400
 8002f68:	40021000 	.word	0x40021000
 8002f6c:	48000400 	.word	0x48000400

08002f70 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f70:	b10a      	cbz	r2, 8002f76 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f72:	6181      	str	r1, [r0, #24]
 8002f74:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f76:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8002f78:	4770      	bx	lr

08002f7a <HAL_I2C_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f7a:	2800      	cmp	r0, #0
 8002f7c:	d059      	beq.n	8003032 <HAL_I2C_Init+0xb8>
{
 8002f7e:	b510      	push	{r4, lr}
 8002f80:	4604      	mov	r4, r0
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f82:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d043      	beq.n	8003012 <HAL_I2C_Init+0x98>
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f8a:	2324      	movs	r3, #36	; 0x24
 8002f8c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f90:	6822      	ldr	r2, [r4, #0]
 8002f92:	6813      	ldr	r3, [r2, #0]
 8002f94:	f023 0301 	bic.w	r3, r3, #1
 8002f98:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002f9a:	6863      	ldr	r3, [r4, #4]
 8002f9c:	6822      	ldr	r2, [r4, #0]
 8002f9e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8002fa2:	6113      	str	r3, [r2, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002fa4:	6822      	ldr	r2, [r4, #0]
 8002fa6:	6893      	ldr	r3, [r2, #8]
 8002fa8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002fac:	6093      	str	r3, [r2, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002fae:	68e3      	ldr	r3, [r4, #12]
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d033      	beq.n	800301c <HAL_I2C_Init+0xa2>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002fb4:	68a3      	ldr	r3, [r4, #8]
 8002fb6:	6822      	ldr	r2, [r4, #0]
 8002fb8:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 8002fbc:	6093      	str	r3, [r2, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002fbe:	68e3      	ldr	r3, [r4, #12]
 8002fc0:	2b02      	cmp	r3, #2
 8002fc2:	d031      	beq.n	8003028 <HAL_I2C_Init+0xae>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002fc4:	6822      	ldr	r2, [r4, #0]
 8002fc6:	6853      	ldr	r3, [r2, #4]
 8002fc8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002fcc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fd0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002fd2:	6822      	ldr	r2, [r4, #0]
 8002fd4:	68d3      	ldr	r3, [r2, #12]
 8002fd6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002fda:	60d3      	str	r3, [r2, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002fdc:	6923      	ldr	r3, [r4, #16]
 8002fde:	6962      	ldr	r2, [r4, #20]
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	69a1      	ldr	r1, [r4, #24]
 8002fe4:	6822      	ldr	r2, [r4, #0]
 8002fe6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002fea:	60d3      	str	r3, [r2, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002fec:	69e3      	ldr	r3, [r4, #28]
 8002fee:	6a21      	ldr	r1, [r4, #32]
 8002ff0:	6822      	ldr	r2, [r4, #0]
 8002ff2:	430b      	orrs	r3, r1
 8002ff4:	6013      	str	r3, [r2, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ff6:	6822      	ldr	r2, [r4, #0]
 8002ff8:	6813      	ldr	r3, [r2, #0]
 8002ffa:	f043 0301 	orr.w	r3, r3, #1
 8002ffe:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003000:	2000      	movs	r0, #0
 8003002:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003004:	2320      	movs	r3, #32
 8003006:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800300a:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800300c:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42

  return HAL_OK;
}
 8003010:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8003012:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8003016:	f7ff fa9f 	bl	8002558 <HAL_I2C_MspInit>
 800301a:	e7b6      	b.n	8002f8a <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800301c:	68a3      	ldr	r3, [r4, #8]
 800301e:	6822      	ldr	r2, [r4, #0]
 8003020:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003024:	6093      	str	r3, [r2, #8]
 8003026:	e7ca      	b.n	8002fbe <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003028:	6823      	ldr	r3, [r4, #0]
 800302a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800302e:	605a      	str	r2, [r3, #4]
 8003030:	e7c8      	b.n	8002fc4 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8003032:	2001      	movs	r0, #1
}
 8003034:	4770      	bx	lr

08003036 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003036:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800303a:	b2db      	uxtb	r3, r3
 800303c:	2b20      	cmp	r3, #32
 800303e:	d124      	bne.n	800308a <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003040:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8003044:	2b01      	cmp	r3, #1
 8003046:	d022      	beq.n	800308e <HAL_I2CEx_ConfigAnalogFilter+0x58>
 8003048:	2301      	movs	r3, #1
 800304a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800304e:	2324      	movs	r3, #36	; 0x24
 8003050:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003054:	6802      	ldr	r2, [r0, #0]
 8003056:	6813      	ldr	r3, [r2, #0]
 8003058:	f023 0301 	bic.w	r3, r3, #1
 800305c:	6013      	str	r3, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800305e:	6802      	ldr	r2, [r0, #0]
 8003060:	6813      	ldr	r3, [r2, #0]
 8003062:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003066:	6013      	str	r3, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003068:	6802      	ldr	r2, [r0, #0]
 800306a:	6813      	ldr	r3, [r2, #0]
 800306c:	4319      	orrs	r1, r3
 800306e:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003070:	6802      	ldr	r2, [r0, #0]
 8003072:	6813      	ldr	r3, [r2, #0]
 8003074:	f043 0301 	orr.w	r3, r3, #1
 8003078:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800307a:	2320      	movs	r3, #32
 800307c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003080:	2300      	movs	r3, #0
 8003082:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8003086:	4618      	mov	r0, r3
 8003088:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 800308a:	2002      	movs	r0, #2
 800308c:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 800308e:	2002      	movs	r0, #2
  }
}
 8003090:	4770      	bx	lr

08003092 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003092:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003096:	b2db      	uxtb	r3, r3
 8003098:	2b20      	cmp	r3, #32
 800309a:	d122      	bne.n	80030e2 <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800309c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d020      	beq.n	80030e6 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 80030a4:	2301      	movs	r3, #1
 80030a6:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80030aa:	2324      	movs	r3, #36	; 0x24
 80030ac:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80030b0:	6802      	ldr	r2, [r0, #0]
 80030b2:	6813      	ldr	r3, [r2, #0]
 80030b4:	f023 0301 	bic.w	r3, r3, #1
 80030b8:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80030ba:	6802      	ldr	r2, [r0, #0]
 80030bc:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80030be:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80030c2:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80030c6:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 80030c8:	6802      	ldr	r2, [r0, #0]
 80030ca:	6813      	ldr	r3, [r2, #0]
 80030cc:	f043 0301 	orr.w	r3, r3, #1
 80030d0:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030d2:	2320      	movs	r3, #32
 80030d4:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030d8:	2300      	movs	r3, #0
 80030da:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80030de:	4618      	mov	r0, r3
 80030e0:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 80030e2:	2002      	movs	r0, #2
 80030e4:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 80030e6:	2002      	movs	r0, #2
  }
}
 80030e8:	4770      	bx	lr

080030ea <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80030ea:	b570      	push	{r4, r5, r6, lr}
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80030ec:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 80030f0:	d041      	beq.n	8003176 <HAL_PCD_EP_DB_Receive+0x8c>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80030f2:	6804      	ldr	r4, [r0, #0]
 80030f4:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 80030f8:	780d      	ldrb	r5, [r1, #0]
 80030fa:	00ee      	lsls	r6, r5, #3
 80030fc:	fa16 f383 	uxtah	r3, r6, r3
 8003100:	4423      	add	r3, r4
 8003102:	f8b3 4402 	ldrh.w	r4, [r3, #1026]	; 0x402
 8003106:	f3c4 0409 	ubfx	r4, r4, #0, #10

    if (ep->xfer_len >= count)
 800310a:	698b      	ldr	r3, [r1, #24]
 800310c:	42a3      	cmp	r3, r4
 800310e:	d328      	bcc.n	8003162 <HAL_PCD_EP_DB_Receive+0x78>
    {
      ep->xfer_len -= count;
 8003110:	1b1b      	subs	r3, r3, r4
 8003112:	618b      	str	r3, [r1, #24]
    else
    {
      ep->xfer_len = 0U;
    }

    if (ep->xfer_len == 0U)
 8003114:	698b      	ldr	r3, [r1, #24]
 8003116:	b97b      	cbnz	r3, 8003138 <HAL_PCD_EP_DB_Receive+0x4e>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003118:	6806      	ldr	r6, [r0, #0]
 800311a:	f836 3025 	ldrh.w	r3, [r6, r5, lsl #2]
 800311e:	b29b      	uxth	r3, r3
 8003120:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003124:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003128:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800312c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003130:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003134:	f826 3025 	strh.w	r3, [r6, r5, lsl #2]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003138:	f012 0f40 	tst.w	r2, #64	; 0x40
 800313c:	d00e      	beq.n	800315c <HAL_PCD_EP_DB_Receive+0x72>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800313e:	6802      	ldr	r2, [r0, #0]
 8003140:	780d      	ldrb	r5, [r1, #0]
 8003142:	f832 3025 	ldrh.w	r3, [r2, r5, lsl #2]
 8003146:	b29b      	uxth	r3, r3
 8003148:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800314c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003150:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003154:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003158:	f822 3025 	strh.w	r3, [r2, r5, lsl #2]
    }

    if (count != 0U)
 800315c:	b924      	cbnz	r4, 8003168 <HAL_PCD_EP_DB_Receive+0x7e>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
    }
  }

  return count;
}
 800315e:	4620      	mov	r0, r4
 8003160:	bd70      	pop	{r4, r5, r6, pc}
      ep->xfer_len = 0U;
 8003162:	2300      	movs	r3, #0
 8003164:	618b      	str	r3, [r1, #24]
 8003166:	e7d5      	b.n	8003114 <HAL_PCD_EP_DB_Receive+0x2a>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003168:	4623      	mov	r3, r4
 800316a:	890a      	ldrh	r2, [r1, #8]
 800316c:	6949      	ldr	r1, [r1, #20]
 800316e:	6800      	ldr	r0, [r0, #0]
 8003170:	f003 fac0 	bl	80066f4 <USB_ReadPMA>
 8003174:	e7f3      	b.n	800315e <HAL_PCD_EP_DB_Receive+0x74>
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003176:	6804      	ldr	r4, [r0, #0]
 8003178:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 800317c:	780d      	ldrb	r5, [r1, #0]
 800317e:	00ee      	lsls	r6, r5, #3
 8003180:	fa16 f383 	uxtah	r3, r6, r3
 8003184:	4423      	add	r3, r4
 8003186:	f8b3 4406 	ldrh.w	r4, [r3, #1030]	; 0x406
 800318a:	f3c4 0409 	ubfx	r4, r4, #0, #10
    if (ep->xfer_len >= count)
 800318e:	698b      	ldr	r3, [r1, #24]
 8003190:	42a3      	cmp	r3, r4
 8003192:	d32e      	bcc.n	80031f2 <HAL_PCD_EP_DB_Receive+0x108>
      ep->xfer_len -= count;
 8003194:	1b1b      	subs	r3, r3, r4
 8003196:	618b      	str	r3, [r1, #24]
    if (ep->xfer_len == 0U)
 8003198:	698b      	ldr	r3, [r1, #24]
 800319a:	b97b      	cbnz	r3, 80031bc <HAL_PCD_EP_DB_Receive+0xd2>
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800319c:	6806      	ldr	r6, [r0, #0]
 800319e:	f836 3025 	ldrh.w	r3, [r6, r5, lsl #2]
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80031a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031ac:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80031b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031b8:	f826 3025 	strh.w	r3, [r6, r5, lsl #2]
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80031bc:	f012 0f40 	tst.w	r2, #64	; 0x40
 80031c0:	d10e      	bne.n	80031e0 <HAL_PCD_EP_DB_Receive+0xf6>
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80031c2:	6802      	ldr	r2, [r0, #0]
 80031c4:	780d      	ldrb	r5, [r1, #0]
 80031c6:	f832 3025 	ldrh.w	r3, [r2, r5, lsl #2]
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031d8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80031dc:	f822 3025 	strh.w	r3, [r2, r5, lsl #2]
    if (count != 0U)
 80031e0:	2c00      	cmp	r4, #0
 80031e2:	d0bc      	beq.n	800315e <HAL_PCD_EP_DB_Receive+0x74>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80031e4:	4623      	mov	r3, r4
 80031e6:	894a      	ldrh	r2, [r1, #10]
 80031e8:	6949      	ldr	r1, [r1, #20]
 80031ea:	6800      	ldr	r0, [r0, #0]
 80031ec:	f003 fa82 	bl	80066f4 <USB_ReadPMA>
 80031f0:	e7b5      	b.n	800315e <HAL_PCD_EP_DB_Receive+0x74>
      ep->xfer_len = 0U;
 80031f2:	2300      	movs	r3, #0
 80031f4:	618b      	str	r3, [r1, #24]
 80031f6:	e7cf      	b.n	8003198 <HAL_PCD_EP_DB_Receive+0xae>

080031f8 <HAL_PCD_Init>:
  if (hpcd == NULL)
 80031f8:	2800      	cmp	r0, #0
 80031fa:	d068      	beq.n	80032ce <HAL_PCD_Init+0xd6>
{
 80031fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031fe:	b087      	sub	sp, #28
 8003200:	4604      	mov	r4, r0
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003202:	f890 32a9 	ldrb.w	r3, [r0, #681]	; 0x2a9
 8003206:	b323      	cbz	r3, 8003252 <HAL_PCD_Init+0x5a>
  hpcd->State = HAL_PCD_STATE_BUSY;
 8003208:	2303      	movs	r3, #3
 800320a:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  __HAL_PCD_DISABLE(hpcd);
 800320e:	6820      	ldr	r0, [r4, #0]
 8003210:	f002 fad0 	bl	80057b4 <USB_DisableGlobalInt>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003214:	2300      	movs	r3, #0
 8003216:	6860      	ldr	r0, [r4, #4]
 8003218:	4283      	cmp	r3, r0
 800321a:	d21f      	bcs.n	800325c <HAL_PCD_Init+0x64>
    hpcd->IN_ep[i].is_in = 1U;
 800321c:	1c5a      	adds	r2, r3, #1
 800321e:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8003222:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8003226:	2001      	movs	r0, #1
 8003228:	7048      	strb	r0, [r1, #1]
    hpcd->IN_ep[i].num = i;
 800322a:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 800322e:	f804 3031 	strb.w	r3, [r4, r1, lsl #3]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003232:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8003236:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 800323a:	86cb      	strh	r3, [r1, #54]	; 0x36
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800323c:	eb02 0582 	add.w	r5, r2, r2, lsl #2
 8003240:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8003244:	2000      	movs	r0, #0
 8003246:	70e8      	strb	r0, [r5, #3]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003248:	6388      	str	r0, [r1, #56]	; 0x38
    hpcd->IN_ep[i].xfer_buff = 0U;
 800324a:	63c8      	str	r0, [r1, #60]	; 0x3c
    hpcd->IN_ep[i].xfer_len = 0U;
 800324c:	6408      	str	r0, [r1, #64]	; 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800324e:	b2d3      	uxtb	r3, r2
 8003250:	e7e1      	b.n	8003216 <HAL_PCD_Init+0x1e>
    hpcd->Lock = HAL_UNLOCKED;
 8003252:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
    HAL_PCD_MspInit(hpcd);
 8003256:	f004 fa3b 	bl	80076d0 <HAL_PCD_MspInit>
 800325a:	e7d5      	b.n	8003208 <HAL_PCD_Init+0x10>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800325c:	2300      	movs	r3, #0
 800325e:	e016      	b.n	800328e <HAL_PCD_Init+0x96>
    hpcd->OUT_ep[i].is_in = 0U;
 8003260:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8003264:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8003268:	2100      	movs	r1, #0
 800326a:	f882 1169 	strb.w	r1, [r2, #361]	; 0x169
    hpcd->OUT_ep[i].num = i;
 800326e:	f882 3168 	strb.w	r3, [r2, #360]	; 0x168
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003272:	f882 116b 	strb.w	r1, [r2, #363]	; 0x16b
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003276:	f8c2 1178 	str.w	r1, [r2, #376]	; 0x178
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800327a:	f8c2 117c 	str.w	r1, [r2, #380]	; 0x17c
    hpcd->OUT_ep[i].xfer_len = 0U;
 800327e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8003282:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8003286:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800328a:	3301      	adds	r3, #1
 800328c:	b2db      	uxtb	r3, r3
 800328e:	4298      	cmp	r0, r3
 8003290:	d8e6      	bhi.n	8003260 <HAL_PCD_Init+0x68>
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003292:	4625      	mov	r5, r4
 8003294:	f855 7b10 	ldr.w	r7, [r5], #16
 8003298:	466e      	mov	r6, sp
 800329a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800329c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800329e:	682b      	ldr	r3, [r5, #0]
 80032a0:	6033      	str	r3, [r6, #0]
 80032a2:	1d23      	adds	r3, r4, #4
 80032a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80032a6:	4638      	mov	r0, r7
 80032a8:	f002 fa8e 	bl	80057c8 <USB_DevInit>
  hpcd->USB_Address = 0U;
 80032ac:	2300      	movs	r3, #0
 80032ae:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80032b2:	2301      	movs	r3, #1
 80032b4:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  if (hpcd->Init.lpm_enable == 1U)
 80032b8:	69e3      	ldr	r3, [r4, #28]
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d002      	beq.n	80032c4 <HAL_PCD_Init+0xcc>
  return HAL_OK;
 80032be:	2000      	movs	r0, #0
}
 80032c0:	b007      	add	sp, #28
 80032c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80032c4:	4620      	mov	r0, r4
 80032c6:	f000 fe7a 	bl	8003fbe <HAL_PCDEx_ActivateLPM>
  return HAL_OK;
 80032ca:	2000      	movs	r0, #0
 80032cc:	e7f8      	b.n	80032c0 <HAL_PCD_Init+0xc8>
    return HAL_ERROR;
 80032ce:	2001      	movs	r0, #1
}
 80032d0:	4770      	bx	lr

080032d2 <HAL_PCD_Start>:
  __HAL_LOCK(hpcd);
 80032d2:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d00e      	beq.n	80032f8 <HAL_PCD_Start+0x26>
{
 80032da:	b510      	push	{r4, lr}
 80032dc:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80032de:	2301      	movs	r3, #1
 80032e0:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80032e4:	6800      	ldr	r0, [r0, #0]
 80032e6:	f002 fa5c 	bl	80057a2 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80032ea:	6820      	ldr	r0, [r4, #0]
 80032ec:	f002 fd87 	bl	8005dfe <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80032f0:	2000      	movs	r0, #0
 80032f2:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 80032f6:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80032f8:	2002      	movs	r0, #2
}
 80032fa:	4770      	bx	lr

080032fc <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80032fc:	b570      	push	{r4, r5, r6, lr}
 80032fe:	4605      	mov	r5, r0
 8003300:	460c      	mov	r4, r1
 8003302:	4616      	mov	r6, r2
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003304:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003308:	f000 8109 	beq.w	800351e <HAL_PCD_EP_DB_Transmit+0x222>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800330c:	6802      	ldr	r2, [r0, #0]
 800330e:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8003312:	7809      	ldrb	r1, [r1, #0]
 8003314:	00c8      	lsls	r0, r1, #3
 8003316:	fa10 f383 	uxtah	r3, r0, r3
 800331a:	4413      	add	r3, r2
 800331c:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 8003320:	f3c2 0209 	ubfx	r2, r2, #0, #10

    if (ep->xfer_len > TxByteNbre)
 8003324:	69a3      	ldr	r3, [r4, #24]
 8003326:	4293      	cmp	r3, r2
 8003328:	d951      	bls.n	80033ce <HAL_PCD_EP_DB_Transmit+0xd2>
    {
      ep->xfer_len -= TxByteNbre;
 800332a:	1a9b      	subs	r3, r3, r2
 800332c:	61a3      	str	r3, [r4, #24]
    else
    {
      ep->xfer_len = 0U;
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800332e:	69a3      	ldr	r3, [r4, #24]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d168      	bne.n	8003406 <HAL_PCD_EP_DB_Transmit+0x10a>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003334:	7863      	ldrb	r3, [r4, #1]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d14c      	bne.n	80033d4 <HAL_PCD_EP_DB_Transmit+0xd8>
 800333a:	682a      	ldr	r2, [r5, #0]
 800333c:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8003340:	fa12 f383 	uxtah	r3, r2, r3
 8003344:	4403      	add	r3, r0
 8003346:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 800334a:	b292      	uxth	r2, r2
 800334c:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8003350:	b292      	uxth	r2, r2
 8003352:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8003356:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 800335a:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800335e:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8003362:	b292      	uxth	r2, r2
 8003364:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003368:	6829      	ldr	r1, [r5, #0]
 800336a:	7862      	ldrb	r2, [r4, #1]
 800336c:	2a00      	cmp	r2, #0
 800336e:	d13d      	bne.n	80033ec <HAL_PCD_EP_DB_Transmit+0xf0>
 8003370:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 8003374:	fa11 f383 	uxtah	r3, r1, r3
 8003378:	7822      	ldrb	r2, [r4, #0]
 800337a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800337e:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8003382:	b292      	uxth	r2, r2
 8003384:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8003388:	b292      	uxth	r2, r2
 800338a:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800338e:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8003392:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8003396:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800339a:	b292      	uxth	r2, r2
 800339c:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80033a0:	7821      	ldrb	r1, [r4, #0]
 80033a2:	4628      	mov	r0, r5
 80033a4:	f004 f9c8 	bl	8007738 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80033a8:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 80033ac:	d040      	beq.n	8003430 <HAL_PCD_EP_DB_Transmit+0x134>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80033ae:	682a      	ldr	r2, [r5, #0]
 80033b0:	7821      	ldrb	r1, [r4, #0]
 80033b2:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80033c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033c8:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 80033cc:	e030      	b.n	8003430 <HAL_PCD_EP_DB_Transmit+0x134>
      ep->xfer_len = 0U;
 80033ce:	2300      	movs	r3, #0
 80033d0:	61a3      	str	r3, [r4, #24]
 80033d2:	e7ac      	b.n	800332e <HAL_PCD_EP_DB_Transmit+0x32>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d1c7      	bne.n	8003368 <HAL_PCD_EP_DB_Transmit+0x6c>
 80033d8:	682a      	ldr	r2, [r5, #0]
 80033da:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 80033de:	fa12 f383 	uxtah	r3, r2, r3
 80033e2:	4403      	add	r3, r0
 80033e4:	2200      	movs	r2, #0
 80033e6:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 80033ea:	e7bd      	b.n	8003368 <HAL_PCD_EP_DB_Transmit+0x6c>
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80033ec:	2a01      	cmp	r2, #1
 80033ee:	d1d7      	bne.n	80033a0 <HAL_PCD_EP_DB_Transmit+0xa4>
 80033f0:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 80033f4:	fa11 f383 	uxtah	r3, r1, r3
 80033f8:	7821      	ldrb	r1, [r4, #0]
 80033fa:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80033fe:	2200      	movs	r2, #0
 8003400:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8003404:	e7cc      	b.n	80033a0 <HAL_PCD_EP_DB_Transmit+0xa4>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003406:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 800340a:	d00d      	beq.n	8003428 <HAL_PCD_EP_DB_Transmit+0x12c>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800340c:	6828      	ldr	r0, [r5, #0]
 800340e:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8003412:	b29b      	uxth	r3, r3
 8003414:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003418:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800341c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003420:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003424:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003428:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800342c:	2b01      	cmp	r3, #1
 800342e:	d012      	beq.n	8003456 <HAL_PCD_EP_DB_Transmit+0x15a>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003430:	682a      	ldr	r2, [r5, #0]
 8003432:	7821      	ldrb	r1, [r4, #0]
 8003434:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8003438:	b29b      	uxth	r3, r3
 800343a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800343e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003442:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8003446:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800344a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800344e:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
}
 8003452:	2000      	movs	r0, #0
 8003454:	bd70      	pop	{r4, r5, r6, pc}
        ep->xfer_buff += TxByteNbre;
 8003456:	6963      	ldr	r3, [r4, #20]
 8003458:	4413      	add	r3, r2
 800345a:	6163      	str	r3, [r4, #20]
        ep->xfer_count += TxByteNbre;
 800345c:	69e3      	ldr	r3, [r4, #28]
 800345e:	4413      	add	r3, r2
 8003460:	61e3      	str	r3, [r4, #28]
        if (ep->xfer_len_db >= ep->maxpacket)
 8003462:	6a21      	ldr	r1, [r4, #32]
 8003464:	6923      	ldr	r3, [r4, #16]
 8003466:	4299      	cmp	r1, r3
 8003468:	d31f      	bcc.n	80034aa <HAL_PCD_EP_DB_Transmit+0x1ae>
          ep->xfer_len_db -= len;
 800346a:	1ac9      	subs	r1, r1, r3
 800346c:	6221      	str	r1, [r4, #32]
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800346e:	7862      	ldrb	r2, [r4, #1]
 8003470:	2a00      	cmp	r2, #0
 8003472:	d13f      	bne.n	80034f4 <HAL_PCD_EP_DB_Transmit+0x1f8>
 8003474:	6829      	ldr	r1, [r5, #0]
 8003476:	f8b1 2050 	ldrh.w	r2, [r1, #80]	; 0x50
 800347a:	fa11 f282 	uxtah	r2, r1, r2
 800347e:	7821      	ldrb	r1, [r4, #0]
 8003480:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8003484:	b9eb      	cbnz	r3, 80034c2 <HAL_PCD_EP_DB_Transmit+0x1c6>
 8003486:	f8b2 1402 	ldrh.w	r1, [r2, #1026]	; 0x402
 800348a:	b289      	uxth	r1, r1
 800348c:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8003490:	b289      	uxth	r1, r1
 8003492:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 8003496:	f8b2 1402 	ldrh.w	r1, [r2, #1026]	; 0x402
 800349a:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 800349e:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80034a2:	b289      	uxth	r1, r1
 80034a4:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 80034a8:	e026      	b.n	80034f8 <HAL_PCD_EP_DB_Transmit+0x1fc>
        else if (ep->xfer_len_db == 0U)
 80034aa:	b921      	cbnz	r1, 80034b6 <HAL_PCD_EP_DB_Transmit+0x1ba>
          ep->xfer_fill_db = 0U;
 80034ac:	2300      	movs	r3, #0
 80034ae:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          len = TxByteNbre;
 80034b2:	4613      	mov	r3, r2
 80034b4:	e7db      	b.n	800346e <HAL_PCD_EP_DB_Transmit+0x172>
          ep->xfer_fill_db = 0U;
 80034b6:	2300      	movs	r3, #0
 80034b8:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          ep->xfer_len_db = 0U;
 80034bc:	6223      	str	r3, [r4, #32]
          len = ep->xfer_len_db;
 80034be:	460b      	mov	r3, r1
 80034c0:	e7d5      	b.n	800346e <HAL_PCD_EP_DB_Transmit+0x172>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80034c2:	2b3e      	cmp	r3, #62	; 0x3e
 80034c4:	d809      	bhi.n	80034da <HAL_PCD_EP_DB_Transmit+0x1de>
 80034c6:	0859      	lsrs	r1, r3, #1
 80034c8:	f013 0f01 	tst.w	r3, #1
 80034cc:	d000      	beq.n	80034d0 <HAL_PCD_EP_DB_Transmit+0x1d4>
 80034ce:	3101      	adds	r1, #1
 80034d0:	0289      	lsls	r1, r1, #10
 80034d2:	b289      	uxth	r1, r1
 80034d4:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 80034d8:	e00e      	b.n	80034f8 <HAL_PCD_EP_DB_Transmit+0x1fc>
 80034da:	0959      	lsrs	r1, r3, #5
 80034dc:	f013 0f1f 	tst.w	r3, #31
 80034e0:	d100      	bne.n	80034e4 <HAL_PCD_EP_DB_Transmit+0x1e8>
 80034e2:	3901      	subs	r1, #1
 80034e4:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 80034e8:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80034ec:	b289      	uxth	r1, r1
 80034ee:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 80034f2:	e001      	b.n	80034f8 <HAL_PCD_EP_DB_Transmit+0x1fc>
 80034f4:	2a01      	cmp	r2, #1
 80034f6:	d006      	beq.n	8003506 <HAL_PCD_EP_DB_Transmit+0x20a>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	8922      	ldrh	r2, [r4, #8]
 80034fc:	6961      	ldr	r1, [r4, #20]
 80034fe:	6828      	ldr	r0, [r5, #0]
 8003500:	f002 fc8c 	bl	8005e1c <USB_WritePMA>
 8003504:	e794      	b.n	8003430 <HAL_PCD_EP_DB_Transmit+0x134>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003506:	6829      	ldr	r1, [r5, #0]
 8003508:	f8b1 2050 	ldrh.w	r2, [r1, #80]	; 0x50
 800350c:	fa11 f282 	uxtah	r2, r1, r2
 8003510:	7821      	ldrb	r1, [r4, #0]
 8003512:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8003516:	b299      	uxth	r1, r3
 8003518:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 800351c:	e7ec      	b.n	80034f8 <HAL_PCD_EP_DB_Transmit+0x1fc>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800351e:	6802      	ldr	r2, [r0, #0]
 8003520:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8003524:	7809      	ldrb	r1, [r1, #0]
 8003526:	00c8      	lsls	r0, r1, #3
 8003528:	fa10 f383 	uxtah	r3, r0, r3
 800352c:	4413      	add	r3, r2
 800352e:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8003532:	f3c2 0209 	ubfx	r2, r2, #0, #10
    if (ep->xfer_len >= TxByteNbre)
 8003536:	69a3      	ldr	r3, [r4, #24]
 8003538:	4293      	cmp	r3, r2
 800353a:	d352      	bcc.n	80035e2 <HAL_PCD_EP_DB_Transmit+0x2e6>
      ep->xfer_len -= TxByteNbre;
 800353c:	1a9b      	subs	r3, r3, r2
 800353e:	61a3      	str	r3, [r4, #24]
    if (ep->xfer_len == 0U)
 8003540:	69a3      	ldr	r3, [r4, #24]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d169      	bne.n	800361a <HAL_PCD_EP_DB_Transmit+0x31e>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003546:	7863      	ldrb	r3, [r4, #1]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d14d      	bne.n	80035e8 <HAL_PCD_EP_DB_Transmit+0x2ec>
 800354c:	682a      	ldr	r2, [r5, #0]
 800354e:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8003552:	fa12 f383 	uxtah	r3, r2, r3
 8003556:	4418      	add	r0, r3
 8003558:	f8b0 3402 	ldrh.w	r3, [r0, #1026]	; 0x402
 800355c:	b29b      	uxth	r3, r3
 800355e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003562:	b29b      	uxth	r3, r3
 8003564:	f8a0 3402 	strh.w	r3, [r0, #1026]	; 0x402
 8003568:	f8b0 3402 	ldrh.w	r3, [r0, #1026]	; 0x402
 800356c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003570:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003574:	b29b      	uxth	r3, r3
 8003576:	f8a0 3402 	strh.w	r3, [r0, #1026]	; 0x402
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800357a:	6829      	ldr	r1, [r5, #0]
 800357c:	7862      	ldrb	r2, [r4, #1]
 800357e:	2a00      	cmp	r2, #0
 8003580:	d13e      	bne.n	8003600 <HAL_PCD_EP_DB_Transmit+0x304>
 8003582:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 8003586:	fa11 f383 	uxtah	r3, r1, r3
 800358a:	7822      	ldrb	r2, [r4, #0]
 800358c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003590:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8003594:	b292      	uxth	r2, r2
 8003596:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800359a:	b292      	uxth	r2, r2
 800359c:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 80035a0:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 80035a4:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80035a8:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80035ac:	b292      	uxth	r2, r2
 80035ae:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80035b2:	7821      	ldrb	r1, [r4, #0]
 80035b4:	4628      	mov	r0, r5
 80035b6:	f004 f8bf 	bl	8007738 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80035ba:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 80035be:	f47f af37 	bne.w	8003430 <HAL_PCD_EP_DB_Transmit+0x134>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80035c2:	682a      	ldr	r2, [r5, #0]
 80035c4:	7821      	ldrb	r1, [r4, #0]
 80035c6:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80035d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035dc:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 80035e0:	e726      	b.n	8003430 <HAL_PCD_EP_DB_Transmit+0x134>
      ep->xfer_len = 0U;
 80035e2:	2300      	movs	r3, #0
 80035e4:	61a3      	str	r3, [r4, #24]
 80035e6:	e7ab      	b.n	8003540 <HAL_PCD_EP_DB_Transmit+0x244>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d1c6      	bne.n	800357a <HAL_PCD_EP_DB_Transmit+0x27e>
 80035ec:	682a      	ldr	r2, [r5, #0]
 80035ee:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 80035f2:	fa12 f383 	uxtah	r3, r2, r3
 80035f6:	4418      	add	r0, r3
 80035f8:	2300      	movs	r3, #0
 80035fa:	f8a0 3402 	strh.w	r3, [r0, #1026]	; 0x402
 80035fe:	e7bc      	b.n	800357a <HAL_PCD_EP_DB_Transmit+0x27e>
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003600:	2a01      	cmp	r2, #1
 8003602:	d1d6      	bne.n	80035b2 <HAL_PCD_EP_DB_Transmit+0x2b6>
 8003604:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 8003608:	fa11 f383 	uxtah	r3, r1, r3
 800360c:	7821      	ldrb	r1, [r4, #0]
 800360e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8003612:	2200      	movs	r2, #0
 8003614:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8003618:	e7cb      	b.n	80035b2 <HAL_PCD_EP_DB_Transmit+0x2b6>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800361a:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 800361e:	d10d      	bne.n	800363c <HAL_PCD_EP_DB_Transmit+0x340>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003620:	6828      	ldr	r0, [r5, #0]
 8003622:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8003626:	b29b      	uxth	r3, r3
 8003628:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800362c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003630:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003634:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003638:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 800363c:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8003640:	2b01      	cmp	r3, #1
 8003642:	f47f aef5 	bne.w	8003430 <HAL_PCD_EP_DB_Transmit+0x134>
        ep->xfer_buff += TxByteNbre;
 8003646:	6963      	ldr	r3, [r4, #20]
 8003648:	4413      	add	r3, r2
 800364a:	6163      	str	r3, [r4, #20]
        ep->xfer_count += TxByteNbre;
 800364c:	69e3      	ldr	r3, [r4, #28]
 800364e:	4413      	add	r3, r2
 8003650:	61e3      	str	r3, [r4, #28]
        if (ep->xfer_len_db >= ep->maxpacket)
 8003652:	6a21      	ldr	r1, [r4, #32]
 8003654:	6923      	ldr	r3, [r4, #16]
 8003656:	4299      	cmp	r1, r3
 8003658:	d31f      	bcc.n	800369a <HAL_PCD_EP_DB_Transmit+0x39e>
          ep->xfer_len_db -= len;
 800365a:	1ac9      	subs	r1, r1, r3
 800365c:	6221      	str	r1, [r4, #32]
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800365e:	6829      	ldr	r1, [r5, #0]
 8003660:	7862      	ldrb	r2, [r4, #1]
 8003662:	2a00      	cmp	r2, #0
 8003664:	d13e      	bne.n	80036e4 <HAL_PCD_EP_DB_Transmit+0x3e8>
 8003666:	f8b1 2050 	ldrh.w	r2, [r1, #80]	; 0x50
 800366a:	fa11 f282 	uxtah	r2, r1, r2
 800366e:	7821      	ldrb	r1, [r4, #0]
 8003670:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8003674:	b9eb      	cbnz	r3, 80036b2 <HAL_PCD_EP_DB_Transmit+0x3b6>
 8003676:	f8b2 1406 	ldrh.w	r1, [r2, #1030]	; 0x406
 800367a:	b289      	uxth	r1, r1
 800367c:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8003680:	b289      	uxth	r1, r1
 8003682:	f8a2 1406 	strh.w	r1, [r2, #1030]	; 0x406
 8003686:	f8b2 1406 	ldrh.w	r1, [r2, #1030]	; 0x406
 800368a:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 800368e:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8003692:	b289      	uxth	r1, r1
 8003694:	f8a2 1406 	strh.w	r1, [r2, #1030]	; 0x406
 8003698:	e026      	b.n	80036e8 <HAL_PCD_EP_DB_Transmit+0x3ec>
        else if (ep->xfer_len_db == 0U)
 800369a:	b921      	cbnz	r1, 80036a6 <HAL_PCD_EP_DB_Transmit+0x3aa>
          ep->xfer_fill_db = 0U;
 800369c:	2300      	movs	r3, #0
 800369e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          len = TxByteNbre;
 80036a2:	4613      	mov	r3, r2
 80036a4:	e7db      	b.n	800365e <HAL_PCD_EP_DB_Transmit+0x362>
          ep->xfer_len_db = 0U;
 80036a6:	2300      	movs	r3, #0
 80036a8:	6223      	str	r3, [r4, #32]
          ep->xfer_fill_db = 0;
 80036aa:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          len = ep->xfer_len_db;
 80036ae:	460b      	mov	r3, r1
 80036b0:	e7d5      	b.n	800365e <HAL_PCD_EP_DB_Transmit+0x362>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80036b2:	2b3e      	cmp	r3, #62	; 0x3e
 80036b4:	d809      	bhi.n	80036ca <HAL_PCD_EP_DB_Transmit+0x3ce>
 80036b6:	0859      	lsrs	r1, r3, #1
 80036b8:	f013 0f01 	tst.w	r3, #1
 80036bc:	d000      	beq.n	80036c0 <HAL_PCD_EP_DB_Transmit+0x3c4>
 80036be:	3101      	adds	r1, #1
 80036c0:	0289      	lsls	r1, r1, #10
 80036c2:	b289      	uxth	r1, r1
 80036c4:	f8a2 1406 	strh.w	r1, [r2, #1030]	; 0x406
 80036c8:	e00e      	b.n	80036e8 <HAL_PCD_EP_DB_Transmit+0x3ec>
 80036ca:	0959      	lsrs	r1, r3, #5
 80036cc:	f013 0f1f 	tst.w	r3, #31
 80036d0:	d100      	bne.n	80036d4 <HAL_PCD_EP_DB_Transmit+0x3d8>
 80036d2:	3901      	subs	r1, #1
 80036d4:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 80036d8:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80036dc:	b289      	uxth	r1, r1
 80036de:	f8a2 1406 	strh.w	r1, [r2, #1030]	; 0x406
 80036e2:	e001      	b.n	80036e8 <HAL_PCD_EP_DB_Transmit+0x3ec>
 80036e4:	2a01      	cmp	r2, #1
 80036e6:	d006      	beq.n	80036f6 <HAL_PCD_EP_DB_Transmit+0x3fa>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80036e8:	b29b      	uxth	r3, r3
 80036ea:	8962      	ldrh	r2, [r4, #10]
 80036ec:	6961      	ldr	r1, [r4, #20]
 80036ee:	6828      	ldr	r0, [r5, #0]
 80036f0:	f002 fb94 	bl	8005e1c <USB_WritePMA>
 80036f4:	e69c      	b.n	8003430 <HAL_PCD_EP_DB_Transmit+0x134>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80036f6:	f8b1 2050 	ldrh.w	r2, [r1, #80]	; 0x50
 80036fa:	fa11 f282 	uxtah	r2, r1, r2
 80036fe:	7821      	ldrb	r1, [r4, #0]
 8003700:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8003704:	b299      	uxth	r1, r3
 8003706:	f8a2 1406 	strh.w	r1, [r2, #1030]	; 0x406
 800370a:	e7ed      	b.n	80036e8 <HAL_PCD_EP_DB_Transmit+0x3ec>

0800370c <PCD_EP_ISR_Handler>:
{
 800370c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003710:	4605      	mov	r5, r0
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003712:	e195      	b.n	8003a40 <PCD_EP_ISR_Handler+0x334>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003714:	8803      	ldrh	r3, [r0, #0]
 8003716:	b29b      	uxth	r3, r3
 8003718:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800371c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003720:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003724:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003728:	b29b      	uxth	r3, r3
 800372a:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800372c:	6829      	ldr	r1, [r5, #0]
 800372e:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 8003732:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
 8003736:	00d2      	lsls	r2, r2, #3
 8003738:	fa12 f383 	uxtah	r3, r2, r3
 800373c:	440b      	add	r3, r1
 800373e:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 8003742:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003746:	646b      	str	r3, [r5, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8003748:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 800374a:	4413      	add	r3, r2
 800374c:	63eb      	str	r3, [r5, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800374e:	2100      	movs	r1, #0
 8003750:	4628      	mov	r0, r5
 8003752:	f003 fff1 	bl	8007738 <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003756:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 800375a:	2b00      	cmp	r3, #0
 800375c:	f000 8170 	beq.w	8003a40 <PCD_EP_ISR_Handler+0x334>
 8003760:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8003762:	2b00      	cmp	r3, #0
 8003764:	f040 816c 	bne.w	8003a40 <PCD_EP_ISR_Handler+0x334>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003768:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 800376c:	682a      	ldr	r2, [r5, #0]
 800376e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003772:	f8a2 304c 	strh.w	r3, [r2, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003776:	2300      	movs	r3, #0
 8003778:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 800377c:	e160      	b.n	8003a40 <PCD_EP_ISR_Handler+0x334>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800377e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003782:	f895 2168 	ldrb.w	r2, [r5, #360]	; 0x168
 8003786:	00d2      	lsls	r2, r2, #3
 8003788:	fa12 f383 	uxtah	r3, r2, r3
 800378c:	4403      	add	r3, r0
 800378e:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	; 0x406
 8003792:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003796:	f8c5 3184 	str.w	r3, [r5, #388]	; 0x184
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800379a:	f8b5 216e 	ldrh.w	r2, [r5, #366]	; 0x16e
 800379e:	f505 712c 	add.w	r1, r5, #688	; 0x2b0
 80037a2:	f002 ffa7 	bl	80066f4 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80037a6:	682a      	ldr	r2, [r5, #0]
 80037a8:	8813      	ldrh	r3, [r2, #0]
 80037aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037ae:	051b      	lsls	r3, r3, #20
 80037b0:	0d1b      	lsrs	r3, r3, #20
 80037b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037b6:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 80037b8:	4628      	mov	r0, r5
 80037ba:	f003 ffa9 	bl	8007710 <HAL_PCD_SetupStageCallback>
 80037be:	e13f      	b.n	8003a40 <PCD_EP_ISR_Handler+0x334>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80037c0:	2a3e      	cmp	r2, #62	; 0x3e
 80037c2:	d809      	bhi.n	80037d8 <PCD_EP_ISR_Handler+0xcc>
 80037c4:	0851      	lsrs	r1, r2, #1
 80037c6:	f012 0f01 	tst.w	r2, #1
 80037ca:	d000      	beq.n	80037ce <PCD_EP_ISR_Handler+0xc2>
 80037cc:	3101      	adds	r1, #1
 80037ce:	028a      	lsls	r2, r1, #10
 80037d0:	b292      	uxth	r2, r2
 80037d2:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 80037d6:	e196      	b.n	8003b06 <PCD_EP_ISR_Handler+0x3fa>
 80037d8:	0951      	lsrs	r1, r2, #5
 80037da:	f012 0f1f 	tst.w	r2, #31
 80037de:	d100      	bne.n	80037e2 <PCD_EP_ISR_Handler+0xd6>
 80037e0:	3901      	subs	r1, #1
 80037e2:	ea6f 62c1 	mvn.w	r2, r1, lsl #27
 80037e6:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80037ea:	b292      	uxth	r2, r2
 80037ec:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 80037f0:	e189      	b.n	8003b06 <PCD_EP_ISR_Handler+0x3fa>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80037f2:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 80037f6:	b29e      	uxth	r6, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80037f8:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80037fc:	d14e      	bne.n	800389c <PCD_EP_ISR_Handler+0x190>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80037fe:	f016 0f80 	tst.w	r6, #128	; 0x80
 8003802:	f000 811d 	beq.w	8003a40 <PCD_EP_ISR_Handler+0x334>
        ep = &hpcd->IN_ep[epindex];
 8003806:	1c62      	adds	r2, r4, #1
 8003808:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 800380c:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003810:	6828      	ldr	r0, [r5, #0]
 8003812:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8003816:	b29b      	uxth	r3, r3
 8003818:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800381c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003820:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003824:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003828:	b29b      	uxth	r3, r3
 800382a:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
        if ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U))
 800382e:	78cb      	ldrb	r3, [r1, #3]
 8003830:	2b02      	cmp	r3, #2
 8003832:	f040 8101 	bne.w	8003a38 <PCD_EP_ISR_Handler+0x32c>
 8003836:	f416 7f80 	tst.w	r6, #256	; 0x100
 800383a:	f040 80fd 	bne.w	8003a38 <PCD_EP_ISR_Handler+0x32c>
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800383e:	6828      	ldr	r0, [r5, #0]
 8003840:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003844:	1c62      	adds	r2, r4, #1
 8003846:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800384a:	f815 2032 	ldrb.w	r2, [r5, r2, lsl #3]
 800384e:	00d2      	lsls	r2, r2, #3
 8003850:	fa12 f383 	uxtah	r3, r2, r3
 8003854:	4403      	add	r3, r0
 8003856:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 800385a:	f3c3 0309 	ubfx	r3, r3, #0, #10
          if (ep->xfer_len > TxByteNbre)
 800385e:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8003862:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8003866:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003868:	429a      	cmp	r2, r3
 800386a:	f240 80d1 	bls.w	8003a10 <PCD_EP_ISR_Handler+0x304>
            ep->xfer_len -= TxByteNbre;
 800386e:	eb04 0684 	add.w	r6, r4, r4, lsl #2
 8003872:	eb05 06c6 	add.w	r6, r5, r6, lsl #3
 8003876:	1ad2      	subs	r2, r2, r3
 8003878:	6432      	str	r2, [r6, #64]	; 0x40
          if (ep->xfer_len == 0U)
 800387a:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 800387e:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8003882:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003884:	2a00      	cmp	r2, #0
 8003886:	f040 80ca 	bne.w	8003a1e <PCD_EP_ISR_Handler+0x312>
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800388a:	3401      	adds	r4, #1
 800388c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8003890:	f815 1034 	ldrb.w	r1, [r5, r4, lsl #3]
 8003894:	4628      	mov	r0, r5
 8003896:	f003 ff4f 	bl	8007738 <HAL_PCD_DataInStageCallback>
 800389a:	e0d1      	b.n	8003a40 <PCD_EP_ISR_Handler+0x334>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800389c:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 80038a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038a4:	051b      	lsls	r3, r3, #20
 80038a6:	0d1b      	lsrs	r3, r3, #20
 80038a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038ac:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
        ep = &hpcd->OUT_ep[epindex];
 80038b0:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 80038b4:	00c9      	lsls	r1, r1, #3
 80038b6:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 80038ba:	eb05 0801 	add.w	r8, r5, r1
        if (ep->doublebuffer == 0U)
 80038be:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80038c2:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 80038c6:	f893 3174 	ldrb.w	r3, [r3, #372]	; 0x174
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d140      	bne.n	8003950 <PCD_EP_ISR_Handler+0x244>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80038ce:	6828      	ldr	r0, [r5, #0]
 80038d0:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80038d4:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 80038d8:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 80038dc:	f892 2168 	ldrb.w	r2, [r2, #360]	; 0x168
 80038e0:	00d2      	lsls	r2, r2, #3
 80038e2:	fa12 f383 	uxtah	r3, r2, r3
 80038e6:	4403      	add	r3, r0
 80038e8:	f8b3 7406 	ldrh.w	r7, [r3, #1030]	; 0x406
 80038ec:	f3c7 0709 	ubfx	r7, r7, #0, #10
          if (count != 0U)
 80038f0:	bb17      	cbnz	r7, 8003938 <PCD_EP_ISR_Handler+0x22c>
        ep->xfer_count += count;
 80038f2:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80038f6:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 80038fa:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 80038fe:	443a      	add	r2, r7
 8003900:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
        ep->xfer_buff += count;
 8003904:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 8003908:	443a      	add	r2, r7
 800390a:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800390e:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8003912:	b13b      	cbz	r3, 8003924 <PCD_EP_ISR_Handler+0x218>
 8003914:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8003918:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 800391c:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8003920:	429f      	cmp	r7, r3
 8003922:	d270      	bcs.n	8003a06 <PCD_EP_ISR_Handler+0x2fa>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003924:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8003928:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 800392c:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 8003930:	4628      	mov	r0, r5
 8003932:	f003 fef5 	bl	8007720 <HAL_PCD_DataOutStageCallback>
 8003936:	e762      	b.n	80037fe <PCD_EP_ISR_Handler+0xf2>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003938:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 800393c:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 8003940:	463b      	mov	r3, r7
 8003942:	f8b1 216e 	ldrh.w	r2, [r1, #366]	; 0x16e
 8003946:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 800394a:	f002 fed3 	bl	80066f4 <USB_ReadPMA>
 800394e:	e7d0      	b.n	80038f2 <PCD_EP_ISR_Handler+0x1e6>
          if (ep->type == EP_TYPE_BULK)
 8003950:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8003954:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8003958:	f893 316b 	ldrb.w	r3, [r3, #363]	; 0x16b
 800395c:	2b02      	cmp	r3, #2
 800395e:	d033      	beq.n	80039c8 <PCD_EP_ISR_Handler+0x2bc>
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003960:	6829      	ldr	r1, [r5, #0]
 8003962:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8003966:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 800396a:	f892 0168 	ldrb.w	r0, [r2, #360]	; 0x168
 800396e:	f831 3020 	ldrh.w	r3, [r1, r0, lsl #2]
 8003972:	b29b      	uxth	r3, r3
 8003974:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003978:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800397c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003980:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003984:	f821 3020 	strh.w	r3, [r1, r0, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003988:	6828      	ldr	r0, [r5, #0]
 800398a:	f892 3168 	ldrb.w	r3, [r2, #360]	; 0x168
 800398e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003992:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8003996:	d01e      	beq.n	80039d6 <PCD_EP_ISR_Handler+0x2ca>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003998:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800399c:	00db      	lsls	r3, r3, #3
 800399e:	fa13 f382 	uxtah	r3, r3, r2
 80039a2:	4403      	add	r3, r0
 80039a4:	f8b3 7402 	ldrh.w	r7, [r3, #1026]	; 0x402
 80039a8:	f3c7 0709 	ubfx	r7, r7, #0, #10
              if (count != 0U)
 80039ac:	2f00      	cmp	r7, #0
 80039ae:	d0a0      	beq.n	80038f2 <PCD_EP_ISR_Handler+0x1e6>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80039b0:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 80039b4:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 80039b8:	463b      	mov	r3, r7
 80039ba:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 80039be:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 80039c2:	f002 fe97 	bl	80066f4 <USB_ReadPMA>
 80039c6:	e794      	b.n	80038f2 <PCD_EP_ISR_Handler+0x1e6>
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80039c8:	4632      	mov	r2, r6
 80039ca:	4641      	mov	r1, r8
 80039cc:	4628      	mov	r0, r5
 80039ce:	f7ff fb8c 	bl	80030ea <HAL_PCD_EP_DB_Receive>
 80039d2:	4607      	mov	r7, r0
 80039d4:	e78d      	b.n	80038f2 <PCD_EP_ISR_Handler+0x1e6>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80039d6:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80039da:	00db      	lsls	r3, r3, #3
 80039dc:	fa13 f382 	uxtah	r3, r3, r2
 80039e0:	4403      	add	r3, r0
 80039e2:	f8b3 7406 	ldrh.w	r7, [r3, #1030]	; 0x406
 80039e6:	f3c7 0709 	ubfx	r7, r7, #0, #10
              if (count != 0U)
 80039ea:	2f00      	cmp	r7, #0
 80039ec:	d081      	beq.n	80038f2 <PCD_EP_ISR_Handler+0x1e6>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80039ee:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 80039f2:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 80039f6:	463b      	mov	r3, r7
 80039f8:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 80039fc:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8003a00:	f002 fe78 	bl	80066f4 <USB_ReadPMA>
 8003a04:	e775      	b.n	80038f2 <PCD_EP_ISR_Handler+0x1e6>
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8003a06:	4641      	mov	r1, r8
 8003a08:	6828      	ldr	r0, [r5, #0]
 8003a0a:	f002 fa1a 	bl	8005e42 <USB_EPStartXfer>
 8003a0e:	e6f6      	b.n	80037fe <PCD_EP_ISR_Handler+0xf2>
            ep->xfer_len = 0U;
 8003a10:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8003a14:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8003a18:	2600      	movs	r6, #0
 8003a1a:	6416      	str	r6, [r2, #64]	; 0x40
 8003a1c:	e72d      	b.n	800387a <PCD_EP_ISR_Handler+0x16e>
            ep->xfer_buff += TxByteNbre;
 8003a1e:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8003a22:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8003a26:	6bd6      	ldr	r6, [r2, #60]	; 0x3c
 8003a28:	441e      	add	r6, r3
 8003a2a:	63d6      	str	r6, [r2, #60]	; 0x3c
            ep->xfer_count += TxByteNbre;
 8003a2c:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8003a2e:	4423      	add	r3, r4
 8003a30:	6453      	str	r3, [r2, #68]	; 0x44
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003a32:	f002 fa06 	bl	8005e42 <USB_EPStartXfer>
 8003a36:	e003      	b.n	8003a40 <PCD_EP_ISR_Handler+0x334>
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003a38:	4632      	mov	r2, r6
 8003a3a:	4628      	mov	r0, r5
 8003a3c:	f7ff fc5e 	bl	80032fc <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003a40:	6828      	ldr	r0, [r5, #0]
 8003a42:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8003a46:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8003a4a:	d06b      	beq.n	8003b24 <PCD_EP_ISR_Handler+0x418>
    wIstr = hpcd->Instance->ISTR;
 8003a4c:	f8b0 4044 	ldrh.w	r4, [r0, #68]	; 0x44
 8003a50:	b2a3      	uxth	r3, r4
    if (epindex == 0U)
 8003a52:	f014 040f 	ands.w	r4, r4, #15
 8003a56:	f47f aecc 	bne.w	80037f2 <PCD_EP_ISR_Handler+0xe6>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003a5a:	f013 0f10 	tst.w	r3, #16
 8003a5e:	f43f ae59 	beq.w	8003714 <PCD_EP_ISR_Handler+0x8>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003a62:	8803      	ldrh	r3, [r0, #0]
 8003a64:	b29a      	uxth	r2, r3
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003a66:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8003a6a:	f47f ae88 	bne.w	800377e <PCD_EP_ISR_Handler+0x72>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003a6e:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8003a72:	d0e5      	beq.n	8003a40 <PCD_EP_ISR_Handler+0x334>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003a74:	8803      	ldrh	r3, [r0, #0]
 8003a76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a7a:	051b      	lsls	r3, r3, #20
 8003a7c:	0d1b      	lsrs	r3, r3, #20
 8003a7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a82:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003a84:	6828      	ldr	r0, [r5, #0]
 8003a86:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003a8a:	f895 2168 	ldrb.w	r2, [r5, #360]	; 0x168
 8003a8e:	00d2      	lsls	r2, r2, #3
 8003a90:	fa12 f383 	uxtah	r3, r2, r3
 8003a94:	4403      	add	r3, r0
 8003a96:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	; 0x406
 8003a9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a9e:	f8c5 3184 	str.w	r3, [r5, #388]	; 0x184
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003aa2:	b18b      	cbz	r3, 8003ac8 <PCD_EP_ISR_Handler+0x3bc>
 8003aa4:	f8d5 117c 	ldr.w	r1, [r5, #380]	; 0x17c
 8003aa8:	b171      	cbz	r1, 8003ac8 <PCD_EP_ISR_Handler+0x3bc>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003aaa:	f8b5 216e 	ldrh.w	r2, [r5, #366]	; 0x16e
 8003aae:	f002 fe21 	bl	80066f4 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8003ab2:	f8d5 2184 	ldr.w	r2, [r5, #388]	; 0x184
 8003ab6:	f8d5 317c 	ldr.w	r3, [r5, #380]	; 0x17c
 8003aba:	4413      	add	r3, r2
 8003abc:	f8c5 317c 	str.w	r3, [r5, #380]	; 0x17c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003ac0:	2100      	movs	r1, #0
 8003ac2:	4628      	mov	r0, r5
 8003ac4:	f003 fe2c 	bl	8007720 <HAL_PCD_DataOutStageCallback>
          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8003ac8:	682b      	ldr	r3, [r5, #0]
 8003aca:	881a      	ldrh	r2, [r3, #0]
 8003acc:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8003ad0:	d1b6      	bne.n	8003a40 <PCD_EP_ISR_Handler+0x334>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003ad2:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8003ad6:	fa13 f382 	uxtah	r3, r3, r2
 8003ada:	f8d5 2178 	ldr.w	r2, [r5, #376]	; 0x178
 8003ade:	2a00      	cmp	r2, #0
 8003ae0:	f47f ae6e 	bne.w	80037c0 <PCD_EP_ISR_Handler+0xb4>
 8003ae4:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8003ae8:	b292      	uxth	r2, r2
 8003aea:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8003aee:	b292      	uxth	r2, r2
 8003af0:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8003af4:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8003af8:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8003afc:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8003b00:	b292      	uxth	r2, r2
 8003b02:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003b06:	682a      	ldr	r2, [r5, #0]
 8003b08:	8813      	ldrh	r3, [r2, #0]
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b14:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8003b18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b20:	8013      	strh	r3, [r2, #0]
 8003b22:	e78d      	b.n	8003a40 <PCD_EP_ISR_Handler+0x334>
}
 8003b24:	2000      	movs	r0, #0
 8003b26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003b2a <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8003b2a:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d00d      	beq.n	8003b4e <HAL_PCD_SetAddress+0x24>
{
 8003b32:	b510      	push	{r4, lr}
 8003b34:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8003b36:	2301      	movs	r3, #1
 8003b38:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8003b3c:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003b40:	6800      	ldr	r0, [r0, #0]
 8003b42:	f002 f956 	bl	8005df2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003b46:	2000      	movs	r0, #0
 8003b48:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8003b4c:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8003b4e:	2002      	movs	r0, #2
}
 8003b50:	4770      	bx	lr

08003b52 <HAL_PCD_IRQHandler>:
{
 8003b52:	b510      	push	{r4, lr}
 8003b54:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8003b56:	6800      	ldr	r0, [r0, #0]
 8003b58:	f002 f95c 	bl	8005e14 <USB_ReadInterrupts>
 8003b5c:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8003b60:	f040 809b 	bne.w	8003c9a <HAL_PCD_IRQHandler+0x148>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8003b64:	6820      	ldr	r0, [r4, #0]
 8003b66:	f002 f955 	bl	8005e14 <USB_ReadInterrupts>
 8003b6a:	f410 6f80 	tst.w	r0, #1024	; 0x400
 8003b6e:	f040 8098 	bne.w	8003ca2 <HAL_PCD_IRQHandler+0x150>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8003b72:	6820      	ldr	r0, [r4, #0]
 8003b74:	f002 f94e 	bl	8005e14 <USB_ReadInterrupts>
 8003b78:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 8003b7c:	d008      	beq.n	8003b90 <HAL_PCD_IRQHandler+0x3e>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003b7e:	6822      	ldr	r2, [r4, #0]
 8003b80:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8003b90:	6820      	ldr	r0, [r4, #0]
 8003b92:	f002 f93f 	bl	8005e14 <USB_ReadInterrupts>
 8003b96:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 8003b9a:	d008      	beq.n	8003bae <HAL_PCD_IRQHandler+0x5c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003b9c:	6822      	ldr	r2, [r4, #0]
 8003b9e:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8003ba2:	b29b      	uxth	r3, r3
 8003ba4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8003bae:	6820      	ldr	r0, [r4, #0]
 8003bb0:	f002 f930 	bl	8005e14 <USB_ReadInterrupts>
 8003bb4:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 8003bb8:	d021      	beq.n	8003bfe <HAL_PCD_IRQHandler+0xac>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8003bba:	6822      	ldr	r2, [r4, #0]
 8003bbc:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	f023 0304 	bic.w	r3, r3, #4
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003bcc:	6822      	ldr	r2, [r4, #0]
 8003bce:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8003bd2:	b29b      	uxth	r3, r3
 8003bd4:	f023 0308 	bic.w	r3, r3, #8
 8003bd8:	b29b      	uxth	r3, r3
 8003bda:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    if (hpcd->LPM_State == LPM_L1)
 8003bde:	f894 32e0 	ldrb.w	r3, [r4, #736]	; 0x2e0
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d06e      	beq.n	8003cc4 <HAL_PCD_IRQHandler+0x172>
    HAL_PCD_ResumeCallback(hpcd);
 8003be6:	4620      	mov	r0, r4
 8003be8:	f003 fdda 	bl	80077a0 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003bec:	6822      	ldr	r2, [r4, #0]
 8003bee:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8003bfe:	6820      	ldr	r0, [r4, #0]
 8003c00:	f002 f908 	bl	8005e14 <USB_ReadInterrupts>
 8003c04:	f410 6f00 	tst.w	r0, #2048	; 0x800
 8003c08:	d163      	bne.n	8003cd2 <HAL_PCD_IRQHandler+0x180>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8003c0a:	6820      	ldr	r0, [r4, #0]
 8003c0c:	f002 f902 	bl	8005e14 <USB_ReadInterrupts>
 8003c10:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003c14:	d02b      	beq.n	8003c6e <HAL_PCD_IRQHandler+0x11c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8003c16:	6822      	ldr	r2, [r4, #0]
 8003c18:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8003c1c:	b29b      	uxth	r3, r3
 8003c1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8003c28:	f894 32e0 	ldrb.w	r3, [r4, #736]	; 0x2e0
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d16d      	bne.n	8003d0c <HAL_PCD_IRQHandler+0x1ba>
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003c30:	6822      	ldr	r2, [r4, #0]
 8003c32:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	f043 0304 	orr.w	r3, r3, #4
 8003c3c:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003c40:	6822      	ldr	r2, [r4, #0]
 8003c42:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	f043 0308 	orr.w	r3, r3, #8
 8003c4c:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
      hpcd->LPM_State = LPM_L1;
 8003c50:	2101      	movs	r1, #1
 8003c52:	f884 12e0 	strb.w	r1, [r4, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8003c56:	6823      	ldr	r3, [r4, #0]
 8003c58:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003c5c:	f3c3 038d 	ubfx	r3, r3, #2, #14
 8003c60:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8003c64:	f8c4 32e4 	str.w	r3, [r4, #740]	; 0x2e4
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003c68:	4620      	mov	r0, r4
 8003c6a:	f003 fe51 	bl	8007910 <HAL_PCDEx_LPM_Callback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8003c6e:	6820      	ldr	r0, [r4, #0]
 8003c70:	f002 f8d0 	bl	8005e14 <USB_ReadInterrupts>
 8003c74:	f410 7f00 	tst.w	r0, #512	; 0x200
 8003c78:	d14c      	bne.n	8003d14 <HAL_PCD_IRQHandler+0x1c2>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8003c7a:	6820      	ldr	r0, [r4, #0]
 8003c7c:	f002 f8ca 	bl	8005e14 <USB_ReadInterrupts>
 8003c80:	f410 7f80 	tst.w	r0, #256	; 0x100
 8003c84:	d008      	beq.n	8003c98 <HAL_PCD_IRQHandler+0x146>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003c86:	6822      	ldr	r2, [r4, #0]
 8003c88:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 8003c98:	bd10      	pop	{r4, pc}
    (void)PCD_EP_ISR_Handler(hpcd);
 8003c9a:	4620      	mov	r0, r4
 8003c9c:	f7ff fd36 	bl	800370c <PCD_EP_ISR_Handler>
 8003ca0:	e760      	b.n	8003b64 <HAL_PCD_IRQHandler+0x12>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003ca2:	6822      	ldr	r2, [r4, #0]
 8003ca4:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8003cb4:	4620      	mov	r0, r4
 8003cb6:	f003 fd50 	bl	800775a <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003cba:	2100      	movs	r1, #0
 8003cbc:	4620      	mov	r0, r4
 8003cbe:	f7ff ff34 	bl	8003b2a <HAL_PCD_SetAddress>
 8003cc2:	e756      	b.n	8003b72 <HAL_PCD_IRQHandler+0x20>
      hpcd->LPM_State = LPM_L0;
 8003cc4:	2100      	movs	r1, #0
 8003cc6:	f884 12e0 	strb.w	r1, [r4, #736]	; 0x2e0
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003cca:	4620      	mov	r0, r4
 8003ccc:	f003 fe20 	bl	8007910 <HAL_PCDEx_LPM_Callback>
 8003cd0:	e789      	b.n	8003be6 <HAL_PCD_IRQHandler+0x94>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003cd2:	6822      	ldr	r2, [r4, #0]
 8003cd4:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	f043 0308 	orr.w	r3, r3, #8
 8003cde:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003ce2:	6822      	ldr	r2, [r4, #0]
 8003ce4:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003cf4:	6822      	ldr	r2, [r4, #0]
 8003cf6:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	f043 0304 	orr.w	r3, r3, #4
 8003d00:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 8003d04:	4620      	mov	r0, r4
 8003d06:	f003 fd3b 	bl	8007780 <HAL_PCD_SuspendCallback>
 8003d0a:	e77e      	b.n	8003c0a <HAL_PCD_IRQHandler+0xb8>
      HAL_PCD_SuspendCallback(hpcd);
 8003d0c:	4620      	mov	r0, r4
 8003d0e:	f003 fd37 	bl	8007780 <HAL_PCD_SuspendCallback>
 8003d12:	e7ac      	b.n	8003c6e <HAL_PCD_IRQHandler+0x11c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003d14:	6822      	ldr	r2, [r4, #0]
 8003d16:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8003d26:	4620      	mov	r0, r4
 8003d28:	f003 fd11 	bl	800774e <HAL_PCD_SOFCallback>
 8003d2c:	e7a5      	b.n	8003c7a <HAL_PCD_IRQHandler+0x128>

08003d2e <HAL_PCD_EP_Open>:
{
 8003d2e:	b570      	push	{r4, r5, r6, lr}
 8003d30:	4605      	mov	r5, r0
 8003d32:	460c      	mov	r4, r1
  if ((ep_addr & 0x80U) == 0x80U)
 8003d34:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003d38:	d126      	bne.n	8003d88 <HAL_PCD_EP_Open+0x5a>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d3a:	f001 0007 	and.w	r0, r1, #7
 8003d3e:	eb00 0180 	add.w	r1, r0, r0, lsl #2
 8003d42:	00c9      	lsls	r1, r1, #3
 8003d44:	f501 76b4 	add.w	r6, r1, #360	; 0x168
 8003d48:	19a9      	adds	r1, r5, r6
    ep->is_in = 0U;
 8003d4a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003d4e:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
 8003d52:	2600      	movs	r6, #0
 8003d54:	f880 6169 	strb.w	r6, [r0, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d58:	f004 0407 	and.w	r4, r4, #7
 8003d5c:	700c      	strb	r4, [r1, #0]
  ep->maxpacket = ep_mps;
 8003d5e:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;
 8003d60:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 8003d62:	784a      	ldrb	r2, [r1, #1]
 8003d64:	b102      	cbz	r2, 8003d68 <HAL_PCD_EP_Open+0x3a>
    ep->tx_fifo_num = ep->num;
 8003d66:	81cc      	strh	r4, [r1, #14]
  if (ep_type == EP_TYPE_BULK)
 8003d68:	2b02      	cmp	r3, #2
 8003d6a:	d017      	beq.n	8003d9c <HAL_PCD_EP_Open+0x6e>
  __HAL_LOCK(hpcd);
 8003d6c:	f895 32a8 	ldrb.w	r3, [r5, #680]	; 0x2a8
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d016      	beq.n	8003da2 <HAL_PCD_EP_Open+0x74>
 8003d74:	2301      	movs	r3, #1
 8003d76:	f885 32a8 	strb.w	r3, [r5, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003d7a:	6828      	ldr	r0, [r5, #0]
 8003d7c:	f001 fd38 	bl	80057f0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003d80:	2000      	movs	r0, #0
 8003d82:	f885 02a8 	strb.w	r0, [r5, #680]	; 0x2a8
}
 8003d86:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d88:	f001 0007 	and.w	r0, r1, #7
 8003d8c:	3001      	adds	r0, #1
 8003d8e:	eb00 0180 	add.w	r1, r0, r0, lsl #2
 8003d92:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
    ep->is_in = 1U;
 8003d96:	2601      	movs	r6, #1
 8003d98:	704e      	strb	r6, [r1, #1]
 8003d9a:	e7dd      	b.n	8003d58 <HAL_PCD_EP_Open+0x2a>
    ep->data_pid_start = 0U;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	710b      	strb	r3, [r1, #4]
 8003da0:	e7e4      	b.n	8003d6c <HAL_PCD_EP_Open+0x3e>
  __HAL_LOCK(hpcd);
 8003da2:	2002      	movs	r0, #2
 8003da4:	e7ef      	b.n	8003d86 <HAL_PCD_EP_Open+0x58>

08003da6 <HAL_PCD_EP_Close>:
{
 8003da6:	b510      	push	{r4, lr}
 8003da8:	4604      	mov	r4, r0
 8003daa:	460b      	mov	r3, r1
  if ((ep_addr & 0x80U) == 0x80U)
 8003dac:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003db0:	d11f      	bne.n	8003df2 <HAL_PCD_EP_Close+0x4c>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003db2:	f001 0207 	and.w	r2, r1, #7
 8003db6:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8003dba:	00c9      	lsls	r1, r1, #3
 8003dbc:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 8003dc0:	4401      	add	r1, r0
    ep->is_in = 0U;
 8003dc2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003dc6:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8003dca:	2000      	movs	r0, #0
 8003dcc:	f882 0169 	strb.w	r0, [r2, #361]	; 0x169
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003dd0:	f003 0307 	and.w	r3, r3, #7
 8003dd4:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8003dd6:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d013      	beq.n	8003e06 <HAL_PCD_EP_Close+0x60>
 8003dde:	2301      	movs	r3, #1
 8003de0:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003de4:	6820      	ldr	r0, [r4, #0]
 8003de6:	f001 fea3 	bl	8005b30 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003dea:	2000      	movs	r0, #0
 8003dec:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8003df0:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003df2:	f001 0207 	and.w	r2, r1, #7
 8003df6:	3201      	adds	r2, #1
 8003df8:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8003dfc:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 8003e00:	2001      	movs	r0, #1
 8003e02:	7048      	strb	r0, [r1, #1]
 8003e04:	e7e4      	b.n	8003dd0 <HAL_PCD_EP_Close+0x2a>
  __HAL_LOCK(hpcd);
 8003e06:	2002      	movs	r0, #2
 8003e08:	e7f2      	b.n	8003df0 <HAL_PCD_EP_Close+0x4a>

08003e0a <HAL_PCD_EP_Receive>:
{
 8003e0a:	b538      	push	{r3, r4, r5, lr}
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e0c:	f001 0407 	and.w	r4, r1, #7
 8003e10:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8003e14:	00c9      	lsls	r1, r1, #3
 8003e16:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 8003e1a:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;
 8003e1c:	eb04 0584 	add.w	r5, r4, r4, lsl #2
 8003e20:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
 8003e24:	f8c5 217c 	str.w	r2, [r5, #380]	; 0x17c
  ep->xfer_len = len;
 8003e28:	f8c5 3180 	str.w	r3, [r5, #384]	; 0x180
  ep->xfer_count = 0U;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	f8c5 3184 	str.w	r3, [r5, #388]	; 0x184
  ep->is_in = 0U;
 8003e32:	f885 3169 	strb.w	r3, [r5, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e36:	f885 4168 	strb.w	r4, [r5, #360]	; 0x168
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003e3a:	b924      	cbnz	r4, 8003e46 <HAL_PCD_EP_Receive+0x3c>
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003e3c:	6800      	ldr	r0, [r0, #0]
 8003e3e:	f002 f800 	bl	8005e42 <USB_EPStartXfer>
}
 8003e42:	2000      	movs	r0, #0
 8003e44:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003e46:	6800      	ldr	r0, [r0, #0]
 8003e48:	f001 fffb 	bl	8005e42 <USB_EPStartXfer>
 8003e4c:	e7f9      	b.n	8003e42 <HAL_PCD_EP_Receive+0x38>

08003e4e <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003e4e:	f001 0107 	and.w	r1, r1, #7
 8003e52:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8003e56:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
}
 8003e5a:	f8d1 0184 	ldr.w	r0, [r1, #388]	; 0x184
 8003e5e:	4770      	bx	lr

08003e60 <HAL_PCD_EP_Transmit>:
{
 8003e60:	b570      	push	{r4, r5, r6, lr}
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e62:	f001 0507 	and.w	r5, r1, #7
 8003e66:	1c6c      	adds	r4, r5, #1
 8003e68:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8003e6c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
  ep->xfer_buff = pBuf;
 8003e70:	eb05 0685 	add.w	r6, r5, r5, lsl #2
 8003e74:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 8003e78:	63f2      	str	r2, [r6, #60]	; 0x3c
  ep->xfer_len = len;
 8003e7a:	6433      	str	r3, [r6, #64]	; 0x40
  ep->xfer_fill_db = 1U;
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	f886 204c 	strb.w	r2, [r6, #76]	; 0x4c
  ep->xfer_len_db = len;
 8003e82:	64b3      	str	r3, [r6, #72]	; 0x48
  ep->xfer_count = 0U;
 8003e84:	2300      	movs	r3, #0
 8003e86:	6473      	str	r3, [r6, #68]	; 0x44
  ep->is_in = 1U;
 8003e88:	704a      	strb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e8a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8003e8e:	f800 5034 	strb.w	r5, [r0, r4, lsl #3]
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003e92:	b925      	cbnz	r5, 8003e9e <HAL_PCD_EP_Transmit+0x3e>
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003e94:	6800      	ldr	r0, [r0, #0]
 8003e96:	f001 ffd4 	bl	8005e42 <USB_EPStartXfer>
}
 8003e9a:	2000      	movs	r0, #0
 8003e9c:	bd70      	pop	{r4, r5, r6, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003e9e:	6800      	ldr	r0, [r0, #0]
 8003ea0:	f001 ffcf 	bl	8005e42 <USB_EPStartXfer>
 8003ea4:	e7f9      	b.n	8003e9a <HAL_PCD_EP_Transmit+0x3a>

08003ea6 <HAL_PCD_EP_SetStall>:
{
 8003ea6:	460b      	mov	r3, r1
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003ea8:	f001 0207 	and.w	r2, r1, #7
 8003eac:	6841      	ldr	r1, [r0, #4]
 8003eae:	428a      	cmp	r2, r1
 8003eb0:	d82a      	bhi.n	8003f08 <HAL_PCD_EP_SetStall+0x62>
{
 8003eb2:	b510      	push	{r4, lr}
 8003eb4:	4604      	mov	r4, r0
  if ((0x80U & ep_addr) == 0x80U)
 8003eb6:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003eba:	d11d      	bne.n	8003ef8 <HAL_PCD_EP_SetStall+0x52>
    ep = &hpcd->OUT_ep[ep_addr];
 8003ebc:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8003ec0:	00c9      	lsls	r1, r1, #3
 8003ec2:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 8003ec6:	4401      	add	r1, r0
    ep->is_in = 0U;
 8003ec8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003ecc:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8003ed0:	2000      	movs	r0, #0
 8003ed2:	f883 0169 	strb.w	r0, [r3, #361]	; 0x169
  ep->is_stall = 1U;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003eda:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8003edc:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d013      	beq.n	8003f0c <HAL_PCD_EP_SetStall+0x66>
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003eea:	6820      	ldr	r0, [r4, #0]
 8003eec:	f001 ff0b 	bl	8005d06 <USB_EPSetStall>
  __HAL_UNLOCK(hpcd);
 8003ef0:	2000      	movs	r0, #0
 8003ef2:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8003ef6:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ef8:	1c53      	adds	r3, r2, #1
 8003efa:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8003efe:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 8003f02:	2001      	movs	r0, #1
 8003f04:	7048      	strb	r0, [r1, #1]
 8003f06:	e7e6      	b.n	8003ed6 <HAL_PCD_EP_SetStall+0x30>
    return HAL_ERROR;
 8003f08:	2001      	movs	r0, #1
}
 8003f0a:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 8003f0c:	2002      	movs	r0, #2
 8003f0e:	e7f2      	b.n	8003ef6 <HAL_PCD_EP_SetStall+0x50>

08003f10 <HAL_PCD_EP_ClrStall>:
{
 8003f10:	460b      	mov	r3, r1
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003f12:	f001 010f 	and.w	r1, r1, #15
 8003f16:	6842      	ldr	r2, [r0, #4]
 8003f18:	4291      	cmp	r1, r2
 8003f1a:	d830      	bhi.n	8003f7e <HAL_PCD_EP_ClrStall+0x6e>
{
 8003f1c:	b510      	push	{r4, lr}
 8003f1e:	4604      	mov	r4, r0
  if ((0x80U & ep_addr) == 0x80U)
 8003f20:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003f24:	d121      	bne.n	8003f6a <HAL_PCD_EP_ClrStall+0x5a>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f26:	f003 0207 	and.w	r2, r3, #7
 8003f2a:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8003f2e:	00c9      	lsls	r1, r1, #3
 8003f30:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 8003f34:	4401      	add	r1, r0
    ep->is_in = 0U;
 8003f36:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003f3a:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8003f3e:	2000      	movs	r0, #0
 8003f40:	f882 0169 	strb.w	r0, [r2, #361]	; 0x169
  ep->is_stall = 0U;
 8003f44:	2200      	movs	r2, #0
 8003f46:	708a      	strb	r2, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f48:	f003 0307 	and.w	r3, r3, #7
 8003f4c:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8003f4e:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	d015      	beq.n	8003f82 <HAL_PCD_EP_ClrStall+0x72>
 8003f56:	2301      	movs	r3, #1
 8003f58:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003f5c:	6820      	ldr	r0, [r4, #0]
 8003f5e:	f001 fef7 	bl	8005d50 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003f62:	2000      	movs	r0, #0
 8003f64:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8003f68:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f6a:	f003 0207 	and.w	r2, r3, #7
 8003f6e:	3201      	adds	r2, #1
 8003f70:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8003f74:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 8003f78:	2001      	movs	r0, #1
 8003f7a:	7048      	strb	r0, [r1, #1]
 8003f7c:	e7e2      	b.n	8003f44 <HAL_PCD_EP_ClrStall+0x34>
    return HAL_ERROR;
 8003f7e:	2001      	movs	r0, #1
}
 8003f80:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 8003f82:	2002      	movs	r0, #2
 8003f84:	e7f0      	b.n	8003f68 <HAL_PCD_EP_ClrStall+0x58>

08003f86 <HAL_PCDEx_PMAConfig>:
                                       uint16_t ep_kind, uint32_t pmaadress)
{
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003f86:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003f8a:	d00b      	beq.n	8003fa4 <HAL_PCDEx_PMAConfig+0x1e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f8c:	f001 0107 	and.w	r1, r1, #7
 8003f90:	3101      	adds	r1, #1
 8003f92:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8003f96:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003f9a:	b952      	cbnz	r2, 8003fb2 <HAL_PCDEx_PMAConfig+0x2c>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003f9c:	730a      	strb	r2, [r1, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003f9e:	80cb      	strh	r3, [r1, #6]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }

  return HAL_OK;
}
 8003fa0:	2000      	movs	r0, #0
 8003fa2:	4770      	bx	lr
    ep = &hpcd->OUT_ep[ep_addr];
 8003fa4:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8003fa8:	00c9      	lsls	r1, r1, #3
 8003faa:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 8003fae:	4401      	add	r1, r0
 8003fb0:	e7f3      	b.n	8003f9a <HAL_PCDEx_PMAConfig+0x14>
    ep->doublebuffer = 1U;
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	730a      	strb	r2, [r1, #12]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003fb6:	810b      	strh	r3, [r1, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003fb8:	0c1b      	lsrs	r3, r3, #16
 8003fba:	814b      	strh	r3, [r1, #10]
 8003fbc:	e7f0      	b.n	8003fa0 <HAL_PCDEx_PMAConfig+0x1a>

08003fbe <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003fbe:	4603      	mov	r3, r0

  USB_TypeDef *USBx = hpcd->Instance;
 8003fc0:	6802      	ldr	r2, [r0, #0]
  hpcd->lpm_active = 1U;
 8003fc2:	2101      	movs	r1, #1
 8003fc4:	f8c0 12e8 	str.w	r1, [r0, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8003fc8:	2000      	movs	r0, #0
 8003fca:	f883 02e0 	strb.w	r0, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003fce:	f8b2 3054 	ldrh.w	r3, [r2, #84]	; 0x54
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	430b      	orrs	r3, r1
 8003fd6:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003fda:	f8b2 3054 	ldrh.w	r3, [r2, #84]	; 0x54
 8003fde:	b29b      	uxth	r3, r3
 8003fe0:	f043 0302 	orr.w	r3, r3, #2
 8003fe4:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

  return HAL_OK;
}
 8003fe8:	4770      	bx	lr
	...

08003fec <HAL_PWREx_ControlVoltageScaling>:
{
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003fec:	2800      	cmp	r0, #0
 8003fee:	d136      	bne.n	800405e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003ff0:	4b3e      	ldr	r3, [pc, #248]	; (80040ec <HAL_PWREx_ControlVoltageScaling+0x100>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003ff8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ffc:	d008      	beq.n	8004010 <HAL_PWREx_ControlVoltageScaling+0x24>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003ffe:	4a3b      	ldr	r2, [pc, #236]	; (80040ec <HAL_PWREx_ControlVoltageScaling+0x100>)
 8004000:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8004004:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004008:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800400c:	2000      	movs	r0, #0
 800400e:	4770      	bx	lr
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004010:	4a36      	ldr	r2, [pc, #216]	; (80040ec <HAL_PWREx_ControlVoltageScaling+0x100>)
 8004012:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8004016:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800401a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800401e:	6813      	ldr	r3, [r2, #0]
 8004020:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004024:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004028:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800402a:	4b31      	ldr	r3, [pc, #196]	; (80040f0 <HAL_PWREx_ControlVoltageScaling+0x104>)
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	2332      	movs	r3, #50	; 0x32
 8004030:	fb03 f302 	mul.w	r3, r3, r2
 8004034:	4a2f      	ldr	r2, [pc, #188]	; (80040f4 <HAL_PWREx_ControlVoltageScaling+0x108>)
 8004036:	fba2 2303 	umull	r2, r3, r2, r3
 800403a:	0c9b      	lsrs	r3, r3, #18
 800403c:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800403e:	e000      	b.n	8004042 <HAL_PWREx_ControlVoltageScaling+0x56>
        wait_loop_index--;
 8004040:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004042:	4a2a      	ldr	r2, [pc, #168]	; (80040ec <HAL_PWREx_ControlVoltageScaling+0x100>)
 8004044:	6952      	ldr	r2, [r2, #20]
 8004046:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800404a:	d001      	beq.n	8004050 <HAL_PWREx_ControlVoltageScaling+0x64>
 800404c:	2b00      	cmp	r3, #0
 800404e:	d1f7      	bne.n	8004040 <HAL_PWREx_ControlVoltageScaling+0x54>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004050:	4b26      	ldr	r3, [pc, #152]	; (80040ec <HAL_PWREx_ControlVoltageScaling+0x100>)
 8004052:	695b      	ldr	r3, [r3, #20]
 8004054:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004058:	d144      	bne.n	80040e4 <HAL_PWREx_ControlVoltageScaling+0xf8>
  return HAL_OK;
 800405a:	2000      	movs	r0, #0
 800405c:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800405e:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8004062:	d008      	beq.n	8004076 <HAL_PWREx_ControlVoltageScaling+0x8a>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004064:	4a21      	ldr	r2, [pc, #132]	; (80040ec <HAL_PWREx_ControlVoltageScaling+0x100>)
 8004066:	6813      	ldr	r3, [r2, #0]
 8004068:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800406c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004070:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8004072:	2000      	movs	r0, #0
 8004074:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004076:	4b1d      	ldr	r3, [pc, #116]	; (80040ec <HAL_PWREx_ControlVoltageScaling+0x100>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800407e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004082:	d008      	beq.n	8004096 <HAL_PWREx_ControlVoltageScaling+0xaa>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004084:	4a19      	ldr	r2, [pc, #100]	; (80040ec <HAL_PWREx_ControlVoltageScaling+0x100>)
 8004086:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 800408a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800408e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  return HAL_OK;
 8004092:	2000      	movs	r0, #0
 8004094:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004096:	4a15      	ldr	r2, [pc, #84]	; (80040ec <HAL_PWREx_ControlVoltageScaling+0x100>)
 8004098:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 800409c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040a0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80040a4:	6813      	ldr	r3, [r2, #0]
 80040a6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80040aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80040ae:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80040b0:	4b0f      	ldr	r3, [pc, #60]	; (80040f0 <HAL_PWREx_ControlVoltageScaling+0x104>)
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	2332      	movs	r3, #50	; 0x32
 80040b6:	fb03 f302 	mul.w	r3, r3, r2
 80040ba:	4a0e      	ldr	r2, [pc, #56]	; (80040f4 <HAL_PWREx_ControlVoltageScaling+0x108>)
 80040bc:	fba2 2303 	umull	r2, r3, r2, r3
 80040c0:	0c9b      	lsrs	r3, r3, #18
 80040c2:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80040c4:	e000      	b.n	80040c8 <HAL_PWREx_ControlVoltageScaling+0xdc>
        wait_loop_index--;
 80040c6:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80040c8:	4a08      	ldr	r2, [pc, #32]	; (80040ec <HAL_PWREx_ControlVoltageScaling+0x100>)
 80040ca:	6952      	ldr	r2, [r2, #20]
 80040cc:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80040d0:	d001      	beq.n	80040d6 <HAL_PWREx_ControlVoltageScaling+0xea>
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d1f7      	bne.n	80040c6 <HAL_PWREx_ControlVoltageScaling+0xda>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80040d6:	4b05      	ldr	r3, [pc, #20]	; (80040ec <HAL_PWREx_ControlVoltageScaling+0x100>)
 80040d8:	695b      	ldr	r3, [r3, #20]
 80040da:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80040de:	d103      	bne.n	80040e8 <HAL_PWREx_ControlVoltageScaling+0xfc>
  return HAL_OK;
 80040e0:	2000      	movs	r0, #0
 80040e2:	4770      	bx	lr
        return HAL_TIMEOUT;
 80040e4:	2003      	movs	r0, #3
 80040e6:	4770      	bx	lr
        return HAL_TIMEOUT;
 80040e8:	2003      	movs	r0, #3
}
 80040ea:	4770      	bx	lr
 80040ec:	40007000 	.word	0x40007000
 80040f0:	20000000 	.word	0x20000000
 80040f4:	431bde83 	.word	0x431bde83

080040f8 <HAL_PWREx_DisableUCPDDeadBattery>:
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80040f8:	4a02      	ldr	r2, [pc, #8]	; (8004104 <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 80040fa:	6893      	ldr	r3, [r2, #8]
 80040fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004100:	6093      	str	r3, [r2, #8]
}
 8004102:	4770      	bx	lr
 8004104:	40007000 	.word	0x40007000

08004108 <RCC_GetSysClockFreqFromPLLSource>:
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004108:	4a12      	ldr	r2, [pc, #72]	; (8004154 <RCC_GetSysClockFreqFromPLLSource+0x4c>)
 800410a:	68d3      	ldr	r3, [r2, #12]
 800410c:	f003 0303 	and.w	r3, r3, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004110:	68d0      	ldr	r0, [r2, #12]
 8004112:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8004116:	3001      	adds	r0, #1

  switch (pllsource)
 8004118:	2b03      	cmp	r3, #3
 800411a:	d011      	beq.n	8004140 <RCC_GetSysClockFreqFromPLLSource+0x38>
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800411c:	4b0e      	ldr	r3, [pc, #56]	; (8004158 <RCC_GetSysClockFreqFromPLLSource+0x50>)
 800411e:	fbb3 f3f0 	udiv	r3, r3, r0
 8004122:	4a0c      	ldr	r2, [pc, #48]	; (8004154 <RCC_GetSysClockFreqFromPLLSource+0x4c>)
 8004124:	68d0      	ldr	r0, [r2, #12]
 8004126:	f3c0 2006 	ubfx	r0, r0, #8, #7
 800412a:	fb00 f003 	mul.w	r0, r0, r3
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800412e:	4b09      	ldr	r3, [pc, #36]	; (8004154 <RCC_GetSysClockFreqFromPLLSource+0x4c>)
 8004130:	68db      	ldr	r3, [r3, #12]
 8004132:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8004136:	3301      	adds	r3, #1
 8004138:	005b      	lsls	r3, r3, #1
  sysclockfreq = pllvco/pllr;

  return sysclockfreq;
}
 800413a:	fbb0 f0f3 	udiv	r0, r0, r3
 800413e:	4770      	bx	lr
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004140:	4b05      	ldr	r3, [pc, #20]	; (8004158 <RCC_GetSysClockFreqFromPLLSource+0x50>)
 8004142:	fbb3 f3f0 	udiv	r3, r3, r0
 8004146:	68d0      	ldr	r0, [r2, #12]
 8004148:	f3c0 2006 	ubfx	r0, r0, #8, #7
 800414c:	fb00 f003 	mul.w	r0, r0, r3
    break;
 8004150:	e7ed      	b.n	800412e <RCC_GetSysClockFreqFromPLLSource+0x26>
 8004152:	bf00      	nop
 8004154:	40021000 	.word	0x40021000
 8004158:	00f42400 	.word	0x00f42400

0800415c <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 800415c:	2800      	cmp	r0, #0
 800415e:	f000 8254 	beq.w	800460a <HAL_RCC_OscConfig+0x4ae>
{
 8004162:	b570      	push	{r4, r5, r6, lr}
 8004164:	b082      	sub	sp, #8
 8004166:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004168:	6803      	ldr	r3, [r0, #0]
 800416a:	f013 0f01 	tst.w	r3, #1
 800416e:	d037      	beq.n	80041e0 <HAL_RCC_OscConfig+0x84>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004170:	4ab4      	ldr	r2, [pc, #720]	; (8004444 <HAL_RCC_OscConfig+0x2e8>)
 8004172:	6893      	ldr	r3, [r2, #8]
 8004174:	f003 030c 	and.w	r3, r3, #12
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004178:	68d2      	ldr	r2, [r2, #12]
 800417a:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800417e:	2b0c      	cmp	r3, #12
 8004180:	d023      	beq.n	80041ca <HAL_RCC_OscConfig+0x6e>
 8004182:	2b08      	cmp	r3, #8
 8004184:	d023      	beq.n	80041ce <HAL_RCC_OscConfig+0x72>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004186:	6863      	ldr	r3, [r4, #4]
 8004188:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800418c:	d04e      	beq.n	800422c <HAL_RCC_OscConfig+0xd0>
 800418e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004192:	d051      	beq.n	8004238 <HAL_RCC_OscConfig+0xdc>
 8004194:	4bab      	ldr	r3, [pc, #684]	; (8004444 <HAL_RCC_OscConfig+0x2e8>)
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800419c:	601a      	str	r2, [r3, #0]
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80041a4:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80041a6:	6863      	ldr	r3, [r4, #4]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d052      	beq.n	8004252 <HAL_RCC_OscConfig+0xf6>
        tickstart = HAL_GetTick();
 80041ac:	f7fe fc48 	bl	8002a40 <HAL_GetTick>
 80041b0:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041b2:	4ba4      	ldr	r3, [pc, #656]	; (8004444 <HAL_RCC_OscConfig+0x2e8>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80041ba:	d111      	bne.n	80041e0 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041bc:	f7fe fc40 	bl	8002a40 <HAL_GetTick>
 80041c0:	1b40      	subs	r0, r0, r5
 80041c2:	2864      	cmp	r0, #100	; 0x64
 80041c4:	d9f5      	bls.n	80041b2 <HAL_RCC_OscConfig+0x56>
            return HAL_TIMEOUT;
 80041c6:	2003      	movs	r0, #3
 80041c8:	e228      	b.n	800461c <HAL_RCC_OscConfig+0x4c0>
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80041ca:	2a03      	cmp	r2, #3
 80041cc:	d1d9      	bne.n	8004182 <HAL_RCC_OscConfig+0x26>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041ce:	4b9d      	ldr	r3, [pc, #628]	; (8004444 <HAL_RCC_OscConfig+0x2e8>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80041d6:	d003      	beq.n	80041e0 <HAL_RCC_OscConfig+0x84>
 80041d8:	6863      	ldr	r3, [r4, #4]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	f000 8217 	beq.w	800460e <HAL_RCC_OscConfig+0x4b2>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041e0:	6823      	ldr	r3, [r4, #0]
 80041e2:	f013 0f02 	tst.w	r3, #2
 80041e6:	d05d      	beq.n	80042a4 <HAL_RCC_OscConfig+0x148>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041e8:	4a96      	ldr	r2, [pc, #600]	; (8004444 <HAL_RCC_OscConfig+0x2e8>)
 80041ea:	6893      	ldr	r3, [r2, #8]
 80041ec:	f003 030c 	and.w	r3, r3, #12
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80041f0:	68d2      	ldr	r2, [r2, #12]
 80041f2:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80041f6:	2b0c      	cmp	r3, #12
 80041f8:	d03a      	beq.n	8004270 <HAL_RCC_OscConfig+0x114>
 80041fa:	2b04      	cmp	r3, #4
 80041fc:	d03a      	beq.n	8004274 <HAL_RCC_OscConfig+0x118>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80041fe:	68e3      	ldr	r3, [r4, #12]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d075      	beq.n	80042f0 <HAL_RCC_OscConfig+0x194>
        __HAL_RCC_HSI_ENABLE();
 8004204:	4a8f      	ldr	r2, [pc, #572]	; (8004444 <HAL_RCC_OscConfig+0x2e8>)
 8004206:	6813      	ldr	r3, [r2, #0]
 8004208:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800420c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800420e:	f7fe fc17 	bl	8002a40 <HAL_GetTick>
 8004212:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004214:	4b8b      	ldr	r3, [pc, #556]	; (8004444 <HAL_RCC_OscConfig+0x2e8>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800421c:	d15f      	bne.n	80042de <HAL_RCC_OscConfig+0x182>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800421e:	f7fe fc0f 	bl	8002a40 <HAL_GetTick>
 8004222:	1b40      	subs	r0, r0, r5
 8004224:	2802      	cmp	r0, #2
 8004226:	d9f5      	bls.n	8004214 <HAL_RCC_OscConfig+0xb8>
            return HAL_TIMEOUT;
 8004228:	2003      	movs	r0, #3
 800422a:	e1f7      	b.n	800461c <HAL_RCC_OscConfig+0x4c0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800422c:	4a85      	ldr	r2, [pc, #532]	; (8004444 <HAL_RCC_OscConfig+0x2e8>)
 800422e:	6813      	ldr	r3, [r2, #0]
 8004230:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004234:	6013      	str	r3, [r2, #0]
 8004236:	e7b6      	b.n	80041a6 <HAL_RCC_OscConfig+0x4a>
 8004238:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800423c:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004246:	601a      	str	r2, [r3, #0]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800424e:	601a      	str	r2, [r3, #0]
 8004250:	e7a9      	b.n	80041a6 <HAL_RCC_OscConfig+0x4a>
        tickstart = HAL_GetTick();
 8004252:	f7fe fbf5 	bl	8002a40 <HAL_GetTick>
 8004256:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004258:	4b7a      	ldr	r3, [pc, #488]	; (8004444 <HAL_RCC_OscConfig+0x2e8>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004260:	d0be      	beq.n	80041e0 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004262:	f7fe fbed 	bl	8002a40 <HAL_GetTick>
 8004266:	1b40      	subs	r0, r0, r5
 8004268:	2864      	cmp	r0, #100	; 0x64
 800426a:	d9f5      	bls.n	8004258 <HAL_RCC_OscConfig+0xfc>
            return HAL_TIMEOUT;
 800426c:	2003      	movs	r0, #3
 800426e:	e1d5      	b.n	800461c <HAL_RCC_OscConfig+0x4c0>
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004270:	2a02      	cmp	r2, #2
 8004272:	d1c2      	bne.n	80041fa <HAL_RCC_OscConfig+0x9e>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004274:	4b73      	ldr	r3, [pc, #460]	; (8004444 <HAL_RCC_OscConfig+0x2e8>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800427c:	d003      	beq.n	8004286 <HAL_RCC_OscConfig+0x12a>
 800427e:	68e3      	ldr	r3, [r4, #12]
 8004280:	2b00      	cmp	r3, #0
 8004282:	f000 81c6 	beq.w	8004612 <HAL_RCC_OscConfig+0x4b6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004286:	4a6f      	ldr	r2, [pc, #444]	; (8004444 <HAL_RCC_OscConfig+0x2e8>)
 8004288:	6853      	ldr	r3, [r2, #4]
 800428a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800428e:	6921      	ldr	r1, [r4, #16]
 8004290:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8004294:	6053      	str	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004296:	4b6c      	ldr	r3, [pc, #432]	; (8004448 <HAL_RCC_OscConfig+0x2ec>)
 8004298:	6818      	ldr	r0, [r3, #0]
 800429a:	f7fe fb8d 	bl	80029b8 <HAL_InitTick>
 800429e:	2800      	cmp	r0, #0
 80042a0:	f040 81b9 	bne.w	8004616 <HAL_RCC_OscConfig+0x4ba>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042a4:	6823      	ldr	r3, [r4, #0]
 80042a6:	f013 0f08 	tst.w	r3, #8
 80042aa:	d04c      	beq.n	8004346 <HAL_RCC_OscConfig+0x1ea>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80042ac:	6963      	ldr	r3, [r4, #20]
 80042ae:	b39b      	cbz	r3, 8004318 <HAL_RCC_OscConfig+0x1bc>
      __HAL_RCC_LSI_ENABLE();
 80042b0:	4a64      	ldr	r2, [pc, #400]	; (8004444 <HAL_RCC_OscConfig+0x2e8>)
 80042b2:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80042b6:	f043 0301 	orr.w	r3, r3, #1
 80042ba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 80042be:	f7fe fbbf 	bl	8002a40 <HAL_GetTick>
 80042c2:	4605      	mov	r5, r0
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80042c4:	4b5f      	ldr	r3, [pc, #380]	; (8004444 <HAL_RCC_OscConfig+0x2e8>)
 80042c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042ca:	f013 0f02 	tst.w	r3, #2
 80042ce:	d13a      	bne.n	8004346 <HAL_RCC_OscConfig+0x1ea>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042d0:	f7fe fbb6 	bl	8002a40 <HAL_GetTick>
 80042d4:	1b40      	subs	r0, r0, r5
 80042d6:	2802      	cmp	r0, #2
 80042d8:	d9f4      	bls.n	80042c4 <HAL_RCC_OscConfig+0x168>
          return HAL_TIMEOUT;
 80042da:	2003      	movs	r0, #3
 80042dc:	e19e      	b.n	800461c <HAL_RCC_OscConfig+0x4c0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042de:	4a59      	ldr	r2, [pc, #356]	; (8004444 <HAL_RCC_OscConfig+0x2e8>)
 80042e0:	6853      	ldr	r3, [r2, #4]
 80042e2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80042e6:	6921      	ldr	r1, [r4, #16]
 80042e8:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80042ec:	6053      	str	r3, [r2, #4]
 80042ee:	e7d9      	b.n	80042a4 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_DISABLE();
 80042f0:	4a54      	ldr	r2, [pc, #336]	; (8004444 <HAL_RCC_OscConfig+0x2e8>)
 80042f2:	6813      	ldr	r3, [r2, #0]
 80042f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80042f8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80042fa:	f7fe fba1 	bl	8002a40 <HAL_GetTick>
 80042fe:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004300:	4b50      	ldr	r3, [pc, #320]	; (8004444 <HAL_RCC_OscConfig+0x2e8>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004308:	d0cc      	beq.n	80042a4 <HAL_RCC_OscConfig+0x148>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800430a:	f7fe fb99 	bl	8002a40 <HAL_GetTick>
 800430e:	1b40      	subs	r0, r0, r5
 8004310:	2802      	cmp	r0, #2
 8004312:	d9f5      	bls.n	8004300 <HAL_RCC_OscConfig+0x1a4>
            return HAL_TIMEOUT;
 8004314:	2003      	movs	r0, #3
 8004316:	e181      	b.n	800461c <HAL_RCC_OscConfig+0x4c0>
      __HAL_RCC_LSI_DISABLE();
 8004318:	4a4a      	ldr	r2, [pc, #296]	; (8004444 <HAL_RCC_OscConfig+0x2e8>)
 800431a:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800431e:	f023 0301 	bic.w	r3, r3, #1
 8004322:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8004326:	f7fe fb8b 	bl	8002a40 <HAL_GetTick>
 800432a:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800432c:	4b45      	ldr	r3, [pc, #276]	; (8004444 <HAL_RCC_OscConfig+0x2e8>)
 800432e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004332:	f013 0f02 	tst.w	r3, #2
 8004336:	d006      	beq.n	8004346 <HAL_RCC_OscConfig+0x1ea>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004338:	f7fe fb82 	bl	8002a40 <HAL_GetTick>
 800433c:	1b40      	subs	r0, r0, r5
 800433e:	2802      	cmp	r0, #2
 8004340:	d9f4      	bls.n	800432c <HAL_RCC_OscConfig+0x1d0>
          return HAL_TIMEOUT;
 8004342:	2003      	movs	r0, #3
 8004344:	e16a      	b.n	800461c <HAL_RCC_OscConfig+0x4c0>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004346:	6823      	ldr	r3, [r4, #0]
 8004348:	f013 0f04 	tst.w	r3, #4
 800434c:	f000 8081 	beq.w	8004452 <HAL_RCC_OscConfig+0x2f6>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004350:	4b3c      	ldr	r3, [pc, #240]	; (8004444 <HAL_RCC_OscConfig+0x2e8>)
 8004352:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004354:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8004358:	d136      	bne.n	80043c8 <HAL_RCC_OscConfig+0x26c>
      __HAL_RCC_PWR_CLK_ENABLE();
 800435a:	4b3a      	ldr	r3, [pc, #232]	; (8004444 <HAL_RCC_OscConfig+0x2e8>)
 800435c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800435e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004362:	659a      	str	r2, [r3, #88]	; 0x58
 8004364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800436a:	9301      	str	r3, [sp, #4]
 800436c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800436e:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004370:	4b36      	ldr	r3, [pc, #216]	; (800444c <HAL_RCC_OscConfig+0x2f0>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004378:	d028      	beq.n	80043cc <HAL_RCC_OscConfig+0x270>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800437a:	68a3      	ldr	r3, [r4, #8]
 800437c:	2b01      	cmp	r3, #1
 800437e:	d039      	beq.n	80043f4 <HAL_RCC_OscConfig+0x298>
 8004380:	2b05      	cmp	r3, #5
 8004382:	d03f      	beq.n	8004404 <HAL_RCC_OscConfig+0x2a8>
 8004384:	4b2f      	ldr	r3, [pc, #188]	; (8004444 <HAL_RCC_OscConfig+0x2e8>)
 8004386:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800438a:	f022 0201 	bic.w	r2, r2, #1
 800438e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8004392:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004396:	f022 0204 	bic.w	r2, r2, #4
 800439a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800439e:	68a3      	ldr	r3, [r4, #8]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d03d      	beq.n	8004420 <HAL_RCC_OscConfig+0x2c4>
      tickstart = HAL_GetTick();
 80043a4:	f7fe fb4c 	bl	8002a40 <HAL_GetTick>
 80043a8:	4606      	mov	r6, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043aa:	4b26      	ldr	r3, [pc, #152]	; (8004444 <HAL_RCC_OscConfig+0x2e8>)
 80043ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043b0:	f013 0f02 	tst.w	r3, #2
 80043b4:	d14c      	bne.n	8004450 <HAL_RCC_OscConfig+0x2f4>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043b6:	f7fe fb43 	bl	8002a40 <HAL_GetTick>
 80043ba:	1b80      	subs	r0, r0, r6
 80043bc:	f241 3388 	movw	r3, #5000	; 0x1388
 80043c0:	4298      	cmp	r0, r3
 80043c2:	d9f2      	bls.n	80043aa <HAL_RCC_OscConfig+0x24e>
          return HAL_TIMEOUT;
 80043c4:	2003      	movs	r0, #3
 80043c6:	e129      	b.n	800461c <HAL_RCC_OscConfig+0x4c0>
    FlagStatus       pwrclkchanged = RESET;
 80043c8:	2500      	movs	r5, #0
 80043ca:	e7d1      	b.n	8004370 <HAL_RCC_OscConfig+0x214>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043cc:	4a1f      	ldr	r2, [pc, #124]	; (800444c <HAL_RCC_OscConfig+0x2f0>)
 80043ce:	6813      	ldr	r3, [r2, #0]
 80043d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043d4:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80043d6:	f7fe fb33 	bl	8002a40 <HAL_GetTick>
 80043da:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043dc:	4b1b      	ldr	r3, [pc, #108]	; (800444c <HAL_RCC_OscConfig+0x2f0>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f413 7f80 	tst.w	r3, #256	; 0x100
 80043e4:	d1c9      	bne.n	800437a <HAL_RCC_OscConfig+0x21e>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043e6:	f7fe fb2b 	bl	8002a40 <HAL_GetTick>
 80043ea:	1b80      	subs	r0, r0, r6
 80043ec:	2802      	cmp	r0, #2
 80043ee:	d9f5      	bls.n	80043dc <HAL_RCC_OscConfig+0x280>
          return HAL_TIMEOUT;
 80043f0:	2003      	movs	r0, #3
 80043f2:	e113      	b.n	800461c <HAL_RCC_OscConfig+0x4c0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043f4:	4a13      	ldr	r2, [pc, #76]	; (8004444 <HAL_RCC_OscConfig+0x2e8>)
 80043f6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80043fa:	f043 0301 	orr.w	r3, r3, #1
 80043fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004402:	e7cc      	b.n	800439e <HAL_RCC_OscConfig+0x242>
 8004404:	4b0f      	ldr	r3, [pc, #60]	; (8004444 <HAL_RCC_OscConfig+0x2e8>)
 8004406:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800440a:	f042 0204 	orr.w	r2, r2, #4
 800440e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8004412:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004416:	f042 0201 	orr.w	r2, r2, #1
 800441a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800441e:	e7be      	b.n	800439e <HAL_RCC_OscConfig+0x242>
      tickstart = HAL_GetTick();
 8004420:	f7fe fb0e 	bl	8002a40 <HAL_GetTick>
 8004424:	4606      	mov	r6, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004426:	4b07      	ldr	r3, [pc, #28]	; (8004444 <HAL_RCC_OscConfig+0x2e8>)
 8004428:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800442c:	f013 0f02 	tst.w	r3, #2
 8004430:	d00e      	beq.n	8004450 <HAL_RCC_OscConfig+0x2f4>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004432:	f7fe fb05 	bl	8002a40 <HAL_GetTick>
 8004436:	1b80      	subs	r0, r0, r6
 8004438:	f241 3388 	movw	r3, #5000	; 0x1388
 800443c:	4298      	cmp	r0, r3
 800443e:	d9f2      	bls.n	8004426 <HAL_RCC_OscConfig+0x2ca>
          return HAL_TIMEOUT;
 8004440:	2003      	movs	r0, #3
 8004442:	e0eb      	b.n	800461c <HAL_RCC_OscConfig+0x4c0>
 8004444:	40021000 	.word	0x40021000
 8004448:	20000008 	.word	0x20000008
 800444c:	40007000 	.word	0x40007000
    if (pwrclkchanged == SET)
 8004450:	b9e5      	cbnz	r5, 800448c <HAL_RCC_OscConfig+0x330>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004452:	6823      	ldr	r3, [r4, #0]
 8004454:	f013 0f20 	tst.w	r3, #32
 8004458:	d035      	beq.n	80044c6 <HAL_RCC_OscConfig+0x36a>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800445a:	69a3      	ldr	r3, [r4, #24]
 800445c:	b1e3      	cbz	r3, 8004498 <HAL_RCC_OscConfig+0x33c>
      __HAL_RCC_HSI48_ENABLE();
 800445e:	4a77      	ldr	r2, [pc, #476]	; (800463c <HAL_RCC_OscConfig+0x4e0>)
 8004460:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 8004464:	f043 0301 	orr.w	r3, r3, #1
 8004468:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 800446c:	f7fe fae8 	bl	8002a40 <HAL_GetTick>
 8004470:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004472:	4b72      	ldr	r3, [pc, #456]	; (800463c <HAL_RCC_OscConfig+0x4e0>)
 8004474:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004478:	f013 0f02 	tst.w	r3, #2
 800447c:	d123      	bne.n	80044c6 <HAL_RCC_OscConfig+0x36a>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800447e:	f7fe fadf 	bl	8002a40 <HAL_GetTick>
 8004482:	1b40      	subs	r0, r0, r5
 8004484:	2802      	cmp	r0, #2
 8004486:	d9f4      	bls.n	8004472 <HAL_RCC_OscConfig+0x316>
          return HAL_TIMEOUT;
 8004488:	2003      	movs	r0, #3
 800448a:	e0c7      	b.n	800461c <HAL_RCC_OscConfig+0x4c0>
      __HAL_RCC_PWR_CLK_DISABLE();
 800448c:	4a6b      	ldr	r2, [pc, #428]	; (800463c <HAL_RCC_OscConfig+0x4e0>)
 800448e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004490:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004494:	6593      	str	r3, [r2, #88]	; 0x58
 8004496:	e7dc      	b.n	8004452 <HAL_RCC_OscConfig+0x2f6>
      __HAL_RCC_HSI48_DISABLE();
 8004498:	4a68      	ldr	r2, [pc, #416]	; (800463c <HAL_RCC_OscConfig+0x4e0>)
 800449a:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 800449e:	f023 0301 	bic.w	r3, r3, #1
 80044a2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 80044a6:	f7fe facb 	bl	8002a40 <HAL_GetTick>
 80044aa:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80044ac:	4b63      	ldr	r3, [pc, #396]	; (800463c <HAL_RCC_OscConfig+0x4e0>)
 80044ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80044b2:	f013 0f02 	tst.w	r3, #2
 80044b6:	d006      	beq.n	80044c6 <HAL_RCC_OscConfig+0x36a>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80044b8:	f7fe fac2 	bl	8002a40 <HAL_GetTick>
 80044bc:	1b40      	subs	r0, r0, r5
 80044be:	2802      	cmp	r0, #2
 80044c0:	d9f4      	bls.n	80044ac <HAL_RCC_OscConfig+0x350>
          return HAL_TIMEOUT;
 80044c2:	2003      	movs	r0, #3
 80044c4:	e0aa      	b.n	800461c <HAL_RCC_OscConfig+0x4c0>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80044c6:	69e3      	ldr	r3, [r4, #28]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	f000 80a6 	beq.w	800461a <HAL_RCC_OscConfig+0x4be>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80044ce:	4a5b      	ldr	r2, [pc, #364]	; (800463c <HAL_RCC_OscConfig+0x4e0>)
 80044d0:	6892      	ldr	r2, [r2, #8]
 80044d2:	f002 020c 	and.w	r2, r2, #12
 80044d6:	2a0c      	cmp	r2, #12
 80044d8:	d069      	beq.n	80045ae <HAL_RCC_OscConfig+0x452>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80044da:	2b02      	cmp	r3, #2
 80044dc:	d01d      	beq.n	800451a <HAL_RCC_OscConfig+0x3be>
        __HAL_RCC_PLL_DISABLE();
 80044de:	4b57      	ldr	r3, [pc, #348]	; (800463c <HAL_RCC_OscConfig+0x4e0>)
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80044e6:	601a      	str	r2, [r3, #0]
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80044e8:	68da      	ldr	r2, [r3, #12]
 80044ea:	f022 0203 	bic.w	r2, r2, #3
 80044ee:	60da      	str	r2, [r3, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80044f0:	68da      	ldr	r2, [r3, #12]
 80044f2:	f022 7288 	bic.w	r2, r2, #17825792	; 0x1100000
 80044f6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80044fa:	60da      	str	r2, [r3, #12]
        tickstart = HAL_GetTick();
 80044fc:	f7fe faa0 	bl	8002a40 <HAL_GetTick>
 8004500:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004502:	4b4e      	ldr	r3, [pc, #312]	; (800463c <HAL_RCC_OscConfig+0x4e0>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800450a:	d04e      	beq.n	80045aa <HAL_RCC_OscConfig+0x44e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800450c:	f7fe fa98 	bl	8002a40 <HAL_GetTick>
 8004510:	1b00      	subs	r0, r0, r4
 8004512:	2802      	cmp	r0, #2
 8004514:	d9f5      	bls.n	8004502 <HAL_RCC_OscConfig+0x3a6>
            return HAL_TIMEOUT;
 8004516:	2003      	movs	r0, #3
 8004518:	e080      	b.n	800461c <HAL_RCC_OscConfig+0x4c0>
        __HAL_RCC_PLL_DISABLE();
 800451a:	4a48      	ldr	r2, [pc, #288]	; (800463c <HAL_RCC_OscConfig+0x4e0>)
 800451c:	6813      	ldr	r3, [r2, #0]
 800451e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004522:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004524:	f7fe fa8c 	bl	8002a40 <HAL_GetTick>
 8004528:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800452a:	4b44      	ldr	r3, [pc, #272]	; (800463c <HAL_RCC_OscConfig+0x4e0>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004532:	d006      	beq.n	8004542 <HAL_RCC_OscConfig+0x3e6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004534:	f7fe fa84 	bl	8002a40 <HAL_GetTick>
 8004538:	1b40      	subs	r0, r0, r5
 800453a:	2802      	cmp	r0, #2
 800453c:	d9f5      	bls.n	800452a <HAL_RCC_OscConfig+0x3ce>
            return HAL_TIMEOUT;
 800453e:	2003      	movs	r0, #3
 8004540:	e06c      	b.n	800461c <HAL_RCC_OscConfig+0x4c0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004542:	4a3e      	ldr	r2, [pc, #248]	; (800463c <HAL_RCC_OscConfig+0x4e0>)
 8004544:	68d3      	ldr	r3, [r2, #12]
 8004546:	493e      	ldr	r1, [pc, #248]	; (8004640 <HAL_RCC_OscConfig+0x4e4>)
 8004548:	4019      	ands	r1, r3
 800454a:	6a23      	ldr	r3, [r4, #32]
 800454c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800454e:	3801      	subs	r0, #1
 8004550:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8004554:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004556:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800455a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800455c:	0840      	lsrs	r0, r0, #1
 800455e:	3801      	subs	r0, #1
 8004560:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
 8004564:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8004566:	0840      	lsrs	r0, r0, #1
 8004568:	3801      	subs	r0, #1
 800456a:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 800456e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8004570:	ea43 63c0 	orr.w	r3, r3, r0, lsl #27
 8004574:	430b      	orrs	r3, r1
 8004576:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLL_ENABLE();
 8004578:	6813      	ldr	r3, [r2, #0]
 800457a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800457e:	6013      	str	r3, [r2, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004580:	68d3      	ldr	r3, [r2, #12]
 8004582:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004586:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8004588:	f7fe fa5a 	bl	8002a40 <HAL_GetTick>
 800458c:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800458e:	4b2b      	ldr	r3, [pc, #172]	; (800463c <HAL_RCC_OscConfig+0x4e0>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004596:	d106      	bne.n	80045a6 <HAL_RCC_OscConfig+0x44a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004598:	f7fe fa52 	bl	8002a40 <HAL_GetTick>
 800459c:	1b00      	subs	r0, r0, r4
 800459e:	2802      	cmp	r0, #2
 80045a0:	d9f5      	bls.n	800458e <HAL_RCC_OscConfig+0x432>
            return HAL_TIMEOUT;
 80045a2:	2003      	movs	r0, #3
 80045a4:	e03a      	b.n	800461c <HAL_RCC_OscConfig+0x4c0>
  return HAL_OK;
 80045a6:	2000      	movs	r0, #0
 80045a8:	e038      	b.n	800461c <HAL_RCC_OscConfig+0x4c0>
 80045aa:	2000      	movs	r0, #0
 80045ac:	e036      	b.n	800461c <HAL_RCC_OscConfig+0x4c0>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d036      	beq.n	8004620 <HAL_RCC_OscConfig+0x4c4>
      temp_pllckcfg = RCC->PLLCFGR;
 80045b2:	4b22      	ldr	r3, [pc, #136]	; (800463c <HAL_RCC_OscConfig+0x4e0>)
 80045b4:	68db      	ldr	r3, [r3, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045b6:	f003 0103 	and.w	r1, r3, #3
 80045ba:	6a22      	ldr	r2, [r4, #32]
 80045bc:	4291      	cmp	r1, r2
 80045be:	d131      	bne.n	8004624 <HAL_RCC_OscConfig+0x4c8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80045c0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80045c4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80045c6:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045c8:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 80045cc:	d12c      	bne.n	8004628 <HAL_RCC_OscConfig+0x4cc>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80045ce:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80045d2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80045d4:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 80045d8:	d128      	bne.n	800462c <HAL_RCC_OscConfig+0x4d0>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80045da:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80045de:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80045e0:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 80045e4:	d124      	bne.n	8004630 <HAL_RCC_OscConfig+0x4d4>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80045e6:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 80045ea:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80045ec:	0852      	lsrs	r2, r2, #1
 80045ee:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80045f0:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 80045f4:	d11e      	bne.n	8004634 <HAL_RCC_OscConfig+0x4d8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80045f6:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 80045fa:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80045fc:	0852      	lsrs	r2, r2, #1
 80045fe:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004600:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8004604:	d118      	bne.n	8004638 <HAL_RCC_OscConfig+0x4dc>
  return HAL_OK;
 8004606:	2000      	movs	r0, #0
 8004608:	e008      	b.n	800461c <HAL_RCC_OscConfig+0x4c0>
    return HAL_ERROR;
 800460a:	2001      	movs	r0, #1
}
 800460c:	4770      	bx	lr
        return HAL_ERROR;
 800460e:	2001      	movs	r0, #1
 8004610:	e004      	b.n	800461c <HAL_RCC_OscConfig+0x4c0>
        return HAL_ERROR;
 8004612:	2001      	movs	r0, #1
 8004614:	e002      	b.n	800461c <HAL_RCC_OscConfig+0x4c0>
          return HAL_ERROR;
 8004616:	2001      	movs	r0, #1
 8004618:	e000      	b.n	800461c <HAL_RCC_OscConfig+0x4c0>
  return HAL_OK;
 800461a:	2000      	movs	r0, #0
}
 800461c:	b002      	add	sp, #8
 800461e:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8004620:	2001      	movs	r0, #1
 8004622:	e7fb      	b.n	800461c <HAL_RCC_OscConfig+0x4c0>
        return HAL_ERROR;
 8004624:	2001      	movs	r0, #1
 8004626:	e7f9      	b.n	800461c <HAL_RCC_OscConfig+0x4c0>
 8004628:	2001      	movs	r0, #1
 800462a:	e7f7      	b.n	800461c <HAL_RCC_OscConfig+0x4c0>
 800462c:	2001      	movs	r0, #1
 800462e:	e7f5      	b.n	800461c <HAL_RCC_OscConfig+0x4c0>
 8004630:	2001      	movs	r0, #1
 8004632:	e7f3      	b.n	800461c <HAL_RCC_OscConfig+0x4c0>
 8004634:	2001      	movs	r0, #1
 8004636:	e7f1      	b.n	800461c <HAL_RCC_OscConfig+0x4c0>
 8004638:	2001      	movs	r0, #1
 800463a:	e7ef      	b.n	800461c <HAL_RCC_OscConfig+0x4c0>
 800463c:	40021000 	.word	0x40021000
 8004640:	019f800c 	.word	0x019f800c

08004644 <HAL_RCC_GetSysClockFreq>:
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004644:	4b1e      	ldr	r3, [pc, #120]	; (80046c0 <HAL_RCC_GetSysClockFreq+0x7c>)
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	f003 030c 	and.w	r3, r3, #12
 800464c:	2b04      	cmp	r3, #4
 800464e:	d032      	beq.n	80046b6 <HAL_RCC_GetSysClockFreq+0x72>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004650:	4b1b      	ldr	r3, [pc, #108]	; (80046c0 <HAL_RCC_GetSysClockFreq+0x7c>)
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	f003 030c 	and.w	r3, r3, #12
 8004658:	2b08      	cmp	r3, #8
 800465a:	d02e      	beq.n	80046ba <HAL_RCC_GetSysClockFreq+0x76>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800465c:	4b18      	ldr	r3, [pc, #96]	; (80046c0 <HAL_RCC_GetSysClockFreq+0x7c>)
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	f003 030c 	and.w	r3, r3, #12
 8004664:	2b0c      	cmp	r3, #12
 8004666:	d001      	beq.n	800466c <HAL_RCC_GetSysClockFreq+0x28>
    sysclockfreq = 0U;
 8004668:	2000      	movs	r0, #0
}
 800466a:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800466c:	4a14      	ldr	r2, [pc, #80]	; (80046c0 <HAL_RCC_GetSysClockFreq+0x7c>)
 800466e:	68d3      	ldr	r3, [r2, #12]
 8004670:	f003 0303 	and.w	r3, r3, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004674:	68d0      	ldr	r0, [r2, #12]
 8004676:	f3c0 1003 	ubfx	r0, r0, #4, #4
 800467a:	3001      	adds	r0, #1
    switch (pllsource)
 800467c:	2b03      	cmp	r3, #3
 800467e:	d011      	beq.n	80046a4 <HAL_RCC_GetSysClockFreq+0x60>
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004680:	4b10      	ldr	r3, [pc, #64]	; (80046c4 <HAL_RCC_GetSysClockFreq+0x80>)
 8004682:	fbb3 f3f0 	udiv	r3, r3, r0
 8004686:	4a0e      	ldr	r2, [pc, #56]	; (80046c0 <HAL_RCC_GetSysClockFreq+0x7c>)
 8004688:	68d0      	ldr	r0, [r2, #12]
 800468a:	f3c0 2006 	ubfx	r0, r0, #8, #7
 800468e:	fb00 f003 	mul.w	r0, r0, r3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004692:	4b0b      	ldr	r3, [pc, #44]	; (80046c0 <HAL_RCC_GetSysClockFreq+0x7c>)
 8004694:	68db      	ldr	r3, [r3, #12]
 8004696:	f3c3 6341 	ubfx	r3, r3, #25, #2
 800469a:	3301      	adds	r3, #1
 800469c:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 800469e:	fbb0 f0f3 	udiv	r0, r0, r3
 80046a2:	4770      	bx	lr
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80046a4:	4b07      	ldr	r3, [pc, #28]	; (80046c4 <HAL_RCC_GetSysClockFreq+0x80>)
 80046a6:	fbb3 f3f0 	udiv	r3, r3, r0
 80046aa:	68d0      	ldr	r0, [r2, #12]
 80046ac:	f3c0 2006 	ubfx	r0, r0, #8, #7
 80046b0:	fb00 f003 	mul.w	r0, r0, r3
      break;
 80046b4:	e7ed      	b.n	8004692 <HAL_RCC_GetSysClockFreq+0x4e>
    sysclockfreq = HSI_VALUE;
 80046b6:	4803      	ldr	r0, [pc, #12]	; (80046c4 <HAL_RCC_GetSysClockFreq+0x80>)
 80046b8:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 80046ba:	4802      	ldr	r0, [pc, #8]	; (80046c4 <HAL_RCC_GetSysClockFreq+0x80>)
 80046bc:	4770      	bx	lr
 80046be:	bf00      	nop
 80046c0:	40021000 	.word	0x40021000
 80046c4:	00f42400 	.word	0x00f42400

080046c8 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80046c8:	2800      	cmp	r0, #0
 80046ca:	f000 80e6 	beq.w	800489a <HAL_RCC_ClockConfig+0x1d2>
{
 80046ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046d0:	460c      	mov	r4, r1
 80046d2:	4605      	mov	r5, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80046d4:	4b74      	ldr	r3, [pc, #464]	; (80048a8 <HAL_RCC_ClockConfig+0x1e0>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 030f 	and.w	r3, r3, #15
 80046dc:	428b      	cmp	r3, r1
 80046de:	d20b      	bcs.n	80046f8 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046e0:	4a71      	ldr	r2, [pc, #452]	; (80048a8 <HAL_RCC_ClockConfig+0x1e0>)
 80046e2:	6813      	ldr	r3, [r2, #0]
 80046e4:	f023 030f 	bic.w	r3, r3, #15
 80046e8:	430b      	orrs	r3, r1
 80046ea:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046ec:	6813      	ldr	r3, [r2, #0]
 80046ee:	f003 030f 	and.w	r3, r3, #15
 80046f2:	428b      	cmp	r3, r1
 80046f4:	f040 80d3 	bne.w	800489e <HAL_RCC_ClockConfig+0x1d6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046f8:	682e      	ldr	r6, [r5, #0]
 80046fa:	f016 0601 	ands.w	r6, r6, #1
 80046fe:	d05f      	beq.n	80047c0 <HAL_RCC_ClockConfig+0xf8>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004700:	686b      	ldr	r3, [r5, #4]
 8004702:	2b03      	cmp	r3, #3
 8004704:	d015      	beq.n	8004732 <HAL_RCC_ClockConfig+0x6a>
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004706:	2b02      	cmp	r3, #2
 8004708:	d033      	beq.n	8004772 <HAL_RCC_ClockConfig+0xaa>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800470a:	4b68      	ldr	r3, [pc, #416]	; (80048ac <HAL_RCC_ClockConfig+0x1e4>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004712:	f000 80c6 	beq.w	80048a2 <HAL_RCC_ClockConfig+0x1da>
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004716:	f7ff ff95 	bl	8004644 <HAL_RCC_GetSysClockFreq>
      if(pllfreq > 80000000U)
 800471a:	4b65      	ldr	r3, [pc, #404]	; (80048b0 <HAL_RCC_ClockConfig+0x1e8>)
 800471c:	4298      	cmp	r0, r3
 800471e:	d933      	bls.n	8004788 <HAL_RCC_ClockConfig+0xc0>
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004720:	4a62      	ldr	r2, [pc, #392]	; (80048ac <HAL_RCC_ClockConfig+0x1e4>)
 8004722:	6893      	ldr	r3, [r2, #8]
 8004724:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004728:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800472c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800472e:	2680      	movs	r6, #128	; 0x80
 8004730:	e02b      	b.n	800478a <HAL_RCC_ClockConfig+0xc2>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004732:	4b5e      	ldr	r3, [pc, #376]	; (80048ac <HAL_RCC_ClockConfig+0x1e4>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800473a:	d101      	bne.n	8004740 <HAL_RCC_ClockConfig+0x78>
        return HAL_ERROR;
 800473c:	2001      	movs	r0, #1
 800473e:	e08b      	b.n	8004858 <HAL_RCC_ClockConfig+0x190>
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004740:	f7ff fce2 	bl	8004108 <RCC_GetSysClockFreqFromPLLSource>
      if(pllfreq > 80000000U)
 8004744:	4b5a      	ldr	r3, [pc, #360]	; (80048b0 <HAL_RCC_ClockConfig+0x1e8>)
 8004746:	4298      	cmp	r0, r3
 8004748:	d91a      	bls.n	8004780 <HAL_RCC_ClockConfig+0xb8>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800474a:	4b58      	ldr	r3, [pc, #352]	; (80048ac <HAL_RCC_ClockConfig+0x1e4>)
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 8004752:	d005      	beq.n	8004760 <HAL_RCC_ClockConfig+0x98>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004754:	682e      	ldr	r6, [r5, #0]
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004756:	f016 0602 	ands.w	r6, r6, #2
 800475a:	d016      	beq.n	800478a <HAL_RCC_ClockConfig+0xc2>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800475c:	68ab      	ldr	r3, [r5, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800475e:	b98b      	cbnz	r3, 8004784 <HAL_RCC_ClockConfig+0xbc>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004760:	4a52      	ldr	r2, [pc, #328]	; (80048ac <HAL_RCC_ClockConfig+0x1e4>)
 8004762:	6893      	ldr	r3, [r2, #8]
 8004764:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004768:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800476c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800476e:	2680      	movs	r6, #128	; 0x80
 8004770:	e00b      	b.n	800478a <HAL_RCC_ClockConfig+0xc2>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004772:	4b4e      	ldr	r3, [pc, #312]	; (80048ac <HAL_RCC_ClockConfig+0x1e4>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800477a:	d1cc      	bne.n	8004716 <HAL_RCC_ClockConfig+0x4e>
          return HAL_ERROR;
 800477c:	2001      	movs	r0, #1
 800477e:	e06b      	b.n	8004858 <HAL_RCC_ClockConfig+0x190>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004780:	2600      	movs	r6, #0
 8004782:	e002      	b.n	800478a <HAL_RCC_ClockConfig+0xc2>
 8004784:	2600      	movs	r6, #0
 8004786:	e000      	b.n	800478a <HAL_RCC_ClockConfig+0xc2>
 8004788:	2600      	movs	r6, #0
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800478a:	4a48      	ldr	r2, [pc, #288]	; (80048ac <HAL_RCC_ClockConfig+0x1e4>)
 800478c:	6893      	ldr	r3, [r2, #8]
 800478e:	f023 0303 	bic.w	r3, r3, #3
 8004792:	6869      	ldr	r1, [r5, #4]
 8004794:	430b      	orrs	r3, r1
 8004796:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8004798:	f7fe f952 	bl	8002a40 <HAL_GetTick>
 800479c:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800479e:	4b43      	ldr	r3, [pc, #268]	; (80048ac <HAL_RCC_ClockConfig+0x1e4>)
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	f003 030c 	and.w	r3, r3, #12
 80047a6:	686a      	ldr	r2, [r5, #4]
 80047a8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80047ac:	d008      	beq.n	80047c0 <HAL_RCC_ClockConfig+0xf8>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047ae:	f7fe f947 	bl	8002a40 <HAL_GetTick>
 80047b2:	1bc0      	subs	r0, r0, r7
 80047b4:	f241 3388 	movw	r3, #5000	; 0x1388
 80047b8:	4298      	cmp	r0, r3
 80047ba:	d9f0      	bls.n	800479e <HAL_RCC_ClockConfig+0xd6>
        return HAL_TIMEOUT;
 80047bc:	2003      	movs	r0, #3
 80047be:	e04b      	b.n	8004858 <HAL_RCC_ClockConfig+0x190>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047c0:	682b      	ldr	r3, [r5, #0]
 80047c2:	f013 0f02 	tst.w	r3, #2
 80047c6:	d048      	beq.n	800485a <HAL_RCC_ClockConfig+0x192>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047c8:	f013 0f04 	tst.w	r3, #4
 80047cc:	d004      	beq.n	80047d8 <HAL_RCC_ClockConfig+0x110>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047ce:	4a37      	ldr	r2, [pc, #220]	; (80048ac <HAL_RCC_ClockConfig+0x1e4>)
 80047d0:	6893      	ldr	r3, [r2, #8]
 80047d2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80047d6:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047d8:	682b      	ldr	r3, [r5, #0]
 80047da:	f013 0f08 	tst.w	r3, #8
 80047de:	d006      	beq.n	80047ee <HAL_RCC_ClockConfig+0x126>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80047e0:	4a32      	ldr	r2, [pc, #200]	; (80048ac <HAL_RCC_ClockConfig+0x1e4>)
 80047e2:	6893      	ldr	r3, [r2, #8]
 80047e4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80047e8:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80047ec:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047ee:	4a2f      	ldr	r2, [pc, #188]	; (80048ac <HAL_RCC_ClockConfig+0x1e4>)
 80047f0:	6893      	ldr	r3, [r2, #8]
 80047f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80047f6:	68a9      	ldr	r1, [r5, #8]
 80047f8:	430b      	orrs	r3, r1
 80047fa:	6093      	str	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80047fc:	4b2a      	ldr	r3, [pc, #168]	; (80048a8 <HAL_RCC_ClockConfig+0x1e0>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 030f 	and.w	r3, r3, #15
 8004804:	42a3      	cmp	r3, r4
 8004806:	d830      	bhi.n	800486a <HAL_RCC_ClockConfig+0x1a2>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004808:	682b      	ldr	r3, [r5, #0]
 800480a:	f013 0f04 	tst.w	r3, #4
 800480e:	d006      	beq.n	800481e <HAL_RCC_ClockConfig+0x156>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004810:	4a26      	ldr	r2, [pc, #152]	; (80048ac <HAL_RCC_ClockConfig+0x1e4>)
 8004812:	6893      	ldr	r3, [r2, #8]
 8004814:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004818:	68e9      	ldr	r1, [r5, #12]
 800481a:	430b      	orrs	r3, r1
 800481c:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800481e:	682b      	ldr	r3, [r5, #0]
 8004820:	f013 0f08 	tst.w	r3, #8
 8004824:	d007      	beq.n	8004836 <HAL_RCC_ClockConfig+0x16e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004826:	4a21      	ldr	r2, [pc, #132]	; (80048ac <HAL_RCC_ClockConfig+0x1e4>)
 8004828:	6893      	ldr	r3, [r2, #8]
 800482a:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800482e:	6929      	ldr	r1, [r5, #16]
 8004830:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004834:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004836:	f7ff ff05 	bl	8004644 <HAL_RCC_GetSysClockFreq>
 800483a:	4b1c      	ldr	r3, [pc, #112]	; (80048ac <HAL_RCC_ClockConfig+0x1e4>)
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004842:	4a1c      	ldr	r2, [pc, #112]	; (80048b4 <HAL_RCC_ClockConfig+0x1ec>)
 8004844:	5cd3      	ldrb	r3, [r2, r3]
 8004846:	f003 031f 	and.w	r3, r3, #31
 800484a:	40d8      	lsrs	r0, r3
 800484c:	4b1a      	ldr	r3, [pc, #104]	; (80048b8 <HAL_RCC_ClockConfig+0x1f0>)
 800484e:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 8004850:	4b1a      	ldr	r3, [pc, #104]	; (80048bc <HAL_RCC_ClockConfig+0x1f4>)
 8004852:	6818      	ldr	r0, [r3, #0]
 8004854:	f7fe f8b0 	bl	80029b8 <HAL_InitTick>
}
 8004858:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(hpre == RCC_SYSCLK_DIV2)
 800485a:	2e80      	cmp	r6, #128	; 0x80
 800485c:	d1ce      	bne.n	80047fc <HAL_RCC_ClockConfig+0x134>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800485e:	4a13      	ldr	r2, [pc, #76]	; (80048ac <HAL_RCC_ClockConfig+0x1e4>)
 8004860:	6893      	ldr	r3, [r2, #8]
 8004862:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004866:	6093      	str	r3, [r2, #8]
 8004868:	e7c8      	b.n	80047fc <HAL_RCC_ClockConfig+0x134>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800486a:	4a0f      	ldr	r2, [pc, #60]	; (80048a8 <HAL_RCC_ClockConfig+0x1e0>)
 800486c:	6813      	ldr	r3, [r2, #0]
 800486e:	f023 030f 	bic.w	r3, r3, #15
 8004872:	4323      	orrs	r3, r4
 8004874:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8004876:	f7fe f8e3 	bl	8002a40 <HAL_GetTick>
 800487a:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800487c:	4b0a      	ldr	r3, [pc, #40]	; (80048a8 <HAL_RCC_ClockConfig+0x1e0>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 030f 	and.w	r3, r3, #15
 8004884:	42a3      	cmp	r3, r4
 8004886:	d0bf      	beq.n	8004808 <HAL_RCC_ClockConfig+0x140>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004888:	f7fe f8da 	bl	8002a40 <HAL_GetTick>
 800488c:	1b80      	subs	r0, r0, r6
 800488e:	f241 3388 	movw	r3, #5000	; 0x1388
 8004892:	4298      	cmp	r0, r3
 8004894:	d9f2      	bls.n	800487c <HAL_RCC_ClockConfig+0x1b4>
        return HAL_TIMEOUT;
 8004896:	2003      	movs	r0, #3
 8004898:	e7de      	b.n	8004858 <HAL_RCC_ClockConfig+0x190>
    return HAL_ERROR;
 800489a:	2001      	movs	r0, #1
}
 800489c:	4770      	bx	lr
      return HAL_ERROR;
 800489e:	2001      	movs	r0, #1
 80048a0:	e7da      	b.n	8004858 <HAL_RCC_ClockConfig+0x190>
          return HAL_ERROR;
 80048a2:	2001      	movs	r0, #1
 80048a4:	e7d8      	b.n	8004858 <HAL_RCC_ClockConfig+0x190>
 80048a6:	bf00      	nop
 80048a8:	40022000 	.word	0x40022000
 80048ac:	40021000 	.word	0x40021000
 80048b0:	04c4b400 	.word	0x04c4b400
 80048b4:	08008308 	.word	0x08008308
 80048b8:	20000000 	.word	0x20000000
 80048bc:	20000008 	.word	0x20000008

080048c0 <HAL_RCC_GetHCLKFreq>:
}
 80048c0:	4b01      	ldr	r3, [pc, #4]	; (80048c8 <HAL_RCC_GetHCLKFreq+0x8>)
 80048c2:	6818      	ldr	r0, [r3, #0]
 80048c4:	4770      	bx	lr
 80048c6:	bf00      	nop
 80048c8:	20000000 	.word	0x20000000

080048cc <HAL_RCC_GetPCLK1Freq>:
{
 80048cc:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80048ce:	f7ff fff7 	bl	80048c0 <HAL_RCC_GetHCLKFreq>
 80048d2:	4b05      	ldr	r3, [pc, #20]	; (80048e8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80048da:	4a04      	ldr	r2, [pc, #16]	; (80048ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80048dc:	5cd3      	ldrb	r3, [r2, r3]
 80048de:	f003 031f 	and.w	r3, r3, #31
}
 80048e2:	40d8      	lsrs	r0, r3
 80048e4:	bd08      	pop	{r3, pc}
 80048e6:	bf00      	nop
 80048e8:	40021000 	.word	0x40021000
 80048ec:	08008318 	.word	0x08008318

080048f0 <HAL_RCC_GetPCLK2Freq>:
{
 80048f0:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80048f2:	f7ff ffe5 	bl	80048c0 <HAL_RCC_GetHCLKFreq>
 80048f6:	4b05      	ldr	r3, [pc, #20]	; (800490c <HAL_RCC_GetPCLK2Freq+0x1c>)
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80048fe:	4a04      	ldr	r2, [pc, #16]	; (8004910 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004900:	5cd3      	ldrb	r3, [r2, r3]
 8004902:	f003 031f 	and.w	r3, r3, #31
}
 8004906:	40d8      	lsrs	r0, r3
 8004908:	bd08      	pop	{r3, pc}
 800490a:	bf00      	nop
 800490c:	40021000 	.word	0x40021000
 8004910:	08008318 	.word	0x08008318

08004914 <HAL_RCC_EnableCSS>:
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8004914:	4a02      	ldr	r2, [pc, #8]	; (8004920 <HAL_RCC_EnableCSS+0xc>)
 8004916:	6813      	ldr	r3, [r2, #0]
 8004918:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800491c:	6013      	str	r3, [r2, #0]
}
 800491e:	4770      	bx	lr
 8004920:	40021000 	.word	0x40021000

08004924 <HAL_RCC_CSSCallback>:
}
 8004924:	4770      	bx	lr
	...

08004928 <HAL_RCC_NMI_IRQHandler>:
{
 8004928:	b508      	push	{r3, lr}
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 800492a:	4b06      	ldr	r3, [pc, #24]	; (8004944 <HAL_RCC_NMI_IRQHandler+0x1c>)
 800492c:	69db      	ldr	r3, [r3, #28]
 800492e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004932:	d100      	bne.n	8004936 <HAL_RCC_NMI_IRQHandler+0xe>
}
 8004934:	bd08      	pop	{r3, pc}
    HAL_RCC_CSSCallback();
 8004936:	f7ff fff5 	bl	8004924 <HAL_RCC_CSSCallback>
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800493a:	4b02      	ldr	r3, [pc, #8]	; (8004944 <HAL_RCC_NMI_IRQHandler+0x1c>)
 800493c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004940:	621a      	str	r2, [r3, #32]
}
 8004942:	e7f7      	b.n	8004934 <HAL_RCC_NMI_IRQHandler+0xc>
 8004944:	40021000 	.word	0x40021000

08004948 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004948:	b5f0      	push	{r4, r5, r6, r7, lr}
 800494a:	b083      	sub	sp, #12
 800494c:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800494e:	6803      	ldr	r3, [r0, #0]
 8004950:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8004954:	d06e      	beq.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0xec>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004956:	4b35      	ldr	r3, [pc, #212]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8004958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800495a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800495e:	d11e      	bne.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004960:	4b32      	ldr	r3, [pc, #200]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8004962:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004964:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004968:	659a      	str	r2, [r3, #88]	; 0x58
 800496a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800496c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004970:	9301      	str	r3, [sp, #4]
 8004972:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004974:	2601      	movs	r6, #1
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004976:	4a2e      	ldr	r2, [pc, #184]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004978:	6813      	ldr	r3, [r2, #0]
 800497a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800497e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004980:	f7fe f85e 	bl	8002a40 <HAL_GetTick>
 8004984:	4605      	mov	r5, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004986:	4b2a      	ldr	r3, [pc, #168]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800498e:	d108      	bne.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004990:	f7fe f856 	bl	8002a40 <HAL_GetTick>
 8004994:	1b40      	subs	r0, r0, r5
 8004996:	2802      	cmp	r0, #2
 8004998:	d9f5      	bls.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x3e>
      {
        ret = HAL_TIMEOUT;
 800499a:	2503      	movs	r5, #3
 800499c:	e002      	b.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    FlagStatus       pwrclkchanged = RESET;
 800499e:	2600      	movs	r6, #0
 80049a0:	e7e9      	b.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x2e>
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80049a2:	2500      	movs	r5, #0
        break;
      }
    }

    if(ret == HAL_OK)
 80049a4:	bb45      	cbnz	r5, 80049f8 <HAL_RCCEx_PeriphCLKConfig+0xb0>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80049a6:	4b21      	ldr	r3, [pc, #132]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80049a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80049ac:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80049b0:	d015      	beq.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x96>
 80049b2:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d012      	beq.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x96>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80049b8:	4a1c      	ldr	r2, [pc, #112]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80049ba:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80049be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80049c2:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 80049c6:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 80049ca:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80049ce:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 80049d2:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80049d6:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80049da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80049de:	f013 0f01 	tst.w	r3, #1
 80049e2:	d110      	bne.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0xbe>
            break;
          }
        }
      }
      
      if(ret == HAL_OK)
 80049e4:	b945      	cbnz	r5, 80049f8 <HAL_RCCEx_PeriphCLKConfig+0xb0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80049e6:	4a11      	ldr	r2, [pc, #68]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80049e8:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80049ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049f0:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80049f2:	430b      	orrs	r3, r1
 80049f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80049f8:	b1ee      	cbz	r6, 8004a36 <HAL_RCCEx_PeriphCLKConfig+0xee>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049fa:	4a0c      	ldr	r2, [pc, #48]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80049fc:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80049fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a02:	6593      	str	r3, [r2, #88]	; 0x58
 8004a04:	e017      	b.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0xee>
        tickstart = HAL_GetTick();
 8004a06:	f7fe f81b 	bl	8002a40 <HAL_GetTick>
 8004a0a:	4607      	mov	r7, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a0c:	4b07      	ldr	r3, [pc, #28]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8004a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a12:	f013 0f02 	tst.w	r3, #2
 8004a16:	d1e5      	bne.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a18:	f7fe f812 	bl	8002a40 <HAL_GetTick>
 8004a1c:	1bc0      	subs	r0, r0, r7
 8004a1e:	f241 3388 	movw	r3, #5000	; 0x1388
 8004a22:	4298      	cmp	r0, r3
 8004a24:	d9f2      	bls.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0xc4>
            ret = HAL_TIMEOUT;
 8004a26:	2503      	movs	r5, #3
 8004a28:	e7dc      	b.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 8004a2a:	bf00      	nop
 8004a2c:	40021000 	.word	0x40021000
 8004a30:	40007000 	.word	0x40007000
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004a34:	2500      	movs	r5, #0
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a36:	6823      	ldr	r3, [r4, #0]
 8004a38:	f013 0f01 	tst.w	r3, #1
 8004a3c:	d008      	beq.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a3e:	4a9f      	ldr	r2, [pc, #636]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004a40:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004a44:	f023 0303 	bic.w	r3, r3, #3
 8004a48:	6861      	ldr	r1, [r4, #4]
 8004a4a:	430b      	orrs	r3, r1
 8004a4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a50:	6823      	ldr	r3, [r4, #0]
 8004a52:	f013 0f02 	tst.w	r3, #2
 8004a56:	d008      	beq.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x122>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004a58:	4a98      	ldr	r2, [pc, #608]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004a5a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004a5e:	f023 030c 	bic.w	r3, r3, #12
 8004a62:	68a1      	ldr	r1, [r4, #8]
 8004a64:	430b      	orrs	r3, r1
 8004a66:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004a6a:	6823      	ldr	r3, [r4, #0]
 8004a6c:	f013 0f04 	tst.w	r3, #4
 8004a70:	d008      	beq.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004a72:	4a92      	ldr	r2, [pc, #584]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004a74:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004a78:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004a7c:	68e1      	ldr	r1, [r4, #12]
 8004a7e:	430b      	orrs	r3, r1
 8004a80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004a84:	6823      	ldr	r3, [r4, #0]
 8004a86:	f013 0f08 	tst.w	r3, #8
 8004a8a:	d008      	beq.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004a8c:	4a8b      	ldr	r2, [pc, #556]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004a8e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004a92:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004a96:	6921      	ldr	r1, [r4, #16]
 8004a98:	430b      	orrs	r3, r1
 8004a9a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004a9e:	6823      	ldr	r3, [r4, #0]
 8004aa0:	f013 0f10 	tst.w	r3, #16
 8004aa4:	d008      	beq.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004aa6:	4a85      	ldr	r2, [pc, #532]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004aa8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004aac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ab0:	6961      	ldr	r1, [r4, #20]
 8004ab2:	430b      	orrs	r3, r1
 8004ab4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004ab8:	6823      	ldr	r3, [r4, #0]
 8004aba:	f013 0f20 	tst.w	r3, #32
 8004abe:	d008      	beq.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004ac0:	4a7e      	ldr	r2, [pc, #504]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004ac2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004ac6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004aca:	69a1      	ldr	r1, [r4, #24]
 8004acc:	430b      	orrs	r3, r1
 8004ace:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004ad2:	6823      	ldr	r3, [r4, #0]
 8004ad4:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004ad8:	d008      	beq.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004ada:	4a78      	ldr	r2, [pc, #480]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004adc:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004ae0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004ae4:	69e1      	ldr	r1, [r4, #28]
 8004ae6:	430b      	orrs	r3, r1
 8004ae8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004aec:	6823      	ldr	r3, [r4, #0]
 8004aee:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004af2:	d008      	beq.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004af4:	4a71      	ldr	r2, [pc, #452]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004af6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004afa:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004afe:	6a21      	ldr	r1, [r4, #32]
 8004b00:	430b      	orrs	r3, r1
 8004b02:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004b06:	6823      	ldr	r3, [r4, #0]
 8004b08:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004b0c:	d008      	beq.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004b0e:	4a6b      	ldr	r2, [pc, #428]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004b10:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004b14:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004b18:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004b1a:	430b      	orrs	r3, r1
 8004b1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004b20:	6823      	ldr	r3, [r4, #0]
 8004b22:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004b26:	d008      	beq.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x1f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004b28:	4a64      	ldr	r2, [pc, #400]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004b2a:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8004b2e:	f023 0303 	bic.w	r3, r3, #3
 8004b32:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004b34:	430b      	orrs	r3, r1
 8004b36:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004b3a:	6823      	ldr	r3, [r4, #0]
 8004b3c:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004b40:	d008      	beq.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x20c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004b42:	4a5e      	ldr	r2, [pc, #376]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004b44:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004b48:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8004b4c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004b4e:	430b      	orrs	r3, r1
 8004b50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004b54:	6823      	ldr	r3, [r4, #0]
 8004b56:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004b5a:	d00c      	beq.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x22e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004b5c:	4a57      	ldr	r2, [pc, #348]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004b5e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004b62:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004b66:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004b68:	430b      	orrs	r3, r1
 8004b6a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004b6e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004b70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b74:	d079      	beq.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x322>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004b76:	6823      	ldr	r3, [r4, #0]
 8004b78:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8004b7c:	d00c      	beq.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004b7e:	4a4f      	ldr	r2, [pc, #316]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004b80:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004b84:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8004b88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004b8a:	430b      	orrs	r3, r1
 8004b8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004b90:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004b92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b96:	d06d      	beq.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004b98:	6823      	ldr	r3, [r4, #0]
 8004b9a:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8004b9e:	d00c      	beq.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004ba0:	4a46      	ldr	r2, [pc, #280]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004ba2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004ba6:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8004baa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004bac:	430b      	orrs	r3, r1
 8004bae:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004bb2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004bb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004bb8:	d061      	beq.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x336>
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004bba:	6823      	ldr	r3, [r4, #0]
 8004bbc:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8004bc0:	d00c      	beq.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x294>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004bc2:	4a3e      	ldr	r2, [pc, #248]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004bc4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004bc8:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8004bcc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8004bce:	430b      	orrs	r3, r1
 8004bd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004bd4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004bd6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004bda:	d055      	beq.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x340>
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004bdc:	6823      	ldr	r3, [r4, #0]
 8004bde:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8004be2:	d00c      	beq.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004be4:	4a35      	ldr	r2, [pc, #212]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004be6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004bea:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8004bee:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8004bf0:	430b      	orrs	r3, r1
 8004bf2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004bf6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004bf8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004bfc:	d049      	beq.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x34a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004bfe:	6823      	ldr	r3, [r4, #0]
 8004c00:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8004c04:	d00c      	beq.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004c06:	4a2d      	ldr	r2, [pc, #180]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004c08:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004c0c:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8004c10:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8004c12:	430b      	orrs	r3, r1
 8004c14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004c18:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004c1a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c1e:	d03d      	beq.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x354>
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004c20:	6823      	ldr	r3, [r4, #0]
 8004c22:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8004c26:	d00c      	beq.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004c28:	4a24      	ldr	r2, [pc, #144]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004c2a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004c2e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004c32:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004c34:	430b      	orrs	r3, r1
 8004c36:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004c3a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8004c3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c40:	d031      	beq.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x35e>
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004c42:	6823      	ldr	r3, [r4, #0]
 8004c44:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8004c48:	d00c      	beq.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x31c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004c4a:	4a1c      	ldr	r2, [pc, #112]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004c4c:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8004c50:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004c54:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8004c56:	430b      	orrs	r3, r1
 8004c58:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004c5c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004c5e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c62:	d025      	beq.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x368>
  }

#endif /* QUADSPI */

  return status;
}
 8004c64:	4628      	mov	r0, r5
 8004c66:	b003      	add	sp, #12
 8004c68:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c6a:	68d3      	ldr	r3, [r2, #12]
 8004c6c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c70:	60d3      	str	r3, [r2, #12]
 8004c72:	e780      	b.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x22e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c74:	68d3      	ldr	r3, [r2, #12]
 8004c76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c7a:	60d3      	str	r3, [r2, #12]
 8004c7c:	e78c      	b.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x250>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c7e:	68d3      	ldr	r3, [r2, #12]
 8004c80:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c84:	60d3      	str	r3, [r2, #12]
 8004c86:	e798      	b.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x272>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c88:	68d3      	ldr	r3, [r2, #12]
 8004c8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c8e:	60d3      	str	r3, [r2, #12]
 8004c90:	e7a4      	b.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x294>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c92:	68d3      	ldr	r3, [r2, #12]
 8004c94:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c98:	60d3      	str	r3, [r2, #12]
 8004c9a:	e7b0      	b.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004c9c:	68d3      	ldr	r3, [r2, #12]
 8004c9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ca2:	60d3      	str	r3, [r2, #12]
 8004ca4:	e7bc      	b.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004ca6:	68d3      	ldr	r3, [r2, #12]
 8004ca8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cac:	60d3      	str	r3, [r2, #12]
 8004cae:	e7c8      	b.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004cb0:	68d3      	ldr	r3, [r2, #12]
 8004cb2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004cb6:	60d3      	str	r3, [r2, #12]
 8004cb8:	e7d4      	b.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8004cba:	bf00      	nop
 8004cbc:	40021000 	.word	0x40021000

08004cc0 <HAL_SPI_Init>:
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004cc0:	2800      	cmp	r0, #0
 8004cc2:	d06f      	beq.n	8004da4 <HAL_SPI_Init+0xe4>
{
 8004cc4:	b510      	push	{r4, lr}
 8004cc6:	4604      	mov	r4, r0
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004cc8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004cca:	b933      	cbnz	r3, 8004cda <HAL_SPI_Init+0x1a>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ccc:	6843      	ldr	r3, [r0, #4]
 8004cce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004cd2:	d005      	beq.n	8004ce0 <HAL_SPI_Init+0x20>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	61c3      	str	r3, [r0, #28]
 8004cd8:	e002      	b.n	8004ce0 <HAL_SPI_Init+0x20>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004cde:	6143      	str	r3, [r0, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	62a3      	str	r3, [r4, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004ce4:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d052      	beq.n	8004d92 <HAL_SPI_Init+0xd2>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004cec:	2302      	movs	r3, #2
 8004cee:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004cf2:	6822      	ldr	r2, [r4, #0]
 8004cf4:	6813      	ldr	r3, [r2, #0]
 8004cf6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cfa:	6013      	str	r3, [r2, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004cfc:	68e3      	ldr	r3, [r4, #12]
 8004cfe:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004d02:	d94c      	bls.n	8004d9e <HAL_SPI_Init+0xde>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004d04:	2200      	movs	r2, #0
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004d06:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004d0a:	d004      	beq.n	8004d16 <HAL_SPI_Init+0x56>
 8004d0c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004d10:	d001      	beq.n	8004d16 <HAL_SPI_Init+0x56>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d12:	2300      	movs	r3, #0
 8004d14:	62a3      	str	r3, [r4, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004d16:	6863      	ldr	r3, [r4, #4]
 8004d18:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8004d1c:	68a1      	ldr	r1, [r4, #8]
 8004d1e:	f401 4104 	and.w	r1, r1, #33792	; 0x8400
 8004d22:	430b      	orrs	r3, r1
 8004d24:	6921      	ldr	r1, [r4, #16]
 8004d26:	f001 0102 	and.w	r1, r1, #2
 8004d2a:	430b      	orrs	r3, r1
 8004d2c:	6961      	ldr	r1, [r4, #20]
 8004d2e:	f001 0101 	and.w	r1, r1, #1
 8004d32:	430b      	orrs	r3, r1
 8004d34:	69a1      	ldr	r1, [r4, #24]
 8004d36:	f401 7100 	and.w	r1, r1, #512	; 0x200
 8004d3a:	430b      	orrs	r3, r1
 8004d3c:	69e1      	ldr	r1, [r4, #28]
 8004d3e:	f001 0138 	and.w	r1, r1, #56	; 0x38
 8004d42:	430b      	orrs	r3, r1
 8004d44:	6a21      	ldr	r1, [r4, #32]
 8004d46:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8004d4a:	430b      	orrs	r3, r1
 8004d4c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004d4e:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 8004d52:	6820      	ldr	r0, [r4, #0]
 8004d54:	430b      	orrs	r3, r1
 8004d56:	6003      	str	r3, [r0, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004d58:	8b63      	ldrh	r3, [r4, #26]
 8004d5a:	f003 0304 	and.w	r3, r3, #4
 8004d5e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004d60:	f001 0110 	and.w	r1, r1, #16
 8004d64:	430b      	orrs	r3, r1
 8004d66:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004d68:	f001 0108 	and.w	r1, r1, #8
 8004d6c:	430b      	orrs	r3, r1
 8004d6e:	68e1      	ldr	r1, [r4, #12]
 8004d70:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
 8004d74:	430b      	orrs	r3, r1
 8004d76:	6821      	ldr	r1, [r4, #0]
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	604b      	str	r3, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004d7c:	6822      	ldr	r2, [r4, #0]
 8004d7e:	69d3      	ldr	r3, [r2, #28]
 8004d80:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d84:	61d3      	str	r3, [r2, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d86:	2000      	movs	r0, #0
 8004d88:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  return HAL_OK;
}
 8004d90:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8004d92:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8004d96:	4620      	mov	r0, r4
 8004d98:	f7fd fc70 	bl	800267c <HAL_SPI_MspInit>
 8004d9c:	e7a6      	b.n	8004cec <HAL_SPI_Init+0x2c>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004d9e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004da2:	e7b0      	b.n	8004d06 <HAL_SPI_Init+0x46>
    return HAL_ERROR;
 8004da4:	2001      	movs	r0, #1
}
 8004da6:	4770      	bx	lr

08004da8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004da8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004dac:	4604      	mov	r4, r0
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8004dae:	6801      	ldr	r1, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004db0:	6883      	ldr	r3, [r0, #8]
 8004db2:	6902      	ldr	r2, [r0, #16]
 8004db4:	4313      	orrs	r3, r2
 8004db6:	6942      	ldr	r2, [r0, #20]
 8004db8:	4313      	orrs	r3, r2
 8004dba:	69c2      	ldr	r2, [r0, #28]
 8004dbc:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004dbe:	6808      	ldr	r0, [r1, #0]
 8004dc0:	4a9c      	ldr	r2, [pc, #624]	; (8005034 <UART_SetConfig+0x28c>)
 8004dc2:	4002      	ands	r2, r0
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	600b      	str	r3, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004dc8:	6822      	ldr	r2, [r4, #0]
 8004dca:	6853      	ldr	r3, [r2, #4]
 8004dcc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004dd0:	68e1      	ldr	r1, [r4, #12]
 8004dd2:	430b      	orrs	r3, r1
 8004dd4:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004dd6:	69a1      	ldr	r1, [r4, #24]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004dd8:	6822      	ldr	r2, [r4, #0]
 8004dda:	4b97      	ldr	r3, [pc, #604]	; (8005038 <UART_SetConfig+0x290>)
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d001      	beq.n	8004de4 <UART_SetConfig+0x3c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004de0:	6a23      	ldr	r3, [r4, #32]
 8004de2:	4319      	orrs	r1, r3
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004de4:	6893      	ldr	r3, [r2, #8]
 8004de6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004dea:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004dee:	430b      	orrs	r3, r1
 8004df0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004df2:	6822      	ldr	r2, [r4, #0]
 8004df4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004df6:	f023 030f 	bic.w	r3, r3, #15
 8004dfa:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004dfc:	430b      	orrs	r3, r1
 8004dfe:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e00:	6822      	ldr	r2, [r4, #0]
 8004e02:	4b8e      	ldr	r3, [pc, #568]	; (800503c <UART_SetConfig+0x294>)
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d010      	beq.n	8004e2a <UART_SetConfig+0x82>
 8004e08:	4b8d      	ldr	r3, [pc, #564]	; (8005040 <UART_SetConfig+0x298>)
 8004e0a:	429a      	cmp	r2, r3
 8004e0c:	d021      	beq.n	8004e52 <UART_SetConfig+0xaa>
 8004e0e:	4b8d      	ldr	r3, [pc, #564]	; (8005044 <UART_SetConfig+0x29c>)
 8004e10:	429a      	cmp	r2, r3
 8004e12:	d037      	beq.n	8004e84 <UART_SetConfig+0xdc>
 8004e14:	4b8c      	ldr	r3, [pc, #560]	; (8005048 <UART_SetConfig+0x2a0>)
 8004e16:	429a      	cmp	r2, r3
 8004e18:	d05c      	beq.n	8004ed4 <UART_SetConfig+0x12c>
 8004e1a:	4b8c      	ldr	r3, [pc, #560]	; (800504c <UART_SetConfig+0x2a4>)
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d06b      	beq.n	8004ef8 <UART_SetConfig+0x150>
 8004e20:	4b85      	ldr	r3, [pc, #532]	; (8005038 <UART_SetConfig+0x290>)
 8004e22:	429a      	cmp	r2, r3
 8004e24:	d07d      	beq.n	8004f22 <UART_SetConfig+0x17a>
 8004e26:	2310      	movs	r3, #16
 8004e28:	e03a      	b.n	8004ea0 <UART_SetConfig+0xf8>
 8004e2a:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8004e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e32:	f003 0303 	and.w	r3, r3, #3
 8004e36:	2b03      	cmp	r3, #3
 8004e38:	d809      	bhi.n	8004e4e <UART_SetConfig+0xa6>
 8004e3a:	e8df f003 	tbb	[pc, r3]
 8004e3e:	0402      	.short	0x0402
 8004e40:	0687      	.short	0x0687
 8004e42:	2301      	movs	r3, #1
 8004e44:	e02c      	b.n	8004ea0 <UART_SetConfig+0xf8>
 8004e46:	2304      	movs	r3, #4
 8004e48:	e02a      	b.n	8004ea0 <UART_SetConfig+0xf8>
 8004e4a:	2308      	movs	r3, #8
 8004e4c:	e028      	b.n	8004ea0 <UART_SetConfig+0xf8>
 8004e4e:	2310      	movs	r3, #16
 8004e50:	e026      	b.n	8004ea0 <UART_SetConfig+0xf8>
 8004e52:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8004e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e5a:	f003 030c 	and.w	r3, r3, #12
 8004e5e:	2b0c      	cmp	r3, #12
 8004e60:	d80e      	bhi.n	8004e80 <UART_SetConfig+0xd8>
 8004e62:	e8df f003 	tbb	[pc, r3]
 8004e66:	0d07      	.short	0x0d07
 8004e68:	0d090d0d 	.word	0x0d090d0d
 8004e6c:	0d750d0d 	.word	0x0d750d0d
 8004e70:	0d0d      	.short	0x0d0d
 8004e72:	0b          	.byte	0x0b
 8004e73:	00          	.byte	0x00
 8004e74:	2300      	movs	r3, #0
 8004e76:	e013      	b.n	8004ea0 <UART_SetConfig+0xf8>
 8004e78:	2304      	movs	r3, #4
 8004e7a:	e011      	b.n	8004ea0 <UART_SetConfig+0xf8>
 8004e7c:	2308      	movs	r3, #8
 8004e7e:	e00f      	b.n	8004ea0 <UART_SetConfig+0xf8>
 8004e80:	2310      	movs	r3, #16
 8004e82:	e00d      	b.n	8004ea0 <UART_SetConfig+0xf8>
 8004e84:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 8004e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e8c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004e90:	2b20      	cmp	r3, #32
 8004e92:	d05f      	beq.n	8004f54 <UART_SetConfig+0x1ac>
 8004e94:	d81a      	bhi.n	8004ecc <UART_SetConfig+0x124>
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d05e      	beq.n	8004f58 <UART_SetConfig+0x1b0>
 8004e9a:	2b10      	cmp	r3, #16
 8004e9c:	d15e      	bne.n	8004f5c <UART_SetConfig+0x1b4>
 8004e9e:	2304      	movs	r3, #4

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004ea0:	4965      	ldr	r1, [pc, #404]	; (8005038 <UART_SetConfig+0x290>)
 8004ea2:	428a      	cmp	r2, r1
 8004ea4:	d076      	beq.n	8004f94 <UART_SetConfig+0x1ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ea6:	69e0      	ldr	r0, [r4, #28]
 8004ea8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8004eac:	f000 80b6 	beq.w	800501c <UART_SetConfig+0x274>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004eb0:	2b08      	cmp	r3, #8
 8004eb2:	f200 8137 	bhi.w	8005124 <UART_SetConfig+0x37c>
 8004eb6:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004eba:	00f9      	.short	0x00f9
 8004ebc:	00f7011c 	.word	0x00f7011c
 8004ec0:	011f0135 	.word	0x011f0135
 8004ec4:	01350135 	.word	0x01350135
 8004ec8:	01220135 	.word	0x01220135
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ecc:	2b30      	cmp	r3, #48	; 0x30
 8004ece:	d147      	bne.n	8004f60 <UART_SetConfig+0x1b8>
 8004ed0:	2308      	movs	r3, #8
 8004ed2:	e7e5      	b.n	8004ea0 <UART_SetConfig+0xf8>
 8004ed4:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 8004ed8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004edc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004ee0:	2b80      	cmp	r3, #128	; 0x80
 8004ee2:	d03f      	beq.n	8004f64 <UART_SetConfig+0x1bc>
 8004ee4:	d804      	bhi.n	8004ef0 <UART_SetConfig+0x148>
 8004ee6:	b3fb      	cbz	r3, 8004f68 <UART_SetConfig+0x1c0>
 8004ee8:	2b40      	cmp	r3, #64	; 0x40
 8004eea:	d13f      	bne.n	8004f6c <UART_SetConfig+0x1c4>
 8004eec:	2304      	movs	r3, #4
 8004eee:	e7d7      	b.n	8004ea0 <UART_SetConfig+0xf8>
 8004ef0:	2bc0      	cmp	r3, #192	; 0xc0
 8004ef2:	d13d      	bne.n	8004f70 <UART_SetConfig+0x1c8>
 8004ef4:	2308      	movs	r3, #8
 8004ef6:	e7d3      	b.n	8004ea0 <UART_SetConfig+0xf8>
 8004ef8:	f503 33e0 	add.w	r3, r3, #114688	; 0x1c000
 8004efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f08:	d034      	beq.n	8004f74 <UART_SetConfig+0x1cc>
 8004f0a:	d805      	bhi.n	8004f18 <UART_SetConfig+0x170>
 8004f0c:	b3a3      	cbz	r3, 8004f78 <UART_SetConfig+0x1d0>
 8004f0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f12:	d133      	bne.n	8004f7c <UART_SetConfig+0x1d4>
 8004f14:	2304      	movs	r3, #4
 8004f16:	e7c3      	b.n	8004ea0 <UART_SetConfig+0xf8>
 8004f18:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f1c:	d130      	bne.n	8004f80 <UART_SetConfig+0x1d8>
 8004f1e:	2308      	movs	r3, #8
 8004f20:	e7be      	b.n	8004ea0 <UART_SetConfig+0xf8>
 8004f22:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 8004f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f2a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004f2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f32:	d027      	beq.n	8004f84 <UART_SetConfig+0x1dc>
 8004f34:	d805      	bhi.n	8004f42 <UART_SetConfig+0x19a>
 8004f36:	b33b      	cbz	r3, 8004f88 <UART_SetConfig+0x1e0>
 8004f38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f3c:	d126      	bne.n	8004f8c <UART_SetConfig+0x1e4>
 8004f3e:	2304      	movs	r3, #4
 8004f40:	e7ae      	b.n	8004ea0 <UART_SetConfig+0xf8>
 8004f42:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004f46:	d123      	bne.n	8004f90 <UART_SetConfig+0x1e8>
 8004f48:	2308      	movs	r3, #8
 8004f4a:	e7a9      	b.n	8004ea0 <UART_SetConfig+0xf8>
 8004f4c:	2302      	movs	r3, #2
 8004f4e:	e7a7      	b.n	8004ea0 <UART_SetConfig+0xf8>
 8004f50:	2302      	movs	r3, #2
 8004f52:	e7a5      	b.n	8004ea0 <UART_SetConfig+0xf8>
 8004f54:	2302      	movs	r3, #2
 8004f56:	e7a3      	b.n	8004ea0 <UART_SetConfig+0xf8>
 8004f58:	2300      	movs	r3, #0
 8004f5a:	e7a1      	b.n	8004ea0 <UART_SetConfig+0xf8>
 8004f5c:	2310      	movs	r3, #16
 8004f5e:	e79f      	b.n	8004ea0 <UART_SetConfig+0xf8>
 8004f60:	2310      	movs	r3, #16
 8004f62:	e79d      	b.n	8004ea0 <UART_SetConfig+0xf8>
 8004f64:	2302      	movs	r3, #2
 8004f66:	e79b      	b.n	8004ea0 <UART_SetConfig+0xf8>
 8004f68:	2300      	movs	r3, #0
 8004f6a:	e799      	b.n	8004ea0 <UART_SetConfig+0xf8>
 8004f6c:	2310      	movs	r3, #16
 8004f6e:	e797      	b.n	8004ea0 <UART_SetConfig+0xf8>
 8004f70:	2310      	movs	r3, #16
 8004f72:	e795      	b.n	8004ea0 <UART_SetConfig+0xf8>
 8004f74:	2302      	movs	r3, #2
 8004f76:	e793      	b.n	8004ea0 <UART_SetConfig+0xf8>
 8004f78:	2300      	movs	r3, #0
 8004f7a:	e791      	b.n	8004ea0 <UART_SetConfig+0xf8>
 8004f7c:	2310      	movs	r3, #16
 8004f7e:	e78f      	b.n	8004ea0 <UART_SetConfig+0xf8>
 8004f80:	2310      	movs	r3, #16
 8004f82:	e78d      	b.n	8004ea0 <UART_SetConfig+0xf8>
 8004f84:	2302      	movs	r3, #2
 8004f86:	e78b      	b.n	8004ea0 <UART_SetConfig+0xf8>
 8004f88:	2300      	movs	r3, #0
 8004f8a:	e789      	b.n	8004ea0 <UART_SetConfig+0xf8>
 8004f8c:	2310      	movs	r3, #16
 8004f8e:	e787      	b.n	8004ea0 <UART_SetConfig+0xf8>
 8004f90:	2310      	movs	r3, #16
 8004f92:	e785      	b.n	8004ea0 <UART_SetConfig+0xf8>
    switch (clocksource)
 8004f94:	2b08      	cmp	r3, #8
 8004f96:	f200 80b5 	bhi.w	8005104 <UART_SetConfig+0x35c>
 8004f9a:	e8df f003 	tbb	[pc, r3]
 8004f9e:	b308      	.short	0xb308
 8004fa0:	b33ab33d 	.word	0xb33ab33d
 8004fa4:	b3b3      	.short	0xb3b3
 8004fa6:	05          	.byte	0x05
 8004fa7:	00          	.byte	0x00
  if (UART_INSTANCE_LOWPOWER(huart))
 8004fa8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004fac:	e004      	b.n	8004fb8 <UART_SetConfig+0x210>
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fae:	f7ff fc8d 	bl	80048cc <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8004fb2:	2800      	cmp	r0, #0
 8004fb4:	f000 80a8 	beq.w	8005108 <UART_SetConfig+0x360>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004fb8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004fba:	4b25      	ldr	r3, [pc, #148]	; (8005050 <UART_SetConfig+0x2a8>)
 8004fbc:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8004fc0:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004fc4:	6865      	ldr	r5, [r4, #4]
 8004fc6:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8004fca:	4299      	cmp	r1, r3
 8004fcc:	f200 809e 	bhi.w	800510c <UART_SetConfig+0x364>
 8004fd0:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8004fd4:	f200 809c 	bhi.w	8005110 <UART_SetConfig+0x368>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004fd8:	f04f 0800 	mov.w	r8, #0
 8004fdc:	b292      	uxth	r2, r2
 8004fde:	2300      	movs	r3, #0
 8004fe0:	4641      	mov	r1, r8
 8004fe2:	f7fb fd6b 	bl	8000abc <__aeabi_uldivmod>
 8004fe6:	020f      	lsls	r7, r1, #8
 8004fe8:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 8004fec:	0206      	lsls	r6, r0, #8
 8004fee:	0868      	lsrs	r0, r5, #1
 8004ff0:	462a      	mov	r2, r5
 8004ff2:	4643      	mov	r3, r8
 8004ff4:	1830      	adds	r0, r6, r0
 8004ff6:	f147 0100 	adc.w	r1, r7, #0
 8004ffa:	f7fb fd5f 	bl	8000abc <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004ffe:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8005002:	4b14      	ldr	r3, [pc, #80]	; (8005054 <UART_SetConfig+0x2ac>)
 8005004:	429a      	cmp	r2, r3
 8005006:	f200 8085 	bhi.w	8005114 <UART_SetConfig+0x36c>
          huart->Instance->BRR = usartdiv;
 800500a:	6823      	ldr	r3, [r4, #0]
 800500c:	60d8      	str	r0, [r3, #12]
 800500e:	4640      	mov	r0, r8
 8005010:	e065      	b.n	80050de <UART_SetConfig+0x336>
        pclk = HAL_RCC_GetSysClockFreq();
 8005012:	f7ff fb17 	bl	8004644 <HAL_RCC_GetSysClockFreq>
        break;
 8005016:	e7cc      	b.n	8004fb2 <UART_SetConfig+0x20a>
        pclk = (uint32_t) HSI_VALUE;
 8005018:	480f      	ldr	r0, [pc, #60]	; (8005058 <UART_SetConfig+0x2b0>)
 800501a:	e7cd      	b.n	8004fb8 <UART_SetConfig+0x210>
    switch (clocksource)
 800501c:	2b08      	cmp	r3, #8
 800501e:	d87b      	bhi.n	8005118 <UART_SetConfig+0x370>
 8005020:	e8df f003 	tbb	[pc, r3]
 8005024:	7a053c1c 	.word	0x7a053c1c
 8005028:	7a7a7a3f 	.word	0x7a7a7a3f
 800502c:	20          	.byte	0x20
 800502d:	00          	.byte	0x00
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800502e:	480a      	ldr	r0, [pc, #40]	; (8005058 <UART_SetConfig+0x2b0>)
 8005030:	e018      	b.n	8005064 <UART_SetConfig+0x2bc>
 8005032:	bf00      	nop
 8005034:	cfff69f3 	.word	0xcfff69f3
 8005038:	40008000 	.word	0x40008000
 800503c:	40013800 	.word	0x40013800
 8005040:	40004400 	.word	0x40004400
 8005044:	40004800 	.word	0x40004800
 8005048:	40004c00 	.word	0x40004c00
 800504c:	40005000 	.word	0x40005000
 8005050:	08008320 	.word	0x08008320
 8005054:	000ffcff 	.word	0x000ffcff
 8005058:	00f42400 	.word	0x00f42400
        pclk = HAL_RCC_GetPCLK1Freq();
 800505c:	f7ff fc36 	bl	80048cc <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8005060:	2800      	cmp	r0, #0
 8005062:	d05b      	beq.n	800511c <UART_SetConfig+0x374>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005064:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005066:	4b32      	ldr	r3, [pc, #200]	; (8005130 <UART_SetConfig+0x388>)
 8005068:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800506c:	fbb0 f0f3 	udiv	r0, r0, r3
 8005070:	6862      	ldr	r2, [r4, #4]
 8005072:	0853      	lsrs	r3, r2, #1
 8005074:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8005078:	fbb0 f0f2 	udiv	r0, r0, r2
 800507c:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800507e:	f1a0 0210 	sub.w	r2, r0, #16
 8005082:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8005086:	429a      	cmp	r2, r3
 8005088:	d84a      	bhi.n	8005120 <UART_SetConfig+0x378>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800508a:	f020 030f 	bic.w	r3, r0, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800508e:	f3c0 0042 	ubfx	r0, r0, #1, #3
 8005092:	4318      	orrs	r0, r3
        huart->Instance->BRR = brrtemp;
 8005094:	6823      	ldr	r3, [r4, #0]
 8005096:	60d8      	str	r0, [r3, #12]
 8005098:	2000      	movs	r0, #0
 800509a:	e020      	b.n	80050de <UART_SetConfig+0x336>
        pclk = HAL_RCC_GetPCLK2Freq();
 800509c:	f7ff fc28 	bl	80048f0 <HAL_RCC_GetPCLK2Freq>
        break;
 80050a0:	e7de      	b.n	8005060 <UART_SetConfig+0x2b8>
        pclk = HAL_RCC_GetSysClockFreq();
 80050a2:	f7ff facf 	bl	8004644 <HAL_RCC_GetSysClockFreq>
        break;
 80050a6:	e7db      	b.n	8005060 <UART_SetConfig+0x2b8>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050a8:	4822      	ldr	r0, [pc, #136]	; (8005134 <UART_SetConfig+0x38c>)
 80050aa:	e003      	b.n	80050b4 <UART_SetConfig+0x30c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050ac:	f7ff fc0e 	bl	80048cc <HAL_RCC_GetPCLK1Freq>
        pclk = 0U;
        ret = HAL_ERROR;
        break;
    }

    if (pclk != 0U)
 80050b0:	2800      	cmp	r0, #0
 80050b2:	d039      	beq.n	8005128 <UART_SetConfig+0x380>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80050b4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80050b6:	4b1e      	ldr	r3, [pc, #120]	; (8005130 <UART_SetConfig+0x388>)
 80050b8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80050bc:	fbb0 f0f3 	udiv	r0, r0, r3
 80050c0:	6863      	ldr	r3, [r4, #4]
 80050c2:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80050c6:	fbb0 f0f3 	udiv	r0, r0, r3
 80050ca:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050cc:	f1a0 0210 	sub.w	r2, r0, #16
 80050d0:	f64f 73ef 	movw	r3, #65519	; 0xffef
 80050d4:	429a      	cmp	r2, r3
 80050d6:	d829      	bhi.n	800512c <UART_SetConfig+0x384>
      {
        huart->Instance->BRR = usartdiv;
 80050d8:	6823      	ldr	r3, [r4, #0]
 80050da:	60d8      	str	r0, [r3, #12]
 80050dc:	2000      	movs	r0, #0
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80050de:	2301      	movs	r3, #1
 80050e0:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80050e4:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80050e8:	2300      	movs	r3, #0
 80050ea:	6723      	str	r3, [r4, #112]	; 0x70
  huart->TxISR = NULL;
 80050ec:	6763      	str	r3, [r4, #116]	; 0x74

  return ret;
}
 80050ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 80050f2:	f7ff fbfd 	bl	80048f0 <HAL_RCC_GetPCLK2Freq>
        break;
 80050f6:	e7db      	b.n	80050b0 <UART_SetConfig+0x308>
        pclk = HAL_RCC_GetSysClockFreq();
 80050f8:	f7ff faa4 	bl	8004644 <HAL_RCC_GetSysClockFreq>
        break;
 80050fc:	e7d8      	b.n	80050b0 <UART_SetConfig+0x308>
        pclk = (uint32_t) LSE_VALUE;
 80050fe:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8005102:	e7d7      	b.n	80050b4 <UART_SetConfig+0x30c>
  if (UART_INSTANCE_LOWPOWER(huart))
 8005104:	2001      	movs	r0, #1
 8005106:	e7ea      	b.n	80050de <UART_SetConfig+0x336>
 8005108:	2000      	movs	r0, #0
 800510a:	e7e8      	b.n	80050de <UART_SetConfig+0x336>
        ret = HAL_ERROR;
 800510c:	2001      	movs	r0, #1
 800510e:	e7e6      	b.n	80050de <UART_SetConfig+0x336>
 8005110:	2001      	movs	r0, #1
 8005112:	e7e4      	b.n	80050de <UART_SetConfig+0x336>
          ret = HAL_ERROR;
 8005114:	2001      	movs	r0, #1
 8005116:	e7e2      	b.n	80050de <UART_SetConfig+0x336>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005118:	2001      	movs	r0, #1
 800511a:	e7e0      	b.n	80050de <UART_SetConfig+0x336>
 800511c:	2000      	movs	r0, #0
 800511e:	e7de      	b.n	80050de <UART_SetConfig+0x336>
        ret = HAL_ERROR;
 8005120:	2001      	movs	r0, #1
 8005122:	e7dc      	b.n	80050de <UART_SetConfig+0x336>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005124:	2001      	movs	r0, #1
 8005126:	e7da      	b.n	80050de <UART_SetConfig+0x336>
 8005128:	2000      	movs	r0, #0
 800512a:	e7d8      	b.n	80050de <UART_SetConfig+0x336>
        ret = HAL_ERROR;
 800512c:	2001      	movs	r0, #1
 800512e:	e7d6      	b.n	80050de <UART_SetConfig+0x336>
 8005130:	08008320 	.word	0x08008320
 8005134:	00f42400 	.word	0x00f42400

08005138 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005138:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800513a:	f013 0f01 	tst.w	r3, #1
 800513e:	d006      	beq.n	800514e <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005140:	6802      	ldr	r2, [r0, #0]
 8005142:	6853      	ldr	r3, [r2, #4]
 8005144:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005148:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800514a:	430b      	orrs	r3, r1
 800514c:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800514e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005150:	f013 0f02 	tst.w	r3, #2
 8005154:	d006      	beq.n	8005164 <UART_AdvFeatureConfig+0x2c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005156:	6802      	ldr	r2, [r0, #0]
 8005158:	6853      	ldr	r3, [r2, #4]
 800515a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800515e:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8005160:	430b      	orrs	r3, r1
 8005162:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005164:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005166:	f013 0f04 	tst.w	r3, #4
 800516a:	d006      	beq.n	800517a <UART_AdvFeatureConfig+0x42>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800516c:	6802      	ldr	r2, [r0, #0]
 800516e:	6853      	ldr	r3, [r2, #4]
 8005170:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005174:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8005176:	430b      	orrs	r3, r1
 8005178:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800517a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800517c:	f013 0f08 	tst.w	r3, #8
 8005180:	d006      	beq.n	8005190 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005182:	6802      	ldr	r2, [r0, #0]
 8005184:	6853      	ldr	r3, [r2, #4]
 8005186:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800518a:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800518c:	430b      	orrs	r3, r1
 800518e:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005190:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005192:	f013 0f10 	tst.w	r3, #16
 8005196:	d006      	beq.n	80051a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005198:	6802      	ldr	r2, [r0, #0]
 800519a:	6893      	ldr	r3, [r2, #8]
 800519c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80051a0:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80051a2:	430b      	orrs	r3, r1
 80051a4:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80051a6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80051a8:	f013 0f20 	tst.w	r3, #32
 80051ac:	d006      	beq.n	80051bc <UART_AdvFeatureConfig+0x84>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80051ae:	6802      	ldr	r2, [r0, #0]
 80051b0:	6893      	ldr	r3, [r2, #8]
 80051b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80051b6:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80051b8:	430b      	orrs	r3, r1
 80051ba:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80051bc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80051be:	f013 0f40 	tst.w	r3, #64	; 0x40
 80051c2:	d00a      	beq.n	80051da <UART_AdvFeatureConfig+0xa2>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80051c4:	6802      	ldr	r2, [r0, #0]
 80051c6:	6853      	ldr	r3, [r2, #4]
 80051c8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80051cc:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80051ce:	430b      	orrs	r3, r1
 80051d0:	6053      	str	r3, [r2, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80051d2:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80051d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051d8:	d00b      	beq.n	80051f2 <UART_AdvFeatureConfig+0xba>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80051da:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80051dc:	f013 0f80 	tst.w	r3, #128	; 0x80
 80051e0:	d006      	beq.n	80051f0 <UART_AdvFeatureConfig+0xb8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80051e2:	6802      	ldr	r2, [r0, #0]
 80051e4:	6853      	ldr	r3, [r2, #4]
 80051e6:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80051ea:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 80051ec:	430b      	orrs	r3, r1
 80051ee:	6053      	str	r3, [r2, #4]
  }
}
 80051f0:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80051f2:	6802      	ldr	r2, [r0, #0]
 80051f4:	6853      	ldr	r3, [r2, #4]
 80051f6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80051fa:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80051fc:	430b      	orrs	r3, r1
 80051fe:	6053      	str	r3, [r2, #4]
 8005200:	e7eb      	b.n	80051da <UART_AdvFeatureConfig+0xa2>

08005202 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005202:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005206:	4605      	mov	r5, r0
 8005208:	460f      	mov	r7, r1
 800520a:	4616      	mov	r6, r2
 800520c:	4699      	mov	r9, r3
 800520e:	f8dd 8020 	ldr.w	r8, [sp, #32]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005212:	682c      	ldr	r4, [r5, #0]
 8005214:	69e4      	ldr	r4, [r4, #28]
 8005216:	ea37 0304 	bics.w	r3, r7, r4
 800521a:	bf0c      	ite	eq
 800521c:	2401      	moveq	r4, #1
 800521e:	2400      	movne	r4, #0
 8005220:	42b4      	cmp	r4, r6
 8005222:	d141      	bne.n	80052a8 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005224:	f1b8 3fff 	cmp.w	r8, #4294967295
 8005228:	d0f3      	beq.n	8005212 <UART_WaitOnFlagUntilTimeout+0x10>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800522a:	f7fd fc09 	bl	8002a40 <HAL_GetTick>
 800522e:	eba0 0009 	sub.w	r0, r0, r9
 8005232:	4540      	cmp	r0, r8
 8005234:	d824      	bhi.n	8005280 <UART_WaitOnFlagUntilTimeout+0x7e>
 8005236:	f1b8 0f00 	cmp.w	r8, #0
 800523a:	d021      	beq.n	8005280 <UART_WaitOnFlagUntilTimeout+0x7e>
        __HAL_UNLOCK(huart);

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800523c:	682b      	ldr	r3, [r5, #0]
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	f012 0f04 	tst.w	r2, #4
 8005244:	d0e5      	beq.n	8005212 <UART_WaitOnFlagUntilTimeout+0x10>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005246:	69da      	ldr	r2, [r3, #28]
 8005248:	f412 6f00 	tst.w	r2, #2048	; 0x800
 800524c:	d0e1      	beq.n	8005212 <UART_WaitOnFlagUntilTimeout+0x10>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800524e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005252:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005254:	682a      	ldr	r2, [r5, #0]
 8005256:	6813      	ldr	r3, [r2, #0]
 8005258:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800525c:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800525e:	682a      	ldr	r2, [r5, #0]
 8005260:	6893      	ldr	r3, [r2, #8]
 8005262:	f023 0301 	bic.w	r3, r3, #1
 8005266:	6093      	str	r3, [r2, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005268:	2320      	movs	r3, #32
 800526a:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800526e:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005272:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005276:	2300      	movs	r3, #0
 8005278:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80

          return HAL_TIMEOUT;
 800527c:	2003      	movs	r0, #3
 800527e:	e014      	b.n	80052aa <UART_WaitOnFlagUntilTimeout+0xa8>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005280:	682a      	ldr	r2, [r5, #0]
 8005282:	6813      	ldr	r3, [r2, #0]
 8005284:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005288:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800528a:	682a      	ldr	r2, [r5, #0]
 800528c:	6893      	ldr	r3, [r2, #8]
 800528e:	f023 0301 	bic.w	r3, r3, #1
 8005292:	6093      	str	r3, [r2, #8]
        huart->gState = HAL_UART_STATE_READY;
 8005294:	2320      	movs	r3, #32
 8005296:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800529a:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
        __HAL_UNLOCK(huart);
 800529e:	2300      	movs	r3, #0
 80052a0:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
        return HAL_TIMEOUT;
 80052a4:	2003      	movs	r0, #3
 80052a6:	e000      	b.n	80052aa <UART_WaitOnFlagUntilTimeout+0xa8>
        }
      }
    }
  }
  return HAL_OK;
 80052a8:	2000      	movs	r0, #0
}
 80052aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080052ae <UART_CheckIdleState>:
{
 80052ae:	b530      	push	{r4, r5, lr}
 80052b0:	b083      	sub	sp, #12
 80052b2:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052b4:	2300      	movs	r3, #0
 80052b6:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  tickstart = HAL_GetTick();
 80052ba:	f7fd fbc1 	bl	8002a40 <HAL_GetTick>
 80052be:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80052c0:	6823      	ldr	r3, [r4, #0]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f013 0f08 	tst.w	r3, #8
 80052c8:	d10f      	bne.n	80052ea <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80052ca:	6823      	ldr	r3, [r4, #0]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f013 0f04 	tst.w	r3, #4
 80052d2:	d118      	bne.n	8005306 <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 80052d4:	2320      	movs	r3, #32
 80052d6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80052da:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052de:	2000      	movs	r0, #0
 80052e0:	66e0      	str	r0, [r4, #108]	; 0x6c
  __HAL_UNLOCK(huart);
 80052e2:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 80052e6:	b003      	add	sp, #12
 80052e8:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052ea:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80052ee:	9300      	str	r3, [sp, #0]
 80052f0:	4603      	mov	r3, r0
 80052f2:	2200      	movs	r2, #0
 80052f4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80052f8:	4620      	mov	r0, r4
 80052fa:	f7ff ff82 	bl	8005202 <UART_WaitOnFlagUntilTimeout>
 80052fe:	2800      	cmp	r0, #0
 8005300:	d0e3      	beq.n	80052ca <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 8005302:	2003      	movs	r0, #3
 8005304:	e7ef      	b.n	80052e6 <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005306:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800530a:	9300      	str	r3, [sp, #0]
 800530c:	462b      	mov	r3, r5
 800530e:	2200      	movs	r2, #0
 8005310:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005314:	4620      	mov	r0, r4
 8005316:	f7ff ff74 	bl	8005202 <UART_WaitOnFlagUntilTimeout>
 800531a:	2800      	cmp	r0, #0
 800531c:	d0da      	beq.n	80052d4 <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 800531e:	2003      	movs	r0, #3
 8005320:	e7e1      	b.n	80052e6 <UART_CheckIdleState+0x38>

08005322 <HAL_UART_Init>:
  if (huart == NULL)
 8005322:	b378      	cbz	r0, 8005384 <HAL_UART_Init+0x62>
{
 8005324:	b510      	push	{r4, lr}
 8005326:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8005328:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 800532c:	b30b      	cbz	r3, 8005372 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 800532e:	2324      	movs	r3, #36	; 0x24
 8005330:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 8005334:	6822      	ldr	r2, [r4, #0]
 8005336:	6813      	ldr	r3, [r2, #0]
 8005338:	f023 0301 	bic.w	r3, r3, #1
 800533c:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800533e:	4620      	mov	r0, r4
 8005340:	f7ff fd32 	bl	8004da8 <UART_SetConfig>
 8005344:	2801      	cmp	r0, #1
 8005346:	d013      	beq.n	8005370 <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005348:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800534a:	b9bb      	cbnz	r3, 800537c <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800534c:	6822      	ldr	r2, [r4, #0]
 800534e:	6853      	ldr	r3, [r2, #4]
 8005350:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8005354:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005356:	6822      	ldr	r2, [r4, #0]
 8005358:	6893      	ldr	r3, [r2, #8]
 800535a:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800535e:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8005360:	6822      	ldr	r2, [r4, #0]
 8005362:	6813      	ldr	r3, [r2, #0]
 8005364:	f043 0301 	orr.w	r3, r3, #1
 8005368:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 800536a:	4620      	mov	r0, r4
 800536c:	f7ff ff9f 	bl	80052ae <UART_CheckIdleState>
}
 8005370:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8005372:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 8005376:	f7fd f9cb 	bl	8002710 <HAL_UART_MspInit>
 800537a:	e7d8      	b.n	800532e <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 800537c:	4620      	mov	r0, r4
 800537e:	f7ff fedb 	bl	8005138 <UART_AdvFeatureConfig>
 8005382:	e7e3      	b.n	800534c <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 8005384:	2001      	movs	r0, #1
}
 8005386:	4770      	bx	lr

08005388 <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005388:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800538a:	b92b      	cbnz	r3, 8005398 <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 800538c:	2301      	movs	r3, #1
 800538e:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005392:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
 8005396:	4770      	bx	lr
{
 8005398:	b430      	push	{r4, r5}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800539a:	6803      	ldr	r3, [r0, #0]
 800539c:	689a      	ldr	r2, [r3, #8]
 800539e:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80053a2:	6899      	ldr	r1, [r3, #8]
 80053a4:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80053a6:	4d09      	ldr	r5, [pc, #36]	; (80053cc <UARTEx_SetNbDataToProcess+0x44>)
 80053a8:	5c6b      	ldrb	r3, [r5, r1]
 80053aa:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 80053ac:	4c08      	ldr	r4, [pc, #32]	; (80053d0 <UARTEx_SetNbDataToProcess+0x48>)
 80053ae:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80053b0:	fb93 f3f1 	sdiv	r3, r3, r1
 80053b4:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80053b8:	5cab      	ldrb	r3, [r5, r2]
 80053ba:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 80053bc:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80053be:	fb93 f3f2 	sdiv	r3, r3, r2
 80053c2:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  }
}
 80053c6:	bc30      	pop	{r4, r5}
 80053c8:	4770      	bx	lr
 80053ca:	bf00      	nop
 80053cc:	08008340 	.word	0x08008340
 80053d0:	08008338 	.word	0x08008338

080053d4 <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 80053d4:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d018      	beq.n	800540e <HAL_UARTEx_DisableFifoMode+0x3a>
 80053dc:	2301      	movs	r3, #1
 80053de:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 80053e2:	2324      	movs	r3, #36	; 0x24
 80053e4:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80053e8:	6803      	ldr	r3, [r0, #0]
 80053ea:	681a      	ldr	r2, [r3, #0]
  __HAL_UART_DISABLE(huart);
 80053ec:	6819      	ldr	r1, [r3, #0]
 80053ee:	f021 0101 	bic.w	r1, r1, #1
 80053f2:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80053f4:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80053f8:	2300      	movs	r3, #0
 80053fa:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80053fc:	6801      	ldr	r1, [r0, #0]
 80053fe:	600a      	str	r2, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 8005400:	2220      	movs	r2, #32
 8005402:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8005406:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  return HAL_OK;
 800540a:	4618      	mov	r0, r3
 800540c:	4770      	bx	lr
  __HAL_LOCK(huart);
 800540e:	2002      	movs	r0, #2
}
 8005410:	4770      	bx	lr

08005412 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8005412:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8005414:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8005418:	2b01      	cmp	r3, #1
 800541a:	d01d      	beq.n	8005458 <HAL_UARTEx_SetTxFifoThreshold+0x46>
 800541c:	4604      	mov	r4, r0
 800541e:	2301      	movs	r3, #1
 8005420:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8005424:	2324      	movs	r3, #36	; 0x24
 8005426:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800542a:	6803      	ldr	r3, [r0, #0]
 800542c:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	f022 0201 	bic.w	r2, r2, #1
 8005434:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005436:	6802      	ldr	r2, [r0, #0]
 8005438:	6893      	ldr	r3, [r2, #8]
 800543a:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 800543e:	4319      	orrs	r1, r3
 8005440:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8005442:	f7ff ffa1 	bl	8005388 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005446:	6823      	ldr	r3, [r4, #0]
 8005448:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800544a:	2320      	movs	r3, #32
 800544c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8005450:	2000      	movs	r0, #0
 8005452:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8005456:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8005458:	2002      	movs	r0, #2
 800545a:	e7fc      	b.n	8005456 <HAL_UARTEx_SetTxFifoThreshold+0x44>

0800545c <HAL_UARTEx_SetRxFifoThreshold>:
{
 800545c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 800545e:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8005462:	2b01      	cmp	r3, #1
 8005464:	d01d      	beq.n	80054a2 <HAL_UARTEx_SetRxFifoThreshold+0x46>
 8005466:	4604      	mov	r4, r0
 8005468:	2301      	movs	r3, #1
 800546a:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 800546e:	2324      	movs	r3, #36	; 0x24
 8005470:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005474:	6803      	ldr	r3, [r0, #0]
 8005476:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8005478:	681a      	ldr	r2, [r3, #0]
 800547a:	f022 0201 	bic.w	r2, r2, #1
 800547e:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005480:	6802      	ldr	r2, [r0, #0]
 8005482:	6893      	ldr	r3, [r2, #8]
 8005484:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 8005488:	4319      	orrs	r1, r3
 800548a:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 800548c:	f7ff ff7c 	bl	8005388 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005490:	6823      	ldr	r3, [r4, #0]
 8005492:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8005494:	2320      	movs	r3, #32
 8005496:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800549a:	2000      	movs	r0, #0
 800549c:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 80054a0:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 80054a2:	2002      	movs	r0, #2
 80054a4:	e7fc      	b.n	80054a0 <HAL_UARTEx_SetRxFifoThreshold+0x44>
	...

080054a8 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 80054a8:	b410      	push	{r4}
  assert_param(IS_ADC_COMMON_INSTANCE(ADCxy_COMMON));
  assert_param(IS_LL_ADC_COMMON_CLOCK(ADC_CommonInitStruct->CommonClock));

#if defined(ADC_MULTIMODE_SUPPORT)
  assert_param(IS_LL_ADC_MULTI_MODE(ADC_CommonInitStruct->Multimode));
  if (ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 80054aa:	684c      	ldr	r4, [r1, #4]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to  */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0UL)
 80054ac:	4b23      	ldr	r3, [pc, #140]	; (800553c <LL_ADC_CommonInit+0x94>)
 80054ae:	4298      	cmp	r0, r3
 80054b0:	d025      	beq.n	80054fe <LL_ADC_CommonInit+0x56>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80054b2:	4b23      	ldr	r3, [pc, #140]	; (8005540 <LL_ADC_CommonInit+0x98>)
 80054b4:	689a      	ldr	r2, [r3, #8]
 80054b6:	f012 0201 	ands.w	r2, r2, #1
 80054ba:	d000      	beq.n	80054be <LL_ADC_CommonInit+0x16>
 80054bc:	2201      	movs	r2, #1
 80054be:	4b21      	ldr	r3, [pc, #132]	; (8005544 <LL_ADC_CommonInit+0x9c>)
 80054c0:	689b      	ldr	r3, [r3, #8]
 80054c2:	f013 0301 	ands.w	r3, r3, #1
 80054c6:	d000      	beq.n	80054ca <LL_ADC_CommonInit+0x22>
 80054c8:	2301      	movs	r3, #1
 80054ca:	4313      	orrs	r3, r2
 80054cc:	4a1e      	ldr	r2, [pc, #120]	; (8005548 <LL_ADC_CommonInit+0xa0>)
 80054ce:	6892      	ldr	r2, [r2, #8]
 80054d0:	f012 0201 	ands.w	r2, r2, #1
 80054d4:	d000      	beq.n	80054d8 <LL_ADC_CommonInit+0x30>
 80054d6:	2201      	movs	r2, #1
 80054d8:	4313      	orrs	r3, r2
 80054da:	bf0c      	ite	eq
 80054dc:	2301      	moveq	r3, #1
 80054de:	2300      	movne	r3, #0
 80054e0:	b33b      	cbz	r3, 8005532 <LL_ADC_CommonInit+0x8a>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if (ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 80054e2:	b1f4      	cbz	r4, 8005522 <LL_ADC_CommonInit+0x7a>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 80054e4:	6882      	ldr	r2, [r0, #8]
 80054e6:	4b19      	ldr	r3, [pc, #100]	; (800554c <LL_ADC_CommonInit+0xa4>)
 80054e8:	4013      	ands	r3, r2
 80054ea:	680a      	ldr	r2, [r1, #0]
 80054ec:	4314      	orrs	r4, r2
 80054ee:	688a      	ldr	r2, [r1, #8]
 80054f0:	4314      	orrs	r4, r2
 80054f2:	68ca      	ldr	r2, [r1, #12]
 80054f4:	4314      	orrs	r4, r2
 80054f6:	431c      	orrs	r4, r3
 80054f8:	6084      	str	r4, [r0, #8]
  ErrorStatus status = SUCCESS;
 80054fa:	2000      	movs	r0, #0
 80054fc:	e01a      	b.n	8005534 <LL_ADC_CommonInit+0x8c>
 80054fe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	f013 0301 	ands.w	r3, r3, #1
 8005508:	d000      	beq.n	800550c <LL_ADC_CommonInit+0x64>
 800550a:	2301      	movs	r3, #1
 800550c:	4a10      	ldr	r2, [pc, #64]	; (8005550 <LL_ADC_CommonInit+0xa8>)
 800550e:	6892      	ldr	r2, [r2, #8]
 8005510:	f012 0201 	ands.w	r2, r2, #1
 8005514:	d000      	beq.n	8005518 <LL_ADC_CommonInit+0x70>
 8005516:	2201      	movs	r2, #1
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0UL)
 8005518:	4313      	orrs	r3, r2
 800551a:	bf0c      	ite	eq
 800551c:	2301      	moveq	r3, #1
 800551e:	2300      	movne	r3, #0
 8005520:	e7de      	b.n	80054e0 <LL_ADC_CommonInit+0x38>
                 | ADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8005522:	6882      	ldr	r2, [r0, #8]
 8005524:	4b09      	ldr	r3, [pc, #36]	; (800554c <LL_ADC_CommonInit+0xa4>)
 8005526:	4013      	ands	r3, r2
 8005528:	680a      	ldr	r2, [r1, #0]
 800552a:	4313      	orrs	r3, r2
 800552c:	6083      	str	r3, [r0, #8]
  ErrorStatus status = SUCCESS;
 800552e:	2000      	movs	r0, #0
 8005530:	e000      	b.n	8005534 <LL_ADC_CommonInit+0x8c>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 8005532:	2001      	movs	r0, #1
  }

  return status;
}
 8005534:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005538:	4770      	bx	lr
 800553a:	bf00      	nop
 800553c:	50000300 	.word	0x50000300
 8005540:	50000400 	.word	0x50000400
 8005544:	50000500 	.word	0x50000500
 8005548:	50000600 	.word	0x50000600
 800554c:	ffc030e0 	.word	0xffc030e0
 8005550:	50000100 	.word	0x50000100

08005554 <LL_ADC_Init>:
 8005554:	6883      	ldr	r3, [r0, #8]
 8005556:	f013 0f01 	tst.w	r3, #1
 800555a:	d110      	bne.n	800557e <LL_ADC_Init+0x2a>
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 800555c:	b410      	push	{r4}
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR,
 800555e:	68c3      	ldr	r3, [r0, #12]
 8005560:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8005564:	f023 0318 	bic.w	r3, r3, #24
 8005568:	680a      	ldr	r2, [r1, #0]
 800556a:	684c      	ldr	r4, [r1, #4]
 800556c:	4322      	orrs	r2, r4
 800556e:	6889      	ldr	r1, [r1, #8]
 8005570:	430a      	orrs	r2, r1
 8005572:	4313      	orrs	r3, r2
 8005574:	60c3      	str	r3, [r0, #12]
  ErrorStatus status = SUCCESS;
 8005576:	2000      	movs	r0, #0
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
  }

  return status;
}
 8005578:	f85d 4b04 	ldr.w	r4, [sp], #4
 800557c:	4770      	bx	lr
    status = ERROR;
 800557e:	2001      	movs	r0, #1
}
 8005580:	4770      	bx	lr
	...

08005584 <LL_ADC_REG_Init>:

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(ADCx));
  assert_param(IS_LL_ADC_REG_TRIG_SOURCE(ADCx, ADC_REG_InitStruct->TriggerSource));
  assert_param(IS_LL_ADC_REG_SEQ_SCAN_LENGTH(ADC_REG_InitStruct->SequencerLength));
  if (ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8005584:	684a      	ldr	r2, [r1, #4]
 8005586:	6883      	ldr	r3, [r0, #8]
 8005588:	f013 0f01 	tst.w	r3, #1
 800558c:	d126      	bne.n	80055dc <LL_ADC_REG_Init+0x58>
{
 800558e:	b410      	push	{r4}
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 series, ADC trigger edge is set to value 0x0 by    */
    /*       setting of trigger source to SW start.                           */
    if (ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8005590:	b1ba      	cbz	r2, 80055c2 <LL_ADC_REG_Init+0x3e>
    {
      MODIFY_REG(ADCx->CFGR,
 8005592:	68c3      	ldr	r3, [r0, #12]
 8005594:	4a12      	ldr	r2, [pc, #72]	; (80055e0 <LL_ADC_REG_Init+0x5c>)
 8005596:	401a      	ands	r2, r3
 8005598:	680b      	ldr	r3, [r1, #0]
 800559a:	688c      	ldr	r4, [r1, #8]
 800559c:	4323      	orrs	r3, r4
 800559e:	68cc      	ldr	r4, [r1, #12]
 80055a0:	4323      	orrs	r3, r4
 80055a2:	690c      	ldr	r4, [r1, #16]
 80055a4:	4323      	orrs	r3, r4
 80055a6:	694c      	ldr	r4, [r1, #20]
 80055a8:	4323      	orrs	r3, r4
 80055aa:	4313      	orrs	r3, r2
 80055ac:	60c3      	str	r3, [r0, #12]
                 | ADC_REG_InitStruct->Overrun
                );
    }

    /* Set ADC group regular sequencer length and scan direction */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 80055ae:	684b      	ldr	r3, [r1, #4]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 80055b0:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80055b2:	f022 020f 	bic.w	r2, r2, #15
 80055b6:	4313      	orrs	r3, r2
 80055b8:	6303      	str	r3, [r0, #48]	; 0x30
  ErrorStatus status = SUCCESS;
 80055ba:	2000      	movs	r0, #0
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
  }
  return status;
}
 80055bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80055c0:	4770      	bx	lr
      MODIFY_REG(ADCx->CFGR,
 80055c2:	68c3      	ldr	r3, [r0, #12]
 80055c4:	4a06      	ldr	r2, [pc, #24]	; (80055e0 <LL_ADC_REG_Init+0x5c>)
 80055c6:	401a      	ands	r2, r3
 80055c8:	680b      	ldr	r3, [r1, #0]
 80055ca:	68cc      	ldr	r4, [r1, #12]
 80055cc:	4323      	orrs	r3, r4
 80055ce:	690c      	ldr	r4, [r1, #16]
 80055d0:	4323      	orrs	r3, r4
 80055d2:	694c      	ldr	r4, [r1, #20]
 80055d4:	4323      	orrs	r3, r4
 80055d6:	4313      	orrs	r3, r2
 80055d8:	60c3      	str	r3, [r0, #12]
 80055da:	e7e8      	b.n	80055ae <LL_ADC_REG_Init+0x2a>
    status = ERROR;
 80055dc:	2001      	movs	r0, #1
}
 80055de:	4770      	bx	lr
 80055e0:	fff0c01c 	.word	0xfff0c01c

080055e4 <LL_ADC_INJ_Init>:

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(ADCx));
  assert_param(IS_LL_ADC_INJ_TRIG_SOURCE(ADCx, ADC_INJ_InitStruct->TriggerSource));
  assert_param(IS_LL_ADC_INJ_SEQ_SCAN_LENGTH(ADC_INJ_InitStruct->SequencerLength));
  if (ADC_INJ_InitStruct->SequencerLength != LL_ADC_INJ_SEQ_SCAN_DISABLE)
 80055e4:	684a      	ldr	r2, [r1, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80055e6:	6883      	ldr	r3, [r0, #8]
 80055e8:	f013 0f01 	tst.w	r3, #1
 80055ec:	d11e      	bne.n	800562c <LL_ADC_INJ_Init+0x48>
{
 80055ee:	b410      	push	{r4}
    /*    - Set ADC group injected sequencer discontinuous mode               */
    /*    - Set ADC group injected conversion trigger: independent or         */
    /*      from ADC group regular                                            */
    /* Note: On this STM32 series, ADC trigger edge is set to value 0x0 by    */
    /*       setting of trigger source to SW start.                           */
    if (ADC_INJ_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 80055f0:	b1aa      	cbz	r2, 800561e <LL_ADC_INJ_Init+0x3a>
    {
      MODIFY_REG(ADCx->CFGR,
 80055f2:	68c3      	ldr	r3, [r0, #12]
 80055f4:	f023 7304 	bic.w	r3, r3, #34603008	; 0x2100000
 80055f8:	688a      	ldr	r2, [r1, #8]
 80055fa:	68cc      	ldr	r4, [r1, #12]
 80055fc:	4322      	orrs	r2, r4
 80055fe:	4313      	orrs	r3, r2
 8005600:	60c3      	str	r3, [r0, #12]
                 LL_ADC_REG_SEQ_DISCONT_DISABLE
                 | ADC_INJ_InitStruct->TrigAuto
                );
    }

    MODIFY_REG(ADCx->JSQR,
 8005602:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8005604:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8005608:	f023 0301 	bic.w	r3, r3, #1
 800560c:	680a      	ldr	r2, [r1, #0]
 800560e:	6849      	ldr	r1, [r1, #4]
 8005610:	430a      	orrs	r2, r1
 8005612:	4313      	orrs	r3, r2
 8005614:	64c3      	str	r3, [r0, #76]	; 0x4c
  ErrorStatus status = SUCCESS;
 8005616:	2000      	movs	r0, #0
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
  }
  return status;
}
 8005618:	f85d 4b04 	ldr.w	r4, [sp], #4
 800561c:	4770      	bx	lr
      MODIFY_REG(ADCx->CFGR,
 800561e:	68c3      	ldr	r3, [r0, #12]
 8005620:	f023 7304 	bic.w	r3, r3, #34603008	; 0x2100000
 8005624:	68ca      	ldr	r2, [r1, #12]
 8005626:	4313      	orrs	r3, r2
 8005628:	60c3      	str	r3, [r0, #12]
 800562a:	e7ea      	b.n	8005602 <LL_ADC_INJ_Init+0x1e>
    status = ERROR;
 800562c:	2001      	movs	r0, #1
}
 800562e:	4770      	bx	lr

08005630 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8005630:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8005632:	680a      	ldr	r2, [r1, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005634:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8005638:	b112      	cbz	r2, 8005640 <LL_GPIO_Init+0x10>
  return __builtin_clz(value);
 800563a:	fab2 f282 	clz	r2, r2
 800563e:	e048      	b.n	80056d2 <LL_GPIO_Init+0xa2>
    return 32U;
 8005640:	2220      	movs	r2, #32

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8005642:	e046      	b.n	80056d2 <LL_GPIO_Init+0xa2>
 8005644:	2520      	movs	r5, #32
 8005646:	e058      	b.n	80056fa <LL_GPIO_Init+0xca>
 8005648:	2420      	movs	r4, #32
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800564a:	0064      	lsls	r4, r4, #1
 800564c:	fa06 f404 	lsl.w	r4, r6, r4
 8005650:	432c      	orrs	r4, r5
 8005652:	6084      	str	r4, [r0, #8]

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8005654:	680e      	ldr	r6, [r1, #0]
 8005656:	68cd      	ldr	r5, [r1, #12]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8005658:	6844      	ldr	r4, [r0, #4]
 800565a:	ea24 0406 	bic.w	r4, r4, r6
 800565e:	fb05 f506 	mul.w	r5, r5, r6
 8005662:	432c      	orrs	r4, r5
 8005664:	6044      	str	r4, [r0, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8005666:	690e      	ldr	r6, [r1, #16]
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8005668:	68c4      	ldr	r4, [r0, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800566a:	fa93 f5a3 	rbit	r5, r3
  if (value == 0U)
 800566e:	2d00      	cmp	r5, #0
 8005670:	d050      	beq.n	8005714 <LL_GPIO_Init+0xe4>
  return __builtin_clz(value);
 8005672:	fab5 f585 	clz	r5, r5
 8005676:	006d      	lsls	r5, r5, #1
 8005678:	2703      	movs	r7, #3
 800567a:	fa07 f505 	lsl.w	r5, r7, r5
 800567e:	ea24 0505 	bic.w	r5, r4, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005682:	fa93 f4a3 	rbit	r4, r3
  if (value == 0U)
 8005686:	2c00      	cmp	r4, #0
 8005688:	d046      	beq.n	8005718 <LL_GPIO_Init+0xe8>
  return __builtin_clz(value);
 800568a:	fab4 f484 	clz	r4, r4
 800568e:	0064      	lsls	r4, r4, #1
 8005690:	fa06 f404 	lsl.w	r4, r6, r4
 8005694:	432c      	orrs	r4, r5
 8005696:	60c4      	str	r4, [r0, #12]

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8005698:	684c      	ldr	r4, [r1, #4]
 800569a:	2c02      	cmp	r4, #2
 800569c:	d03e      	beq.n	800571c <LL_GPIO_Init+0xec>
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800569e:	684e      	ldr	r6, [r1, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80056a0:	6805      	ldr	r5, [r0, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056a2:	fa93 f4a3 	rbit	r4, r3
  if (value == 0U)
 80056a6:	2c00      	cmp	r4, #0
 80056a8:	d074      	beq.n	8005794 <LL_GPIO_Init+0x164>
  return __builtin_clz(value);
 80056aa:	fab4 f484 	clz	r4, r4
 80056ae:	0064      	lsls	r4, r4, #1
 80056b0:	2703      	movs	r7, #3
 80056b2:	fa07 f404 	lsl.w	r4, r7, r4
 80056b6:	ea25 0404 	bic.w	r4, r5, r4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056ba:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d06a      	beq.n	8005798 <LL_GPIO_Init+0x168>
  return __builtin_clz(value);
 80056c2:	fab3 f383 	clz	r3, r3
 80056c6:	005b      	lsls	r3, r3, #1
 80056c8:	fa06 f303 	lsl.w	r3, r6, r3
 80056cc:	4323      	orrs	r3, r4
 80056ce:	6003      	str	r3, [r0, #0]
    }
    pinpos++;
 80056d0:	3201      	adds	r2, #1
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80056d2:	680b      	ldr	r3, [r1, #0]
 80056d4:	fa33 f402 	lsrs.w	r4, r3, r2
 80056d8:	d060      	beq.n	800579c <LL_GPIO_Init+0x16c>
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 80056da:	2401      	movs	r4, #1
 80056dc:	4094      	lsls	r4, r2
    if (currentpin != 0x00u)
 80056de:	4023      	ands	r3, r4
 80056e0:	d0f6      	beq.n	80056d0 <LL_GPIO_Init+0xa0>
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80056e2:	684c      	ldr	r4, [r1, #4]
 80056e4:	3c01      	subs	r4, #1
 80056e6:	2c01      	cmp	r4, #1
 80056e8:	d8bd      	bhi.n	8005666 <LL_GPIO_Init+0x36>
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80056ea:	688e      	ldr	r6, [r1, #8]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 80056ec:	6884      	ldr	r4, [r0, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056ee:	fa93 f5a3 	rbit	r5, r3
  if (value == 0U)
 80056f2:	2d00      	cmp	r5, #0
 80056f4:	d0a6      	beq.n	8005644 <LL_GPIO_Init+0x14>
  return __builtin_clz(value);
 80056f6:	fab5 f585 	clz	r5, r5
 80056fa:	006d      	lsls	r5, r5, #1
 80056fc:	2703      	movs	r7, #3
 80056fe:	fa07 f505 	lsl.w	r5, r7, r5
 8005702:	ea24 0505 	bic.w	r5, r4, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005706:	fa93 f4a3 	rbit	r4, r3
  if (value == 0U)
 800570a:	2c00      	cmp	r4, #0
 800570c:	d09c      	beq.n	8005648 <LL_GPIO_Init+0x18>
  return __builtin_clz(value);
 800570e:	fab4 f484 	clz	r4, r4
 8005712:	e79a      	b.n	800564a <LL_GPIO_Init+0x1a>
    return 32U;
 8005714:	2520      	movs	r5, #32
 8005716:	e7ae      	b.n	8005676 <LL_GPIO_Init+0x46>
 8005718:	2420      	movs	r4, #32
 800571a:	e7b8      	b.n	800568e <LL_GPIO_Init+0x5e>
        if (currentpin < LL_GPIO_PIN_8)
 800571c:	2bff      	cmp	r3, #255	; 0xff
 800571e:	d81b      	bhi.n	8005758 <LL_GPIO_Init+0x128>
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005720:	694e      	ldr	r6, [r1, #20]
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8005722:	6a04      	ldr	r4, [r0, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005724:	fa93 f5a3 	rbit	r5, r3
  if (value == 0U)
 8005728:	b195      	cbz	r5, 8005750 <LL_GPIO_Init+0x120>
  return __builtin_clz(value);
 800572a:	fab5 f585 	clz	r5, r5
 800572e:	00ad      	lsls	r5, r5, #2
 8005730:	270f      	movs	r7, #15
 8005732:	fa07 f505 	lsl.w	r5, r7, r5
 8005736:	ea24 0505 	bic.w	r5, r4, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800573a:	fa93 f4a3 	rbit	r4, r3
  if (value == 0U)
 800573e:	b14c      	cbz	r4, 8005754 <LL_GPIO_Init+0x124>
  return __builtin_clz(value);
 8005740:	fab4 f484 	clz	r4, r4
 8005744:	00a4      	lsls	r4, r4, #2
 8005746:	fa06 f404 	lsl.w	r4, r6, r4
 800574a:	432c      	orrs	r4, r5
 800574c:	6204      	str	r4, [r0, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 800574e:	e7a6      	b.n	800569e <LL_GPIO_Init+0x6e>
    return 32U;
 8005750:	2520      	movs	r5, #32
 8005752:	e7ec      	b.n	800572e <LL_GPIO_Init+0xfe>
 8005754:	2420      	movs	r4, #32
 8005756:	e7f5      	b.n	8005744 <LL_GPIO_Init+0x114>
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005758:	694f      	ldr	r7, [r1, #20]
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800575a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800575c:	0a1c      	lsrs	r4, r3, #8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800575e:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 8005762:	b19d      	cbz	r5, 800578c <LL_GPIO_Init+0x15c>
  return __builtin_clz(value);
 8005764:	fab5 f585 	clz	r5, r5
 8005768:	00ad      	lsls	r5, r5, #2
 800576a:	f04f 0c0f 	mov.w	ip, #15
 800576e:	fa0c f505 	lsl.w	r5, ip, r5
 8005772:	ea26 0505 	bic.w	r5, r6, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005776:	fa94 f4a4 	rbit	r4, r4
  if (value == 0U)
 800577a:	b14c      	cbz	r4, 8005790 <LL_GPIO_Init+0x160>
  return __builtin_clz(value);
 800577c:	fab4 f484 	clz	r4, r4
 8005780:	00a4      	lsls	r4, r4, #2
 8005782:	fa07 f404 	lsl.w	r4, r7, r4
 8005786:	432c      	orrs	r4, r5
 8005788:	6244      	str	r4, [r0, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 800578a:	e788      	b.n	800569e <LL_GPIO_Init+0x6e>
    return 32U;
 800578c:	2520      	movs	r5, #32
 800578e:	e7eb      	b.n	8005768 <LL_GPIO_Init+0x138>
 8005790:	2420      	movs	r4, #32
 8005792:	e7f5      	b.n	8005780 <LL_GPIO_Init+0x150>
 8005794:	2420      	movs	r4, #32
 8005796:	e78a      	b.n	80056ae <LL_GPIO_Init+0x7e>
 8005798:	2320      	movs	r3, #32
 800579a:	e794      	b.n	80056c6 <LL_GPIO_Init+0x96>
  }
  return (SUCCESS);
}
 800579c:	2000      	movs	r0, #0
 800579e:	bcf0      	pop	{r4, r5, r6, r7}
 80057a0:	4770      	bx	lr

080057a2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80057a2:	4603      	mov	r3, r0
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80057a4:	2000      	movs	r0, #0
 80057a6:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80057aa:	f64b 7280 	movw	r2, #49024	; 0xbf80
 80057ae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
}
 80057b2:	4770      	bx	lr

080057b4 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80057b4:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80057b8:	f423 537e 	bic.w	r3, r3, #16256	; 0x3f80
 80057bc:	045b      	lsls	r3, r3, #17
 80057be:	0c5b      	lsrs	r3, r3, #17
 80057c0:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 80057c4:	2000      	movs	r0, #0
 80057c6:	4770      	bx	lr

080057c8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80057c8:	b084      	sub	sp, #16
 80057ca:	b410      	push	{r4}
 80057cc:	4604      	mov	r4, r0
 80057ce:	a802      	add	r0, sp, #8
 80057d0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80057d4:	2301      	movs	r3, #1
 80057d6:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80057da:	2000      	movs	r0, #0
 80057dc:	f8a4 0040 	strh.w	r0, [r4, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80057e0:	f8a4 0044 	strh.w	r0, [r4, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80057e4:	f8a4 0050 	strh.w	r0, [r4, #80]	; 0x50

  return HAL_OK;
}
 80057e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80057ec:	b004      	add	sp, #16
 80057ee:	4770      	bx	lr

080057f0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80057f0:	b430      	push	{r4, r5}
 80057f2:	4603      	mov	r3, r0
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80057f4:	780a      	ldrb	r2, [r1, #0]
 80057f6:	f830 4022 	ldrh.w	r4, [r0, r2, lsl #2]
 80057fa:	b2a4      	uxth	r4, r4
 80057fc:	f424 44ec 	bic.w	r4, r4, #30208	; 0x7600
 8005800:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 8005804:	b2a4      	uxth	r4, r4

  /* initialize Endpoint */
  switch (ep->type)
 8005806:	78c8      	ldrb	r0, [r1, #3]
 8005808:	2803      	cmp	r0, #3
 800580a:	d85b      	bhi.n	80058c4 <USB_ActivateEndpoint+0xd4>
 800580c:	e8df f000 	tbb	[pc, r0]
 8005810:	5202564f 	.word	0x5202564f
 8005814:	2000      	movs	r0, #0
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005816:	f248 0580 	movw	r5, #32896	; 0x8080
 800581a:	432c      	orrs	r4, r5
 800581c:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005820:	780c      	ldrb	r4, [r1, #0]
 8005822:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8005826:	b212      	sxth	r2, r2
 8005828:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800582c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005830:	4322      	orrs	r2, r4
 8005832:	b292      	uxth	r2, r2
 8005834:	432a      	orrs	r2, r5
 8005836:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

  if (ep->doublebuffer == 0U)
 800583a:	7b0a      	ldrb	r2, [r1, #12]
 800583c:	2a00      	cmp	r2, #0
 800583e:	f040 80b6 	bne.w	80059ae <USB_ActivateEndpoint+0x1be>
  {
    if (ep->is_in != 0U)
 8005842:	784a      	ldrb	r2, [r1, #1]
 8005844:	2a00      	cmp	r2, #0
 8005846:	d04e      	beq.n	80058e6 <USB_ActivateEndpoint+0xf6>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005848:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 800584c:	fa13 f282 	uxtah	r2, r3, r2
 8005850:	780c      	ldrb	r4, [r1, #0]
 8005852:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8005856:	88cc      	ldrh	r4, [r1, #6]
 8005858:	0864      	lsrs	r4, r4, #1
 800585a:	0064      	lsls	r4, r4, #1
 800585c:	f8a2 4400 	strh.w	r4, [r2, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005860:	780c      	ldrb	r4, [r1, #0]
 8005862:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8005866:	f012 0f40 	tst.w	r2, #64	; 0x40
 800586a:	d00c      	beq.n	8005886 <USB_ActivateEndpoint+0x96>
 800586c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8005870:	b292      	uxth	r2, r2
 8005872:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8005876:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800587a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800587e:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8005882:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8005886:	78ca      	ldrb	r2, [r1, #3]
 8005888:	2a01      	cmp	r2, #1
 800588a:	d01d      	beq.n	80058c8 <USB_ActivateEndpoint+0xd8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800588c:	7809      	ldrb	r1, [r1, #0]
 800588e:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8005892:	b292      	uxth	r2, r2
 8005894:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8005898:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800589c:	f082 0220 	eor.w	r2, r2, #32
 80058a0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80058a4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80058a8:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 80058ac:	e064      	b.n	8005978 <USB_ActivateEndpoint+0x188>
      wEpRegVal |= USB_EP_CONTROL;
 80058ae:	f444 7400 	orr.w	r4, r4, #512	; 0x200
      break;
 80058b2:	e7b0      	b.n	8005816 <USB_ActivateEndpoint+0x26>
      wEpRegVal |= USB_EP_INTERRUPT;
 80058b4:	f444 64c0 	orr.w	r4, r4, #1536	; 0x600
  HAL_StatusTypeDef ret = HAL_OK;
 80058b8:	2000      	movs	r0, #0
      break;
 80058ba:	e7ac      	b.n	8005816 <USB_ActivateEndpoint+0x26>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80058bc:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
  HAL_StatusTypeDef ret = HAL_OK;
 80058c0:	2000      	movs	r0, #0
      break;
 80058c2:	e7a8      	b.n	8005816 <USB_ActivateEndpoint+0x26>
      ret = HAL_ERROR;
 80058c4:	2001      	movs	r0, #1
 80058c6:	e7a6      	b.n	8005816 <USB_ActivateEndpoint+0x26>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80058c8:	7809      	ldrb	r1, [r1, #0]
 80058ca:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80058ce:	b292      	uxth	r2, r2
 80058d0:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80058d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058d8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80058dc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80058e0:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 80058e4:	e048      	b.n	8005978 <USB_ActivateEndpoint+0x188>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80058e6:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80058ea:	fa13 f282 	uxtah	r2, r3, r2
 80058ee:	780c      	ldrb	r4, [r1, #0]
 80058f0:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80058f4:	88cc      	ldrh	r4, [r1, #6]
 80058f6:	0864      	lsrs	r4, r4, #1
 80058f8:	0064      	lsls	r4, r4, #1
 80058fa:	f8a2 4404 	strh.w	r4, [r2, #1028]	; 0x404

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80058fe:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8005902:	fa13 f282 	uxtah	r2, r3, r2
 8005906:	780c      	ldrb	r4, [r1, #0]
 8005908:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800590c:	690c      	ldr	r4, [r1, #16]
 800590e:	bbac      	cbnz	r4, 800597c <USB_ActivateEndpoint+0x18c>
 8005910:	f8b2 4406 	ldrh.w	r4, [r2, #1030]	; 0x406
 8005914:	b2a4      	uxth	r4, r4
 8005916:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
 800591a:	b2a4      	uxth	r4, r4
 800591c:	f8a2 4406 	strh.w	r4, [r2, #1030]	; 0x406
 8005920:	f8b2 4406 	ldrh.w	r4, [r2, #1030]	; 0x406
 8005924:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 8005928:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 800592c:	b2a4      	uxth	r4, r4
 800592e:	f8a2 4406 	strh.w	r4, [r2, #1030]	; 0x406
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005932:	780c      	ldrb	r4, [r1, #0]
 8005934:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8005938:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 800593c:	d00c      	beq.n	8005958 <USB_ActivateEndpoint+0x168>
 800593e:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8005942:	b292      	uxth	r2, r2
 8005944:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8005948:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800594c:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8005950:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005954:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005958:	7809      	ldrb	r1, [r1, #0]
 800595a:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 800595e:	b292      	uxth	r2, r2
 8005960:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005964:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005968:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 800596c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005970:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005974:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return ret;
}
 8005978:	bc30      	pop	{r4, r5}
 800597a:	4770      	bx	lr
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800597c:	2c3e      	cmp	r4, #62	; 0x3e
 800597e:	d809      	bhi.n	8005994 <USB_ActivateEndpoint+0x1a4>
 8005980:	0865      	lsrs	r5, r4, #1
 8005982:	f014 0f01 	tst.w	r4, #1
 8005986:	d000      	beq.n	800598a <USB_ActivateEndpoint+0x19a>
 8005988:	3501      	adds	r5, #1
 800598a:	02ad      	lsls	r5, r5, #10
 800598c:	b2ad      	uxth	r5, r5
 800598e:	f8a2 5406 	strh.w	r5, [r2, #1030]	; 0x406
 8005992:	e7ce      	b.n	8005932 <USB_ActivateEndpoint+0x142>
 8005994:	0965      	lsrs	r5, r4, #5
 8005996:	f014 0f1f 	tst.w	r4, #31
 800599a:	d100      	bne.n	800599e <USB_ActivateEndpoint+0x1ae>
 800599c:	3d01      	subs	r5, #1
 800599e:	ea6f 64c5 	mvn.w	r4, r5, lsl #27
 80059a2:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 80059a6:	b2a4      	uxth	r4, r4
 80059a8:	f8a2 4406 	strh.w	r4, [r2, #1030]	; 0x406
 80059ac:	e7c1      	b.n	8005932 <USB_ActivateEndpoint+0x142>
    PCD_SET_EP_DBUF(USBx, ep->num);
 80059ae:	780c      	ldrb	r4, [r1, #0]
 80059b0:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80059b4:	b292      	uxth	r2, r2
 80059b6:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80059ba:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80059be:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 80059c2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80059c6:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80059ca:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80059ce:	fa13 f282 	uxtah	r2, r3, r2
 80059d2:	780c      	ldrb	r4, [r1, #0]
 80059d4:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80059d8:	890c      	ldrh	r4, [r1, #8]
 80059da:	0864      	lsrs	r4, r4, #1
 80059dc:	0064      	lsls	r4, r4, #1
 80059de:	f8a2 4400 	strh.w	r4, [r2, #1024]	; 0x400
 80059e2:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80059e6:	fa13 f282 	uxtah	r2, r3, r2
 80059ea:	780c      	ldrb	r4, [r1, #0]
 80059ec:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80059f0:	894c      	ldrh	r4, [r1, #10]
 80059f2:	0864      	lsrs	r4, r4, #1
 80059f4:	0064      	lsls	r4, r4, #1
 80059f6:	f8a2 4404 	strh.w	r4, [r2, #1028]	; 0x404
    if (ep->is_in == 0U)
 80059fa:	784a      	ldrb	r2, [r1, #1]
 80059fc:	2a00      	cmp	r2, #0
 80059fe:	d140      	bne.n	8005a82 <USB_ActivateEndpoint+0x292>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005a00:	780c      	ldrb	r4, [r1, #0]
 8005a02:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8005a06:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8005a0a:	d00c      	beq.n	8005a26 <USB_ActivateEndpoint+0x236>
 8005a0c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8005a10:	b292      	uxth	r2, r2
 8005a12:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8005a16:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005a1a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8005a1e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005a22:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005a26:	780c      	ldrb	r4, [r1, #0]
 8005a28:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8005a2c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005a30:	d00c      	beq.n	8005a4c <USB_ActivateEndpoint+0x25c>
 8005a32:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8005a36:	b292      	uxth	r2, r2
 8005a38:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8005a3c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005a40:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005a44:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8005a48:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005a4c:	780d      	ldrb	r5, [r1, #0]
 8005a4e:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 8005a52:	b292      	uxth	r2, r2
 8005a54:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005a58:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005a5c:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8005a60:	f248 0480 	movw	r4, #32896	; 0x8080
 8005a64:	4322      	orrs	r2, r4
 8005a66:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005a6a:	7809      	ldrb	r1, [r1, #0]
 8005a6c:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8005a70:	b292      	uxth	r2, r2
 8005a72:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8005a76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a7a:	4322      	orrs	r2, r4
 8005a7c:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8005a80:	e77a      	b.n	8005978 <USB_ActivateEndpoint+0x188>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005a82:	780c      	ldrb	r4, [r1, #0]
 8005a84:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8005a88:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8005a8c:	d00c      	beq.n	8005aa8 <USB_ActivateEndpoint+0x2b8>
 8005a8e:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8005a92:	b292      	uxth	r2, r2
 8005a94:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8005a98:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005a9c:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8005aa0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005aa4:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005aa8:	780c      	ldrb	r4, [r1, #0]
 8005aaa:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8005aae:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005ab2:	d00c      	beq.n	8005ace <USB_ActivateEndpoint+0x2de>
 8005ab4:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8005ab8:	b292      	uxth	r2, r2
 8005aba:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8005abe:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005ac2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005ac6:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8005aca:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 8005ace:	78ca      	ldrb	r2, [r1, #3]
 8005ad0:	2a01      	cmp	r2, #1
 8005ad2:	d01e      	beq.n	8005b12 <USB_ActivateEndpoint+0x322>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005ad4:	780c      	ldrb	r4, [r1, #0]
 8005ad6:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8005ada:	b292      	uxth	r2, r2
 8005adc:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8005ae0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ae4:	f082 0220 	eor.w	r2, r2, #32
 8005ae8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005aec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005af0:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005af4:	7809      	ldrb	r1, [r1, #0]
 8005af6:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8005afa:	b292      	uxth	r2, r2
 8005afc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005b00:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005b04:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005b08:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005b0c:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8005b10:	e732      	b.n	8005978 <USB_ActivateEndpoint+0x188>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005b12:	780c      	ldrb	r4, [r1, #0]
 8005b14:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8005b18:	b292      	uxth	r2, r2
 8005b1a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8005b1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005b26:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005b2a:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
 8005b2e:	e7e1      	b.n	8005af4 <USB_ActivateEndpoint+0x304>

08005b30 <USB_DeactivateEndpoint>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8005b30:	7b0b      	ldrb	r3, [r1, #12]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d146      	bne.n	8005bc4 <USB_DeactivateEndpoint+0x94>
  {
    if (ep->is_in != 0U)
 8005b36:	784b      	ldrb	r3, [r1, #1]
 8005b38:	b313      	cbz	r3, 8005b80 <USB_DeactivateEndpoint+0x50>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005b3a:	780a      	ldrb	r2, [r1, #0]
 8005b3c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005b40:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005b44:	d00c      	beq.n	8005b60 <USB_DeactivateEndpoint+0x30>
 8005b46:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b58:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005b5c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005b60:	780a      	ldrb	r2, [r1, #0]
 8005b62:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005b66:	b29b      	uxth	r3, r3
 8005b68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b78:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return HAL_OK;
}
 8005b7c:	2000      	movs	r0, #0
 8005b7e:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005b80:	780a      	ldrb	r2, [r1, #0]
 8005b82:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005b86:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8005b8a:	d00c      	beq.n	8005ba6 <USB_DeactivateEndpoint+0x76>
 8005b8c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005b90:	b29b      	uxth	r3, r3
 8005b92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b9a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005b9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ba2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005ba6:	780a      	ldrb	r2, [r1, #0]
 8005ba8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005bac:	b29b      	uxth	r3, r3
 8005bae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005bb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bbe:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8005bc2:	e7db      	b.n	8005b7c <USB_DeactivateEndpoint+0x4c>
{
 8005bc4:	b410      	push	{r4}
    if (ep->is_in == 0U)
 8005bc6:	784b      	ldrb	r3, [r1, #1]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d14f      	bne.n	8005c6c <USB_DeactivateEndpoint+0x13c>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005bcc:	780a      	ldrb	r2, [r1, #0]
 8005bce:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005bd2:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8005bd6:	d00c      	beq.n	8005bf2 <USB_DeactivateEndpoint+0xc2>
 8005bd8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005bdc:	b29b      	uxth	r3, r3
 8005bde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005be2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005be6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005bea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bee:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005bf2:	780a      	ldrb	r2, [r1, #0]
 8005bf4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005bf8:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005bfc:	d00c      	beq.n	8005c18 <USB_DeactivateEndpoint+0xe8>
 8005bfe:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c10:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005c14:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8005c18:	780a      	ldrb	r2, [r1, #0]
 8005c1a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005c1e:	b29b      	uxth	r3, r3
 8005c20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c2c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005c30:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005c34:	780b      	ldrb	r3, [r1, #0]
 8005c36:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8005c3a:	b292      	uxth	r2, r2
 8005c3c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005c40:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005c44:	f248 0480 	movw	r4, #32896	; 0x8080
 8005c48:	4322      	orrs	r2, r4
 8005c4a:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005c4e:	780a      	ldrb	r2, [r1, #0]
 8005c50:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005c54:	b29b      	uxth	r3, r3
 8005c56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c5e:	4323      	orrs	r3, r4
 8005c60:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 8005c64:	2000      	movs	r0, #0
 8005c66:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005c6a:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005c6c:	780a      	ldrb	r2, [r1, #0]
 8005c6e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005c72:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8005c76:	d00c      	beq.n	8005c92 <USB_DeactivateEndpoint+0x162>
 8005c78:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005c7c:	b29b      	uxth	r3, r3
 8005c7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c86:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c8e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005c92:	780a      	ldrb	r2, [r1, #0]
 8005c94:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005c98:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005c9c:	d00c      	beq.n	8005cb8 <USB_DeactivateEndpoint+0x188>
 8005c9e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005ca2:	b29b      	uxth	r3, r3
 8005ca4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ca8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cb0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005cb4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8005cb8:	780a      	ldrb	r2, [r1, #0]
 8005cba:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005cbe:	b29b      	uxth	r3, r3
 8005cc0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cc8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005ccc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cd0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005cd4:	780b      	ldrb	r3, [r1, #0]
 8005cd6:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8005cda:	b292      	uxth	r2, r2
 8005cdc:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8005ce0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ce4:	f248 0480 	movw	r4, #32896	; 0x8080
 8005ce8:	4322      	orrs	r2, r4
 8005cea:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005cee:	780a      	ldrb	r2, [r1, #0]
 8005cf0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005cf4:	b29b      	uxth	r3, r3
 8005cf6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005cfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cfe:	4323      	orrs	r3, r4
 8005d00:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8005d04:	e7ae      	b.n	8005c64 <USB_DeactivateEndpoint+0x134>

08005d06 <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 8005d06:	784b      	ldrb	r3, [r1, #1]
 8005d08:	b18b      	cbz	r3, 8005d2e <USB_EPSetStall+0x28>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005d0a:	780a      	ldrb	r2, [r1, #0]
 8005d0c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005d10:	b29b      	uxth	r3, r3
 8005d12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d1a:	f083 0310 	eor.w	r3, r3, #16
 8005d1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d26:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
  }

  return HAL_OK;
}
 8005d2a:	2000      	movs	r0, #0
 8005d2c:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005d2e:	780a      	ldrb	r2, [r1, #0]
 8005d30:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005d34:	b29b      	uxth	r3, r3
 8005d36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d3e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005d42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d4a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8005d4e:	e7ec      	b.n	8005d2a <USB_EPSetStall+0x24>

08005d50 <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8005d50:	7b0b      	ldrb	r3, [r1, #12]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d14b      	bne.n	8005dee <USB_EPClearStall+0x9e>
  {
    if (ep->is_in != 0U)
 8005d56:	784b      	ldrb	r3, [r1, #1]
 8005d58:	b333      	cbz	r3, 8005da8 <USB_EPClearStall+0x58>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005d5a:	780a      	ldrb	r2, [r1, #0]
 8005d5c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005d60:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005d64:	d00c      	beq.n	8005d80 <USB_EPClearStall+0x30>
 8005d66:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005d6a:	b29b      	uxth	r3, r3
 8005d6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d78:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005d7c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8005d80:	78cb      	ldrb	r3, [r1, #3]
 8005d82:	2b01      	cmp	r3, #1
 8005d84:	d033      	beq.n	8005dee <USB_EPClearStall+0x9e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005d86:	780a      	ldrb	r2, [r1, #0]
 8005d88:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005d8c:	b29b      	uxth	r3, r3
 8005d8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d96:	f083 0320 	eor.w	r3, r3, #32
 8005d9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005da2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8005da6:	e022      	b.n	8005dee <USB_EPClearStall+0x9e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005da8:	780a      	ldrb	r2, [r1, #0]
 8005daa:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005dae:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8005db2:	d00c      	beq.n	8005dce <USB_EPClearStall+0x7e>
 8005db4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005db8:	b29b      	uxth	r3, r3
 8005dba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dc2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005dc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dca:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005dce:	780a      	ldrb	r2, [r1, #0]
 8005dd0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005dd4:	b29b      	uxth	r3, r3
 8005dd6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005dda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dde:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8005de2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005de6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dea:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 8005dee:	2000      	movs	r0, #0
 8005df0:	4770      	bx	lr

08005df2 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 8005df2:	b911      	cbnz	r1, 8005dfa <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8005df4:	2380      	movs	r3, #128	; 0x80
 8005df6:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }

  return HAL_OK;
}
 8005dfa:	2000      	movs	r0, #0
 8005dfc:	4770      	bx	lr

08005dfe <USB_DevConnect>:
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8005dfe:	f8b0 3058 	ldrh.w	r3, [r0, #88]	; 0x58
 8005e02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	f8a0 3058 	strh.w	r3, [r0, #88]	; 0x58

  return HAL_OK;
}
 8005e10:	2000      	movs	r0, #0
 8005e12:	4770      	bx	lr

08005e14 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005e14:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 8005e18:	b280      	uxth	r0, r0
 8005e1a:	4770      	bx	lr

08005e1c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005e1c:	b410      	push	{r4}
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005e1e:	1c5c      	adds	r4, r3, #1
 8005e20:	0864      	lsrs	r4, r4, #1
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005e22:	4402      	add	r2, r0
 8005e24:	f502 6280 	add.w	r2, r2, #1024	; 0x400

  for (i = n; i != 0U; i--)
 8005e28:	b144      	cbz	r4, 8005e3c <USB_WritePMA+0x20>
  {
    temp1 = *pBuf;
 8005e2a:	780b      	ldrb	r3, [r1, #0]
    pBuf++;
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8005e2c:	7848      	ldrb	r0, [r1, #1]
    *pdwVal = (uint16_t)temp2;
 8005e2e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8005e32:	f822 3b02 	strh.w	r3, [r2], #2

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8005e36:	3102      	adds	r1, #2
  for (i = n; i != 0U; i--)
 8005e38:	3c01      	subs	r4, #1
 8005e3a:	e7f5      	b.n	8005e28 <USB_WritePMA+0xc>
  }
}
 8005e3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005e40:	4770      	bx	lr

08005e42 <USB_EPStartXfer>:
{
 8005e42:	b570      	push	{r4, r5, r6, lr}
 8005e44:	4605      	mov	r5, r0
 8005e46:	460c      	mov	r4, r1
  if (ep->is_in == 1U)
 8005e48:	784b      	ldrb	r3, [r1, #1]
 8005e4a:	2b01      	cmp	r3, #1
 8005e4c:	d037      	beq.n	8005ebe <USB_EPStartXfer+0x7c>
    if (ep->doublebuffer == 0U)
 8005e4e:	7b0a      	ldrb	r2, [r1, #12]
 8005e50:	2a00      	cmp	r2, #0
 8005e52:	f040 8326 	bne.w	80064a2 <USB_EPStartXfer+0x660>
      if (ep->xfer_len > ep->maxpacket)
 8005e56:	698b      	ldr	r3, [r1, #24]
 8005e58:	690a      	ldr	r2, [r1, #16]
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	f240 8304 	bls.w	8006468 <USB_EPStartXfer+0x626>
        ep->xfer_len -= len;
 8005e60:	1a9b      	subs	r3, r3, r2
 8005e62:	618b      	str	r3, [r1, #24]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005e64:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8005e68:	fa15 f383 	uxtah	r3, r5, r3
 8005e6c:	7821      	ldrb	r1, [r4, #0]
 8005e6e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8005e72:	2a00      	cmp	r2, #0
 8005e74:	f040 82fc 	bne.w	8006470 <USB_EPStartXfer+0x62e>
 8005e78:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8005e7c:	b292      	uxth	r2, r2
 8005e7e:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8005e82:	b292      	uxth	r2, r2
 8005e84:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8005e88:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8005e8c:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8005e90:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8005e94:	b292      	uxth	r2, r2
 8005e96:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005e9a:	7822      	ldrb	r2, [r4, #0]
 8005e9c:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8005ea0:	b29b      	uxth	r3, r3
 8005ea2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ea6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eaa:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8005eae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005eb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005eb6:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
  return HAL_OK;
 8005eba:	2000      	movs	r0, #0
}
 8005ebc:	bd70      	pop	{r4, r5, r6, pc}
    if (ep->xfer_len > ep->maxpacket)
 8005ebe:	698e      	ldr	r6, [r1, #24]
 8005ec0:	690a      	ldr	r2, [r1, #16]
 8005ec2:	4296      	cmp	r6, r2
 8005ec4:	d900      	bls.n	8005ec8 <USB_EPStartXfer+0x86>
      len = ep->maxpacket;
 8005ec6:	4616      	mov	r6, r2
    if (ep->doublebuffer == 0U)
 8005ec8:	7b23      	ldrb	r3, [r4, #12]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d039      	beq.n	8005f42 <USB_EPStartXfer+0x100>
      if (ep->type == EP_TYPE_BULK)
 8005ece:	78e3      	ldrb	r3, [r4, #3]
 8005ed0:	2b02      	cmp	r3, #2
 8005ed2:	d058      	beq.n	8005f86 <USB_EPStartXfer+0x144>
        PCD_SET_EP_DBUF(USBx, ep->num);
 8005ed4:	7822      	ldrb	r2, [r4, #0]
 8005ed6:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8005eda:	b29b      	uxth	r3, r3
 8005edc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ee0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ee4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005ee8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005eec:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
        ep->xfer_len_db -= len;
 8005ef0:	6a23      	ldr	r3, [r4, #32]
 8005ef2:	1b9b      	subs	r3, r3, r6
 8005ef4:	6223      	str	r3, [r4, #32]
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005ef6:	7823      	ldrb	r3, [r4, #0]
 8005ef8:	f835 2023 	ldrh.w	r2, [r5, r3, lsl #2]
 8005efc:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005f00:	f000 8226 	beq.w	8006350 <USB_EPStartXfer+0x50e>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005f04:	7862      	ldrb	r2, [r4, #1]
 8005f06:	2a00      	cmp	r2, #0
 8005f08:	f040 81ca 	bne.w	80062a0 <USB_EPStartXfer+0x45e>
 8005f0c:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8005f10:	fa15 f282 	uxtah	r2, r5, r2
 8005f14:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005f18:	2e00      	cmp	r6, #0
 8005f1a:	f040 81a8 	bne.w	800626e <USB_EPStartXfer+0x42c>
 8005f1e:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8005f22:	b292      	uxth	r2, r2
 8005f24:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8005f28:	b292      	uxth	r2, r2
 8005f2a:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8005f2e:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8005f32:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8005f36:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8005f3a:	b292      	uxth	r2, r2
 8005f3c:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8005f40:	e1b0      	b.n	80062a4 <USB_EPStartXfer+0x462>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005f42:	b2b6      	uxth	r6, r6
 8005f44:	4633      	mov	r3, r6
 8005f46:	88e2      	ldrh	r2, [r4, #6]
 8005f48:	6961      	ldr	r1, [r4, #20]
 8005f4a:	4628      	mov	r0, r5
 8005f4c:	f7ff ff66 	bl	8005e1c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005f50:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8005f54:	fa15 f383 	uxtah	r3, r5, r3
 8005f58:	7822      	ldrb	r2, [r4, #0]
 8005f5a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005f5e:	f8a3 6402 	strh.w	r6, [r3, #1026]	; 0x402
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005f62:	7822      	ldrb	r2, [r4, #0]
 8005f64:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8005f68:	b29b      	uxth	r3, r3
 8005f6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f72:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8005f76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f7e:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
  return HAL_OK;
 8005f82:	2000      	movs	r0, #0
 8005f84:	e79a      	b.n	8005ebc <USB_EPStartXfer+0x7a>
        if (ep->xfer_len_db > ep->maxpacket)
 8005f86:	6a23      	ldr	r3, [r4, #32]
 8005f88:	429a      	cmp	r2, r3
 8005f8a:	f080 8152 	bcs.w	8006232 <USB_EPStartXfer+0x3f0>
          PCD_SET_EP_DBUF(USBx, ep->num);
 8005f8e:	7822      	ldrb	r2, [r4, #0]
 8005f90:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8005f94:	b29b      	uxth	r3, r3
 8005f96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f9e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005fa2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fa6:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
          ep->xfer_len_db -= len;
 8005faa:	6a23      	ldr	r3, [r4, #32]
 8005fac:	1b9b      	subs	r3, r3, r6
 8005fae:	6223      	str	r3, [r4, #32]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005fb0:	7823      	ldrb	r3, [r4, #0]
 8005fb2:	f835 2023 	ldrh.w	r2, [r5, r3, lsl #2]
 8005fb6:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005fba:	f000 809d 	beq.w	80060f8 <USB_EPStartXfer+0x2b6>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005fbe:	7862      	ldrb	r2, [r4, #1]
 8005fc0:	bb8a      	cbnz	r2, 8006026 <USB_EPStartXfer+0x1e4>
 8005fc2:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8005fc6:	fa15 f282 	uxtah	r2, r5, r2
 8005fca:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005fce:	b98e      	cbnz	r6, 8005ff4 <USB_EPStartXfer+0x1b2>
 8005fd0:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8005fd4:	b292      	uxth	r2, r2
 8005fd6:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8005fda:	b292      	uxth	r2, r2
 8005fdc:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8005fe0:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8005fe4:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8005fe8:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8005fec:	b292      	uxth	r2, r2
 8005fee:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8005ff2:	e01a      	b.n	800602a <USB_EPStartXfer+0x1e8>
 8005ff4:	2e3e      	cmp	r6, #62	; 0x3e
 8005ff6:	d809      	bhi.n	800600c <USB_EPStartXfer+0x1ca>
 8005ff8:	0872      	lsrs	r2, r6, #1
 8005ffa:	f016 0f01 	tst.w	r6, #1
 8005ffe:	d000      	beq.n	8006002 <USB_EPStartXfer+0x1c0>
 8006000:	3201      	adds	r2, #1
 8006002:	0292      	lsls	r2, r2, #10
 8006004:	b292      	uxth	r2, r2
 8006006:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800600a:	e00e      	b.n	800602a <USB_EPStartXfer+0x1e8>
 800600c:	0972      	lsrs	r2, r6, #5
 800600e:	f016 0f1f 	tst.w	r6, #31
 8006012:	d100      	bne.n	8006016 <USB_EPStartXfer+0x1d4>
 8006014:	3a01      	subs	r2, #1
 8006016:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 800601a:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800601e:	b292      	uxth	r2, r2
 8006020:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8006024:	e001      	b.n	800602a <USB_EPStartXfer+0x1e8>
 8006026:	2a01      	cmp	r2, #1
 8006028:	d02b      	beq.n	8006082 <USB_EPStartXfer+0x240>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800602a:	b2b3      	uxth	r3, r6
 800602c:	8962      	ldrh	r2, [r4, #10]
 800602e:	6961      	ldr	r1, [r4, #20]
 8006030:	4628      	mov	r0, r5
 8006032:	f7ff fef3 	bl	8005e1c <USB_WritePMA>
            ep->xfer_buff += len;
 8006036:	6963      	ldr	r3, [r4, #20]
 8006038:	4433      	add	r3, r6
 800603a:	6163      	str	r3, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 800603c:	6a23      	ldr	r3, [r4, #32]
 800603e:	6922      	ldr	r2, [r4, #16]
 8006040:	4293      	cmp	r3, r2
 8006042:	d928      	bls.n	8006096 <USB_EPStartXfer+0x254>
              ep->xfer_len_db -= len;
 8006044:	1b9b      	subs	r3, r3, r6
 8006046:	6223      	str	r3, [r4, #32]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006048:	7863      	ldrb	r3, [r4, #1]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d140      	bne.n	80060d0 <USB_EPStartXfer+0x28e>
 800604e:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8006052:	fa15 f383 	uxtah	r3, r5, r3
 8006056:	7822      	ldrb	r2, [r4, #0]
 8006058:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800605c:	b9fe      	cbnz	r6, 800609e <USB_EPStartXfer+0x25c>
 800605e:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 8006062:	b292      	uxth	r2, r2
 8006064:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8006068:	b292      	uxth	r2, r2
 800606a:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800606e:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 8006072:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8006076:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800607a:	b292      	uxth	r2, r2
 800607c:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8006080:	e028      	b.n	80060d4 <USB_EPStartXfer+0x292>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006082:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8006086:	fa15 f282 	uxtah	r2, r5, r2
 800608a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800608e:	b2b2      	uxth	r2, r6
 8006090:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8006094:	e7c9      	b.n	800602a <USB_EPStartXfer+0x1e8>
              ep->xfer_len_db = 0U;
 8006096:	2200      	movs	r2, #0
 8006098:	6222      	str	r2, [r4, #32]
              len = ep->xfer_len_db;
 800609a:	461e      	mov	r6, r3
 800609c:	e7d4      	b.n	8006048 <USB_EPStartXfer+0x206>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800609e:	2e3e      	cmp	r6, #62	; 0x3e
 80060a0:	d809      	bhi.n	80060b6 <USB_EPStartXfer+0x274>
 80060a2:	0872      	lsrs	r2, r6, #1
 80060a4:	f016 0f01 	tst.w	r6, #1
 80060a8:	d000      	beq.n	80060ac <USB_EPStartXfer+0x26a>
 80060aa:	3201      	adds	r2, #1
 80060ac:	0292      	lsls	r2, r2, #10
 80060ae:	b292      	uxth	r2, r2
 80060b0:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 80060b4:	e00e      	b.n	80060d4 <USB_EPStartXfer+0x292>
 80060b6:	0972      	lsrs	r2, r6, #5
 80060b8:	f016 0f1f 	tst.w	r6, #31
 80060bc:	d100      	bne.n	80060c0 <USB_EPStartXfer+0x27e>
 80060be:	3a01      	subs	r2, #1
 80060c0:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 80060c4:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80060c8:	b292      	uxth	r2, r2
 80060ca:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 80060ce:	e001      	b.n	80060d4 <USB_EPStartXfer+0x292>
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	d006      	beq.n	80060e2 <USB_EPStartXfer+0x2a0>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80060d4:	b2b3      	uxth	r3, r6
 80060d6:	8922      	ldrh	r2, [r4, #8]
 80060d8:	6961      	ldr	r1, [r4, #20]
 80060da:	4628      	mov	r0, r5
 80060dc:	f7ff fe9e 	bl	8005e1c <USB_WritePMA>
 80060e0:	e73f      	b.n	8005f62 <USB_EPStartXfer+0x120>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80060e2:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 80060e6:	fa15 f383 	uxtah	r3, r5, r3
 80060ea:	7822      	ldrb	r2, [r4, #0]
 80060ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80060f0:	b2b2      	uxth	r2, r6
 80060f2:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 80060f6:	e7ed      	b.n	80060d4 <USB_EPStartXfer+0x292>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80060f8:	7862      	ldrb	r2, [r4, #1]
 80060fa:	bb8a      	cbnz	r2, 8006160 <USB_EPStartXfer+0x31e>
 80060fc:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8006100:	fa15 f282 	uxtah	r2, r5, r2
 8006104:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006108:	b98e      	cbnz	r6, 800612e <USB_EPStartXfer+0x2ec>
 800610a:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 800610e:	b292      	uxth	r2, r2
 8006110:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8006114:	b292      	uxth	r2, r2
 8006116:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800611a:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 800611e:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8006122:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8006126:	b292      	uxth	r2, r2
 8006128:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800612c:	e01a      	b.n	8006164 <USB_EPStartXfer+0x322>
 800612e:	2e3e      	cmp	r6, #62	; 0x3e
 8006130:	d809      	bhi.n	8006146 <USB_EPStartXfer+0x304>
 8006132:	0872      	lsrs	r2, r6, #1
 8006134:	f016 0f01 	tst.w	r6, #1
 8006138:	d000      	beq.n	800613c <USB_EPStartXfer+0x2fa>
 800613a:	3201      	adds	r2, #1
 800613c:	0292      	lsls	r2, r2, #10
 800613e:	b292      	uxth	r2, r2
 8006140:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8006144:	e00e      	b.n	8006164 <USB_EPStartXfer+0x322>
 8006146:	0972      	lsrs	r2, r6, #5
 8006148:	f016 0f1f 	tst.w	r6, #31
 800614c:	d100      	bne.n	8006150 <USB_EPStartXfer+0x30e>
 800614e:	3a01      	subs	r2, #1
 8006150:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8006154:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8006158:	b292      	uxth	r2, r2
 800615a:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800615e:	e001      	b.n	8006164 <USB_EPStartXfer+0x322>
 8006160:	2a01      	cmp	r2, #1
 8006162:	d02b      	beq.n	80061bc <USB_EPStartXfer+0x37a>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006164:	b2b3      	uxth	r3, r6
 8006166:	8922      	ldrh	r2, [r4, #8]
 8006168:	6961      	ldr	r1, [r4, #20]
 800616a:	4628      	mov	r0, r5
 800616c:	f7ff fe56 	bl	8005e1c <USB_WritePMA>
            ep->xfer_buff += len;
 8006170:	6963      	ldr	r3, [r4, #20]
 8006172:	4433      	add	r3, r6
 8006174:	6163      	str	r3, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8006176:	6a23      	ldr	r3, [r4, #32]
 8006178:	6922      	ldr	r2, [r4, #16]
 800617a:	4293      	cmp	r3, r2
 800617c:	d928      	bls.n	80061d0 <USB_EPStartXfer+0x38e>
              ep->xfer_len_db -= len;
 800617e:	1b9b      	subs	r3, r3, r6
 8006180:	6223      	str	r3, [r4, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006182:	7863      	ldrb	r3, [r4, #1]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d140      	bne.n	800620a <USB_EPStartXfer+0x3c8>
 8006188:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 800618c:	fa15 f383 	uxtah	r3, r5, r3
 8006190:	7822      	ldrb	r2, [r4, #0]
 8006192:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006196:	b9fe      	cbnz	r6, 80061d8 <USB_EPStartXfer+0x396>
 8006198:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 800619c:	b292      	uxth	r2, r2
 800619e:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80061a2:	b292      	uxth	r2, r2
 80061a4:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 80061a8:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 80061ac:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80061b0:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80061b4:	b292      	uxth	r2, r2
 80061b6:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 80061ba:	e028      	b.n	800620e <USB_EPStartXfer+0x3cc>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80061bc:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 80061c0:	fa15 f282 	uxtah	r2, r5, r2
 80061c4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80061c8:	b2b2      	uxth	r2, r6
 80061ca:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 80061ce:	e7c9      	b.n	8006164 <USB_EPStartXfer+0x322>
              ep->xfer_len_db = 0U;
 80061d0:	2200      	movs	r2, #0
 80061d2:	6222      	str	r2, [r4, #32]
              len = ep->xfer_len_db;
 80061d4:	461e      	mov	r6, r3
 80061d6:	e7d4      	b.n	8006182 <USB_EPStartXfer+0x340>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80061d8:	2e3e      	cmp	r6, #62	; 0x3e
 80061da:	d809      	bhi.n	80061f0 <USB_EPStartXfer+0x3ae>
 80061dc:	0872      	lsrs	r2, r6, #1
 80061de:	f016 0f01 	tst.w	r6, #1
 80061e2:	d000      	beq.n	80061e6 <USB_EPStartXfer+0x3a4>
 80061e4:	3201      	adds	r2, #1
 80061e6:	0292      	lsls	r2, r2, #10
 80061e8:	b292      	uxth	r2, r2
 80061ea:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 80061ee:	e00e      	b.n	800620e <USB_EPStartXfer+0x3cc>
 80061f0:	0972      	lsrs	r2, r6, #5
 80061f2:	f016 0f1f 	tst.w	r6, #31
 80061f6:	d100      	bne.n	80061fa <USB_EPStartXfer+0x3b8>
 80061f8:	3a01      	subs	r2, #1
 80061fa:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 80061fe:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8006202:	b292      	uxth	r2, r2
 8006204:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8006208:	e001      	b.n	800620e <USB_EPStartXfer+0x3cc>
 800620a:	2b01      	cmp	r3, #1
 800620c:	d006      	beq.n	800621c <USB_EPStartXfer+0x3da>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800620e:	b2b3      	uxth	r3, r6
 8006210:	8962      	ldrh	r2, [r4, #10]
 8006212:	6961      	ldr	r1, [r4, #20]
 8006214:	4628      	mov	r0, r5
 8006216:	f7ff fe01 	bl	8005e1c <USB_WritePMA>
 800621a:	e6a2      	b.n	8005f62 <USB_EPStartXfer+0x120>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800621c:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8006220:	fa15 f383 	uxtah	r3, r5, r3
 8006224:	7822      	ldrb	r2, [r4, #0]
 8006226:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800622a:	b2b2      	uxth	r2, r6
 800622c:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8006230:	e7ed      	b.n	800620e <USB_EPStartXfer+0x3cc>
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8006232:	7821      	ldrb	r1, [r4, #0]
 8006234:	f835 2021 	ldrh.w	r2, [r5, r1, lsl #2]
 8006238:	b292      	uxth	r2, r2
 800623a:	f422 42e2 	bic.w	r2, r2, #28928	; 0x7100
 800623e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006242:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006246:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800624a:	f825 2021 	strh.w	r2, [r5, r1, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800624e:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8006252:	fa15 f282 	uxtah	r2, r5, r2
 8006256:	7821      	ldrb	r1, [r4, #0]
 8006258:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800625c:	b29b      	uxth	r3, r3
 800625e:	f8a2 3402 	strh.w	r3, [r2, #1026]	; 0x402
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006262:	8922      	ldrh	r2, [r4, #8]
 8006264:	6961      	ldr	r1, [r4, #20]
 8006266:	4628      	mov	r0, r5
 8006268:	f7ff fdd8 	bl	8005e1c <USB_WritePMA>
 800626c:	e679      	b.n	8005f62 <USB_EPStartXfer+0x120>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800626e:	2e3e      	cmp	r6, #62	; 0x3e
 8006270:	d809      	bhi.n	8006286 <USB_EPStartXfer+0x444>
 8006272:	0872      	lsrs	r2, r6, #1
 8006274:	f016 0f01 	tst.w	r6, #1
 8006278:	d000      	beq.n	800627c <USB_EPStartXfer+0x43a>
 800627a:	3201      	adds	r2, #1
 800627c:	0292      	lsls	r2, r2, #10
 800627e:	b292      	uxth	r2, r2
 8006280:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8006284:	e00e      	b.n	80062a4 <USB_EPStartXfer+0x462>
 8006286:	0972      	lsrs	r2, r6, #5
 8006288:	f016 0f1f 	tst.w	r6, #31
 800628c:	d100      	bne.n	8006290 <USB_EPStartXfer+0x44e>
 800628e:	3a01      	subs	r2, #1
 8006290:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8006294:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8006298:	b292      	uxth	r2, r2
 800629a:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800629e:	e001      	b.n	80062a4 <USB_EPStartXfer+0x462>
 80062a0:	2a01      	cmp	r2, #1
 80062a2:	d026      	beq.n	80062f2 <USB_EPStartXfer+0x4b0>
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80062a4:	b2b3      	uxth	r3, r6
 80062a6:	8962      	ldrh	r2, [r4, #10]
 80062a8:	6961      	ldr	r1, [r4, #20]
 80062aa:	4628      	mov	r0, r5
 80062ac:	f7ff fdb6 	bl	8005e1c <USB_WritePMA>
          ep->xfer_buff += len;
 80062b0:	6963      	ldr	r3, [r4, #20]
 80062b2:	4433      	add	r3, r6
 80062b4:	6163      	str	r3, [r4, #20]
          if (ep->xfer_len_db > ep->maxpacket)
 80062b6:	6a23      	ldr	r3, [r4, #32]
 80062b8:	6922      	ldr	r2, [r4, #16]
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d923      	bls.n	8006306 <USB_EPStartXfer+0x4c4>
            ep->xfer_len_db -= len;
 80062be:	1b9b      	subs	r3, r3, r6
 80062c0:	6223      	str	r3, [r4, #32]
          if (len > 0U)
 80062c2:	2e00      	cmp	r6, #0
 80062c4:	f43f ae4d 	beq.w	8005f62 <USB_EPStartXfer+0x120>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80062c8:	7863      	ldrb	r3, [r4, #1]
 80062ca:	bb6b      	cbnz	r3, 8006328 <USB_EPStartXfer+0x4e6>
 80062cc:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 80062d0:	fa15 f383 	uxtah	r3, r5, r3
 80062d4:	7822      	ldrb	r2, [r4, #0]
 80062d6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80062da:	2e3e      	cmp	r6, #62	; 0x3e
 80062dc:	d817      	bhi.n	800630e <USB_EPStartXfer+0x4cc>
 80062de:	0872      	lsrs	r2, r6, #1
 80062e0:	f016 0f01 	tst.w	r6, #1
 80062e4:	d000      	beq.n	80062e8 <USB_EPStartXfer+0x4a6>
 80062e6:	3201      	adds	r2, #1
 80062e8:	0292      	lsls	r2, r2, #10
 80062ea:	b292      	uxth	r2, r2
 80062ec:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 80062f0:	e01c      	b.n	800632c <USB_EPStartXfer+0x4ea>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80062f2:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 80062f6:	fa15 f282 	uxtah	r2, r5, r2
 80062fa:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80062fe:	b2b2      	uxth	r2, r6
 8006300:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8006304:	e7ce      	b.n	80062a4 <USB_EPStartXfer+0x462>
            ep->xfer_len_db = 0U;
 8006306:	2200      	movs	r2, #0
 8006308:	6222      	str	r2, [r4, #32]
            len = ep->xfer_len_db;
 800630a:	461e      	mov	r6, r3
 800630c:	e7d9      	b.n	80062c2 <USB_EPStartXfer+0x480>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800630e:	0972      	lsrs	r2, r6, #5
 8006310:	f016 0f1f 	tst.w	r6, #31
 8006314:	d100      	bne.n	8006318 <USB_EPStartXfer+0x4d6>
 8006316:	3a01      	subs	r2, #1
 8006318:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 800631c:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8006320:	b292      	uxth	r2, r2
 8006322:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8006326:	e001      	b.n	800632c <USB_EPStartXfer+0x4ea>
 8006328:	2b01      	cmp	r3, #1
 800632a:	d006      	beq.n	800633a <USB_EPStartXfer+0x4f8>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800632c:	b2b3      	uxth	r3, r6
 800632e:	8922      	ldrh	r2, [r4, #8]
 8006330:	6961      	ldr	r1, [r4, #20]
 8006332:	4628      	mov	r0, r5
 8006334:	f7ff fd72 	bl	8005e1c <USB_WritePMA>
 8006338:	e613      	b.n	8005f62 <USB_EPStartXfer+0x120>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800633a:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 800633e:	fa15 f383 	uxtah	r3, r5, r3
 8006342:	7822      	ldrb	r2, [r4, #0]
 8006344:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006348:	b2b2      	uxth	r2, r6
 800634a:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800634e:	e7ed      	b.n	800632c <USB_EPStartXfer+0x4ea>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006350:	7862      	ldrb	r2, [r4, #1]
 8006352:	bb8a      	cbnz	r2, 80063b8 <USB_EPStartXfer+0x576>
 8006354:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8006358:	fa15 f282 	uxtah	r2, r5, r2
 800635c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006360:	b98e      	cbnz	r6, 8006386 <USB_EPStartXfer+0x544>
 8006362:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 8006366:	b292      	uxth	r2, r2
 8006368:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800636c:	b292      	uxth	r2, r2
 800636e:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8006372:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 8006376:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800637a:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800637e:	b292      	uxth	r2, r2
 8006380:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8006384:	e01a      	b.n	80063bc <USB_EPStartXfer+0x57a>
 8006386:	2e3e      	cmp	r6, #62	; 0x3e
 8006388:	d809      	bhi.n	800639e <USB_EPStartXfer+0x55c>
 800638a:	0872      	lsrs	r2, r6, #1
 800638c:	f016 0f01 	tst.w	r6, #1
 8006390:	d000      	beq.n	8006394 <USB_EPStartXfer+0x552>
 8006392:	3201      	adds	r2, #1
 8006394:	0292      	lsls	r2, r2, #10
 8006396:	b292      	uxth	r2, r2
 8006398:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800639c:	e00e      	b.n	80063bc <USB_EPStartXfer+0x57a>
 800639e:	0972      	lsrs	r2, r6, #5
 80063a0:	f016 0f1f 	tst.w	r6, #31
 80063a4:	d100      	bne.n	80063a8 <USB_EPStartXfer+0x566>
 80063a6:	3a01      	subs	r2, #1
 80063a8:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 80063ac:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80063b0:	b292      	uxth	r2, r2
 80063b2:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 80063b6:	e001      	b.n	80063bc <USB_EPStartXfer+0x57a>
 80063b8:	2a01      	cmp	r2, #1
 80063ba:	d026      	beq.n	800640a <USB_EPStartXfer+0x5c8>
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80063bc:	b2b3      	uxth	r3, r6
 80063be:	8922      	ldrh	r2, [r4, #8]
 80063c0:	6961      	ldr	r1, [r4, #20]
 80063c2:	4628      	mov	r0, r5
 80063c4:	f7ff fd2a 	bl	8005e1c <USB_WritePMA>
          ep->xfer_buff += len;
 80063c8:	6963      	ldr	r3, [r4, #20]
 80063ca:	4433      	add	r3, r6
 80063cc:	6163      	str	r3, [r4, #20]
          if (ep->xfer_len_db > ep->maxpacket)
 80063ce:	6a23      	ldr	r3, [r4, #32]
 80063d0:	6922      	ldr	r2, [r4, #16]
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d923      	bls.n	800641e <USB_EPStartXfer+0x5dc>
            ep->xfer_len_db -= len;
 80063d6:	1b9b      	subs	r3, r3, r6
 80063d8:	6223      	str	r3, [r4, #32]
          if (len > 0U)
 80063da:	2e00      	cmp	r6, #0
 80063dc:	f43f adc1 	beq.w	8005f62 <USB_EPStartXfer+0x120>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80063e0:	7863      	ldrb	r3, [r4, #1]
 80063e2:	bb6b      	cbnz	r3, 8006440 <USB_EPStartXfer+0x5fe>
 80063e4:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 80063e8:	fa15 f383 	uxtah	r3, r5, r3
 80063ec:	7822      	ldrb	r2, [r4, #0]
 80063ee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80063f2:	2e3e      	cmp	r6, #62	; 0x3e
 80063f4:	d817      	bhi.n	8006426 <USB_EPStartXfer+0x5e4>
 80063f6:	0872      	lsrs	r2, r6, #1
 80063f8:	f016 0f01 	tst.w	r6, #1
 80063fc:	d000      	beq.n	8006400 <USB_EPStartXfer+0x5be>
 80063fe:	3201      	adds	r2, #1
 8006400:	0292      	lsls	r2, r2, #10
 8006402:	b292      	uxth	r2, r2
 8006404:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8006408:	e01c      	b.n	8006444 <USB_EPStartXfer+0x602>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800640a:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800640e:	fa15 f282 	uxtah	r2, r5, r2
 8006412:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006416:	b2b2      	uxth	r2, r6
 8006418:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800641c:	e7ce      	b.n	80063bc <USB_EPStartXfer+0x57a>
            ep->xfer_len_db = 0U;
 800641e:	2200      	movs	r2, #0
 8006420:	6222      	str	r2, [r4, #32]
            len = ep->xfer_len_db;
 8006422:	461e      	mov	r6, r3
 8006424:	e7d9      	b.n	80063da <USB_EPStartXfer+0x598>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006426:	0972      	lsrs	r2, r6, #5
 8006428:	f016 0f1f 	tst.w	r6, #31
 800642c:	d100      	bne.n	8006430 <USB_EPStartXfer+0x5ee>
 800642e:	3a01      	subs	r2, #1
 8006430:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8006434:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8006438:	b292      	uxth	r2, r2
 800643a:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800643e:	e001      	b.n	8006444 <USB_EPStartXfer+0x602>
 8006440:	2b01      	cmp	r3, #1
 8006442:	d006      	beq.n	8006452 <USB_EPStartXfer+0x610>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006444:	b2b3      	uxth	r3, r6
 8006446:	8962      	ldrh	r2, [r4, #10]
 8006448:	6961      	ldr	r1, [r4, #20]
 800644a:	4628      	mov	r0, r5
 800644c:	f7ff fce6 	bl	8005e1c <USB_WritePMA>
 8006450:	e587      	b.n	8005f62 <USB_EPStartXfer+0x120>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006452:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8006456:	fa15 f383 	uxtah	r3, r5, r3
 800645a:	7822      	ldrb	r2, [r4, #0]
 800645c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006460:	b2b2      	uxth	r2, r6
 8006462:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8006466:	e7ed      	b.n	8006444 <USB_EPStartXfer+0x602>
        ep->xfer_len = 0U;
 8006468:	2200      	movs	r2, #0
 800646a:	618a      	str	r2, [r1, #24]
        len = ep->xfer_len;
 800646c:	461a      	mov	r2, r3
 800646e:	e4f9      	b.n	8005e64 <USB_EPStartXfer+0x22>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006470:	2a3e      	cmp	r2, #62	; 0x3e
 8006472:	d809      	bhi.n	8006488 <USB_EPStartXfer+0x646>
 8006474:	0851      	lsrs	r1, r2, #1
 8006476:	f012 0f01 	tst.w	r2, #1
 800647a:	d000      	beq.n	800647e <USB_EPStartXfer+0x63c>
 800647c:	3101      	adds	r1, #1
 800647e:	0289      	lsls	r1, r1, #10
 8006480:	b289      	uxth	r1, r1
 8006482:	f8a3 1406 	strh.w	r1, [r3, #1030]	; 0x406
 8006486:	e508      	b.n	8005e9a <USB_EPStartXfer+0x58>
 8006488:	0951      	lsrs	r1, r2, #5
 800648a:	f012 0f1f 	tst.w	r2, #31
 800648e:	d100      	bne.n	8006492 <USB_EPStartXfer+0x650>
 8006490:	3901      	subs	r1, #1
 8006492:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 8006496:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 800649a:	b289      	uxth	r1, r1
 800649c:	f8a3 1406 	strh.w	r1, [r3, #1030]	; 0x406
 80064a0:	e4fb      	b.n	8005e9a <USB_EPStartXfer+0x58>
      if (ep->type == EP_TYPE_BULK)
 80064a2:	78ca      	ldrb	r2, [r1, #3]
 80064a4:	2a02      	cmp	r2, #2
 80064a6:	d045      	beq.n	8006534 <USB_EPStartXfer+0x6f2>
      else if (ep->type == EP_TYPE_ISOC)
 80064a8:	2a01      	cmp	r2, #1
 80064aa:	f040 8120 	bne.w	80066ee <USB_EPStartXfer+0x8ac>
        if (ep->xfer_len > ep->maxpacket)
 80064ae:	6989      	ldr	r1, [r1, #24]
 80064b0:	6922      	ldr	r2, [r4, #16]
 80064b2:	4291      	cmp	r1, r2
 80064b4:	f240 80d4 	bls.w	8006660 <USB_EPStartXfer+0x81e>
          ep->xfer_len -= len;
 80064b8:	1a89      	subs	r1, r1, r2
 80064ba:	61a1      	str	r1, [r4, #24]
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80064bc:	b9d3      	cbnz	r3, 80064f4 <USB_EPStartXfer+0x6b2>
 80064be:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 80064c2:	fa15 f383 	uxtah	r3, r5, r3
 80064c6:	7821      	ldrb	r1, [r4, #0]
 80064c8:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80064cc:	2a00      	cmp	r2, #0
 80064ce:	f040 80cb 	bne.w	8006668 <USB_EPStartXfer+0x826>
 80064d2:	f8b3 1402 	ldrh.w	r1, [r3, #1026]	; 0x402
 80064d6:	b289      	uxth	r1, r1
 80064d8:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 80064dc:	b289      	uxth	r1, r1
 80064de:	f8a3 1402 	strh.w	r1, [r3, #1026]	; 0x402
 80064e2:	f8b3 1402 	ldrh.w	r1, [r3, #1026]	; 0x402
 80064e6:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 80064ea:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80064ee:	b289      	uxth	r1, r1
 80064f0:	f8a3 1402 	strh.w	r1, [r3, #1026]	; 0x402
 80064f4:	7863      	ldrb	r3, [r4, #1]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	f040 80ea 	bne.w	80066d0 <USB_EPStartXfer+0x88e>
 80064fc:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8006500:	fa15 f383 	uxtah	r3, r5, r3
 8006504:	7821      	ldrb	r1, [r4, #0]
 8006506:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800650a:	2a00      	cmp	r2, #0
 800650c:	f040 80c5 	bne.w	800669a <USB_EPStartXfer+0x858>
 8006510:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8006514:	b292      	uxth	r2, r2
 8006516:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800651a:	b292      	uxth	r2, r2
 800651c:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8006520:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8006524:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8006528:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800652c:	b292      	uxth	r2, r2
 800652e:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8006532:	e4b2      	b.n	8005e9a <USB_EPStartXfer+0x58>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006534:	b9cb      	cbnz	r3, 800656a <USB_EPStartXfer+0x728>
 8006536:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800653a:	fa10 f383 	uxtah	r3, r0, r3
 800653e:	780a      	ldrb	r2, [r1, #0]
 8006540:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006544:	690a      	ldr	r2, [r1, #16]
 8006546:	bb72      	cbnz	r2, 80065a6 <USB_EPStartXfer+0x764>
 8006548:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 800654c:	b292      	uxth	r2, r2
 800654e:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8006552:	b292      	uxth	r2, r2
 8006554:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8006558:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 800655c:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8006560:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8006564:	b292      	uxth	r2, r2
 8006566:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800656a:	7863      	ldrb	r3, [r4, #1]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d14c      	bne.n	800660a <USB_EPStartXfer+0x7c8>
 8006570:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8006574:	fa15 f383 	uxtah	r3, r5, r3
 8006578:	7822      	ldrb	r2, [r4, #0]
 800657a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800657e:	6922      	ldr	r2, [r4, #16]
 8006580:	bb52      	cbnz	r2, 80065d8 <USB_EPStartXfer+0x796>
 8006582:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8006586:	b292      	uxth	r2, r2
 8006588:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800658c:	b292      	uxth	r2, r2
 800658e:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8006592:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8006596:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800659a:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800659e:	b292      	uxth	r2, r2
 80065a0:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 80065a4:	e033      	b.n	800660e <USB_EPStartXfer+0x7cc>
 80065a6:	2a3e      	cmp	r2, #62	; 0x3e
 80065a8:	d809      	bhi.n	80065be <USB_EPStartXfer+0x77c>
 80065aa:	0851      	lsrs	r1, r2, #1
 80065ac:	f012 0f01 	tst.w	r2, #1
 80065b0:	d000      	beq.n	80065b4 <USB_EPStartXfer+0x772>
 80065b2:	3101      	adds	r1, #1
 80065b4:	028a      	lsls	r2, r1, #10
 80065b6:	b292      	uxth	r2, r2
 80065b8:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 80065bc:	e7d5      	b.n	800656a <USB_EPStartXfer+0x728>
 80065be:	0951      	lsrs	r1, r2, #5
 80065c0:	f012 0f1f 	tst.w	r2, #31
 80065c4:	d100      	bne.n	80065c8 <USB_EPStartXfer+0x786>
 80065c6:	3901      	subs	r1, #1
 80065c8:	ea6f 62c1 	mvn.w	r2, r1, lsl #27
 80065cc:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80065d0:	b292      	uxth	r2, r2
 80065d2:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 80065d6:	e7c8      	b.n	800656a <USB_EPStartXfer+0x728>
 80065d8:	2a3e      	cmp	r2, #62	; 0x3e
 80065da:	d809      	bhi.n	80065f0 <USB_EPStartXfer+0x7ae>
 80065dc:	0851      	lsrs	r1, r2, #1
 80065de:	f012 0f01 	tst.w	r2, #1
 80065e2:	d000      	beq.n	80065e6 <USB_EPStartXfer+0x7a4>
 80065e4:	3101      	adds	r1, #1
 80065e6:	028a      	lsls	r2, r1, #10
 80065e8:	b292      	uxth	r2, r2
 80065ea:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 80065ee:	e00e      	b.n	800660e <USB_EPStartXfer+0x7cc>
 80065f0:	0951      	lsrs	r1, r2, #5
 80065f2:	f012 0f1f 	tst.w	r2, #31
 80065f6:	d100      	bne.n	80065fa <USB_EPStartXfer+0x7b8>
 80065f8:	3901      	subs	r1, #1
 80065fa:	ea6f 62c1 	mvn.w	r2, r1, lsl #27
 80065fe:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8006602:	b292      	uxth	r2, r2
 8006604:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8006608:	e001      	b.n	800660e <USB_EPStartXfer+0x7cc>
 800660a:	2b01      	cmp	r3, #1
 800660c:	d01d      	beq.n	800664a <USB_EPStartXfer+0x808>
        if (ep->xfer_count != 0U)
 800660e:	69e3      	ldr	r3, [r4, #28]
 8006610:	2b00      	cmp	r3, #0
 8006612:	f43f ac42 	beq.w	8005e9a <USB_EPStartXfer+0x58>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006616:	7822      	ldrb	r2, [r4, #0]
 8006618:	f835 1022 	ldrh.w	r1, [r5, r2, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800661c:	f244 0340 	movw	r3, #16448	; 0x4040
 8006620:	ea03 0001 	and.w	r0, r3, r1
 8006624:	438b      	bics	r3, r1
 8006626:	d002      	beq.n	800662e <USB_EPStartXfer+0x7ec>
 8006628:	2800      	cmp	r0, #0
 800662a:	f47f ac36 	bne.w	8005e9a <USB_EPStartXfer+0x58>
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800662e:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8006632:	b29b      	uxth	r3, r3
 8006634:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006638:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800663c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006640:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006644:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 8006648:	e427      	b.n	8005e9a <USB_EPStartXfer+0x58>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800664a:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 800664e:	fa15 f383 	uxtah	r3, r5, r3
 8006652:	7822      	ldrb	r2, [r4, #0]
 8006654:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006658:	8a22      	ldrh	r2, [r4, #16]
 800665a:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800665e:	e7d6      	b.n	800660e <USB_EPStartXfer+0x7cc>
          ep->xfer_len = 0U;
 8006660:	2200      	movs	r2, #0
 8006662:	61a2      	str	r2, [r4, #24]
          len = ep->xfer_len;
 8006664:	460a      	mov	r2, r1
 8006666:	e729      	b.n	80064bc <USB_EPStartXfer+0x67a>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006668:	2a3e      	cmp	r2, #62	; 0x3e
 800666a:	d809      	bhi.n	8006680 <USB_EPStartXfer+0x83e>
 800666c:	0851      	lsrs	r1, r2, #1
 800666e:	f012 0f01 	tst.w	r2, #1
 8006672:	d000      	beq.n	8006676 <USB_EPStartXfer+0x834>
 8006674:	3101      	adds	r1, #1
 8006676:	0289      	lsls	r1, r1, #10
 8006678:	b289      	uxth	r1, r1
 800667a:	f8a3 1402 	strh.w	r1, [r3, #1026]	; 0x402
 800667e:	e739      	b.n	80064f4 <USB_EPStartXfer+0x6b2>
 8006680:	0951      	lsrs	r1, r2, #5
 8006682:	f012 0f1f 	tst.w	r2, #31
 8006686:	d100      	bne.n	800668a <USB_EPStartXfer+0x848>
 8006688:	3901      	subs	r1, #1
 800668a:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 800668e:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8006692:	b289      	uxth	r1, r1
 8006694:	f8a3 1402 	strh.w	r1, [r3, #1026]	; 0x402
 8006698:	e72c      	b.n	80064f4 <USB_EPStartXfer+0x6b2>
 800669a:	2a3e      	cmp	r2, #62	; 0x3e
 800669c:	d80a      	bhi.n	80066b4 <USB_EPStartXfer+0x872>
 800669e:	0851      	lsrs	r1, r2, #1
 80066a0:	f012 0f01 	tst.w	r2, #1
 80066a4:	d000      	beq.n	80066a8 <USB_EPStartXfer+0x866>
 80066a6:	3101      	adds	r1, #1
 80066a8:	028a      	lsls	r2, r1, #10
 80066aa:	b292      	uxth	r2, r2
 80066ac:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 80066b0:	f7ff bbf3 	b.w	8005e9a <USB_EPStartXfer+0x58>
 80066b4:	0951      	lsrs	r1, r2, #5
 80066b6:	f012 0f1f 	tst.w	r2, #31
 80066ba:	d100      	bne.n	80066be <USB_EPStartXfer+0x87c>
 80066bc:	3901      	subs	r1, #1
 80066be:	ea6f 62c1 	mvn.w	r2, r1, lsl #27
 80066c2:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80066c6:	b292      	uxth	r2, r2
 80066c8:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 80066cc:	f7ff bbe5 	b.w	8005e9a <USB_EPStartXfer+0x58>
 80066d0:	2b01      	cmp	r3, #1
 80066d2:	f47f abe2 	bne.w	8005e9a <USB_EPStartXfer+0x58>
 80066d6:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 80066da:	fa15 f383 	uxtah	r3, r5, r3
 80066de:	7821      	ldrb	r1, [r4, #0]
 80066e0:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80066e4:	b292      	uxth	r2, r2
 80066e6:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 80066ea:	f7ff bbd6 	b.w	8005e9a <USB_EPStartXfer+0x58>
        return HAL_ERROR;
 80066ee:	2001      	movs	r0, #1
 80066f0:	f7ff bbe4 	b.w	8005ebc <USB_EPStartXfer+0x7a>

080066f4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80066f4:	b410      	push	{r4}
  uint32_t n = (uint32_t)wNBytes >> 1;
 80066f6:	085c      	lsrs	r4, r3, #1
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80066f8:	4410      	add	r0, r2
 80066fa:	f500 6080 	add.w	r0, r0, #1024	; 0x400

  for (i = n; i != 0U; i--)
 80066fe:	b144      	cbz	r4, 8006712 <USB_ReadPMA+0x1e>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006700:	f830 2b02 	ldrh.w	r2, [r0], #2
    pdwVal++;
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006704:	700a      	strb	r2, [r1, #0]
    pBuf++;
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006706:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800670a:	704a      	strb	r2, [r1, #1]
    pBuf++;
 800670c:	3102      	adds	r1, #2
  for (i = n; i != 0U; i--)
 800670e:	3c01      	subs	r4, #1
 8006710:	e7f5      	b.n	80066fe <USB_ReadPMA+0xa>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006712:	f013 0f01 	tst.w	r3, #1
 8006716:	d001      	beq.n	800671c <USB_ReadPMA+0x28>
  {
    temp = *pdwVal;
 8006718:	8803      	ldrh	r3, [r0, #0]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800671a:	700b      	strb	r3, [r1, #0]
  }
}
 800671c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006720:	4770      	bx	lr

08006722 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006722:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006724:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 8006728:	b184      	cbz	r4, 800674c <USBD_CDC_EP0_RxReady+0x2a>
  {
    return (uint8_t)USBD_FAIL;
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800672a:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 800672e:	b17b      	cbz	r3, 8006750 <USBD_CDC_EP0_RxReady+0x2e>
 8006730:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8006734:	28ff      	cmp	r0, #255	; 0xff
 8006736:	d00d      	beq.n	8006754 <USBD_CDC_EP0_RxReady+0x32>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006738:	689b      	ldr	r3, [r3, #8]
 800673a:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 800673e:	4621      	mov	r1, r4
 8006740:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8006742:	23ff      	movs	r3, #255	; 0xff
 8006744:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006748:	2000      	movs	r0, #0
}
 800674a:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 800674c:	2003      	movs	r0, #3
 800674e:	e7fc      	b.n	800674a <USBD_CDC_EP0_RxReady+0x28>
  return (uint8_t)USBD_OK;
 8006750:	2000      	movs	r0, #0
 8006752:	e7fa      	b.n	800674a <USBD_CDC_EP0_RxReady+0x28>
 8006754:	2000      	movs	r0, #0
 8006756:	e7f8      	b.n	800674a <USBD_CDC_EP0_RxReady+0x28>

08006758 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8006758:	2343      	movs	r3, #67	; 0x43
 800675a:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgFSDesc;
}
 800675c:	4800      	ldr	r0, [pc, #0]	; (8006760 <USBD_CDC_GetFSCfgDesc+0x8>)
 800675e:	4770      	bx	lr
 8006760:	20000044 	.word	0x20000044

08006764 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8006764:	2343      	movs	r3, #67	; 0x43
 8006766:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgHSDesc;
}
 8006768:	4800      	ldr	r0, [pc, #0]	; (800676c <USBD_CDC_GetHSCfgDesc+0x8>)
 800676a:	4770      	bx	lr
 800676c:	20000088 	.word	0x20000088

08006770 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006770:	2343      	movs	r3, #67	; 0x43
 8006772:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
}
 8006774:	4800      	ldr	r0, [pc, #0]	; (8006778 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8006776:	4770      	bx	lr
 8006778:	200000d8 	.word	0x200000d8

0800677c <USBD_CDC_GetDeviceQualifierDescriptor>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800677c:	230a      	movs	r3, #10
 800677e:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_DeviceQualifierDesc;
}
 8006780:	4800      	ldr	r0, [pc, #0]	; (8006784 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8006782:	4770      	bx	lr
 8006784:	200000cc 	.word	0x200000cc

08006788 <USBD_CDC_DataOut>:
{
 8006788:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800678a:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
  if (pdev->pClassData == NULL)
 800678e:	b175      	cbz	r5, 80067ae <USBD_CDC_DataOut+0x26>
 8006790:	4604      	mov	r4, r0
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006792:	f001 f8b7 	bl	8007904 <USBD_LL_GetRxDataSize>
 8006796:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800679a:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 800679e:	68db      	ldr	r3, [r3, #12]
 80067a0:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 80067a4:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 80067a8:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 80067aa:	2000      	movs	r0, #0
}
 80067ac:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 80067ae:	2003      	movs	r0, #3
 80067b0:	e7fc      	b.n	80067ac <USBD_CDC_DataOut+0x24>

080067b2 <USBD_CDC_DataIn>:
{
 80067b2:	b538      	push	{r3, r4, r5, lr}
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80067b4:	f8d0 42c4 	ldr.w	r4, [r0, #708]	; 0x2c4
  if (pdev->pClassData == NULL)
 80067b8:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 80067bc:	b353      	cbz	r3, 8006814 <USBD_CDC_DataIn+0x62>
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80067be:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 80067c2:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80067c6:	6992      	ldr	r2, [r2, #24]
 80067c8:	b14a      	cbz	r2, 80067de <USBD_CDC_DataIn+0x2c>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80067ca:	eb01 0581 	add.w	r5, r1, r1, lsl #2
 80067ce:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80067d2:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80067d4:	fbb2 f4f5 	udiv	r4, r2, r5
 80067d8:	fb05 2214 	mls	r2, r5, r4, r2
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80067dc:	b172      	cbz	r2, 80067fc <USBD_CDC_DataIn+0x4a>
    hcdc->TxState = 0U;
 80067de:	2200      	movs	r2, #0
 80067e0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80067e4:	f8d0 22c0 	ldr.w	r2, [r0, #704]	; 0x2c0
 80067e8:	6914      	ldr	r4, [r2, #16]
 80067ea:	b1ac      	cbz	r4, 8006818 <USBD_CDC_DataIn+0x66>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80067ec:	460a      	mov	r2, r1
 80067ee:	f503 7104 	add.w	r1, r3, #528	; 0x210
 80067f2:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
 80067f6:	47a0      	blx	r4
  return (uint8_t)USBD_OK;
 80067f8:	2000      	movs	r0, #0
}
 80067fa:	bd38      	pop	{r3, r4, r5, pc}
    pdev->ep_in[epnum].total_length = 0U;
 80067fc:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8006800:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8006804:	2400      	movs	r4, #0
 8006806:	619c      	str	r4, [r3, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006808:	4623      	mov	r3, r4
 800680a:	4622      	mov	r2, r4
 800680c:	f001 f86a 	bl	80078e4 <USBD_LL_Transmit>
  return (uint8_t)USBD_OK;
 8006810:	4620      	mov	r0, r4
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006812:	e7f2      	b.n	80067fa <USBD_CDC_DataIn+0x48>
    return (uint8_t)USBD_FAIL;
 8006814:	2003      	movs	r0, #3
 8006816:	e7f0      	b.n	80067fa <USBD_CDC_DataIn+0x48>
  return (uint8_t)USBD_OK;
 8006818:	2000      	movs	r0, #0
 800681a:	e7ee      	b.n	80067fa <USBD_CDC_DataIn+0x48>

0800681c <USBD_CDC_Setup>:
{
 800681c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800681e:	b083      	sub	sp, #12
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006820:	f8d0 62bc 	ldr.w	r6, [r0, #700]	; 0x2bc
  uint8_t ifalt = 0U;
 8006824:	2300      	movs	r3, #0
 8006826:	f88d 3007 	strb.w	r3, [sp, #7]
  uint16_t status_info = 0U;
 800682a:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (hcdc == NULL)
 800682e:	2e00      	cmp	r6, #0
 8006830:	d06c      	beq.n	800690c <USBD_CDC_Setup+0xf0>
 8006832:	4607      	mov	r7, r0
 8006834:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006836:	780b      	ldrb	r3, [r1, #0]
 8006838:	f013 0560 	ands.w	r5, r3, #96	; 0x60
 800683c:	d02a      	beq.n	8006894 <USBD_CDC_Setup+0x78>
 800683e:	2d20      	cmp	r5, #32
 8006840:	d15e      	bne.n	8006900 <USBD_CDC_Setup+0xe4>
      if (req->wLength != 0U)
 8006842:	88ca      	ldrh	r2, [r1, #6]
 8006844:	b1f2      	cbz	r2, 8006884 <USBD_CDC_Setup+0x68>
        if ((req->bmRequest & 0x80U) != 0U)
 8006846:	f013 0f80 	tst.w	r3, #128	; 0x80
 800684a:	d00f      	beq.n	800686c <USBD_CDC_Setup+0x50>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800684c:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 8006850:	689b      	ldr	r3, [r3, #8]
 8006852:	4631      	mov	r1, r6
 8006854:	7860      	ldrb	r0, [r4, #1]
 8006856:	4798      	blx	r3
          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006858:	88e2      	ldrh	r2, [r4, #6]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800685a:	2a07      	cmp	r2, #7
 800685c:	bf28      	it	cs
 800685e:	2207      	movcs	r2, #7
 8006860:	4631      	mov	r1, r6
 8006862:	4638      	mov	r0, r7
 8006864:	f000 fdec 	bl	8007440 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8006868:	2500      	movs	r5, #0
 800686a:	e04c      	b.n	8006906 <USBD_CDC_Setup+0xea>
          hcdc->CmdOpCode = req->bRequest;
 800686c:	784b      	ldrb	r3, [r1, #1]
 800686e:	f886 3200 	strb.w	r3, [r6, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006872:	798b      	ldrb	r3, [r1, #6]
 8006874:	f886 3201 	strb.w	r3, [r6, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006878:	88ca      	ldrh	r2, [r1, #6]
 800687a:	4631      	mov	r1, r6
 800687c:	f000 fdf5 	bl	800746a <USBD_CtlPrepareRx>
  USBD_StatusTypeDef ret = USBD_OK;
 8006880:	2500      	movs	r5, #0
 8006882:	e040      	b.n	8006906 <USBD_CDC_Setup+0xea>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006884:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 8006888:	689b      	ldr	r3, [r3, #8]
 800688a:	2200      	movs	r2, #0
 800688c:	7848      	ldrb	r0, [r1, #1]
 800688e:	4798      	blx	r3
  USBD_StatusTypeDef ret = USBD_OK;
 8006890:	2500      	movs	r5, #0
 8006892:	e038      	b.n	8006906 <USBD_CDC_Setup+0xea>
      switch (req->bRequest)
 8006894:	784e      	ldrb	r6, [r1, #1]
 8006896:	2e0b      	cmp	r6, #11
 8006898:	d82e      	bhi.n	80068f8 <USBD_CDC_Setup+0xdc>
 800689a:	e8df f006 	tbb	[pc, r6]
 800689e:	3406      	.short	0x3406
 80068a0:	2d2d2d2d 	.word	0x2d2d2d2d
 80068a4:	2d2d2d2d 	.word	0x2d2d2d2d
 80068a8:	2415      	.short	0x2415
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068aa:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80068ae:	b2db      	uxtb	r3, r3
 80068b0:	2b03      	cmp	r3, #3
 80068b2:	d003      	beq.n	80068bc <USBD_CDC_Setup+0xa0>
            USBD_CtlError(pdev, req);
 80068b4:	f000 fa8b 	bl	8006dce <USBD_CtlError>
            ret = USBD_FAIL;
 80068b8:	2503      	movs	r5, #3
 80068ba:	e024      	b.n	8006906 <USBD_CDC_Setup+0xea>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80068bc:	2202      	movs	r2, #2
 80068be:	a901      	add	r1, sp, #4
 80068c0:	f000 fdbe 	bl	8007440 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 80068c4:	4635      	mov	r5, r6
 80068c6:	e01e      	b.n	8006906 <USBD_CDC_Setup+0xea>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068c8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80068cc:	b2db      	uxtb	r3, r3
 80068ce:	2b03      	cmp	r3, #3
 80068d0:	d003      	beq.n	80068da <USBD_CDC_Setup+0xbe>
            USBD_CtlError(pdev, req);
 80068d2:	f000 fa7c 	bl	8006dce <USBD_CtlError>
            ret = USBD_FAIL;
 80068d6:	2503      	movs	r5, #3
 80068d8:	e015      	b.n	8006906 <USBD_CDC_Setup+0xea>
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80068da:	2201      	movs	r2, #1
 80068dc:	f10d 0107 	add.w	r1, sp, #7
 80068e0:	f000 fdae 	bl	8007440 <USBD_CtlSendData>
 80068e4:	e00f      	b.n	8006906 <USBD_CDC_Setup+0xea>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80068e6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80068ea:	b2db      	uxtb	r3, r3
 80068ec:	2b03      	cmp	r3, #3
 80068ee:	d00a      	beq.n	8006906 <USBD_CDC_Setup+0xea>
            USBD_CtlError(pdev, req);
 80068f0:	f000 fa6d 	bl	8006dce <USBD_CtlError>
            ret = USBD_FAIL;
 80068f4:	2503      	movs	r5, #3
 80068f6:	e006      	b.n	8006906 <USBD_CDC_Setup+0xea>
          USBD_CtlError(pdev, req);
 80068f8:	f000 fa69 	bl	8006dce <USBD_CtlError>
          ret = USBD_FAIL;
 80068fc:	2503      	movs	r5, #3
          break;
 80068fe:	e002      	b.n	8006906 <USBD_CDC_Setup+0xea>
      USBD_CtlError(pdev, req);
 8006900:	f000 fa65 	bl	8006dce <USBD_CtlError>
      ret = USBD_FAIL;
 8006904:	2503      	movs	r5, #3
}
 8006906:	4628      	mov	r0, r5
 8006908:	b003      	add	sp, #12
 800690a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (uint8_t)USBD_FAIL;
 800690c:	2503      	movs	r5, #3
 800690e:	e7fa      	b.n	8006906 <USBD_CDC_Setup+0xea>

08006910 <USBD_CDC_DeInit>:
{
 8006910:	b538      	push	{r3, r4, r5, lr}
 8006912:	4604      	mov	r4, r0
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006914:	2181      	movs	r1, #129	; 0x81
 8006916:	f000 ffae 	bl	8007876 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800691a:	2500      	movs	r5, #0
 800691c:	8725      	strh	r5, [r4, #56]	; 0x38
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800691e:	2101      	movs	r1, #1
 8006920:	4620      	mov	r0, r4
 8006922:	f000 ffa8 	bl	8007876 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006926:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800692a:	2182      	movs	r1, #130	; 0x82
 800692c:	4620      	mov	r0, r4
 800692e:	f000 ffa2 	bl	8007876 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006932:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8006936:	f8a4 504e 	strh.w	r5, [r4, #78]	; 0x4e
  if (pdev->pClassData != NULL)
 800693a:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 800693e:	b14b      	cbz	r3, 8006954 <USBD_CDC_DeInit+0x44>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006940:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 8006944:	685b      	ldr	r3, [r3, #4]
 8006946:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8006948:	f8d4 02bc 	ldr.w	r0, [r4, #700]	; 0x2bc
 800694c:	f001 f808 	bl	8007960 <USBD_static_free>
    pdev->pClassData = NULL;
 8006950:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
}
 8006954:	2000      	movs	r0, #0
 8006956:	bd38      	pop	{r3, r4, r5, pc}

08006958 <USBD_CDC_Init>:
{
 8006958:	b570      	push	{r4, r5, r6, lr}
 800695a:	4604      	mov	r4, r0
  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800695c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006960:	f000 fffa 	bl	8007958 <USBD_static_malloc>
  if (hcdc == NULL)
 8006964:	b3b8      	cbz	r0, 80069d6 <USBD_CDC_Init+0x7e>
 8006966:	4606      	mov	r6, r0
  pdev->pClassData = (void *)hcdc;
 8006968:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800696c:	7c23      	ldrb	r3, [r4, #16]
 800696e:	bbbb      	cbnz	r3, 80069e0 <USBD_CDC_Init+0x88>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006970:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006974:	2202      	movs	r2, #2
 8006976:	2181      	movs	r1, #129	; 0x81
 8006978:	4620      	mov	r0, r4
 800697a:	f000 ff71 	bl	8007860 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800697e:	2501      	movs	r5, #1
 8006980:	8725      	strh	r5, [r4, #56]	; 0x38
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006982:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006986:	2202      	movs	r2, #2
 8006988:	4629      	mov	r1, r5
 800698a:	4620      	mov	r0, r4
 800698c:	f000 ff68 	bl	8007860 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006990:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006994:	2310      	movs	r3, #16
 8006996:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800699a:	2308      	movs	r3, #8
 800699c:	2203      	movs	r2, #3
 800699e:	2182      	movs	r1, #130	; 0x82
 80069a0:	4620      	mov	r0, r4
 80069a2:	f000 ff5d 	bl	8007860 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80069a6:	2301      	movs	r3, #1
 80069a8:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80069ac:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4798      	blx	r3
  hcdc->TxState = 0U;
 80069b4:	2300      	movs	r3, #0
 80069b6:	f8c6 3214 	str.w	r3, [r6, #532]	; 0x214
  hcdc->RxState = 0U;
 80069ba:	f8c6 3218 	str.w	r3, [r6, #536]	; 0x218
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80069be:	7c25      	ldrb	r5, [r4, #16]
 80069c0:	bb15      	cbnz	r5, 8006a08 <USBD_CDC_Init+0xb0>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80069c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80069c6:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 80069ca:	2101      	movs	r1, #1
 80069cc:	4620      	mov	r0, r4
 80069ce:	f000 ff91 	bl	80078f4 <USBD_LL_PrepareReceive>
}
 80069d2:	4628      	mov	r0, r5
 80069d4:	bd70      	pop	{r4, r5, r6, pc}
    pdev->pClassData = NULL;
 80069d6:	2300      	movs	r3, #0
 80069d8:	f8c4 32bc 	str.w	r3, [r4, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80069dc:	2502      	movs	r5, #2
 80069de:	e7f8      	b.n	80069d2 <USBD_CDC_Init+0x7a>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80069e0:	2340      	movs	r3, #64	; 0x40
 80069e2:	2202      	movs	r2, #2
 80069e4:	2181      	movs	r1, #129	; 0x81
 80069e6:	4620      	mov	r0, r4
 80069e8:	f000 ff3a 	bl	8007860 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80069ec:	2501      	movs	r5, #1
 80069ee:	8725      	strh	r5, [r4, #56]	; 0x38
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80069f0:	2340      	movs	r3, #64	; 0x40
 80069f2:	2202      	movs	r2, #2
 80069f4:	4629      	mov	r1, r5
 80069f6:	4620      	mov	r0, r4
 80069f8:	f000 ff32 	bl	8007860 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80069fc:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006a00:	2310      	movs	r3, #16
 8006a02:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 8006a06:	e7c8      	b.n	800699a <USBD_CDC_Init+0x42>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006a08:	2340      	movs	r3, #64	; 0x40
 8006a0a:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 8006a0e:	2101      	movs	r1, #1
 8006a10:	4620      	mov	r0, r4
 8006a12:	f000 ff6f 	bl	80078f4 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 8006a16:	2500      	movs	r5, #0
 8006a18:	e7db      	b.n	80069d2 <USBD_CDC_Init+0x7a>

08006a1a <USBD_CDC_RegisterInterface>:
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
  if (fops == NULL)
 8006a1a:	b119      	cbz	r1, 8006a24 <USBD_CDC_RegisterInterface+0xa>
  {
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData = fops;
 8006a1c:	f8c0 12c0 	str.w	r1, [r0, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8006a20:	2000      	movs	r0, #0
 8006a22:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8006a24:	2003      	movs	r0, #3
}
 8006a26:	4770      	bx	lr

08006a28 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006a28:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 8006a2c:	b12b      	cbz	r3, 8006a3a <USBD_CDC_SetTxBuffer+0x12>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->TxBuffer = pbuff;
 8006a2e:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006a32:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006a36:	2000      	movs	r0, #0
 8006a38:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8006a3a:	2003      	movs	r0, #3
}
 8006a3c:	4770      	bx	lr

08006a3e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006a3e:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 8006a42:	b11b      	cbz	r3, 8006a4c <USBD_CDC_SetRxBuffer+0xe>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->RxBuffer = pbuff;
 8006a44:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006a48:	2000      	movs	r0, #0
 8006a4a:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8006a4c:	2003      	movs	r0, #3
}
 8006a4e:	4770      	bx	lr

08006a50 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006a50:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
  USBD_StatusTypeDef ret = USBD_BUSY;

  if (pdev->pClassData == NULL)
 8006a54:	b1a2      	cbz	r2, 8006a80 <USBD_CDC_TransmitPacket+0x30>
{
 8006a56:	b508      	push	{r3, lr}
  {
    return (uint8_t)USBD_FAIL;
  }

  if (hcdc->TxState == 0U)
 8006a58:	f8d2 3214 	ldr.w	r3, [r2, #532]	; 0x214
 8006a5c:	b10b      	cbz	r3, 8006a62 <USBD_CDC_TransmitPacket+0x12>
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006a5e:	2001      	movs	r0, #1

    ret = USBD_OK;
  }

  return (uint8_t)ret;
}
 8006a60:	bd08      	pop	{r3, pc}
    hcdc->TxState = 1U;
 8006a62:	2301      	movs	r3, #1
 8006a64:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006a68:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
 8006a6c:	62c3      	str	r3, [r0, #44]	; 0x2c
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8006a6e:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
 8006a72:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 8006a76:	2181      	movs	r1, #129	; 0x81
 8006a78:	f000 ff34 	bl	80078e4 <USBD_LL_Transmit>
    ret = USBD_OK;
 8006a7c:	2000      	movs	r0, #0
 8006a7e:	e7ef      	b.n	8006a60 <USBD_CDC_TransmitPacket+0x10>
    return (uint8_t)USBD_FAIL;
 8006a80:	2003      	movs	r0, #3
}
 8006a82:	4770      	bx	lr

08006a84 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006a84:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006a86:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc

  if (pdev->pClassData == NULL)
 8006a8a:	b192      	cbz	r2, 8006ab2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a8c:	7c04      	ldrb	r4, [r0, #16]
 8006a8e:	b944      	cbnz	r4, 8006aa2 <USBD_CDC_ReceivePacket+0x1e>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006a90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a94:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8006a98:	2101      	movs	r1, #1
 8006a9a:	f000 ff2b 	bl	80078f4 <USBD_LL_PrepareReceive>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
}
 8006a9e:	4620      	mov	r0, r4
 8006aa0:	bd10      	pop	{r4, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006aa2:	2340      	movs	r3, #64	; 0x40
 8006aa4:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8006aa8:	2101      	movs	r1, #1
 8006aaa:	f000 ff23 	bl	80078f4 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 8006aae:	2400      	movs	r4, #0
 8006ab0:	e7f5      	b.n	8006a9e <USBD_CDC_ReceivePacket+0x1a>
    return (uint8_t)USBD_FAIL;
 8006ab2:	2403      	movs	r4, #3
 8006ab4:	e7f3      	b.n	8006a9e <USBD_CDC_ReceivePacket+0x1a>

08006ab6 <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006ab6:	b198      	cbz	r0, 8006ae0 <USBD_Init+0x2a>
{
 8006ab8:	b508      	push	{r3, lr}
 8006aba:	4603      	mov	r3, r0
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8006abc:	2000      	movs	r0, #0
 8006abe:	f8c3 02b8 	str.w	r0, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8006ac2:	f8c3 02c0 	str.w	r0, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8006ac6:	f8c3 02cc 	str.w	r0, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006aca:	b109      	cbz	r1, 8006ad0 <USBD_Init+0x1a>
  {
    pdev->pDesc = pdesc;
 8006acc:	f8c3 12b4 	str.w	r1, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006ad0:	2101      	movs	r1, #1
 8006ad2:	f883 129c 	strb.w	r1, [r3, #668]	; 0x29c
  pdev->id = id;
 8006ad6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f000 fe75 	bl	80077c8 <USBD_LL_Init>

  return ret;
}
 8006ade:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8006ae0:	2003      	movs	r0, #3
}
 8006ae2:	4770      	bx	lr

08006ae4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006ae4:	b510      	push	{r4, lr}
 8006ae6:	b082      	sub	sp, #8
  uint16_t len = 0U;
 8006ae8:	2300      	movs	r3, #0
 8006aea:	f8ad 3006 	strh.w	r3, [sp, #6]

  if (pclass == NULL)
 8006aee:	b161      	cbz	r1, 8006b0a <USBD_RegisterClass+0x26>
 8006af0:	4604      	mov	r4, r0
#endif
    return USBD_FAIL;
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006af2:	f8c0 12b8 	str.w	r1, [r0, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8006af6:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8006af8:	b14b      	cbz	r3, 8006b0e <USBD_RegisterClass+0x2a>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006afa:	f10d 0006 	add.w	r0, sp, #6
 8006afe:	4798      	blx	r3
 8006b00:	f8c4 02cc 	str.w	r0, [r4, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8006b04:	2000      	movs	r0, #0
}
 8006b06:	b002      	add	sp, #8
 8006b08:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 8006b0a:	2003      	movs	r0, #3
 8006b0c:	e7fb      	b.n	8006b06 <USBD_RegisterClass+0x22>
  return USBD_OK;
 8006b0e:	2000      	movs	r0, #0
 8006b10:	e7f9      	b.n	8006b06 <USBD_RegisterClass+0x22>

08006b12 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006b12:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006b14:	f000 fe9c 	bl	8007850 <USBD_LL_Start>
}
 8006b18:	bd08      	pop	{r3, pc}

08006b1a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006b1a:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8006b1c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8006b20:	b113      	cbz	r3, 8006b28 <USBD_SetClassConfig+0xe>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4798      	blx	r3
  }

  return ret;
}
 8006b26:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006b28:	2003      	movs	r0, #3
 8006b2a:	e7fc      	b.n	8006b26 <USBD_SetClassConfig+0xc>

08006b2c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006b2c:	b508      	push	{r3, lr}
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006b2e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8006b32:	b10b      	cbz	r3, 8006b38 <USBD_ClrClassConfig+0xc>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8006b34:	685b      	ldr	r3, [r3, #4]
 8006b36:	4798      	blx	r3
  }

  return USBD_OK;
}
 8006b38:	2000      	movs	r0, #0
 8006b3a:	bd08      	pop	{r3, pc}

08006b3c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006b3c:	b538      	push	{r3, r4, r5, lr}
 8006b3e:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006b40:	f200 25aa 	addw	r5, r0, #682	; 0x2aa
 8006b44:	4628      	mov	r0, r5
 8006b46:	f000 f92e 	bl	8006da6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006b50:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	; 0x2b0
 8006b54:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006b58:	f894 12aa 	ldrb.w	r1, [r4, #682]	; 0x2aa
 8006b5c:	f001 031f 	and.w	r3, r1, #31
 8006b60:	2b01      	cmp	r3, #1
 8006b62:	d00d      	beq.n	8006b80 <USBD_LL_SetupStage+0x44>
 8006b64:	2b02      	cmp	r3, #2
 8006b66:	d010      	beq.n	8006b8a <USBD_LL_SetupStage+0x4e>
 8006b68:	b12b      	cbz	r3, 8006b76 <USBD_LL_SetupStage+0x3a>
    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006b6a:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8006b6e:	4620      	mov	r0, r4
 8006b70:	f000 fe89 	bl	8007886 <USBD_LL_StallEP>
      break;
 8006b74:	e003      	b.n	8006b7e <USBD_LL_SetupStage+0x42>
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006b76:	4629      	mov	r1, r5
 8006b78:	4620      	mov	r0, r4
 8006b7a:	f000 fae4 	bl	8007146 <USBD_StdDevReq>
  }

  return ret;
}
 8006b7e:	bd38      	pop	{r3, r4, r5, pc}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006b80:	4629      	mov	r1, r5
 8006b82:	4620      	mov	r0, r4
 8006b84:	f000 fb17 	bl	80071b6 <USBD_StdItfReq>
      break;
 8006b88:	e7f9      	b.n	8006b7e <USBD_LL_SetupStage+0x42>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006b8a:	4629      	mov	r1, r5
 8006b8c:	4620      	mov	r0, r4
 8006b8e:	f000 fb46 	bl	800721e <USBD_StdEPReq>
      break;
 8006b92:	e7f4      	b.n	8006b7e <USBD_LL_SetupStage+0x42>

08006b94 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006b94:	b538      	push	{r3, r4, r5, lr}
 8006b96:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006b98:	460d      	mov	r5, r1
 8006b9a:	bb41      	cbnz	r1, 8006bee <USBD_LL_DataOutStage+0x5a>
 8006b9c:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006b9e:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8006ba2:	2a03      	cmp	r2, #3
 8006ba4:	d001      	beq.n	8006baa <USBD_LL_DataOutStage+0x16>
        }
      }
    }
  }

  return USBD_OK;
 8006ba6:	4608      	mov	r0, r1
}
 8006ba8:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 8006baa:	f8d0 115c 	ldr.w	r1, [r0, #348]	; 0x15c
 8006bae:	f8d0 2160 	ldr.w	r2, [r0, #352]	; 0x160
 8006bb2:	4291      	cmp	r1, r2
 8006bb4:	d809      	bhi.n	8006bca <USBD_LL_DataOutStage+0x36>
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bb6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006bba:	b2db      	uxtb	r3, r3
 8006bbc:	2b03      	cmp	r3, #3
 8006bbe:	d00f      	beq.n	8006be0 <USBD_LL_DataOutStage+0x4c>
        (void)USBD_CtlSendStatus(pdev);
 8006bc0:	4620      	mov	r0, r4
 8006bc2:	f000 fc69 	bl	8007498 <USBD_CtlSendStatus>
  return USBD_OK;
 8006bc6:	4628      	mov	r0, r5
 8006bc8:	e7ee      	b.n	8006ba8 <USBD_LL_DataOutStage+0x14>
        pep->rem_length -= pep->maxpacket;
 8006bca:	1a89      	subs	r1, r1, r2
 8006bcc:	f8c0 115c 	str.w	r1, [r0, #348]	; 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006bd0:	428a      	cmp	r2, r1
 8006bd2:	bf28      	it	cs
 8006bd4:	460a      	movcs	r2, r1
 8006bd6:	4619      	mov	r1, r3
 8006bd8:	f000 fc56 	bl	8007488 <USBD_CtlContinueRx>
  return USBD_OK;
 8006bdc:	4628      	mov	r0, r5
 8006bde:	e7e3      	b.n	8006ba8 <USBD_LL_DataOutStage+0x14>
          if (pdev->pClass->EP0_RxReady != NULL)
 8006be0:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8006be4:	691b      	ldr	r3, [r3, #16]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d0ea      	beq.n	8006bc0 <USBD_LL_DataOutStage+0x2c>
            pdev->pClass->EP0_RxReady(pdev);
 8006bea:	4798      	blx	r3
 8006bec:	e7e8      	b.n	8006bc0 <USBD_LL_DataOutStage+0x2c>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bee:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006bf2:	b2db      	uxtb	r3, r3
 8006bf4:	2b03      	cmp	r3, #3
 8006bf6:	d001      	beq.n	8006bfc <USBD_LL_DataOutStage+0x68>
  return USBD_OK;
 8006bf8:	2000      	movs	r0, #0
 8006bfa:	e7d5      	b.n	8006ba8 <USBD_LL_DataOutStage+0x14>
      if (pdev->pClass->DataOut != NULL)
 8006bfc:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8006c00:	699b      	ldr	r3, [r3, #24]
 8006c02:	b10b      	cbz	r3, 8006c08 <USBD_LL_DataOutStage+0x74>
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006c04:	4798      	blx	r3
        if (ret != USBD_OK)
 8006c06:	e7cf      	b.n	8006ba8 <USBD_LL_DataOutStage+0x14>
  return USBD_OK;
 8006c08:	2000      	movs	r0, #0
 8006c0a:	e7cd      	b.n	8006ba8 <USBD_LL_DataOutStage+0x14>

08006c0c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006c0c:	b538      	push	{r3, r4, r5, lr}
 8006c0e:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006c10:	460d      	mov	r5, r1
 8006c12:	2900      	cmp	r1, #0
 8006c14:	d14a      	bne.n	8006cac <USBD_LL_DataInStage+0xa0>
 8006c16:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006c18:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8006c1c:	2a02      	cmp	r2, #2
 8006c1e:	d005      	beq.n	8006c2c <USBD_LL_DataInStage+0x20>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006c20:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8006c24:	2b01      	cmp	r3, #1
 8006c26:	d03c      	beq.n	8006ca2 <USBD_LL_DataInStage+0x96>
        }
      }
    }
  }

  return USBD_OK;
 8006c28:	4628      	mov	r0, r5
}
 8006c2a:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 8006c2c:	69c2      	ldr	r2, [r0, #28]
 8006c2e:	6a01      	ldr	r1, [r0, #32]
 8006c30:	428a      	cmp	r2, r1
 8006c32:	d80e      	bhi.n	8006c52 <USBD_LL_DataInStage+0x46>
        if ((pep->maxpacket == pep->rem_length) &&
 8006c34:	428a      	cmp	r2, r1
 8006c36:	d018      	beq.n	8006c6a <USBD_LL_DataInStage+0x5e>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c38:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8006c3c:	b2db      	uxtb	r3, r3
 8006c3e:	2b03      	cmp	r3, #3
 8006c40:	d027      	beq.n	8006c92 <USBD_LL_DataInStage+0x86>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006c42:	2180      	movs	r1, #128	; 0x80
 8006c44:	4620      	mov	r0, r4
 8006c46:	f000 fe1e 	bl	8007886 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006c4a:	4620      	mov	r0, r4
 8006c4c:	f000 fc2f 	bl	80074ae <USBD_CtlReceiveStatus>
 8006c50:	e7e6      	b.n	8006c20 <USBD_LL_DataInStage+0x14>
        pep->rem_length -= pep->maxpacket;
 8006c52:	1a52      	subs	r2, r2, r1
 8006c54:	61c2      	str	r2, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006c56:	4619      	mov	r1, r3
 8006c58:	f000 fbff 	bl	800745a <USBD_CtlContinueSendData>
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	461a      	mov	r2, r3
 8006c60:	4619      	mov	r1, r3
 8006c62:	4620      	mov	r0, r4
 8006c64:	f000 fe46 	bl	80078f4 <USBD_LL_PrepareReceive>
 8006c68:	e7da      	b.n	8006c20 <USBD_LL_DataInStage+0x14>
            (pep->total_length >= pep->maxpacket) &&
 8006c6a:	6983      	ldr	r3, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 8006c6c:	4299      	cmp	r1, r3
 8006c6e:	d8e3      	bhi.n	8006c38 <USBD_LL_DataInStage+0x2c>
            (pep->total_length < pdev->ep0_data_len))
 8006c70:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d2df      	bcs.n	8006c38 <USBD_LL_DataInStage+0x2c>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006c78:	2200      	movs	r2, #0
 8006c7a:	4611      	mov	r1, r2
 8006c7c:	f000 fbed 	bl	800745a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006c80:	2100      	movs	r1, #0
 8006c82:	f8c4 1298 	str.w	r1, [r4, #664]	; 0x298
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006c86:	460b      	mov	r3, r1
 8006c88:	460a      	mov	r2, r1
 8006c8a:	4620      	mov	r0, r4
 8006c8c:	f000 fe32 	bl	80078f4 <USBD_LL_PrepareReceive>
 8006c90:	e7c6      	b.n	8006c20 <USBD_LL_DataInStage+0x14>
            if (pdev->pClass->EP0_TxSent != NULL)
 8006c92:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8006c96:	68db      	ldr	r3, [r3, #12]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d0d2      	beq.n	8006c42 <USBD_LL_DataInStage+0x36>
              pdev->pClass->EP0_TxSent(pdev);
 8006c9c:	4620      	mov	r0, r4
 8006c9e:	4798      	blx	r3
 8006ca0:	e7cf      	b.n	8006c42 <USBD_LL_DataInStage+0x36>
      pdev->dev_test_mode = 0U;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
  return USBD_OK;
 8006ca8:	4628      	mov	r0, r5
 8006caa:	e7be      	b.n	8006c2a <USBD_LL_DataInStage+0x1e>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cac:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006cb0:	b2db      	uxtb	r3, r3
 8006cb2:	2b03      	cmp	r3, #3
 8006cb4:	d001      	beq.n	8006cba <USBD_LL_DataInStage+0xae>
  return USBD_OK;
 8006cb6:	2000      	movs	r0, #0
 8006cb8:	e7b7      	b.n	8006c2a <USBD_LL_DataInStage+0x1e>
      if (pdev->pClass->DataIn != NULL)
 8006cba:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8006cbe:	695b      	ldr	r3, [r3, #20]
 8006cc0:	b10b      	cbz	r3, 8006cc6 <USBD_LL_DataInStage+0xba>
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006cc2:	4798      	blx	r3
        if (ret != USBD_OK)
 8006cc4:	e7b1      	b.n	8006c2a <USBD_LL_DataInStage+0x1e>
  return USBD_OK;
 8006cc6:	2000      	movs	r0, #0
 8006cc8:	e7af      	b.n	8006c2a <USBD_LL_DataInStage+0x1e>

08006cca <USBD_LL_Reset>:
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006cca:	2301      	movs	r3, #1
 8006ccc:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294
  pdev->dev_config = 0U;
 8006cd6:	6043      	str	r3, [r0, #4]
  pdev->dev_remote_wakeup = 0U;
 8006cd8:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8006cdc:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8006ce0:	b1f3      	cbz	r3, 8006d20 <USBD_LL_Reset+0x56>
{
 8006ce2:	b570      	push	{r4, r5, r6, lr}
 8006ce4:	4604      	mov	r4, r0
  {
    return USBD_FAIL;
  }

  if (pdev->pClassData != NULL)
 8006ce6:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 8006cea:	b11a      	cbz	r2, 8006cf4 <USBD_LL_Reset+0x2a>
  {
    if (pdev->pClass->DeInit != NULL)
 8006cec:	685b      	ldr	r3, [r3, #4]
 8006cee:	b10b      	cbz	r3, 8006cf4 <USBD_LL_Reset+0x2a>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006cf0:	2100      	movs	r1, #0
 8006cf2:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006cf4:	2340      	movs	r3, #64	; 0x40
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	4611      	mov	r1, r2
 8006cfa:	4620      	mov	r0, r4
 8006cfc:	f000 fdb0 	bl	8007860 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006d00:	2601      	movs	r6, #1
 8006d02:	f8a4 6164 	strh.w	r6, [r4, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006d06:	2540      	movs	r5, #64	; 0x40
 8006d08:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006d0c:	462b      	mov	r3, r5
 8006d0e:	2200      	movs	r2, #0
 8006d10:	2180      	movs	r1, #128	; 0x80
 8006d12:	4620      	mov	r0, r4
 8006d14:	f000 fda4 	bl	8007860 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006d18:	84a6      	strh	r6, [r4, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006d1a:	6225      	str	r5, [r4, #32]

  return USBD_OK;
 8006d1c:	2000      	movs	r0, #0
}
 8006d1e:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 8006d20:	2003      	movs	r0, #3
}
 8006d22:	4770      	bx	lr

08006d24 <USBD_LL_SetSpeed>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8006d24:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8006d26:	2000      	movs	r0, #0
 8006d28:	4770      	bx	lr

08006d2a <USBD_LL_Suspend>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state = pdev->dev_state;
 8006d2a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006d2e:	b2db      	uxtb	r3, r3
 8006d30:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006d34:	2304      	movs	r3, #4
 8006d36:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 8006d3a:	2000      	movs	r0, #0
 8006d3c:	4770      	bx	lr

08006d3e <USBD_LL_Resume>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006d3e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006d42:	b2db      	uxtb	r3, r3
 8006d44:	2b04      	cmp	r3, #4
 8006d46:	d001      	beq.n	8006d4c <USBD_LL_Resume+0xe>
  {
    pdev->dev_state = pdev->dev_old_state;
  }

  return USBD_OK;
}
 8006d48:	2000      	movs	r0, #0
 8006d4a:	4770      	bx	lr
    pdev->dev_state = pdev->dev_old_state;
 8006d4c:	f890 329d 	ldrb.w	r3, [r0, #669]	; 0x29d
 8006d50:	b2db      	uxtb	r3, r3
 8006d52:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
 8006d56:	e7f7      	b.n	8006d48 <USBD_LL_Resume+0xa>

08006d58 <USBD_LL_SOF>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  if (pdev->pClass == NULL)
 8006d58:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 8006d5c:	b162      	cbz	r2, 8006d78 <USBD_LL_SOF+0x20>
{
 8006d5e:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d60:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006d64:	b2db      	uxtb	r3, r3
 8006d66:	2b03      	cmp	r3, #3
 8006d68:	d001      	beq.n	8006d6e <USBD_LL_SOF+0x16>
    {
      (void)pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
 8006d6a:	2000      	movs	r0, #0
}
 8006d6c:	bd08      	pop	{r3, pc}
    if (pdev->pClass->SOF != NULL)
 8006d6e:	69d3      	ldr	r3, [r2, #28]
 8006d70:	b123      	cbz	r3, 8006d7c <USBD_LL_SOF+0x24>
      (void)pdev->pClass->SOF(pdev);
 8006d72:	4798      	blx	r3
  return USBD_OK;
 8006d74:	2000      	movs	r0, #0
 8006d76:	e7f9      	b.n	8006d6c <USBD_LL_SOF+0x14>
    return USBD_FAIL;
 8006d78:	2003      	movs	r0, #3
}
 8006d7a:	4770      	bx	lr
  return USBD_OK;
 8006d7c:	2000      	movs	r0, #0
 8006d7e:	e7f5      	b.n	8006d6c <USBD_LL_SOF+0x14>

08006d80 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006d80:	4603      	mov	r3, r0
  uint8_t  len = 0U;
 8006d82:	2000      	movs	r0, #0
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 8006d84:	781a      	ldrb	r2, [r3, #0]
 8006d86:	b11a      	cbz	r2, 8006d90 <USBD_GetLen+0x10>
  {
    len++;
 8006d88:	3001      	adds	r0, #1
 8006d8a:	b2c0      	uxtb	r0, r0
    pbuff++;
 8006d8c:	3301      	adds	r3, #1
 8006d8e:	e7f9      	b.n	8006d84 <USBD_GetLen+0x4>
  }

  return len;
}
 8006d90:	4770      	bx	lr

08006d92 <USBD_SetFeature>:
{
 8006d92:	b508      	push	{r3, lr}
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006d94:	884b      	ldrh	r3, [r1, #2]
 8006d96:	2b01      	cmp	r3, #1
 8006d98:	d000      	beq.n	8006d9c <USBD_SetFeature+0xa>
}
 8006d9a:	bd08      	pop	{r3, pc}
    pdev->dev_remote_wakeup = 1U;
 8006d9c:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006da0:	f000 fb7a 	bl	8007498 <USBD_CtlSendStatus>
}
 8006da4:	e7f9      	b.n	8006d9a <USBD_SetFeature+0x8>

08006da6 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 8006da6:	780b      	ldrb	r3, [r1, #0]
 8006da8:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 8006daa:	784b      	ldrb	r3, [r1, #1]
 8006dac:	7043      	strb	r3, [r0, #1]
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;

  _Byte1 = *(uint8_t *)_pbuff;
 8006dae:	788b      	ldrb	r3, [r1, #2]
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;
 8006db0:	78ca      	ldrb	r2, [r1, #3]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006db2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wValue = SWAPBYTE(pbuff);
 8006db6:	8043      	strh	r3, [r0, #2]
  _Byte1 = *(uint8_t *)_pbuff;
 8006db8:	790b      	ldrb	r3, [r1, #4]
  _Byte2 = *(uint8_t *)_pbuff;
 8006dba:	794a      	ldrb	r2, [r1, #5]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006dbc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wIndex = SWAPBYTE(pbuff);
 8006dc0:	8083      	strh	r3, [r0, #4]
  _Byte1 = *(uint8_t *)_pbuff;
 8006dc2:	798b      	ldrb	r3, [r1, #6]
  _Byte2 = *(uint8_t *)_pbuff;
 8006dc4:	79ca      	ldrb	r2, [r1, #7]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006dc6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wLength = SWAPBYTE(pbuff);
 8006dca:	80c3      	strh	r3, [r0, #6]
}
 8006dcc:	4770      	bx	lr

08006dce <USBD_CtlError>:
{
 8006dce:	b510      	push	{r4, lr}
 8006dd0:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006dd2:	2180      	movs	r1, #128	; 0x80
 8006dd4:	f000 fd57 	bl	8007886 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006dd8:	2100      	movs	r1, #0
 8006dda:	4620      	mov	r0, r4
 8006ddc:	f000 fd53 	bl	8007886 <USBD_LL_StallEP>
}
 8006de0:	bd10      	pop	{r4, pc}

08006de2 <USBD_GetDescriptor>:
{
 8006de2:	b530      	push	{r4, r5, lr}
 8006de4:	b083      	sub	sp, #12
 8006de6:	4604      	mov	r4, r0
 8006de8:	460d      	mov	r5, r1
  uint16_t len = 0U;
 8006dea:	2300      	movs	r3, #0
 8006dec:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 8006df0:	884a      	ldrh	r2, [r1, #2]
 8006df2:	0a13      	lsrs	r3, r2, #8
 8006df4:	3b01      	subs	r3, #1
 8006df6:	2b0e      	cmp	r3, #14
 8006df8:	f200 80bc 	bhi.w	8006f74 <USBD_GetDescriptor+0x192>
 8006dfc:	e8df f003 	tbb	[pc, r3]
 8006e00:	ba443015 	.word	0xba443015
 8006e04:	baab9eba 	.word	0xbaab9eba
 8006e08:	babababa 	.word	0xbabababa
 8006e0c:	baba      	.short	0xbaba
 8006e0e:	08          	.byte	0x08
 8006e0f:	00          	.byte	0x00
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8006e10:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8006e14:	69db      	ldr	r3, [r3, #28]
 8006e16:	b123      	cbz	r3, 8006e22 <USBD_GetDescriptor+0x40>
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8006e18:	f10d 0106 	add.w	r1, sp, #6
 8006e1c:	7c00      	ldrb	r0, [r0, #16]
 8006e1e:	4798      	blx	r3
  if (err != 0U)
 8006e20:	e00a      	b.n	8006e38 <USBD_GetDescriptor+0x56>
        USBD_CtlError(pdev, req);
 8006e22:	4629      	mov	r1, r5
 8006e24:	f7ff ffd3 	bl	8006dce <USBD_CtlError>
  if (err != 0U)
 8006e28:	e018      	b.n	8006e5c <USBD_GetDescriptor+0x7a>
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006e2a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f10d 0106 	add.w	r1, sp, #6
 8006e34:	7c00      	ldrb	r0, [r0, #16]
 8006e36:	4798      	blx	r3
  if (req->wLength != 0U)
 8006e38:	88ea      	ldrh	r2, [r5, #6]
 8006e3a:	2a00      	cmp	r2, #0
 8006e3c:	f000 80a3 	beq.w	8006f86 <USBD_GetDescriptor+0x1a4>
    if (len != 0U)
 8006e40:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	f000 8099 	beq.w	8006f7c <USBD_GetDescriptor+0x19a>
      len = MIN(len, req->wLength);
 8006e4a:	429a      	cmp	r2, r3
 8006e4c:	bf28      	it	cs
 8006e4e:	461a      	movcs	r2, r3
 8006e50:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006e54:	4601      	mov	r1, r0
 8006e56:	4620      	mov	r0, r4
 8006e58:	f000 faf2 	bl	8007440 <USBD_CtlSendData>
}
 8006e5c:	b003      	add	sp, #12
 8006e5e:	bd30      	pop	{r4, r5, pc}
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e60:	7c03      	ldrb	r3, [r0, #16]
 8006e62:	b943      	cbnz	r3, 8006e76 <USBD_GetDescriptor+0x94>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006e64:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8006e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e6a:	f10d 0006 	add.w	r0, sp, #6
 8006e6e:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006e70:	2302      	movs	r3, #2
 8006e72:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8006e74:	e7e0      	b.n	8006e38 <USBD_GetDescriptor+0x56>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006e76:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8006e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e7c:	f10d 0006 	add.w	r0, sp, #6
 8006e80:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006e82:	2302      	movs	r3, #2
 8006e84:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8006e86:	e7d7      	b.n	8006e38 <USBD_GetDescriptor+0x56>
      switch ((uint8_t)(req->wValue))
 8006e88:	b2d2      	uxtb	r2, r2
 8006e8a:	2a05      	cmp	r2, #5
 8006e8c:	d852      	bhi.n	8006f34 <USBD_GetDescriptor+0x152>
 8006e8e:	e8df f002 	tbb	[pc, r2]
 8006e92:	1003      	.short	0x1003
 8006e94:	44372a1d 	.word	0x44372a1d
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006e98:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8006e9c:	685b      	ldr	r3, [r3, #4]
 8006e9e:	b123      	cbz	r3, 8006eaa <USBD_GetDescriptor+0xc8>
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006ea0:	f10d 0106 	add.w	r1, sp, #6
 8006ea4:	7c00      	ldrb	r0, [r0, #16]
 8006ea6:	4798      	blx	r3
  if (err != 0U)
 8006ea8:	e7c6      	b.n	8006e38 <USBD_GetDescriptor+0x56>
            USBD_CtlError(pdev, req);
 8006eaa:	4629      	mov	r1, r5
 8006eac:	f7ff ff8f 	bl	8006dce <USBD_CtlError>
  if (err != 0U)
 8006eb0:	e7d4      	b.n	8006e5c <USBD_GetDescriptor+0x7a>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006eb2:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8006eb6:	689b      	ldr	r3, [r3, #8]
 8006eb8:	b123      	cbz	r3, 8006ec4 <USBD_GetDescriptor+0xe2>
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006eba:	f10d 0106 	add.w	r1, sp, #6
 8006ebe:	7c00      	ldrb	r0, [r0, #16]
 8006ec0:	4798      	blx	r3
  if (err != 0U)
 8006ec2:	e7b9      	b.n	8006e38 <USBD_GetDescriptor+0x56>
            USBD_CtlError(pdev, req);
 8006ec4:	4629      	mov	r1, r5
 8006ec6:	f7ff ff82 	bl	8006dce <USBD_CtlError>
  if (err != 0U)
 8006eca:	e7c7      	b.n	8006e5c <USBD_GetDescriptor+0x7a>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006ecc:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8006ed0:	68db      	ldr	r3, [r3, #12]
 8006ed2:	b123      	cbz	r3, 8006ede <USBD_GetDescriptor+0xfc>
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006ed4:	f10d 0106 	add.w	r1, sp, #6
 8006ed8:	7c00      	ldrb	r0, [r0, #16]
 8006eda:	4798      	blx	r3
  if (err != 0U)
 8006edc:	e7ac      	b.n	8006e38 <USBD_GetDescriptor+0x56>
            USBD_CtlError(pdev, req);
 8006ede:	4629      	mov	r1, r5
 8006ee0:	f7ff ff75 	bl	8006dce <USBD_CtlError>
  if (err != 0U)
 8006ee4:	e7ba      	b.n	8006e5c <USBD_GetDescriptor+0x7a>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006ee6:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8006eea:	691b      	ldr	r3, [r3, #16]
 8006eec:	b123      	cbz	r3, 8006ef8 <USBD_GetDescriptor+0x116>
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006eee:	f10d 0106 	add.w	r1, sp, #6
 8006ef2:	7c00      	ldrb	r0, [r0, #16]
 8006ef4:	4798      	blx	r3
  if (err != 0U)
 8006ef6:	e79f      	b.n	8006e38 <USBD_GetDescriptor+0x56>
            USBD_CtlError(pdev, req);
 8006ef8:	4629      	mov	r1, r5
 8006efa:	f7ff ff68 	bl	8006dce <USBD_CtlError>
  if (err != 0U)
 8006efe:	e7ad      	b.n	8006e5c <USBD_GetDescriptor+0x7a>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006f00:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8006f04:	695b      	ldr	r3, [r3, #20]
 8006f06:	b123      	cbz	r3, 8006f12 <USBD_GetDescriptor+0x130>
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006f08:	f10d 0106 	add.w	r1, sp, #6
 8006f0c:	7c00      	ldrb	r0, [r0, #16]
 8006f0e:	4798      	blx	r3
  if (err != 0U)
 8006f10:	e792      	b.n	8006e38 <USBD_GetDescriptor+0x56>
            USBD_CtlError(pdev, req);
 8006f12:	4629      	mov	r1, r5
 8006f14:	f7ff ff5b 	bl	8006dce <USBD_CtlError>
  if (err != 0U)
 8006f18:	e7a0      	b.n	8006e5c <USBD_GetDescriptor+0x7a>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006f1a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8006f1e:	699b      	ldr	r3, [r3, #24]
 8006f20:	b123      	cbz	r3, 8006f2c <USBD_GetDescriptor+0x14a>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006f22:	f10d 0106 	add.w	r1, sp, #6
 8006f26:	7c00      	ldrb	r0, [r0, #16]
 8006f28:	4798      	blx	r3
  if (err != 0U)
 8006f2a:	e785      	b.n	8006e38 <USBD_GetDescriptor+0x56>
            USBD_CtlError(pdev, req);
 8006f2c:	4629      	mov	r1, r5
 8006f2e:	f7ff ff4e 	bl	8006dce <USBD_CtlError>
  if (err != 0U)
 8006f32:	e793      	b.n	8006e5c <USBD_GetDescriptor+0x7a>
          USBD_CtlError(pdev, req);
 8006f34:	4629      	mov	r1, r5
 8006f36:	f7ff ff4a 	bl	8006dce <USBD_CtlError>
  if (err != 0U)
 8006f3a:	e78f      	b.n	8006e5c <USBD_GetDescriptor+0x7a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f3c:	7c03      	ldrb	r3, [r0, #16]
 8006f3e:	b933      	cbnz	r3, 8006f4e <USBD_GetDescriptor+0x16c>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006f40:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8006f44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f46:	f10d 0006 	add.w	r0, sp, #6
 8006f4a:	4798      	blx	r3
  if (err != 0U)
 8006f4c:	e774      	b.n	8006e38 <USBD_GetDescriptor+0x56>
        USBD_CtlError(pdev, req);
 8006f4e:	4629      	mov	r1, r5
 8006f50:	f7ff ff3d 	bl	8006dce <USBD_CtlError>
  if (err != 0U)
 8006f54:	e782      	b.n	8006e5c <USBD_GetDescriptor+0x7a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f56:	7c03      	ldrb	r3, [r0, #16]
 8006f58:	b943      	cbnz	r3, 8006f6c <USBD_GetDescriptor+0x18a>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006f5a:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8006f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f60:	f10d 0006 	add.w	r0, sp, #6
 8006f64:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006f66:	2307      	movs	r3, #7
 8006f68:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8006f6a:	e765      	b.n	8006e38 <USBD_GetDescriptor+0x56>
        USBD_CtlError(pdev, req);
 8006f6c:	4629      	mov	r1, r5
 8006f6e:	f7ff ff2e 	bl	8006dce <USBD_CtlError>
  if (err != 0U)
 8006f72:	e773      	b.n	8006e5c <USBD_GetDescriptor+0x7a>
      USBD_CtlError(pdev, req);
 8006f74:	4629      	mov	r1, r5
 8006f76:	f7ff ff2a 	bl	8006dce <USBD_CtlError>
    return;
 8006f7a:	e76f      	b.n	8006e5c <USBD_GetDescriptor+0x7a>
      USBD_CtlError(pdev, req);
 8006f7c:	4629      	mov	r1, r5
 8006f7e:	4620      	mov	r0, r4
 8006f80:	f7ff ff25 	bl	8006dce <USBD_CtlError>
 8006f84:	e76a      	b.n	8006e5c <USBD_GetDescriptor+0x7a>
    (void)USBD_CtlSendStatus(pdev);
 8006f86:	4620      	mov	r0, r4
 8006f88:	f000 fa86 	bl	8007498 <USBD_CtlSendStatus>
 8006f8c:	e766      	b.n	8006e5c <USBD_GetDescriptor+0x7a>

08006f8e <USBD_SetAddress>:
{
 8006f8e:	b538      	push	{r3, r4, r5, lr}
 8006f90:	4604      	mov	r4, r0
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006f92:	888b      	ldrh	r3, [r1, #4]
 8006f94:	b9fb      	cbnz	r3, 8006fd6 <USBD_SetAddress+0x48>
 8006f96:	88cb      	ldrh	r3, [r1, #6]
 8006f98:	b9eb      	cbnz	r3, 8006fd6 <USBD_SetAddress+0x48>
 8006f9a:	884b      	ldrh	r3, [r1, #2]
 8006f9c:	2b7f      	cmp	r3, #127	; 0x7f
 8006f9e:	d81a      	bhi.n	8006fd6 <USBD_SetAddress+0x48>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006fa0:	f003 057f 	and.w	r5, r3, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fa4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006fa8:	b2db      	uxtb	r3, r3
 8006faa:	2b03      	cmp	r3, #3
 8006fac:	d00c      	beq.n	8006fc8 <USBD_SetAddress+0x3a>
      pdev->dev_address = dev_addr;
 8006fae:	f880 529e 	strb.w	r5, [r0, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006fb2:	4629      	mov	r1, r5
 8006fb4:	f000 fc8e 	bl	80078d4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006fb8:	4620      	mov	r0, r4
 8006fba:	f000 fa6d 	bl	8007498 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8006fbe:	b135      	cbz	r5, 8006fce <USBD_SetAddress+0x40>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006fc0:	2302      	movs	r3, #2
 8006fc2:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8006fc6:	e009      	b.n	8006fdc <USBD_SetAddress+0x4e>
      USBD_CtlError(pdev, req);
 8006fc8:	f7ff ff01 	bl	8006dce <USBD_CtlError>
 8006fcc:	e006      	b.n	8006fdc <USBD_SetAddress+0x4e>
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006fce:	2301      	movs	r3, #1
 8006fd0:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8006fd4:	e002      	b.n	8006fdc <USBD_SetAddress+0x4e>
    USBD_CtlError(pdev, req);
 8006fd6:	4620      	mov	r0, r4
 8006fd8:	f7ff fef9 	bl	8006dce <USBD_CtlError>
}
 8006fdc:	bd38      	pop	{r3, r4, r5, pc}
	...

08006fe0 <USBD_SetConfig>:
{
 8006fe0:	b570      	push	{r4, r5, r6, lr}
 8006fe2:	4604      	mov	r4, r0
 8006fe4:	460e      	mov	r6, r1
  cfgidx = (uint8_t)(req->wValue);
 8006fe6:	788d      	ldrb	r5, [r1, #2]
 8006fe8:	4b2e      	ldr	r3, [pc, #184]	; (80070a4 <USBD_SetConfig+0xc4>)
 8006fea:	701d      	strb	r5, [r3, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006fec:	2d01      	cmp	r5, #1
 8006fee:	d810      	bhi.n	8007012 <USBD_SetConfig+0x32>
  switch (pdev->dev_state)
 8006ff0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006ff4:	b2db      	uxtb	r3, r3
 8006ff6:	2b02      	cmp	r3, #2
 8006ff8:	d00f      	beq.n	800701a <USBD_SetConfig+0x3a>
 8006ffa:	2b03      	cmp	r3, #3
 8006ffc:	d023      	beq.n	8007046 <USBD_SetConfig+0x66>
      USBD_CtlError(pdev, req);
 8006ffe:	f7ff fee6 	bl	8006dce <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007002:	4b28      	ldr	r3, [pc, #160]	; (80070a4 <USBD_SetConfig+0xc4>)
 8007004:	7819      	ldrb	r1, [r3, #0]
 8007006:	4620      	mov	r0, r4
 8007008:	f7ff fd90 	bl	8006b2c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800700c:	2503      	movs	r5, #3
}
 800700e:	4628      	mov	r0, r5
 8007010:	bd70      	pop	{r4, r5, r6, pc}
    USBD_CtlError(pdev, req);
 8007012:	f7ff fedc 	bl	8006dce <USBD_CtlError>
    return USBD_FAIL;
 8007016:	2503      	movs	r5, #3
 8007018:	e7f9      	b.n	800700e <USBD_SetConfig+0x2e>
      if (cfgidx != 0U)
 800701a:	b18d      	cbz	r5, 8007040 <USBD_SetConfig+0x60>
        pdev->dev_config = cfgidx;
 800701c:	6045      	str	r5, [r0, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800701e:	4629      	mov	r1, r5
 8007020:	f7ff fd7b 	bl	8006b1a <USBD_SetClassConfig>
        if (ret != USBD_OK)
 8007024:	4605      	mov	r5, r0
 8007026:	b120      	cbz	r0, 8007032 <USBD_SetConfig+0x52>
          USBD_CtlError(pdev, req);
 8007028:	4631      	mov	r1, r6
 800702a:	4620      	mov	r0, r4
 800702c:	f7ff fecf 	bl	8006dce <USBD_CtlError>
 8007030:	e7ed      	b.n	800700e <USBD_SetConfig+0x2e>
          (void)USBD_CtlSendStatus(pdev);
 8007032:	4620      	mov	r0, r4
 8007034:	f000 fa30 	bl	8007498 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007038:	2303      	movs	r3, #3
 800703a:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800703e:	e7e6      	b.n	800700e <USBD_SetConfig+0x2e>
        (void)USBD_CtlSendStatus(pdev);
 8007040:	f000 fa2a 	bl	8007498 <USBD_CtlSendStatus>
 8007044:	e7e3      	b.n	800700e <USBD_SetConfig+0x2e>
      if (cfgidx == 0U)
 8007046:	b1cd      	cbz	r5, 800707c <USBD_SetConfig+0x9c>
      else if (cfgidx != pdev->dev_config)
 8007048:	6841      	ldr	r1, [r0, #4]
 800704a:	428d      	cmp	r5, r1
 800704c:	d025      	beq.n	800709a <USBD_SetConfig+0xba>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800704e:	b2c9      	uxtb	r1, r1
 8007050:	f7ff fd6c 	bl	8006b2c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007054:	4b13      	ldr	r3, [pc, #76]	; (80070a4 <USBD_SetConfig+0xc4>)
 8007056:	7819      	ldrb	r1, [r3, #0]
 8007058:	6061      	str	r1, [r4, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800705a:	4620      	mov	r0, r4
 800705c:	f7ff fd5d 	bl	8006b1a <USBD_SetClassConfig>
        if (ret != USBD_OK)
 8007060:	4605      	mov	r5, r0
 8007062:	b1b0      	cbz	r0, 8007092 <USBD_SetConfig+0xb2>
          USBD_CtlError(pdev, req);
 8007064:	4631      	mov	r1, r6
 8007066:	4620      	mov	r0, r4
 8007068:	f7ff feb1 	bl	8006dce <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800706c:	7921      	ldrb	r1, [r4, #4]
 800706e:	4620      	mov	r0, r4
 8007070:	f7ff fd5c 	bl	8006b2c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007074:	2302      	movs	r3, #2
 8007076:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800707a:	e7c8      	b.n	800700e <USBD_SetConfig+0x2e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800707c:	2302      	movs	r3, #2
 800707e:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007082:	6045      	str	r5, [r0, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007084:	4629      	mov	r1, r5
 8007086:	f7ff fd51 	bl	8006b2c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800708a:	4620      	mov	r0, r4
 800708c:	f000 fa04 	bl	8007498 <USBD_CtlSendStatus>
 8007090:	e7bd      	b.n	800700e <USBD_SetConfig+0x2e>
          (void)USBD_CtlSendStatus(pdev);
 8007092:	4620      	mov	r0, r4
 8007094:	f000 fa00 	bl	8007498 <USBD_CtlSendStatus>
 8007098:	e7b9      	b.n	800700e <USBD_SetConfig+0x2e>
        (void)USBD_CtlSendStatus(pdev);
 800709a:	f000 f9fd 	bl	8007498 <USBD_CtlSendStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 800709e:	2500      	movs	r5, #0
 80070a0:	e7b5      	b.n	800700e <USBD_SetConfig+0x2e>
 80070a2:	bf00      	nop
 80070a4:	20000208 	.word	0x20000208

080070a8 <USBD_GetConfig>:
{
 80070a8:	b508      	push	{r3, lr}
  if (req->wLength != 1U)
 80070aa:	88cb      	ldrh	r3, [r1, #6]
 80070ac:	2b01      	cmp	r3, #1
 80070ae:	d10b      	bne.n	80070c8 <USBD_GetConfig+0x20>
    switch (pdev->dev_state)
 80070b0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80070b4:	b2db      	uxtb	r3, r3
 80070b6:	2b02      	cmp	r3, #2
 80070b8:	d909      	bls.n	80070ce <USBD_GetConfig+0x26>
 80070ba:	2b03      	cmp	r3, #3
 80070bc:	d109      	bne.n	80070d2 <USBD_GetConfig+0x2a>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80070be:	2201      	movs	r2, #1
 80070c0:	1d01      	adds	r1, r0, #4
 80070c2:	f000 f9bd 	bl	8007440 <USBD_CtlSendData>
        break;
 80070c6:	e001      	b.n	80070cc <USBD_GetConfig+0x24>
    USBD_CtlError(pdev, req);
 80070c8:	f7ff fe81 	bl	8006dce <USBD_CtlError>
}
 80070cc:	bd08      	pop	{r3, pc}
    switch (pdev->dev_state)
 80070ce:	b25b      	sxtb	r3, r3
 80070d0:	b913      	cbnz	r3, 80070d8 <USBD_GetConfig+0x30>
        USBD_CtlError(pdev, req);
 80070d2:	f7ff fe7c 	bl	8006dce <USBD_CtlError>
}
 80070d6:	e7f9      	b.n	80070cc <USBD_GetConfig+0x24>
        pdev->dev_default_config = 0U;
 80070d8:	4601      	mov	r1, r0
 80070da:	2300      	movs	r3, #0
 80070dc:	f841 3f08 	str.w	r3, [r1, #8]!
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80070e0:	2201      	movs	r2, #1
 80070e2:	f000 f9ad 	bl	8007440 <USBD_CtlSendData>
        break;
 80070e6:	e7f1      	b.n	80070cc <USBD_GetConfig+0x24>

080070e8 <USBD_GetStatus>:
{
 80070e8:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 80070ea:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80070ee:	3b01      	subs	r3, #1
 80070f0:	2b02      	cmp	r3, #2
 80070f2:	d812      	bhi.n	800711a <USBD_GetStatus+0x32>
      if (req->wLength != 0x2U)
 80070f4:	88cb      	ldrh	r3, [r1, #6]
 80070f6:	2b02      	cmp	r3, #2
 80070f8:	d10c      	bne.n	8007114 <USBD_GetStatus+0x2c>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80070fa:	2301      	movs	r3, #1
 80070fc:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup != 0U)
 80070fe:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 8007102:	b10b      	cbz	r3, 8007108 <USBD_GetStatus+0x20>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007104:	2303      	movs	r3, #3
 8007106:	60c3      	str	r3, [r0, #12]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007108:	2202      	movs	r2, #2
 800710a:	f100 010c 	add.w	r1, r0, #12
 800710e:	f000 f997 	bl	8007440 <USBD_CtlSendData>
}
 8007112:	bd08      	pop	{r3, pc}
        USBD_CtlError(pdev, req);
 8007114:	f7ff fe5b 	bl	8006dce <USBD_CtlError>
        break;
 8007118:	e7fb      	b.n	8007112 <USBD_GetStatus+0x2a>
      USBD_CtlError(pdev, req);
 800711a:	f7ff fe58 	bl	8006dce <USBD_CtlError>
}
 800711e:	e7f8      	b.n	8007112 <USBD_GetStatus+0x2a>

08007120 <USBD_ClrFeature>:
{
 8007120:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 8007122:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8007126:	3b01      	subs	r3, #1
 8007128:	2b02      	cmp	r3, #2
 800712a:	d809      	bhi.n	8007140 <USBD_ClrFeature+0x20>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800712c:	884b      	ldrh	r3, [r1, #2]
 800712e:	2b01      	cmp	r3, #1
 8007130:	d000      	beq.n	8007134 <USBD_ClrFeature+0x14>
}
 8007132:	bd08      	pop	{r3, pc}
        pdev->dev_remote_wakeup = 0U;
 8007134:	2300      	movs	r3, #0
 8007136:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800713a:	f000 f9ad 	bl	8007498 <USBD_CtlSendStatus>
 800713e:	e7f8      	b.n	8007132 <USBD_ClrFeature+0x12>
      USBD_CtlError(pdev, req);
 8007140:	f7ff fe45 	bl	8006dce <USBD_CtlError>
}
 8007144:	e7f5      	b.n	8007132 <USBD_ClrFeature+0x12>

08007146 <USBD_StdDevReq>:
{
 8007146:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007148:	780c      	ldrb	r4, [r1, #0]
 800714a:	f004 0460 	and.w	r4, r4, #96	; 0x60
 800714e:	2c20      	cmp	r4, #32
 8007150:	d006      	beq.n	8007160 <USBD_StdDevReq+0x1a>
 8007152:	2c40      	cmp	r4, #64	; 0x40
 8007154:	d004      	beq.n	8007160 <USBD_StdDevReq+0x1a>
 8007156:	b154      	cbz	r4, 800716e <USBD_StdDevReq+0x28>
      USBD_CtlError(pdev, req);
 8007158:	f7ff fe39 	bl	8006dce <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800715c:	2400      	movs	r4, #0
      break;
 800715e:	e004      	b.n	800716a <USBD_StdDevReq+0x24>
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007160:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8007164:	689b      	ldr	r3, [r3, #8]
 8007166:	4798      	blx	r3
 8007168:	4604      	mov	r4, r0
}
 800716a:	4620      	mov	r0, r4
 800716c:	bd38      	pop	{r3, r4, r5, pc}
      switch (req->bRequest)
 800716e:	784d      	ldrb	r5, [r1, #1]
 8007170:	2d09      	cmp	r5, #9
 8007172:	d81d      	bhi.n	80071b0 <USBD_StdDevReq+0x6a>
 8007174:	e8df f005 	tbb	[pc, r5]
 8007178:	161c1912 	.word	0x161c1912
 800717c:	1c05081c 	.word	0x1c05081c
 8007180:	0b0f      	.short	0x0b0f
          USBD_GetDescriptor(pdev, req);
 8007182:	f7ff fe2e 	bl	8006de2 <USBD_GetDescriptor>
          break;
 8007186:	e7f0      	b.n	800716a <USBD_StdDevReq+0x24>
          USBD_SetAddress(pdev, req);
 8007188:	f7ff ff01 	bl	8006f8e <USBD_SetAddress>
          break;
 800718c:	e7ed      	b.n	800716a <USBD_StdDevReq+0x24>
          ret = USBD_SetConfig(pdev, req);
 800718e:	f7ff ff27 	bl	8006fe0 <USBD_SetConfig>
 8007192:	4604      	mov	r4, r0
          break;
 8007194:	e7e9      	b.n	800716a <USBD_StdDevReq+0x24>
          USBD_GetConfig(pdev, req);
 8007196:	f7ff ff87 	bl	80070a8 <USBD_GetConfig>
          break;
 800719a:	e7e6      	b.n	800716a <USBD_StdDevReq+0x24>
          USBD_GetStatus(pdev, req);
 800719c:	f7ff ffa4 	bl	80070e8 <USBD_GetStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 80071a0:	462c      	mov	r4, r5
          break;
 80071a2:	e7e2      	b.n	800716a <USBD_StdDevReq+0x24>
          USBD_SetFeature(pdev, req);
 80071a4:	f7ff fdf5 	bl	8006d92 <USBD_SetFeature>
          break;
 80071a8:	e7df      	b.n	800716a <USBD_StdDevReq+0x24>
          USBD_ClrFeature(pdev, req);
 80071aa:	f7ff ffb9 	bl	8007120 <USBD_ClrFeature>
          break;
 80071ae:	e7dc      	b.n	800716a <USBD_StdDevReq+0x24>
          USBD_CtlError(pdev, req);
 80071b0:	f7ff fe0d 	bl	8006dce <USBD_CtlError>
          break;
 80071b4:	e7d9      	b.n	800716a <USBD_StdDevReq+0x24>

080071b6 <USBD_StdItfReq>:
{
 80071b6:	b570      	push	{r4, r5, r6, lr}
 80071b8:	4605      	mov	r5, r0
 80071ba:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80071bc:	780b      	ldrb	r3, [r1, #0]
 80071be:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80071c2:	2b20      	cmp	r3, #32
 80071c4:	d007      	beq.n	80071d6 <USBD_StdItfReq+0x20>
 80071c6:	2b40      	cmp	r3, #64	; 0x40
 80071c8:	d005      	beq.n	80071d6 <USBD_StdItfReq+0x20>
 80071ca:	b123      	cbz	r3, 80071d6 <USBD_StdItfReq+0x20>
      USBD_CtlError(pdev, req);
 80071cc:	f7ff fdff 	bl	8006dce <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80071d0:	2600      	movs	r6, #0
}
 80071d2:	4630      	mov	r0, r6
 80071d4:	bd70      	pop	{r4, r5, r6, pc}
      switch (pdev->dev_state)
 80071d6:	f895 329c 	ldrb.w	r3, [r5, #668]	; 0x29c
 80071da:	3b01      	subs	r3, #1
 80071dc:	2b02      	cmp	r3, #2
 80071de:	d818      	bhi.n	8007212 <USBD_StdItfReq+0x5c>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80071e0:	7923      	ldrb	r3, [r4, #4]
 80071e2:	2b01      	cmp	r3, #1
 80071e4:	d80f      	bhi.n	8007206 <USBD_StdItfReq+0x50>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80071e6:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
 80071ea:	689b      	ldr	r3, [r3, #8]
 80071ec:	4621      	mov	r1, r4
 80071ee:	4628      	mov	r0, r5
 80071f0:	4798      	blx	r3
 80071f2:	4606      	mov	r6, r0
            if ((req->wLength == 0U) && (ret == USBD_OK))
 80071f4:	88e3      	ldrh	r3, [r4, #6]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d1eb      	bne.n	80071d2 <USBD_StdItfReq+0x1c>
 80071fa:	2800      	cmp	r0, #0
 80071fc:	d1e9      	bne.n	80071d2 <USBD_StdItfReq+0x1c>
              (void)USBD_CtlSendStatus(pdev);
 80071fe:	4628      	mov	r0, r5
 8007200:	f000 f94a 	bl	8007498 <USBD_CtlSendStatus>
 8007204:	e7e5      	b.n	80071d2 <USBD_StdItfReq+0x1c>
            USBD_CtlError(pdev, req);
 8007206:	4621      	mov	r1, r4
 8007208:	4628      	mov	r0, r5
 800720a:	f7ff fde0 	bl	8006dce <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800720e:	2600      	movs	r6, #0
 8007210:	e7df      	b.n	80071d2 <USBD_StdItfReq+0x1c>
          USBD_CtlError(pdev, req);
 8007212:	4621      	mov	r1, r4
 8007214:	4628      	mov	r0, r5
 8007216:	f7ff fdda 	bl	8006dce <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800721a:	2600      	movs	r6, #0
          break;
 800721c:	e7d9      	b.n	80071d2 <USBD_StdItfReq+0x1c>

0800721e <USBD_StdEPReq>:
{
 800721e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007220:	4606      	mov	r6, r0
 8007222:	460d      	mov	r5, r1
  ep_addr = LOBYTE(req->wIndex);
 8007224:	888b      	ldrh	r3, [r1, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007226:	780c      	ldrb	r4, [r1, #0]
 8007228:	f004 0460 	and.w	r4, r4, #96	; 0x60
 800722c:	2c20      	cmp	r4, #32
 800722e:	d008      	beq.n	8007242 <USBD_StdEPReq+0x24>
 8007230:	b2d9      	uxtb	r1, r3
 8007232:	2c40      	cmp	r4, #64	; 0x40
 8007234:	d005      	beq.n	8007242 <USBD_StdEPReq+0x24>
 8007236:	b16c      	cbz	r4, 8007254 <USBD_StdEPReq+0x36>
      USBD_CtlError(pdev, req);
 8007238:	4629      	mov	r1, r5
 800723a:	f7ff fdc8 	bl	8006dce <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800723e:	2400      	movs	r4, #0
      break;
 8007240:	e006      	b.n	8007250 <USBD_StdEPReq+0x32>
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007242:	f8d6 32b8 	ldr.w	r3, [r6, #696]	; 0x2b8
 8007246:	689b      	ldr	r3, [r3, #8]
 8007248:	4629      	mov	r1, r5
 800724a:	4630      	mov	r0, r6
 800724c:	4798      	blx	r3
 800724e:	4604      	mov	r4, r0
}
 8007250:	4620      	mov	r0, r4
 8007252:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      switch (req->bRequest)
 8007254:	786f      	ldrb	r7, [r5, #1]
 8007256:	2f01      	cmp	r7, #1
 8007258:	d02f      	beq.n	80072ba <USBD_StdEPReq+0x9c>
 800725a:	2f03      	cmp	r7, #3
 800725c:	d005      	beq.n	800726a <USBD_StdEPReq+0x4c>
 800725e:	2f00      	cmp	r7, #0
 8007260:	d059      	beq.n	8007316 <USBD_StdEPReq+0xf8>
          USBD_CtlError(pdev, req);
 8007262:	4629      	mov	r1, r5
 8007264:	f7ff fdb3 	bl	8006dce <USBD_CtlError>
          break;
 8007268:	e7f2      	b.n	8007250 <USBD_StdEPReq+0x32>
          switch (pdev->dev_state)
 800726a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800726e:	b2db      	uxtb	r3, r3
 8007270:	2b02      	cmp	r3, #2
 8007272:	d005      	beq.n	8007280 <USBD_StdEPReq+0x62>
 8007274:	2b03      	cmp	r3, #3
 8007276:	d012      	beq.n	800729e <USBD_StdEPReq+0x80>
              USBD_CtlError(pdev, req);
 8007278:	4629      	mov	r1, r5
 800727a:	f7ff fda8 	bl	8006dce <USBD_CtlError>
              break;
 800727e:	e7e7      	b.n	8007250 <USBD_StdEPReq+0x32>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007280:	b109      	cbz	r1, 8007286 <USBD_StdEPReq+0x68>
 8007282:	2980      	cmp	r1, #128	; 0x80
 8007284:	d104      	bne.n	8007290 <USBD_StdEPReq+0x72>
                USBD_CtlError(pdev, req);
 8007286:	4629      	mov	r1, r5
 8007288:	4630      	mov	r0, r6
 800728a:	f7ff fda0 	bl	8006dce <USBD_CtlError>
 800728e:	e7df      	b.n	8007250 <USBD_StdEPReq+0x32>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007290:	f000 faf9 	bl	8007886 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007294:	2180      	movs	r1, #128	; 0x80
 8007296:	4630      	mov	r0, r6
 8007298:	f000 faf5 	bl	8007886 <USBD_LL_StallEP>
 800729c:	e7d8      	b.n	8007250 <USBD_StdEPReq+0x32>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800729e:	886b      	ldrh	r3, [r5, #2]
 80072a0:	b923      	cbnz	r3, 80072ac <USBD_StdEPReq+0x8e>
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80072a2:	b119      	cbz	r1, 80072ac <USBD_StdEPReq+0x8e>
 80072a4:	2980      	cmp	r1, #128	; 0x80
 80072a6:	d001      	beq.n	80072ac <USBD_StdEPReq+0x8e>
 80072a8:	88eb      	ldrh	r3, [r5, #6]
 80072aa:	b11b      	cbz	r3, 80072b4 <USBD_StdEPReq+0x96>
              (void)USBD_CtlSendStatus(pdev);
 80072ac:	4630      	mov	r0, r6
 80072ae:	f000 f8f3 	bl	8007498 <USBD_CtlSendStatus>
              break;
 80072b2:	e7cd      	b.n	8007250 <USBD_StdEPReq+0x32>
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80072b4:	f000 fae7 	bl	8007886 <USBD_LL_StallEP>
 80072b8:	e7f8      	b.n	80072ac <USBD_StdEPReq+0x8e>
          switch (pdev->dev_state)
 80072ba:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80072be:	b2db      	uxtb	r3, r3
 80072c0:	2b02      	cmp	r3, #2
 80072c2:	d005      	beq.n	80072d0 <USBD_StdEPReq+0xb2>
 80072c4:	2b03      	cmp	r3, #3
 80072c6:	d012      	beq.n	80072ee <USBD_StdEPReq+0xd0>
              USBD_CtlError(pdev, req);
 80072c8:	4629      	mov	r1, r5
 80072ca:	f7ff fd80 	bl	8006dce <USBD_CtlError>
              break;
 80072ce:	e7bf      	b.n	8007250 <USBD_StdEPReq+0x32>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80072d0:	b109      	cbz	r1, 80072d6 <USBD_StdEPReq+0xb8>
 80072d2:	2980      	cmp	r1, #128	; 0x80
 80072d4:	d104      	bne.n	80072e0 <USBD_StdEPReq+0xc2>
                USBD_CtlError(pdev, req);
 80072d6:	4629      	mov	r1, r5
 80072d8:	4630      	mov	r0, r6
 80072da:	f7ff fd78 	bl	8006dce <USBD_CtlError>
 80072de:	e7b7      	b.n	8007250 <USBD_StdEPReq+0x32>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80072e0:	f000 fad1 	bl	8007886 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80072e4:	2180      	movs	r1, #128	; 0x80
 80072e6:	4630      	mov	r0, r6
 80072e8:	f000 facd 	bl	8007886 <USBD_LL_StallEP>
 80072ec:	e7b0      	b.n	8007250 <USBD_StdEPReq+0x32>
              if (req->wValue == USB_FEATURE_EP_HALT)
 80072ee:	886b      	ldrh	r3, [r5, #2]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d1ad      	bne.n	8007250 <USBD_StdEPReq+0x32>
                if ((ep_addr & 0x7FU) != 0x00U)
 80072f4:	f011 0f7f 	tst.w	r1, #127	; 0x7f
 80072f8:	d10a      	bne.n	8007310 <USBD_StdEPReq+0xf2>
                (void)USBD_CtlSendStatus(pdev);
 80072fa:	4630      	mov	r0, r6
 80072fc:	f000 f8cc 	bl	8007498 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007300:	f8d6 32b8 	ldr.w	r3, [r6, #696]	; 0x2b8
 8007304:	689b      	ldr	r3, [r3, #8]
 8007306:	4629      	mov	r1, r5
 8007308:	4630      	mov	r0, r6
 800730a:	4798      	blx	r3
 800730c:	4604      	mov	r4, r0
 800730e:	e79f      	b.n	8007250 <USBD_StdEPReq+0x32>
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007310:	f000 fac1 	bl	8007896 <USBD_LL_ClearStallEP>
 8007314:	e7f1      	b.n	80072fa <USBD_StdEPReq+0xdc>
          switch (pdev->dev_state)
 8007316:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800731a:	b2d2      	uxtb	r2, r2
 800731c:	2a02      	cmp	r2, #2
 800731e:	d006      	beq.n	800732e <USBD_StdEPReq+0x110>
 8007320:	2a03      	cmp	r2, #3
 8007322:	d029      	beq.n	8007378 <USBD_StdEPReq+0x15a>
              USBD_CtlError(pdev, req);
 8007324:	4629      	mov	r1, r5
 8007326:	f7ff fd52 	bl	8006dce <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800732a:	463c      	mov	r4, r7
              break;
 800732c:	e790      	b.n	8007250 <USBD_StdEPReq+0x32>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800732e:	b109      	cbz	r1, 8007334 <USBD_StdEPReq+0x116>
 8007330:	2980      	cmp	r1, #128	; 0x80
 8007332:	d113      	bne.n	800735c <USBD_StdEPReq+0x13e>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007334:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007338:	d115      	bne.n	8007366 <USBD_StdEPReq+0x148>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800733a:	f001 017f 	and.w	r1, r1, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800733e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8007342:	0089      	lsls	r1, r1, #2
 8007344:	f501 71a8 	add.w	r1, r1, #336	; 0x150
 8007348:	4431      	add	r1, r6
 800734a:	3104      	adds	r1, #4
              pep->status = 0x0000U;
 800734c:	2300      	movs	r3, #0
 800734e:	600b      	str	r3, [r1, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007350:	2202      	movs	r2, #2
 8007352:	4630      	mov	r0, r6
 8007354:	f000 f874 	bl	8007440 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8007358:	463c      	mov	r4, r7
              break;
 800735a:	e779      	b.n	8007250 <USBD_StdEPReq+0x32>
                USBD_CtlError(pdev, req);
 800735c:	4629      	mov	r1, r5
 800735e:	f7ff fd36 	bl	8006dce <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8007362:	463c      	mov	r4, r7
                break;
 8007364:	e774      	b.n	8007250 <USBD_StdEPReq+0x32>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007366:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800736a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800736e:	0089      	lsls	r1, r1, #2
 8007370:	3110      	adds	r1, #16
 8007372:	4431      	add	r1, r6
 8007374:	3104      	adds	r1, #4
 8007376:	e7e9      	b.n	800734c <USBD_StdEPReq+0x12e>
              if ((ep_addr & 0x80U) == 0x80U)
 8007378:	b25b      	sxtb	r3, r3
 800737a:	2b00      	cmp	r3, #0
 800737c:	db1f      	blt.n	80073be <USBD_StdEPReq+0x1a0>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800737e:	f001 020f 	and.w	r2, r1, #15
 8007382:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8007386:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800738a:	f8b2 2164 	ldrh.w	r2, [r2, #356]	; 0x164
 800738e:	b322      	cbz	r2, 80073da <USBD_StdEPReq+0x1bc>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007390:	2b00      	cmp	r3, #0
 8007392:	db27      	blt.n	80073e4 <USBD_StdEPReq+0x1c6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007394:	f001 037f 	and.w	r3, r1, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007398:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800739c:	009c      	lsls	r4, r3, #2
 800739e:	f504 74a8 	add.w	r4, r4, #336	; 0x150
 80073a2:	4434      	add	r4, r6
 80073a4:	3404      	adds	r4, #4
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80073a6:	b109      	cbz	r1, 80073ac <USBD_StdEPReq+0x18e>
 80073a8:	2980      	cmp	r1, #128	; 0x80
 80073aa:	d124      	bne.n	80073f6 <USBD_StdEPReq+0x1d8>
                pep->status = 0x0000U;
 80073ac:	2300      	movs	r3, #0
 80073ae:	6023      	str	r3, [r4, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80073b0:	2202      	movs	r2, #2
 80073b2:	4621      	mov	r1, r4
 80073b4:	4630      	mov	r0, r6
 80073b6:	f000 f843 	bl	8007440 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 80073ba:	463c      	mov	r4, r7
              break;
 80073bc:	e748      	b.n	8007250 <USBD_StdEPReq+0x32>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80073be:	f001 020f 	and.w	r2, r1, #15
 80073c2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80073c6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80073ca:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 80073cc:	2a00      	cmp	r2, #0
 80073ce:	d1df      	bne.n	8007390 <USBD_StdEPReq+0x172>
                  USBD_CtlError(pdev, req);
 80073d0:	4629      	mov	r1, r5
 80073d2:	f7ff fcfc 	bl	8006dce <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80073d6:	463c      	mov	r4, r7
                  break;
 80073d8:	e73a      	b.n	8007250 <USBD_StdEPReq+0x32>
                  USBD_CtlError(pdev, req);
 80073da:	4629      	mov	r1, r5
 80073dc:	f7ff fcf7 	bl	8006dce <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80073e0:	463c      	mov	r4, r7
                  break;
 80073e2:	e735      	b.n	8007250 <USBD_StdEPReq+0x32>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80073e4:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 80073e8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80073ec:	009c      	lsls	r4, r3, #2
 80073ee:	3410      	adds	r4, #16
 80073f0:	4434      	add	r4, r6
 80073f2:	3404      	adds	r4, #4
 80073f4:	e7d7      	b.n	80073a6 <USBD_StdEPReq+0x188>
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80073f6:	4630      	mov	r0, r6
 80073f8:	f000 fa55 	bl	80078a6 <USBD_LL_IsStallEP>
 80073fc:	b110      	cbz	r0, 8007404 <USBD_StdEPReq+0x1e6>
                pep->status = 0x0001U;
 80073fe:	2301      	movs	r3, #1
 8007400:	6023      	str	r3, [r4, #0]
 8007402:	e7d5      	b.n	80073b0 <USBD_StdEPReq+0x192>
                pep->status = 0x0000U;
 8007404:	2300      	movs	r3, #0
 8007406:	6023      	str	r3, [r4, #0]
 8007408:	e7d2      	b.n	80073b0 <USBD_StdEPReq+0x192>

0800740a <USBD_GetString>:
  if (desc == NULL)
 800740a:	b1c0      	cbz	r0, 800743e <USBD_GetString+0x34>
{
 800740c:	b570      	push	{r4, r5, r6, lr}
 800740e:	460d      	mov	r5, r1
 8007410:	4616      	mov	r6, r2
 8007412:	4604      	mov	r4, r0
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007414:	f7ff fcb4 	bl	8006d80 <USBD_GetLen>
 8007418:	3001      	adds	r0, #1
 800741a:	0040      	lsls	r0, r0, #1
 800741c:	8030      	strh	r0, [r6, #0]
  unicode[idx] = *(uint8_t *)len;
 800741e:	7028      	strb	r0, [r5, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007420:	2303      	movs	r3, #3
 8007422:	706b      	strb	r3, [r5, #1]
  idx++;
 8007424:	2302      	movs	r3, #2
  while (*pdesc != (uint8_t)'\0')
 8007426:	7822      	ldrb	r2, [r4, #0]
 8007428:	b142      	cbz	r2, 800743c <USBD_GetString+0x32>
    unicode[idx] = *pdesc;
 800742a:	54ea      	strb	r2, [r5, r3]
    pdesc++;
 800742c:	3401      	adds	r4, #1
    idx++;
 800742e:	1c5a      	adds	r2, r3, #1
 8007430:	b2d2      	uxtb	r2, r2
    unicode[idx] = 0U;
 8007432:	2100      	movs	r1, #0
 8007434:	54a9      	strb	r1, [r5, r2]
    idx++;
 8007436:	3302      	adds	r3, #2
 8007438:	b2db      	uxtb	r3, r3
 800743a:	e7f4      	b.n	8007426 <USBD_GetString+0x1c>
}
 800743c:	bd70      	pop	{r4, r5, r6, pc}
 800743e:	4770      	bx	lr

08007440 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007440:	b510      	push	{r4, lr}
 8007442:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007444:	2202      	movs	r2, #2
 8007446:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800744a:	6183      	str	r3, [r0, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800744c:	61c3      	str	r3, [r0, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800744e:	460a      	mov	r2, r1
 8007450:	2100      	movs	r1, #0
 8007452:	f000 fa47 	bl	80078e4 <USBD_LL_Transmit>

  return USBD_OK;
}
 8007456:	2000      	movs	r0, #0
 8007458:	bd10      	pop	{r4, pc}

0800745a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800745a:	b508      	push	{r3, lr}
 800745c:	4613      	mov	r3, r2
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800745e:	460a      	mov	r2, r1
 8007460:	2100      	movs	r1, #0
 8007462:	f000 fa3f 	bl	80078e4 <USBD_LL_Transmit>

  return USBD_OK;
}
 8007466:	2000      	movs	r0, #0
 8007468:	bd08      	pop	{r3, pc}

0800746a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800746a:	b510      	push	{r4, lr}
 800746c:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800746e:	2203      	movs	r2, #3
 8007470:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007474:	f8c0 3158 	str.w	r3, [r0, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007478:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800747c:	460a      	mov	r2, r1
 800747e:	2100      	movs	r1, #0
 8007480:	f000 fa38 	bl	80078f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8007484:	2000      	movs	r0, #0
 8007486:	bd10      	pop	{r4, pc}

08007488 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007488:	b508      	push	{r3, lr}
 800748a:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800748c:	460a      	mov	r2, r1
 800748e:	2100      	movs	r1, #0
 8007490:	f000 fa30 	bl	80078f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8007494:	2000      	movs	r0, #0
 8007496:	bd08      	pop	{r3, pc}

08007498 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007498:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800749a:	2204      	movs	r2, #4
 800749c:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80074a0:	2300      	movs	r3, #0
 80074a2:	461a      	mov	r2, r3
 80074a4:	4619      	mov	r1, r3
 80074a6:	f000 fa1d 	bl	80078e4 <USBD_LL_Transmit>

  return USBD_OK;
}
 80074aa:	2000      	movs	r0, #0
 80074ac:	bd08      	pop	{r3, pc}

080074ae <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80074ae:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80074b0:	2205      	movs	r2, #5
 80074b2:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80074b6:	2300      	movs	r3, #0
 80074b8:	461a      	mov	r2, r3
 80074ba:	4619      	mov	r1, r3
 80074bc:	f000 fa1a 	bl	80078f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80074c0:	2000      	movs	r0, #0
 80074c2:	bd08      	pop	{r3, pc}

080074c4 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 80074c4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 80074c6:	2200      	movs	r2, #0
 80074c8:	490f      	ldr	r1, [pc, #60]	; (8007508 <MX_USB_Device_Init+0x44>)
 80074ca:	4810      	ldr	r0, [pc, #64]	; (800750c <MX_USB_Device_Init+0x48>)
 80074cc:	f7ff faf3 	bl	8006ab6 <USBD_Init>
 80074d0:	b970      	cbnz	r0, 80074f0 <MX_USB_Device_Init+0x2c>
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 80074d2:	490f      	ldr	r1, [pc, #60]	; (8007510 <MX_USB_Device_Init+0x4c>)
 80074d4:	480d      	ldr	r0, [pc, #52]	; (800750c <MX_USB_Device_Init+0x48>)
 80074d6:	f7ff fb05 	bl	8006ae4 <USBD_RegisterClass>
 80074da:	b960      	cbnz	r0, 80074f6 <MX_USB_Device_Init+0x32>
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 80074dc:	490d      	ldr	r1, [pc, #52]	; (8007514 <MX_USB_Device_Init+0x50>)
 80074de:	480b      	ldr	r0, [pc, #44]	; (800750c <MX_USB_Device_Init+0x48>)
 80074e0:	f7ff fa9b 	bl	8006a1a <USBD_CDC_RegisterInterface>
 80074e4:	b950      	cbnz	r0, 80074fc <MX_USB_Device_Init+0x38>
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 80074e6:	4809      	ldr	r0, [pc, #36]	; (800750c <MX_USB_Device_Init+0x48>)
 80074e8:	f7ff fb13 	bl	8006b12 <USBD_Start>
 80074ec:	b948      	cbnz	r0, 8007502 <MX_USB_Device_Init+0x3e>
    Error_Handler();
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 80074ee:	bd08      	pop	{r3, pc}
    Error_Handler();
 80074f0:	f7fa fdd6 	bl	80020a0 <Error_Handler>
 80074f4:	e7ed      	b.n	80074d2 <MX_USB_Device_Init+0xe>
    Error_Handler();
 80074f6:	f7fa fdd3 	bl	80020a0 <Error_Handler>
 80074fa:	e7ef      	b.n	80074dc <MX_USB_Device_Init+0x18>
    Error_Handler();
 80074fc:	f7fa fdd0 	bl	80020a0 <Error_Handler>
 8007500:	e7f1      	b.n	80074e6 <MX_USB_Device_Init+0x22>
    Error_Handler();
 8007502:	f7fa fdcd 	bl	80020a0 <Error_Handler>
}
 8007506:	e7f2      	b.n	80074ee <MX_USB_Device_Init+0x2a>
 8007508:	20000130 	.word	0x20000130
 800750c:	20000630 	.word	0x20000630
 8007510:	2000000c 	.word	0x2000000c
 8007514:	2000011c 	.word	0x2000011c

08007518 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8007518:	2000      	movs	r0, #0
 800751a:	4770      	bx	lr

0800751c <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 800751c:	2000      	movs	r0, #0
 800751e:	4770      	bx	lr

08007520 <CDC_TransmitCplt_FS>:
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
}
 8007520:	2000      	movs	r0, #0
 8007522:	4770      	bx	lr

08007524 <CDC_Receive_FS>:
{
 8007524:	b510      	push	{r4, lr}
 8007526:	4601      	mov	r1, r0
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007528:	4c04      	ldr	r4, [pc, #16]	; (800753c <CDC_Receive_FS+0x18>)
 800752a:	4620      	mov	r0, r4
 800752c:	f7ff fa87 	bl	8006a3e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007530:	4620      	mov	r0, r4
 8007532:	f7ff faa7 	bl	8006a84 <USBD_CDC_ReceivePacket>
}
 8007536:	2000      	movs	r0, #0
 8007538:	bd10      	pop	{r4, pc}
 800753a:	bf00      	nop
 800753c:	20000630 	.word	0x20000630

08007540 <CDC_Init_FS>:
{
 8007540:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007542:	4c06      	ldr	r4, [pc, #24]	; (800755c <CDC_Init_FS+0x1c>)
 8007544:	2200      	movs	r2, #0
 8007546:	4906      	ldr	r1, [pc, #24]	; (8007560 <CDC_Init_FS+0x20>)
 8007548:	4620      	mov	r0, r4
 800754a:	f7ff fa6d 	bl	8006a28 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800754e:	4905      	ldr	r1, [pc, #20]	; (8007564 <CDC_Init_FS+0x24>)
 8007550:	4620      	mov	r0, r4
 8007552:	f7ff fa74 	bl	8006a3e <USBD_CDC_SetRxBuffer>
}
 8007556:	2000      	movs	r0, #0
 8007558:	bd10      	pop	{r4, pc}
 800755a:	bf00      	nop
 800755c:	20000630 	.word	0x20000630
 8007560:	20001100 	.word	0x20001100
 8007564:	20000900 	.word	0x20000900

08007568 <CDC_Transmit_FS>:
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007568:	4b09      	ldr	r3, [pc, #36]	; (8007590 <CDC_Transmit_FS+0x28>)
 800756a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
  if (hcdc->TxState != 0){
 800756e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007572:	b10b      	cbz	r3, 8007578 <CDC_Transmit_FS+0x10>
    return USBD_BUSY;
 8007574:	2001      	movs	r0, #1
}
 8007576:	4770      	bx	lr
{
 8007578:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800757a:	4c05      	ldr	r4, [pc, #20]	; (8007590 <CDC_Transmit_FS+0x28>)
 800757c:	460a      	mov	r2, r1
 800757e:	4601      	mov	r1, r0
 8007580:	4620      	mov	r0, r4
 8007582:	f7ff fa51 	bl	8006a28 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007586:	4620      	mov	r0, r4
 8007588:	f7ff fa62 	bl	8006a50 <USBD_CDC_TransmitPacket>
}
 800758c:	bd10      	pop	{r4, pc}
 800758e:	bf00      	nop
 8007590:	20000630 	.word	0x20000630

08007594 <USBD_CDC_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8007594:	2312      	movs	r3, #18
 8007596:	800b      	strh	r3, [r1, #0]
  return USBD_CDC_DeviceDesc;
}
 8007598:	4800      	ldr	r0, [pc, #0]	; (800759c <USBD_CDC_DeviceDescriptor+0x8>)
 800759a:	4770      	bx	lr
 800759c:	20000150 	.word	0x20000150

080075a0 <USBD_CDC_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80075a0:	2304      	movs	r3, #4
 80075a2:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 80075a4:	4800      	ldr	r0, [pc, #0]	; (80075a8 <USBD_CDC_LangIDStrDescriptor+0x8>)
 80075a6:	4770      	bx	lr
 80075a8:	20000164 	.word	0x20000164

080075ac <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 80075ac:	2300      	movs	r3, #0
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d217      	bcs.n	80075e2 <IntToUnicode+0x36>
{
 80075b2:	b430      	push	{r4, r5}
 80075b4:	e00b      	b.n	80075ce <IntToUnicode+0x22>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80075b6:	3437      	adds	r4, #55	; 0x37
 80075b8:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    }

    value = value << 4;
 80075bc:	0100      	lsls	r0, r0, #4

    pbuf[2 * idx + 1] = 0;
 80075be:	005c      	lsls	r4, r3, #1
 80075c0:	3401      	adds	r4, #1
 80075c2:	2500      	movs	r5, #0
 80075c4:	550d      	strb	r5, [r1, r4]
  for (idx = 0; idx < len; idx++)
 80075c6:	3301      	adds	r3, #1
 80075c8:	b2db      	uxtb	r3, r3
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d207      	bcs.n	80075de <IntToUnicode+0x32>
    if (((value >> 28)) < 0xA)
 80075ce:	0f04      	lsrs	r4, r0, #28
 80075d0:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
 80075d4:	d2ef      	bcs.n	80075b6 <IntToUnicode+0xa>
      pbuf[2 * idx] = (value >> 28) + '0';
 80075d6:	3430      	adds	r4, #48	; 0x30
 80075d8:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
 80075dc:	e7ee      	b.n	80075bc <IntToUnicode+0x10>
  }
}
 80075de:	bc30      	pop	{r4, r5}
 80075e0:	4770      	bx	lr
 80075e2:	4770      	bx	lr

080075e4 <Get_SerialNum>:
{
 80075e4:	b538      	push	{r3, r4, r5, lr}
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80075e6:	4b0a      	ldr	r3, [pc, #40]	; (8007610 <Get_SerialNum+0x2c>)
 80075e8:	6818      	ldr	r0, [r3, #0]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80075ea:	3304      	adds	r3, #4
 80075ec:	681c      	ldr	r4, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80075ee:	3304      	adds	r3, #4
 80075f0:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 80075f2:	18c0      	adds	r0, r0, r3
 80075f4:	d100      	bne.n	80075f8 <Get_SerialNum+0x14>
}
 80075f6:	bd38      	pop	{r3, r4, r5, pc}
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80075f8:	4d06      	ldr	r5, [pc, #24]	; (8007614 <Get_SerialNum+0x30>)
 80075fa:	2208      	movs	r2, #8
 80075fc:	1ca9      	adds	r1, r5, #2
 80075fe:	f7ff ffd5 	bl	80075ac <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007602:	2204      	movs	r2, #4
 8007604:	f105 0112 	add.w	r1, r5, #18
 8007608:	4620      	mov	r0, r4
 800760a:	f7ff ffcf 	bl	80075ac <IntToUnicode>
}
 800760e:	e7f2      	b.n	80075f6 <Get_SerialNum+0x12>
 8007610:	1fff7590 	.word	0x1fff7590
 8007614:	20000168 	.word	0x20000168

08007618 <USBD_CDC_SerialStrDescriptor>:
{
 8007618:	b508      	push	{r3, lr}
  *length = USB_SIZ_STRING_SERIAL;
 800761a:	231a      	movs	r3, #26
 800761c:	800b      	strh	r3, [r1, #0]
  Get_SerialNum();
 800761e:	f7ff ffe1 	bl	80075e4 <Get_SerialNum>
}
 8007622:	4801      	ldr	r0, [pc, #4]	; (8007628 <USBD_CDC_SerialStrDescriptor+0x10>)
 8007624:	bd08      	pop	{r3, pc}
 8007626:	bf00      	nop
 8007628:	20000168 	.word	0x20000168

0800762c <USBD_CDC_ProductStrDescriptor>:
{
 800762c:	b508      	push	{r3, lr}
 800762e:	460a      	mov	r2, r1
  if(speed == 0)
 8007630:	b928      	cbnz	r0, 800763e <USBD_CDC_ProductStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8007632:	4905      	ldr	r1, [pc, #20]	; (8007648 <USBD_CDC_ProductStrDescriptor+0x1c>)
 8007634:	4805      	ldr	r0, [pc, #20]	; (800764c <USBD_CDC_ProductStrDescriptor+0x20>)
 8007636:	f7ff fee8 	bl	800740a <USBD_GetString>
}
 800763a:	4803      	ldr	r0, [pc, #12]	; (8007648 <USBD_CDC_ProductStrDescriptor+0x1c>)
 800763c:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800763e:	4902      	ldr	r1, [pc, #8]	; (8007648 <USBD_CDC_ProductStrDescriptor+0x1c>)
 8007640:	4802      	ldr	r0, [pc, #8]	; (800764c <USBD_CDC_ProductStrDescriptor+0x20>)
 8007642:	f7ff fee2 	bl	800740a <USBD_GetString>
 8007646:	e7f8      	b.n	800763a <USBD_CDC_ProductStrDescriptor+0xe>
 8007648:	20001900 	.word	0x20001900
 800764c:	08008348 	.word	0x08008348

08007650 <USBD_CDC_ManufacturerStrDescriptor>:
{
 8007650:	b510      	push	{r4, lr}
 8007652:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007654:	4c03      	ldr	r4, [pc, #12]	; (8007664 <USBD_CDC_ManufacturerStrDescriptor+0x14>)
 8007656:	4621      	mov	r1, r4
 8007658:	4803      	ldr	r0, [pc, #12]	; (8007668 <USBD_CDC_ManufacturerStrDescriptor+0x18>)
 800765a:	f7ff fed6 	bl	800740a <USBD_GetString>
}
 800765e:	4620      	mov	r0, r4
 8007660:	bd10      	pop	{r4, pc}
 8007662:	bf00      	nop
 8007664:	20001900 	.word	0x20001900
 8007668:	08008350 	.word	0x08008350

0800766c <USBD_CDC_ConfigStrDescriptor>:
{
 800766c:	b508      	push	{r3, lr}
 800766e:	460a      	mov	r2, r1
  if(speed == USBD_SPEED_HIGH)
 8007670:	b928      	cbnz	r0, 800767e <USBD_CDC_ConfigStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8007672:	4905      	ldr	r1, [pc, #20]	; (8007688 <USBD_CDC_ConfigStrDescriptor+0x1c>)
 8007674:	4805      	ldr	r0, [pc, #20]	; (800768c <USBD_CDC_ConfigStrDescriptor+0x20>)
 8007676:	f7ff fec8 	bl	800740a <USBD_GetString>
}
 800767a:	4803      	ldr	r0, [pc, #12]	; (8007688 <USBD_CDC_ConfigStrDescriptor+0x1c>)
 800767c:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800767e:	4902      	ldr	r1, [pc, #8]	; (8007688 <USBD_CDC_ConfigStrDescriptor+0x1c>)
 8007680:	4802      	ldr	r0, [pc, #8]	; (800768c <USBD_CDC_ConfigStrDescriptor+0x20>)
 8007682:	f7ff fec2 	bl	800740a <USBD_GetString>
 8007686:	e7f8      	b.n	800767a <USBD_CDC_ConfigStrDescriptor+0xe>
 8007688:	20001900 	.word	0x20001900
 800768c:	08008358 	.word	0x08008358

08007690 <USBD_CDC_InterfaceStrDescriptor>:
{
 8007690:	b508      	push	{r3, lr}
 8007692:	460a      	mov	r2, r1
  if(speed == 0)
 8007694:	b928      	cbnz	r0, 80076a2 <USBD_CDC_InterfaceStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8007696:	4905      	ldr	r1, [pc, #20]	; (80076ac <USBD_CDC_InterfaceStrDescriptor+0x1c>)
 8007698:	4805      	ldr	r0, [pc, #20]	; (80076b0 <USBD_CDC_InterfaceStrDescriptor+0x20>)
 800769a:	f7ff feb6 	bl	800740a <USBD_GetString>
}
 800769e:	4803      	ldr	r0, [pc, #12]	; (80076ac <USBD_CDC_InterfaceStrDescriptor+0x1c>)
 80076a0:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80076a2:	4902      	ldr	r1, [pc, #8]	; (80076ac <USBD_CDC_InterfaceStrDescriptor+0x1c>)
 80076a4:	4802      	ldr	r0, [pc, #8]	; (80076b0 <USBD_CDC_InterfaceStrDescriptor+0x20>)
 80076a6:	f7ff feb0 	bl	800740a <USBD_GetString>
 80076aa:	e7f8      	b.n	800769e <USBD_CDC_InterfaceStrDescriptor+0xe>
 80076ac:	20001900 	.word	0x20001900
 80076b0:	08008364 	.word	0x08008364

080076b4 <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 80076b4:	2803      	cmp	r0, #3
 80076b6:	d805      	bhi.n	80076c4 <USBD_Get_USB_Status+0x10>
 80076b8:	e8df f000 	tbb	[pc, r0]
 80076bc:	05020405 	.word	0x05020405
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
    break;
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80076c0:	2001      	movs	r0, #1
    break;
 80076c2:	4770      	bx	lr
      usb_status = USBD_FAIL;
 80076c4:	2003      	movs	r0, #3
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 80076c6:	4770      	bx	lr

080076c8 <SystemClockConfig_Resume>:
{
 80076c8:	b508      	push	{r3, lr}
  SystemClock_Config();
 80076ca:	f7fa fdb9 	bl	8002240 <SystemClock_Config>
}
 80076ce:	bd08      	pop	{r3, pc}

080076d0 <HAL_PCD_MspInit>:
  if(pcdHandle->Instance==USB)
 80076d0:	6802      	ldr	r2, [r0, #0]
 80076d2:	4b0e      	ldr	r3, [pc, #56]	; (800770c <HAL_PCD_MspInit+0x3c>)
 80076d4:	429a      	cmp	r2, r3
 80076d6:	d000      	beq.n	80076da <HAL_PCD_MspInit+0xa>
 80076d8:	4770      	bx	lr
{
 80076da:	b500      	push	{lr}
 80076dc:	b083      	sub	sp, #12
    __HAL_RCC_USB_CLK_ENABLE();
 80076de:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 80076e2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80076e4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80076e8:	659a      	str	r2, [r3, #88]	; 0x58
 80076ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80076f0:	9301      	str	r3, [sp, #4]
 80076f2:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 80076f4:	2200      	movs	r2, #0
 80076f6:	4611      	mov	r1, r2
 80076f8:	2014      	movs	r0, #20
 80076fa:	f7fb f9df 	bl	8002abc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 80076fe:	2014      	movs	r0, #20
 8007700:	f7fb fa10 	bl	8002b24 <HAL_NVIC_EnableIRQ>
}
 8007704:	b003      	add	sp, #12
 8007706:	f85d fb04 	ldr.w	pc, [sp], #4
 800770a:	bf00      	nop
 800770c:	40005c00 	.word	0x40005c00

08007710 <HAL_PCD_SetupStageCallback>:
{
 8007710:	b508      	push	{r3, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007712:	f500 712c 	add.w	r1, r0, #688	; 0x2b0
 8007716:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 800771a:	f7ff fa0f 	bl	8006b3c <USBD_LL_SetupStage>
}
 800771e:	bd08      	pop	{r3, pc}

08007720 <HAL_PCD_DataOutStageCallback>:
{
 8007720:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007722:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8007726:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800772a:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 800772e:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 8007732:	f7ff fa2f 	bl	8006b94 <USBD_LL_DataOutStage>
}
 8007736:	bd08      	pop	{r3, pc}

08007738 <HAL_PCD_DataInStageCallback>:
{
 8007738:	b508      	push	{r3, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800773a:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800773e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8007742:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007744:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 8007748:	f7ff fa60 	bl	8006c0c <USBD_LL_DataInStage>
}
 800774c:	bd08      	pop	{r3, pc}

0800774e <HAL_PCD_SOFCallback>:
{
 800774e:	b508      	push	{r3, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007750:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 8007754:	f7ff fb00 	bl	8006d58 <USBD_LL_SOF>
}
 8007758:	bd08      	pop	{r3, pc}

0800775a <HAL_PCD_ResetCallback>:
{
 800775a:	b510      	push	{r4, lr}
 800775c:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800775e:	6883      	ldr	r3, [r0, #8]
 8007760:	2b02      	cmp	r3, #2
 8007762:	d109      	bne.n	8007778 <HAL_PCD_ResetCallback+0x1e>
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007764:	2101      	movs	r1, #1
 8007766:	f8d4 02f0 	ldr.w	r0, [r4, #752]	; 0x2f0
 800776a:	f7ff fadb 	bl	8006d24 <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800776e:	f8d4 02f0 	ldr.w	r0, [r4, #752]	; 0x2f0
 8007772:	f7ff faaa 	bl	8006cca <USBD_LL_Reset>
}
 8007776:	bd10      	pop	{r4, pc}
    Error_Handler();
 8007778:	f7fa fc92 	bl	80020a0 <Error_Handler>
 800777c:	e7f2      	b.n	8007764 <HAL_PCD_ResetCallback+0xa>
	...

08007780 <HAL_PCD_SuspendCallback>:
{
 8007780:	b510      	push	{r4, lr}
 8007782:	4604      	mov	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007784:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 8007788:	f7ff facf 	bl	8006d2a <USBD_LL_Suspend>
  if (hpcd->Init.low_power_enable)
 800778c:	69a3      	ldr	r3, [r4, #24]
 800778e:	b123      	cbz	r3, 800779a <HAL_PCD_SuspendCallback+0x1a>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007790:	4a02      	ldr	r2, [pc, #8]	; (800779c <HAL_PCD_SuspendCallback+0x1c>)
 8007792:	6913      	ldr	r3, [r2, #16]
 8007794:	f043 0306 	orr.w	r3, r3, #6
 8007798:	6113      	str	r3, [r2, #16]
}
 800779a:	bd10      	pop	{r4, pc}
 800779c:	e000ed00 	.word	0xe000ed00

080077a0 <HAL_PCD_ResumeCallback>:
{
 80077a0:	b510      	push	{r4, lr}
 80077a2:	4604      	mov	r4, r0
  if (hpcd->Init.low_power_enable)
 80077a4:	6983      	ldr	r3, [r0, #24]
 80077a6:	b923      	cbnz	r3, 80077b2 <HAL_PCD_ResumeCallback+0x12>
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80077a8:	f8d4 02f0 	ldr.w	r0, [r4, #752]	; 0x2f0
 80077ac:	f7ff fac7 	bl	8006d3e <USBD_LL_Resume>
}
 80077b0:	bd10      	pop	{r4, pc}
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80077b2:	4a04      	ldr	r2, [pc, #16]	; (80077c4 <HAL_PCD_ResumeCallback+0x24>)
 80077b4:	6913      	ldr	r3, [r2, #16]
 80077b6:	f023 0306 	bic.w	r3, r3, #6
 80077ba:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80077bc:	f7ff ff84 	bl	80076c8 <SystemClockConfig_Resume>
 80077c0:	e7f2      	b.n	80077a8 <HAL_PCD_ResumeCallback+0x8>
 80077c2:	bf00      	nop
 80077c4:	e000ed00 	.word	0xe000ed00

080077c8 <USBD_LL_Init>:
{
 80077c8:	b510      	push	{r4, lr}
 80077ca:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 80077cc:	481e      	ldr	r0, [pc, #120]	; (8007848 <USBD_LL_Init+0x80>)
 80077ce:	f8c0 42f0 	str.w	r4, [r0, #752]	; 0x2f0
  pdev->pData = &hpcd_USB_FS;
 80077d2:	f8c4 02c4 	str.w	r0, [r4, #708]	; 0x2c4
  hpcd_USB_FS.Instance = USB;
 80077d6:	4b1d      	ldr	r3, [pc, #116]	; (800784c <USBD_LL_Init+0x84>)
 80077d8:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80077da:	2308      	movs	r3, #8
 80077dc:	6043      	str	r3, [r0, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80077de:	2302      	movs	r3, #2
 80077e0:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80077e2:	6103      	str	r3, [r0, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80077e4:	2300      	movs	r3, #0
 80077e6:	6143      	str	r3, [r0, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80077e8:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80077ea:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80077ec:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80077ee:	f7fb fd03 	bl	80031f8 <HAL_PCD_Init>
 80077f2:	bb30      	cbnz	r0, 8007842 <USBD_LL_Init+0x7a>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80077f4:	2318      	movs	r3, #24
 80077f6:	2200      	movs	r2, #0
 80077f8:	4611      	mov	r1, r2
 80077fa:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 80077fe:	f7fc fbc2 	bl	8003f86 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007802:	2358      	movs	r3, #88	; 0x58
 8007804:	2200      	movs	r2, #0
 8007806:	2180      	movs	r1, #128	; 0x80
 8007808:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 800780c:	f7fc fbbb 	bl	8003f86 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8007810:	23c0      	movs	r3, #192	; 0xc0
 8007812:	2200      	movs	r2, #0
 8007814:	2181      	movs	r1, #129	; 0x81
 8007816:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 800781a:	f7fc fbb4 	bl	8003f86 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800781e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8007822:	2200      	movs	r2, #0
 8007824:	2101      	movs	r1, #1
 8007826:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 800782a:	f7fc fbac 	bl	8003f86 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800782e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007832:	2200      	movs	r2, #0
 8007834:	2182      	movs	r1, #130	; 0x82
 8007836:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 800783a:	f7fc fba4 	bl	8003f86 <HAL_PCDEx_PMAConfig>
}
 800783e:	2000      	movs	r0, #0
 8007840:	bd10      	pop	{r4, pc}
    Error_Handler( );
 8007842:	f7fa fc2d 	bl	80020a0 <Error_Handler>
 8007846:	e7d5      	b.n	80077f4 <USBD_LL_Init+0x2c>
 8007848:	20001b00 	.word	0x20001b00
 800784c:	40005c00 	.word	0x40005c00

08007850 <USBD_LL_Start>:
{
 8007850:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8007852:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8007856:	f7fb fd3c 	bl	80032d2 <HAL_PCD_Start>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800785a:	f7ff ff2b 	bl	80076b4 <USBD_Get_USB_Status>
}
 800785e:	bd08      	pop	{r3, pc}

08007860 <USBD_LL_OpenEP>:
{
 8007860:	b510      	push	{r4, lr}
 8007862:	4614      	mov	r4, r2
 8007864:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007866:	4623      	mov	r3, r4
 8007868:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800786c:	f7fc fa5f 	bl	8003d2e <HAL_PCD_EP_Open>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007870:	f7ff ff20 	bl	80076b4 <USBD_Get_USB_Status>
}
 8007874:	bd10      	pop	{r4, pc}

08007876 <USBD_LL_CloseEP>:
{
 8007876:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007878:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800787c:	f7fc fa93 	bl	8003da6 <HAL_PCD_EP_Close>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007880:	f7ff ff18 	bl	80076b4 <USBD_Get_USB_Status>
}
 8007884:	bd08      	pop	{r3, pc}

08007886 <USBD_LL_StallEP>:
{
 8007886:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007888:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800788c:	f7fc fb0b 	bl	8003ea6 <HAL_PCD_EP_SetStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007890:	f7ff ff10 	bl	80076b4 <USBD_Get_USB_Status>
}
 8007894:	bd08      	pop	{r3, pc}

08007896 <USBD_LL_ClearStallEP>:
{
 8007896:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007898:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800789c:	f7fc fb38 	bl	8003f10 <HAL_PCD_EP_ClrStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80078a0:	f7ff ff08 	bl	80076b4 <USBD_Get_USB_Status>
}
 80078a4:	bd08      	pop	{r3, pc}

080078a6 <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80078a6:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4
  if((ep_addr & 0x80) == 0x80)
 80078aa:	f011 0f80 	tst.w	r1, #128	; 0x80
 80078ae:	d108      	bne.n	80078c2 <USBD_LL_IsStallEP+0x1c>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80078b0:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80078b4:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80078b8:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80078bc:	f891 016a 	ldrb.w	r0, [r1, #362]	; 0x16a
}
 80078c0:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80078c2:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80078c6:	3101      	adds	r1, #1
 80078c8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80078cc:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80078d0:	7888      	ldrb	r0, [r1, #2]
 80078d2:	4770      	bx	lr

080078d4 <USBD_LL_SetUSBAddress>:
{
 80078d4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80078d6:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 80078da:	f7fc f926 	bl	8003b2a <HAL_PCD_SetAddress>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80078de:	f7ff fee9 	bl	80076b4 <USBD_Get_USB_Status>
}
 80078e2:	bd08      	pop	{r3, pc}

080078e4 <USBD_LL_Transmit>:
{
 80078e4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80078e6:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 80078ea:	f7fc fab9 	bl	8003e60 <HAL_PCD_EP_Transmit>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80078ee:	f7ff fee1 	bl	80076b4 <USBD_Get_USB_Status>
}
 80078f2:	bd08      	pop	{r3, pc}

080078f4 <USBD_LL_PrepareReceive>:
{
 80078f4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80078f6:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 80078fa:	f7fc fa86 	bl	8003e0a <HAL_PCD_EP_Receive>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80078fe:	f7ff fed9 	bl	80076b4 <USBD_Get_USB_Status>
}
 8007902:	bd08      	pop	{r3, pc}

08007904 <USBD_LL_GetRxDataSize>:
{
 8007904:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007906:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800790a:	f7fc faa0 	bl	8003e4e <HAL_PCD_EP_GetRxCount>
}
 800790e:	bd08      	pop	{r3, pc}

08007910 <HAL_PCDEx_LPM_Callback>:
{
 8007910:	b510      	push	{r4, lr}
 8007912:	4604      	mov	r4, r0
  switch (msg)
 8007914:	b111      	cbz	r1, 800791c <HAL_PCDEx_LPM_Callback+0xc>
 8007916:	2901      	cmp	r1, #1
 8007918:	d00f      	beq.n	800793a <HAL_PCDEx_LPM_Callback+0x2a>
}
 800791a:	bd10      	pop	{r4, pc}
    if (hpcd->Init.low_power_enable)
 800791c:	6983      	ldr	r3, [r0, #24]
 800791e:	b923      	cbnz	r3, 800792a <HAL_PCDEx_LPM_Callback+0x1a>
    USBD_LL_Resume(hpcd->pData);
 8007920:	f8d4 02f0 	ldr.w	r0, [r4, #752]	; 0x2f0
 8007924:	f7ff fa0b 	bl	8006d3e <USBD_LL_Resume>
    break;
 8007928:	e7f7      	b.n	800791a <HAL_PCDEx_LPM_Callback+0xa>
      SystemClockConfig_Resume();
 800792a:	f7ff fecd 	bl	80076c8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800792e:	4a09      	ldr	r2, [pc, #36]	; (8007954 <HAL_PCDEx_LPM_Callback+0x44>)
 8007930:	6913      	ldr	r3, [r2, #16]
 8007932:	f023 0306 	bic.w	r3, r3, #6
 8007936:	6113      	str	r3, [r2, #16]
 8007938:	e7f2      	b.n	8007920 <HAL_PCDEx_LPM_Callback+0x10>
    USBD_LL_Suspend(hpcd->pData);
 800793a:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 800793e:	f7ff f9f4 	bl	8006d2a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8007942:	69a3      	ldr	r3, [r4, #24]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d0e8      	beq.n	800791a <HAL_PCDEx_LPM_Callback+0xa>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007948:	4a02      	ldr	r2, [pc, #8]	; (8007954 <HAL_PCDEx_LPM_Callback+0x44>)
 800794a:	6913      	ldr	r3, [r2, #16]
 800794c:	f043 0306 	orr.w	r3, r3, #6
 8007950:	6113      	str	r3, [r2, #16]
}
 8007952:	e7e2      	b.n	800791a <HAL_PCDEx_LPM_Callback+0xa>
 8007954:	e000ed00 	.word	0xe000ed00

08007958 <USBD_static_malloc>:
}
 8007958:	4800      	ldr	r0, [pc, #0]	; (800795c <USBD_static_malloc+0x4>)
 800795a:	4770      	bx	lr
 800795c:	2000020c 	.word	0x2000020c

08007960 <USBD_static_free>:
}
 8007960:	4770      	bx	lr
	...

08007964 <__errno>:
 8007964:	4b01      	ldr	r3, [pc, #4]	; (800796c <__errno+0x8>)
 8007966:	6818      	ldr	r0, [r3, #0]
 8007968:	4770      	bx	lr
 800796a:	bf00      	nop
 800796c:	20000184 	.word	0x20000184

08007970 <__libc_init_array>:
 8007970:	b570      	push	{r4, r5, r6, lr}
 8007972:	4d0d      	ldr	r5, [pc, #52]	; (80079a8 <__libc_init_array+0x38>)
 8007974:	4c0d      	ldr	r4, [pc, #52]	; (80079ac <__libc_init_array+0x3c>)
 8007976:	1b64      	subs	r4, r4, r5
 8007978:	10a4      	asrs	r4, r4, #2
 800797a:	2600      	movs	r6, #0
 800797c:	42a6      	cmp	r6, r4
 800797e:	d109      	bne.n	8007994 <__libc_init_array+0x24>
 8007980:	4d0b      	ldr	r5, [pc, #44]	; (80079b0 <__libc_init_array+0x40>)
 8007982:	4c0c      	ldr	r4, [pc, #48]	; (80079b4 <__libc_init_array+0x44>)
 8007984:	f000 fc4e 	bl	8008224 <_init>
 8007988:	1b64      	subs	r4, r4, r5
 800798a:	10a4      	asrs	r4, r4, #2
 800798c:	2600      	movs	r6, #0
 800798e:	42a6      	cmp	r6, r4
 8007990:	d105      	bne.n	800799e <__libc_init_array+0x2e>
 8007992:	bd70      	pop	{r4, r5, r6, pc}
 8007994:	f855 3b04 	ldr.w	r3, [r5], #4
 8007998:	4798      	blx	r3
 800799a:	3601      	adds	r6, #1
 800799c:	e7ee      	b.n	800797c <__libc_init_array+0xc>
 800799e:	f855 3b04 	ldr.w	r3, [r5], #4
 80079a2:	4798      	blx	r3
 80079a4:	3601      	adds	r6, #1
 80079a6:	e7f2      	b.n	800798e <__libc_init_array+0x1e>
 80079a8:	080083b0 	.word	0x080083b0
 80079ac:	080083b0 	.word	0x080083b0
 80079b0:	080083b0 	.word	0x080083b0
 80079b4:	080083b4 	.word	0x080083b4

080079b8 <memset>:
 80079b8:	4402      	add	r2, r0
 80079ba:	4603      	mov	r3, r0
 80079bc:	4293      	cmp	r3, r2
 80079be:	d100      	bne.n	80079c2 <memset+0xa>
 80079c0:	4770      	bx	lr
 80079c2:	f803 1b01 	strb.w	r1, [r3], #1
 80079c6:	e7f9      	b.n	80079bc <memset+0x4>

080079c8 <siprintf>:
 80079c8:	b40e      	push	{r1, r2, r3}
 80079ca:	b500      	push	{lr}
 80079cc:	b09c      	sub	sp, #112	; 0x70
 80079ce:	ab1d      	add	r3, sp, #116	; 0x74
 80079d0:	9002      	str	r0, [sp, #8]
 80079d2:	9006      	str	r0, [sp, #24]
 80079d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80079d8:	4809      	ldr	r0, [pc, #36]	; (8007a00 <siprintf+0x38>)
 80079da:	9107      	str	r1, [sp, #28]
 80079dc:	9104      	str	r1, [sp, #16]
 80079de:	4909      	ldr	r1, [pc, #36]	; (8007a04 <siprintf+0x3c>)
 80079e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80079e4:	9105      	str	r1, [sp, #20]
 80079e6:	6800      	ldr	r0, [r0, #0]
 80079e8:	9301      	str	r3, [sp, #4]
 80079ea:	a902      	add	r1, sp, #8
 80079ec:	f000 f868 	bl	8007ac0 <_svfiprintf_r>
 80079f0:	9b02      	ldr	r3, [sp, #8]
 80079f2:	2200      	movs	r2, #0
 80079f4:	701a      	strb	r2, [r3, #0]
 80079f6:	b01c      	add	sp, #112	; 0x70
 80079f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80079fc:	b003      	add	sp, #12
 80079fe:	4770      	bx	lr
 8007a00:	20000184 	.word	0x20000184
 8007a04:	ffff0208 	.word	0xffff0208

08007a08 <__ssputs_r>:
 8007a08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a0c:	688e      	ldr	r6, [r1, #8]
 8007a0e:	429e      	cmp	r6, r3
 8007a10:	4682      	mov	sl, r0
 8007a12:	460c      	mov	r4, r1
 8007a14:	4690      	mov	r8, r2
 8007a16:	461f      	mov	r7, r3
 8007a18:	d838      	bhi.n	8007a8c <__ssputs_r+0x84>
 8007a1a:	898a      	ldrh	r2, [r1, #12]
 8007a1c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007a20:	d032      	beq.n	8007a88 <__ssputs_r+0x80>
 8007a22:	6825      	ldr	r5, [r4, #0]
 8007a24:	6909      	ldr	r1, [r1, #16]
 8007a26:	eba5 0901 	sub.w	r9, r5, r1
 8007a2a:	6965      	ldr	r5, [r4, #20]
 8007a2c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007a30:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007a34:	3301      	adds	r3, #1
 8007a36:	444b      	add	r3, r9
 8007a38:	106d      	asrs	r5, r5, #1
 8007a3a:	429d      	cmp	r5, r3
 8007a3c:	bf38      	it	cc
 8007a3e:	461d      	movcc	r5, r3
 8007a40:	0553      	lsls	r3, r2, #21
 8007a42:	d531      	bpl.n	8007aa8 <__ssputs_r+0xa0>
 8007a44:	4629      	mov	r1, r5
 8007a46:	f000 fb47 	bl	80080d8 <_malloc_r>
 8007a4a:	4606      	mov	r6, r0
 8007a4c:	b950      	cbnz	r0, 8007a64 <__ssputs_r+0x5c>
 8007a4e:	230c      	movs	r3, #12
 8007a50:	f8ca 3000 	str.w	r3, [sl]
 8007a54:	89a3      	ldrh	r3, [r4, #12]
 8007a56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a5a:	81a3      	strh	r3, [r4, #12]
 8007a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8007a60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a64:	6921      	ldr	r1, [r4, #16]
 8007a66:	464a      	mov	r2, r9
 8007a68:	f000 fabe 	bl	8007fe8 <memcpy>
 8007a6c:	89a3      	ldrh	r3, [r4, #12]
 8007a6e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007a72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a76:	81a3      	strh	r3, [r4, #12]
 8007a78:	6126      	str	r6, [r4, #16]
 8007a7a:	6165      	str	r5, [r4, #20]
 8007a7c:	444e      	add	r6, r9
 8007a7e:	eba5 0509 	sub.w	r5, r5, r9
 8007a82:	6026      	str	r6, [r4, #0]
 8007a84:	60a5      	str	r5, [r4, #8]
 8007a86:	463e      	mov	r6, r7
 8007a88:	42be      	cmp	r6, r7
 8007a8a:	d900      	bls.n	8007a8e <__ssputs_r+0x86>
 8007a8c:	463e      	mov	r6, r7
 8007a8e:	4632      	mov	r2, r6
 8007a90:	6820      	ldr	r0, [r4, #0]
 8007a92:	4641      	mov	r1, r8
 8007a94:	f000 fab6 	bl	8008004 <memmove>
 8007a98:	68a3      	ldr	r3, [r4, #8]
 8007a9a:	6822      	ldr	r2, [r4, #0]
 8007a9c:	1b9b      	subs	r3, r3, r6
 8007a9e:	4432      	add	r2, r6
 8007aa0:	60a3      	str	r3, [r4, #8]
 8007aa2:	6022      	str	r2, [r4, #0]
 8007aa4:	2000      	movs	r0, #0
 8007aa6:	e7db      	b.n	8007a60 <__ssputs_r+0x58>
 8007aa8:	462a      	mov	r2, r5
 8007aaa:	f000 fb6f 	bl	800818c <_realloc_r>
 8007aae:	4606      	mov	r6, r0
 8007ab0:	2800      	cmp	r0, #0
 8007ab2:	d1e1      	bne.n	8007a78 <__ssputs_r+0x70>
 8007ab4:	6921      	ldr	r1, [r4, #16]
 8007ab6:	4650      	mov	r0, sl
 8007ab8:	f000 fabe 	bl	8008038 <_free_r>
 8007abc:	e7c7      	b.n	8007a4e <__ssputs_r+0x46>
	...

08007ac0 <_svfiprintf_r>:
 8007ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ac4:	4698      	mov	r8, r3
 8007ac6:	898b      	ldrh	r3, [r1, #12]
 8007ac8:	061b      	lsls	r3, r3, #24
 8007aca:	b09d      	sub	sp, #116	; 0x74
 8007acc:	4607      	mov	r7, r0
 8007ace:	460d      	mov	r5, r1
 8007ad0:	4614      	mov	r4, r2
 8007ad2:	d50e      	bpl.n	8007af2 <_svfiprintf_r+0x32>
 8007ad4:	690b      	ldr	r3, [r1, #16]
 8007ad6:	b963      	cbnz	r3, 8007af2 <_svfiprintf_r+0x32>
 8007ad8:	2140      	movs	r1, #64	; 0x40
 8007ada:	f000 fafd 	bl	80080d8 <_malloc_r>
 8007ade:	6028      	str	r0, [r5, #0]
 8007ae0:	6128      	str	r0, [r5, #16]
 8007ae2:	b920      	cbnz	r0, 8007aee <_svfiprintf_r+0x2e>
 8007ae4:	230c      	movs	r3, #12
 8007ae6:	603b      	str	r3, [r7, #0]
 8007ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8007aec:	e0d1      	b.n	8007c92 <_svfiprintf_r+0x1d2>
 8007aee:	2340      	movs	r3, #64	; 0x40
 8007af0:	616b      	str	r3, [r5, #20]
 8007af2:	2300      	movs	r3, #0
 8007af4:	9309      	str	r3, [sp, #36]	; 0x24
 8007af6:	2320      	movs	r3, #32
 8007af8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007afc:	f8cd 800c 	str.w	r8, [sp, #12]
 8007b00:	2330      	movs	r3, #48	; 0x30
 8007b02:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007cac <_svfiprintf_r+0x1ec>
 8007b06:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007b0a:	f04f 0901 	mov.w	r9, #1
 8007b0e:	4623      	mov	r3, r4
 8007b10:	469a      	mov	sl, r3
 8007b12:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b16:	b10a      	cbz	r2, 8007b1c <_svfiprintf_r+0x5c>
 8007b18:	2a25      	cmp	r2, #37	; 0x25
 8007b1a:	d1f9      	bne.n	8007b10 <_svfiprintf_r+0x50>
 8007b1c:	ebba 0b04 	subs.w	fp, sl, r4
 8007b20:	d00b      	beq.n	8007b3a <_svfiprintf_r+0x7a>
 8007b22:	465b      	mov	r3, fp
 8007b24:	4622      	mov	r2, r4
 8007b26:	4629      	mov	r1, r5
 8007b28:	4638      	mov	r0, r7
 8007b2a:	f7ff ff6d 	bl	8007a08 <__ssputs_r>
 8007b2e:	3001      	adds	r0, #1
 8007b30:	f000 80aa 	beq.w	8007c88 <_svfiprintf_r+0x1c8>
 8007b34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b36:	445a      	add	r2, fp
 8007b38:	9209      	str	r2, [sp, #36]	; 0x24
 8007b3a:	f89a 3000 	ldrb.w	r3, [sl]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	f000 80a2 	beq.w	8007c88 <_svfiprintf_r+0x1c8>
 8007b44:	2300      	movs	r3, #0
 8007b46:	f04f 32ff 	mov.w	r2, #4294967295
 8007b4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b4e:	f10a 0a01 	add.w	sl, sl, #1
 8007b52:	9304      	str	r3, [sp, #16]
 8007b54:	9307      	str	r3, [sp, #28]
 8007b56:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007b5a:	931a      	str	r3, [sp, #104]	; 0x68
 8007b5c:	4654      	mov	r4, sl
 8007b5e:	2205      	movs	r2, #5
 8007b60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b64:	4851      	ldr	r0, [pc, #324]	; (8007cac <_svfiprintf_r+0x1ec>)
 8007b66:	f7f8 fb63 	bl	8000230 <memchr>
 8007b6a:	9a04      	ldr	r2, [sp, #16]
 8007b6c:	b9d8      	cbnz	r0, 8007ba6 <_svfiprintf_r+0xe6>
 8007b6e:	06d0      	lsls	r0, r2, #27
 8007b70:	bf44      	itt	mi
 8007b72:	2320      	movmi	r3, #32
 8007b74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b78:	0711      	lsls	r1, r2, #28
 8007b7a:	bf44      	itt	mi
 8007b7c:	232b      	movmi	r3, #43	; 0x2b
 8007b7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b82:	f89a 3000 	ldrb.w	r3, [sl]
 8007b86:	2b2a      	cmp	r3, #42	; 0x2a
 8007b88:	d015      	beq.n	8007bb6 <_svfiprintf_r+0xf6>
 8007b8a:	9a07      	ldr	r2, [sp, #28]
 8007b8c:	4654      	mov	r4, sl
 8007b8e:	2000      	movs	r0, #0
 8007b90:	f04f 0c0a 	mov.w	ip, #10
 8007b94:	4621      	mov	r1, r4
 8007b96:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b9a:	3b30      	subs	r3, #48	; 0x30
 8007b9c:	2b09      	cmp	r3, #9
 8007b9e:	d94e      	bls.n	8007c3e <_svfiprintf_r+0x17e>
 8007ba0:	b1b0      	cbz	r0, 8007bd0 <_svfiprintf_r+0x110>
 8007ba2:	9207      	str	r2, [sp, #28]
 8007ba4:	e014      	b.n	8007bd0 <_svfiprintf_r+0x110>
 8007ba6:	eba0 0308 	sub.w	r3, r0, r8
 8007baa:	fa09 f303 	lsl.w	r3, r9, r3
 8007bae:	4313      	orrs	r3, r2
 8007bb0:	9304      	str	r3, [sp, #16]
 8007bb2:	46a2      	mov	sl, r4
 8007bb4:	e7d2      	b.n	8007b5c <_svfiprintf_r+0x9c>
 8007bb6:	9b03      	ldr	r3, [sp, #12]
 8007bb8:	1d19      	adds	r1, r3, #4
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	9103      	str	r1, [sp, #12]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	bfbb      	ittet	lt
 8007bc2:	425b      	neglt	r3, r3
 8007bc4:	f042 0202 	orrlt.w	r2, r2, #2
 8007bc8:	9307      	strge	r3, [sp, #28]
 8007bca:	9307      	strlt	r3, [sp, #28]
 8007bcc:	bfb8      	it	lt
 8007bce:	9204      	strlt	r2, [sp, #16]
 8007bd0:	7823      	ldrb	r3, [r4, #0]
 8007bd2:	2b2e      	cmp	r3, #46	; 0x2e
 8007bd4:	d10c      	bne.n	8007bf0 <_svfiprintf_r+0x130>
 8007bd6:	7863      	ldrb	r3, [r4, #1]
 8007bd8:	2b2a      	cmp	r3, #42	; 0x2a
 8007bda:	d135      	bne.n	8007c48 <_svfiprintf_r+0x188>
 8007bdc:	9b03      	ldr	r3, [sp, #12]
 8007bde:	1d1a      	adds	r2, r3, #4
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	9203      	str	r2, [sp, #12]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	bfb8      	it	lt
 8007be8:	f04f 33ff 	movlt.w	r3, #4294967295
 8007bec:	3402      	adds	r4, #2
 8007bee:	9305      	str	r3, [sp, #20]
 8007bf0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007cbc <_svfiprintf_r+0x1fc>
 8007bf4:	7821      	ldrb	r1, [r4, #0]
 8007bf6:	2203      	movs	r2, #3
 8007bf8:	4650      	mov	r0, sl
 8007bfa:	f7f8 fb19 	bl	8000230 <memchr>
 8007bfe:	b140      	cbz	r0, 8007c12 <_svfiprintf_r+0x152>
 8007c00:	2340      	movs	r3, #64	; 0x40
 8007c02:	eba0 000a 	sub.w	r0, r0, sl
 8007c06:	fa03 f000 	lsl.w	r0, r3, r0
 8007c0a:	9b04      	ldr	r3, [sp, #16]
 8007c0c:	4303      	orrs	r3, r0
 8007c0e:	3401      	adds	r4, #1
 8007c10:	9304      	str	r3, [sp, #16]
 8007c12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c16:	4826      	ldr	r0, [pc, #152]	; (8007cb0 <_svfiprintf_r+0x1f0>)
 8007c18:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007c1c:	2206      	movs	r2, #6
 8007c1e:	f7f8 fb07 	bl	8000230 <memchr>
 8007c22:	2800      	cmp	r0, #0
 8007c24:	d038      	beq.n	8007c98 <_svfiprintf_r+0x1d8>
 8007c26:	4b23      	ldr	r3, [pc, #140]	; (8007cb4 <_svfiprintf_r+0x1f4>)
 8007c28:	bb1b      	cbnz	r3, 8007c72 <_svfiprintf_r+0x1b2>
 8007c2a:	9b03      	ldr	r3, [sp, #12]
 8007c2c:	3307      	adds	r3, #7
 8007c2e:	f023 0307 	bic.w	r3, r3, #7
 8007c32:	3308      	adds	r3, #8
 8007c34:	9303      	str	r3, [sp, #12]
 8007c36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c38:	4433      	add	r3, r6
 8007c3a:	9309      	str	r3, [sp, #36]	; 0x24
 8007c3c:	e767      	b.n	8007b0e <_svfiprintf_r+0x4e>
 8007c3e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c42:	460c      	mov	r4, r1
 8007c44:	2001      	movs	r0, #1
 8007c46:	e7a5      	b.n	8007b94 <_svfiprintf_r+0xd4>
 8007c48:	2300      	movs	r3, #0
 8007c4a:	3401      	adds	r4, #1
 8007c4c:	9305      	str	r3, [sp, #20]
 8007c4e:	4619      	mov	r1, r3
 8007c50:	f04f 0c0a 	mov.w	ip, #10
 8007c54:	4620      	mov	r0, r4
 8007c56:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c5a:	3a30      	subs	r2, #48	; 0x30
 8007c5c:	2a09      	cmp	r2, #9
 8007c5e:	d903      	bls.n	8007c68 <_svfiprintf_r+0x1a8>
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d0c5      	beq.n	8007bf0 <_svfiprintf_r+0x130>
 8007c64:	9105      	str	r1, [sp, #20]
 8007c66:	e7c3      	b.n	8007bf0 <_svfiprintf_r+0x130>
 8007c68:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c6c:	4604      	mov	r4, r0
 8007c6e:	2301      	movs	r3, #1
 8007c70:	e7f0      	b.n	8007c54 <_svfiprintf_r+0x194>
 8007c72:	ab03      	add	r3, sp, #12
 8007c74:	9300      	str	r3, [sp, #0]
 8007c76:	462a      	mov	r2, r5
 8007c78:	4b0f      	ldr	r3, [pc, #60]	; (8007cb8 <_svfiprintf_r+0x1f8>)
 8007c7a:	a904      	add	r1, sp, #16
 8007c7c:	4638      	mov	r0, r7
 8007c7e:	f3af 8000 	nop.w
 8007c82:	1c42      	adds	r2, r0, #1
 8007c84:	4606      	mov	r6, r0
 8007c86:	d1d6      	bne.n	8007c36 <_svfiprintf_r+0x176>
 8007c88:	89ab      	ldrh	r3, [r5, #12]
 8007c8a:	065b      	lsls	r3, r3, #25
 8007c8c:	f53f af2c 	bmi.w	8007ae8 <_svfiprintf_r+0x28>
 8007c90:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007c92:	b01d      	add	sp, #116	; 0x74
 8007c94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c98:	ab03      	add	r3, sp, #12
 8007c9a:	9300      	str	r3, [sp, #0]
 8007c9c:	462a      	mov	r2, r5
 8007c9e:	4b06      	ldr	r3, [pc, #24]	; (8007cb8 <_svfiprintf_r+0x1f8>)
 8007ca0:	a904      	add	r1, sp, #16
 8007ca2:	4638      	mov	r0, r7
 8007ca4:	f000 f87a 	bl	8007d9c <_printf_i>
 8007ca8:	e7eb      	b.n	8007c82 <_svfiprintf_r+0x1c2>
 8007caa:	bf00      	nop
 8007cac:	08008372 	.word	0x08008372
 8007cb0:	0800837c 	.word	0x0800837c
 8007cb4:	00000000 	.word	0x00000000
 8007cb8:	08007a09 	.word	0x08007a09
 8007cbc:	08008378 	.word	0x08008378

08007cc0 <_printf_common>:
 8007cc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cc4:	4616      	mov	r6, r2
 8007cc6:	4699      	mov	r9, r3
 8007cc8:	688a      	ldr	r2, [r1, #8]
 8007cca:	690b      	ldr	r3, [r1, #16]
 8007ccc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007cd0:	4293      	cmp	r3, r2
 8007cd2:	bfb8      	it	lt
 8007cd4:	4613      	movlt	r3, r2
 8007cd6:	6033      	str	r3, [r6, #0]
 8007cd8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007cdc:	4607      	mov	r7, r0
 8007cde:	460c      	mov	r4, r1
 8007ce0:	b10a      	cbz	r2, 8007ce6 <_printf_common+0x26>
 8007ce2:	3301      	adds	r3, #1
 8007ce4:	6033      	str	r3, [r6, #0]
 8007ce6:	6823      	ldr	r3, [r4, #0]
 8007ce8:	0699      	lsls	r1, r3, #26
 8007cea:	bf42      	ittt	mi
 8007cec:	6833      	ldrmi	r3, [r6, #0]
 8007cee:	3302      	addmi	r3, #2
 8007cf0:	6033      	strmi	r3, [r6, #0]
 8007cf2:	6825      	ldr	r5, [r4, #0]
 8007cf4:	f015 0506 	ands.w	r5, r5, #6
 8007cf8:	d106      	bne.n	8007d08 <_printf_common+0x48>
 8007cfa:	f104 0a19 	add.w	sl, r4, #25
 8007cfe:	68e3      	ldr	r3, [r4, #12]
 8007d00:	6832      	ldr	r2, [r6, #0]
 8007d02:	1a9b      	subs	r3, r3, r2
 8007d04:	42ab      	cmp	r3, r5
 8007d06:	dc26      	bgt.n	8007d56 <_printf_common+0x96>
 8007d08:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007d0c:	1e13      	subs	r3, r2, #0
 8007d0e:	6822      	ldr	r2, [r4, #0]
 8007d10:	bf18      	it	ne
 8007d12:	2301      	movne	r3, #1
 8007d14:	0692      	lsls	r2, r2, #26
 8007d16:	d42b      	bmi.n	8007d70 <_printf_common+0xb0>
 8007d18:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007d1c:	4649      	mov	r1, r9
 8007d1e:	4638      	mov	r0, r7
 8007d20:	47c0      	blx	r8
 8007d22:	3001      	adds	r0, #1
 8007d24:	d01e      	beq.n	8007d64 <_printf_common+0xa4>
 8007d26:	6823      	ldr	r3, [r4, #0]
 8007d28:	68e5      	ldr	r5, [r4, #12]
 8007d2a:	6832      	ldr	r2, [r6, #0]
 8007d2c:	f003 0306 	and.w	r3, r3, #6
 8007d30:	2b04      	cmp	r3, #4
 8007d32:	bf08      	it	eq
 8007d34:	1aad      	subeq	r5, r5, r2
 8007d36:	68a3      	ldr	r3, [r4, #8]
 8007d38:	6922      	ldr	r2, [r4, #16]
 8007d3a:	bf0c      	ite	eq
 8007d3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007d40:	2500      	movne	r5, #0
 8007d42:	4293      	cmp	r3, r2
 8007d44:	bfc4      	itt	gt
 8007d46:	1a9b      	subgt	r3, r3, r2
 8007d48:	18ed      	addgt	r5, r5, r3
 8007d4a:	2600      	movs	r6, #0
 8007d4c:	341a      	adds	r4, #26
 8007d4e:	42b5      	cmp	r5, r6
 8007d50:	d11a      	bne.n	8007d88 <_printf_common+0xc8>
 8007d52:	2000      	movs	r0, #0
 8007d54:	e008      	b.n	8007d68 <_printf_common+0xa8>
 8007d56:	2301      	movs	r3, #1
 8007d58:	4652      	mov	r2, sl
 8007d5a:	4649      	mov	r1, r9
 8007d5c:	4638      	mov	r0, r7
 8007d5e:	47c0      	blx	r8
 8007d60:	3001      	adds	r0, #1
 8007d62:	d103      	bne.n	8007d6c <_printf_common+0xac>
 8007d64:	f04f 30ff 	mov.w	r0, #4294967295
 8007d68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d6c:	3501      	adds	r5, #1
 8007d6e:	e7c6      	b.n	8007cfe <_printf_common+0x3e>
 8007d70:	18e1      	adds	r1, r4, r3
 8007d72:	1c5a      	adds	r2, r3, #1
 8007d74:	2030      	movs	r0, #48	; 0x30
 8007d76:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007d7a:	4422      	add	r2, r4
 8007d7c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007d80:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007d84:	3302      	adds	r3, #2
 8007d86:	e7c7      	b.n	8007d18 <_printf_common+0x58>
 8007d88:	2301      	movs	r3, #1
 8007d8a:	4622      	mov	r2, r4
 8007d8c:	4649      	mov	r1, r9
 8007d8e:	4638      	mov	r0, r7
 8007d90:	47c0      	blx	r8
 8007d92:	3001      	adds	r0, #1
 8007d94:	d0e6      	beq.n	8007d64 <_printf_common+0xa4>
 8007d96:	3601      	adds	r6, #1
 8007d98:	e7d9      	b.n	8007d4e <_printf_common+0x8e>
	...

08007d9c <_printf_i>:
 8007d9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007da0:	460c      	mov	r4, r1
 8007da2:	4691      	mov	r9, r2
 8007da4:	7e27      	ldrb	r7, [r4, #24]
 8007da6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007da8:	2f78      	cmp	r7, #120	; 0x78
 8007daa:	4680      	mov	r8, r0
 8007dac:	469a      	mov	sl, r3
 8007dae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007db2:	d807      	bhi.n	8007dc4 <_printf_i+0x28>
 8007db4:	2f62      	cmp	r7, #98	; 0x62
 8007db6:	d80a      	bhi.n	8007dce <_printf_i+0x32>
 8007db8:	2f00      	cmp	r7, #0
 8007dba:	f000 80d8 	beq.w	8007f6e <_printf_i+0x1d2>
 8007dbe:	2f58      	cmp	r7, #88	; 0x58
 8007dc0:	f000 80a3 	beq.w	8007f0a <_printf_i+0x16e>
 8007dc4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007dc8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007dcc:	e03a      	b.n	8007e44 <_printf_i+0xa8>
 8007dce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007dd2:	2b15      	cmp	r3, #21
 8007dd4:	d8f6      	bhi.n	8007dc4 <_printf_i+0x28>
 8007dd6:	a001      	add	r0, pc, #4	; (adr r0, 8007ddc <_printf_i+0x40>)
 8007dd8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007ddc:	08007e35 	.word	0x08007e35
 8007de0:	08007e49 	.word	0x08007e49
 8007de4:	08007dc5 	.word	0x08007dc5
 8007de8:	08007dc5 	.word	0x08007dc5
 8007dec:	08007dc5 	.word	0x08007dc5
 8007df0:	08007dc5 	.word	0x08007dc5
 8007df4:	08007e49 	.word	0x08007e49
 8007df8:	08007dc5 	.word	0x08007dc5
 8007dfc:	08007dc5 	.word	0x08007dc5
 8007e00:	08007dc5 	.word	0x08007dc5
 8007e04:	08007dc5 	.word	0x08007dc5
 8007e08:	08007f55 	.word	0x08007f55
 8007e0c:	08007e79 	.word	0x08007e79
 8007e10:	08007f37 	.word	0x08007f37
 8007e14:	08007dc5 	.word	0x08007dc5
 8007e18:	08007dc5 	.word	0x08007dc5
 8007e1c:	08007f77 	.word	0x08007f77
 8007e20:	08007dc5 	.word	0x08007dc5
 8007e24:	08007e79 	.word	0x08007e79
 8007e28:	08007dc5 	.word	0x08007dc5
 8007e2c:	08007dc5 	.word	0x08007dc5
 8007e30:	08007f3f 	.word	0x08007f3f
 8007e34:	680b      	ldr	r3, [r1, #0]
 8007e36:	1d1a      	adds	r2, r3, #4
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	600a      	str	r2, [r1, #0]
 8007e3c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007e40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007e44:	2301      	movs	r3, #1
 8007e46:	e0a3      	b.n	8007f90 <_printf_i+0x1f4>
 8007e48:	6825      	ldr	r5, [r4, #0]
 8007e4a:	6808      	ldr	r0, [r1, #0]
 8007e4c:	062e      	lsls	r6, r5, #24
 8007e4e:	f100 0304 	add.w	r3, r0, #4
 8007e52:	d50a      	bpl.n	8007e6a <_printf_i+0xce>
 8007e54:	6805      	ldr	r5, [r0, #0]
 8007e56:	600b      	str	r3, [r1, #0]
 8007e58:	2d00      	cmp	r5, #0
 8007e5a:	da03      	bge.n	8007e64 <_printf_i+0xc8>
 8007e5c:	232d      	movs	r3, #45	; 0x2d
 8007e5e:	426d      	negs	r5, r5
 8007e60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e64:	485e      	ldr	r0, [pc, #376]	; (8007fe0 <_printf_i+0x244>)
 8007e66:	230a      	movs	r3, #10
 8007e68:	e019      	b.n	8007e9e <_printf_i+0x102>
 8007e6a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007e6e:	6805      	ldr	r5, [r0, #0]
 8007e70:	600b      	str	r3, [r1, #0]
 8007e72:	bf18      	it	ne
 8007e74:	b22d      	sxthne	r5, r5
 8007e76:	e7ef      	b.n	8007e58 <_printf_i+0xbc>
 8007e78:	680b      	ldr	r3, [r1, #0]
 8007e7a:	6825      	ldr	r5, [r4, #0]
 8007e7c:	1d18      	adds	r0, r3, #4
 8007e7e:	6008      	str	r0, [r1, #0]
 8007e80:	0628      	lsls	r0, r5, #24
 8007e82:	d501      	bpl.n	8007e88 <_printf_i+0xec>
 8007e84:	681d      	ldr	r5, [r3, #0]
 8007e86:	e002      	b.n	8007e8e <_printf_i+0xf2>
 8007e88:	0669      	lsls	r1, r5, #25
 8007e8a:	d5fb      	bpl.n	8007e84 <_printf_i+0xe8>
 8007e8c:	881d      	ldrh	r5, [r3, #0]
 8007e8e:	4854      	ldr	r0, [pc, #336]	; (8007fe0 <_printf_i+0x244>)
 8007e90:	2f6f      	cmp	r7, #111	; 0x6f
 8007e92:	bf0c      	ite	eq
 8007e94:	2308      	moveq	r3, #8
 8007e96:	230a      	movne	r3, #10
 8007e98:	2100      	movs	r1, #0
 8007e9a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007e9e:	6866      	ldr	r6, [r4, #4]
 8007ea0:	60a6      	str	r6, [r4, #8]
 8007ea2:	2e00      	cmp	r6, #0
 8007ea4:	bfa2      	ittt	ge
 8007ea6:	6821      	ldrge	r1, [r4, #0]
 8007ea8:	f021 0104 	bicge.w	r1, r1, #4
 8007eac:	6021      	strge	r1, [r4, #0]
 8007eae:	b90d      	cbnz	r5, 8007eb4 <_printf_i+0x118>
 8007eb0:	2e00      	cmp	r6, #0
 8007eb2:	d04d      	beq.n	8007f50 <_printf_i+0x1b4>
 8007eb4:	4616      	mov	r6, r2
 8007eb6:	fbb5 f1f3 	udiv	r1, r5, r3
 8007eba:	fb03 5711 	mls	r7, r3, r1, r5
 8007ebe:	5dc7      	ldrb	r7, [r0, r7]
 8007ec0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007ec4:	462f      	mov	r7, r5
 8007ec6:	42bb      	cmp	r3, r7
 8007ec8:	460d      	mov	r5, r1
 8007eca:	d9f4      	bls.n	8007eb6 <_printf_i+0x11a>
 8007ecc:	2b08      	cmp	r3, #8
 8007ece:	d10b      	bne.n	8007ee8 <_printf_i+0x14c>
 8007ed0:	6823      	ldr	r3, [r4, #0]
 8007ed2:	07df      	lsls	r7, r3, #31
 8007ed4:	d508      	bpl.n	8007ee8 <_printf_i+0x14c>
 8007ed6:	6923      	ldr	r3, [r4, #16]
 8007ed8:	6861      	ldr	r1, [r4, #4]
 8007eda:	4299      	cmp	r1, r3
 8007edc:	bfde      	ittt	le
 8007ede:	2330      	movle	r3, #48	; 0x30
 8007ee0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007ee4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007ee8:	1b92      	subs	r2, r2, r6
 8007eea:	6122      	str	r2, [r4, #16]
 8007eec:	f8cd a000 	str.w	sl, [sp]
 8007ef0:	464b      	mov	r3, r9
 8007ef2:	aa03      	add	r2, sp, #12
 8007ef4:	4621      	mov	r1, r4
 8007ef6:	4640      	mov	r0, r8
 8007ef8:	f7ff fee2 	bl	8007cc0 <_printf_common>
 8007efc:	3001      	adds	r0, #1
 8007efe:	d14c      	bne.n	8007f9a <_printf_i+0x1fe>
 8007f00:	f04f 30ff 	mov.w	r0, #4294967295
 8007f04:	b004      	add	sp, #16
 8007f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f0a:	4835      	ldr	r0, [pc, #212]	; (8007fe0 <_printf_i+0x244>)
 8007f0c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007f10:	6823      	ldr	r3, [r4, #0]
 8007f12:	680e      	ldr	r6, [r1, #0]
 8007f14:	061f      	lsls	r7, r3, #24
 8007f16:	f856 5b04 	ldr.w	r5, [r6], #4
 8007f1a:	600e      	str	r6, [r1, #0]
 8007f1c:	d514      	bpl.n	8007f48 <_printf_i+0x1ac>
 8007f1e:	07d9      	lsls	r1, r3, #31
 8007f20:	bf44      	itt	mi
 8007f22:	f043 0320 	orrmi.w	r3, r3, #32
 8007f26:	6023      	strmi	r3, [r4, #0]
 8007f28:	b91d      	cbnz	r5, 8007f32 <_printf_i+0x196>
 8007f2a:	6823      	ldr	r3, [r4, #0]
 8007f2c:	f023 0320 	bic.w	r3, r3, #32
 8007f30:	6023      	str	r3, [r4, #0]
 8007f32:	2310      	movs	r3, #16
 8007f34:	e7b0      	b.n	8007e98 <_printf_i+0xfc>
 8007f36:	6823      	ldr	r3, [r4, #0]
 8007f38:	f043 0320 	orr.w	r3, r3, #32
 8007f3c:	6023      	str	r3, [r4, #0]
 8007f3e:	2378      	movs	r3, #120	; 0x78
 8007f40:	4828      	ldr	r0, [pc, #160]	; (8007fe4 <_printf_i+0x248>)
 8007f42:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007f46:	e7e3      	b.n	8007f10 <_printf_i+0x174>
 8007f48:	065e      	lsls	r6, r3, #25
 8007f4a:	bf48      	it	mi
 8007f4c:	b2ad      	uxthmi	r5, r5
 8007f4e:	e7e6      	b.n	8007f1e <_printf_i+0x182>
 8007f50:	4616      	mov	r6, r2
 8007f52:	e7bb      	b.n	8007ecc <_printf_i+0x130>
 8007f54:	680b      	ldr	r3, [r1, #0]
 8007f56:	6826      	ldr	r6, [r4, #0]
 8007f58:	6960      	ldr	r0, [r4, #20]
 8007f5a:	1d1d      	adds	r5, r3, #4
 8007f5c:	600d      	str	r5, [r1, #0]
 8007f5e:	0635      	lsls	r5, r6, #24
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	d501      	bpl.n	8007f68 <_printf_i+0x1cc>
 8007f64:	6018      	str	r0, [r3, #0]
 8007f66:	e002      	b.n	8007f6e <_printf_i+0x1d2>
 8007f68:	0671      	lsls	r1, r6, #25
 8007f6a:	d5fb      	bpl.n	8007f64 <_printf_i+0x1c8>
 8007f6c:	8018      	strh	r0, [r3, #0]
 8007f6e:	2300      	movs	r3, #0
 8007f70:	6123      	str	r3, [r4, #16]
 8007f72:	4616      	mov	r6, r2
 8007f74:	e7ba      	b.n	8007eec <_printf_i+0x150>
 8007f76:	680b      	ldr	r3, [r1, #0]
 8007f78:	1d1a      	adds	r2, r3, #4
 8007f7a:	600a      	str	r2, [r1, #0]
 8007f7c:	681e      	ldr	r6, [r3, #0]
 8007f7e:	6862      	ldr	r2, [r4, #4]
 8007f80:	2100      	movs	r1, #0
 8007f82:	4630      	mov	r0, r6
 8007f84:	f7f8 f954 	bl	8000230 <memchr>
 8007f88:	b108      	cbz	r0, 8007f8e <_printf_i+0x1f2>
 8007f8a:	1b80      	subs	r0, r0, r6
 8007f8c:	6060      	str	r0, [r4, #4]
 8007f8e:	6863      	ldr	r3, [r4, #4]
 8007f90:	6123      	str	r3, [r4, #16]
 8007f92:	2300      	movs	r3, #0
 8007f94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f98:	e7a8      	b.n	8007eec <_printf_i+0x150>
 8007f9a:	6923      	ldr	r3, [r4, #16]
 8007f9c:	4632      	mov	r2, r6
 8007f9e:	4649      	mov	r1, r9
 8007fa0:	4640      	mov	r0, r8
 8007fa2:	47d0      	blx	sl
 8007fa4:	3001      	adds	r0, #1
 8007fa6:	d0ab      	beq.n	8007f00 <_printf_i+0x164>
 8007fa8:	6823      	ldr	r3, [r4, #0]
 8007faa:	079b      	lsls	r3, r3, #30
 8007fac:	d413      	bmi.n	8007fd6 <_printf_i+0x23a>
 8007fae:	68e0      	ldr	r0, [r4, #12]
 8007fb0:	9b03      	ldr	r3, [sp, #12]
 8007fb2:	4298      	cmp	r0, r3
 8007fb4:	bfb8      	it	lt
 8007fb6:	4618      	movlt	r0, r3
 8007fb8:	e7a4      	b.n	8007f04 <_printf_i+0x168>
 8007fba:	2301      	movs	r3, #1
 8007fbc:	4632      	mov	r2, r6
 8007fbe:	4649      	mov	r1, r9
 8007fc0:	4640      	mov	r0, r8
 8007fc2:	47d0      	blx	sl
 8007fc4:	3001      	adds	r0, #1
 8007fc6:	d09b      	beq.n	8007f00 <_printf_i+0x164>
 8007fc8:	3501      	adds	r5, #1
 8007fca:	68e3      	ldr	r3, [r4, #12]
 8007fcc:	9903      	ldr	r1, [sp, #12]
 8007fce:	1a5b      	subs	r3, r3, r1
 8007fd0:	42ab      	cmp	r3, r5
 8007fd2:	dcf2      	bgt.n	8007fba <_printf_i+0x21e>
 8007fd4:	e7eb      	b.n	8007fae <_printf_i+0x212>
 8007fd6:	2500      	movs	r5, #0
 8007fd8:	f104 0619 	add.w	r6, r4, #25
 8007fdc:	e7f5      	b.n	8007fca <_printf_i+0x22e>
 8007fde:	bf00      	nop
 8007fe0:	08008383 	.word	0x08008383
 8007fe4:	08008394 	.word	0x08008394

08007fe8 <memcpy>:
 8007fe8:	440a      	add	r2, r1
 8007fea:	4291      	cmp	r1, r2
 8007fec:	f100 33ff 	add.w	r3, r0, #4294967295
 8007ff0:	d100      	bne.n	8007ff4 <memcpy+0xc>
 8007ff2:	4770      	bx	lr
 8007ff4:	b510      	push	{r4, lr}
 8007ff6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ffa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007ffe:	4291      	cmp	r1, r2
 8008000:	d1f9      	bne.n	8007ff6 <memcpy+0xe>
 8008002:	bd10      	pop	{r4, pc}

08008004 <memmove>:
 8008004:	4288      	cmp	r0, r1
 8008006:	b510      	push	{r4, lr}
 8008008:	eb01 0402 	add.w	r4, r1, r2
 800800c:	d902      	bls.n	8008014 <memmove+0x10>
 800800e:	4284      	cmp	r4, r0
 8008010:	4623      	mov	r3, r4
 8008012:	d807      	bhi.n	8008024 <memmove+0x20>
 8008014:	1e43      	subs	r3, r0, #1
 8008016:	42a1      	cmp	r1, r4
 8008018:	d008      	beq.n	800802c <memmove+0x28>
 800801a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800801e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008022:	e7f8      	b.n	8008016 <memmove+0x12>
 8008024:	4402      	add	r2, r0
 8008026:	4601      	mov	r1, r0
 8008028:	428a      	cmp	r2, r1
 800802a:	d100      	bne.n	800802e <memmove+0x2a>
 800802c:	bd10      	pop	{r4, pc}
 800802e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008032:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008036:	e7f7      	b.n	8008028 <memmove+0x24>

08008038 <_free_r>:
 8008038:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800803a:	2900      	cmp	r1, #0
 800803c:	d048      	beq.n	80080d0 <_free_r+0x98>
 800803e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008042:	9001      	str	r0, [sp, #4]
 8008044:	2b00      	cmp	r3, #0
 8008046:	f1a1 0404 	sub.w	r4, r1, #4
 800804a:	bfb8      	it	lt
 800804c:	18e4      	addlt	r4, r4, r3
 800804e:	f000 f8d3 	bl	80081f8 <__malloc_lock>
 8008052:	4a20      	ldr	r2, [pc, #128]	; (80080d4 <_free_r+0x9c>)
 8008054:	9801      	ldr	r0, [sp, #4]
 8008056:	6813      	ldr	r3, [r2, #0]
 8008058:	4615      	mov	r5, r2
 800805a:	b933      	cbnz	r3, 800806a <_free_r+0x32>
 800805c:	6063      	str	r3, [r4, #4]
 800805e:	6014      	str	r4, [r2, #0]
 8008060:	b003      	add	sp, #12
 8008062:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008066:	f000 b8cd 	b.w	8008204 <__malloc_unlock>
 800806a:	42a3      	cmp	r3, r4
 800806c:	d90b      	bls.n	8008086 <_free_r+0x4e>
 800806e:	6821      	ldr	r1, [r4, #0]
 8008070:	1862      	adds	r2, r4, r1
 8008072:	4293      	cmp	r3, r2
 8008074:	bf04      	itt	eq
 8008076:	681a      	ldreq	r2, [r3, #0]
 8008078:	685b      	ldreq	r3, [r3, #4]
 800807a:	6063      	str	r3, [r4, #4]
 800807c:	bf04      	itt	eq
 800807e:	1852      	addeq	r2, r2, r1
 8008080:	6022      	streq	r2, [r4, #0]
 8008082:	602c      	str	r4, [r5, #0]
 8008084:	e7ec      	b.n	8008060 <_free_r+0x28>
 8008086:	461a      	mov	r2, r3
 8008088:	685b      	ldr	r3, [r3, #4]
 800808a:	b10b      	cbz	r3, 8008090 <_free_r+0x58>
 800808c:	42a3      	cmp	r3, r4
 800808e:	d9fa      	bls.n	8008086 <_free_r+0x4e>
 8008090:	6811      	ldr	r1, [r2, #0]
 8008092:	1855      	adds	r5, r2, r1
 8008094:	42a5      	cmp	r5, r4
 8008096:	d10b      	bne.n	80080b0 <_free_r+0x78>
 8008098:	6824      	ldr	r4, [r4, #0]
 800809a:	4421      	add	r1, r4
 800809c:	1854      	adds	r4, r2, r1
 800809e:	42a3      	cmp	r3, r4
 80080a0:	6011      	str	r1, [r2, #0]
 80080a2:	d1dd      	bne.n	8008060 <_free_r+0x28>
 80080a4:	681c      	ldr	r4, [r3, #0]
 80080a6:	685b      	ldr	r3, [r3, #4]
 80080a8:	6053      	str	r3, [r2, #4]
 80080aa:	4421      	add	r1, r4
 80080ac:	6011      	str	r1, [r2, #0]
 80080ae:	e7d7      	b.n	8008060 <_free_r+0x28>
 80080b0:	d902      	bls.n	80080b8 <_free_r+0x80>
 80080b2:	230c      	movs	r3, #12
 80080b4:	6003      	str	r3, [r0, #0]
 80080b6:	e7d3      	b.n	8008060 <_free_r+0x28>
 80080b8:	6825      	ldr	r5, [r4, #0]
 80080ba:	1961      	adds	r1, r4, r5
 80080bc:	428b      	cmp	r3, r1
 80080be:	bf04      	itt	eq
 80080c0:	6819      	ldreq	r1, [r3, #0]
 80080c2:	685b      	ldreq	r3, [r3, #4]
 80080c4:	6063      	str	r3, [r4, #4]
 80080c6:	bf04      	itt	eq
 80080c8:	1949      	addeq	r1, r1, r5
 80080ca:	6021      	streq	r1, [r4, #0]
 80080cc:	6054      	str	r4, [r2, #4]
 80080ce:	e7c7      	b.n	8008060 <_free_r+0x28>
 80080d0:	b003      	add	sp, #12
 80080d2:	bd30      	pop	{r4, r5, pc}
 80080d4:	2000042c 	.word	0x2000042c

080080d8 <_malloc_r>:
 80080d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080da:	1ccd      	adds	r5, r1, #3
 80080dc:	f025 0503 	bic.w	r5, r5, #3
 80080e0:	3508      	adds	r5, #8
 80080e2:	2d0c      	cmp	r5, #12
 80080e4:	bf38      	it	cc
 80080e6:	250c      	movcc	r5, #12
 80080e8:	2d00      	cmp	r5, #0
 80080ea:	4606      	mov	r6, r0
 80080ec:	db01      	blt.n	80080f2 <_malloc_r+0x1a>
 80080ee:	42a9      	cmp	r1, r5
 80080f0:	d903      	bls.n	80080fa <_malloc_r+0x22>
 80080f2:	230c      	movs	r3, #12
 80080f4:	6033      	str	r3, [r6, #0]
 80080f6:	2000      	movs	r0, #0
 80080f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080fa:	f000 f87d 	bl	80081f8 <__malloc_lock>
 80080fe:	4921      	ldr	r1, [pc, #132]	; (8008184 <_malloc_r+0xac>)
 8008100:	680a      	ldr	r2, [r1, #0]
 8008102:	4614      	mov	r4, r2
 8008104:	b99c      	cbnz	r4, 800812e <_malloc_r+0x56>
 8008106:	4f20      	ldr	r7, [pc, #128]	; (8008188 <_malloc_r+0xb0>)
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	b923      	cbnz	r3, 8008116 <_malloc_r+0x3e>
 800810c:	4621      	mov	r1, r4
 800810e:	4630      	mov	r0, r6
 8008110:	f000 f862 	bl	80081d8 <_sbrk_r>
 8008114:	6038      	str	r0, [r7, #0]
 8008116:	4629      	mov	r1, r5
 8008118:	4630      	mov	r0, r6
 800811a:	f000 f85d 	bl	80081d8 <_sbrk_r>
 800811e:	1c43      	adds	r3, r0, #1
 8008120:	d123      	bne.n	800816a <_malloc_r+0x92>
 8008122:	230c      	movs	r3, #12
 8008124:	6033      	str	r3, [r6, #0]
 8008126:	4630      	mov	r0, r6
 8008128:	f000 f86c 	bl	8008204 <__malloc_unlock>
 800812c:	e7e3      	b.n	80080f6 <_malloc_r+0x1e>
 800812e:	6823      	ldr	r3, [r4, #0]
 8008130:	1b5b      	subs	r3, r3, r5
 8008132:	d417      	bmi.n	8008164 <_malloc_r+0x8c>
 8008134:	2b0b      	cmp	r3, #11
 8008136:	d903      	bls.n	8008140 <_malloc_r+0x68>
 8008138:	6023      	str	r3, [r4, #0]
 800813a:	441c      	add	r4, r3
 800813c:	6025      	str	r5, [r4, #0]
 800813e:	e004      	b.n	800814a <_malloc_r+0x72>
 8008140:	6863      	ldr	r3, [r4, #4]
 8008142:	42a2      	cmp	r2, r4
 8008144:	bf0c      	ite	eq
 8008146:	600b      	streq	r3, [r1, #0]
 8008148:	6053      	strne	r3, [r2, #4]
 800814a:	4630      	mov	r0, r6
 800814c:	f000 f85a 	bl	8008204 <__malloc_unlock>
 8008150:	f104 000b 	add.w	r0, r4, #11
 8008154:	1d23      	adds	r3, r4, #4
 8008156:	f020 0007 	bic.w	r0, r0, #7
 800815a:	1ac2      	subs	r2, r0, r3
 800815c:	d0cc      	beq.n	80080f8 <_malloc_r+0x20>
 800815e:	1a1b      	subs	r3, r3, r0
 8008160:	50a3      	str	r3, [r4, r2]
 8008162:	e7c9      	b.n	80080f8 <_malloc_r+0x20>
 8008164:	4622      	mov	r2, r4
 8008166:	6864      	ldr	r4, [r4, #4]
 8008168:	e7cc      	b.n	8008104 <_malloc_r+0x2c>
 800816a:	1cc4      	adds	r4, r0, #3
 800816c:	f024 0403 	bic.w	r4, r4, #3
 8008170:	42a0      	cmp	r0, r4
 8008172:	d0e3      	beq.n	800813c <_malloc_r+0x64>
 8008174:	1a21      	subs	r1, r4, r0
 8008176:	4630      	mov	r0, r6
 8008178:	f000 f82e 	bl	80081d8 <_sbrk_r>
 800817c:	3001      	adds	r0, #1
 800817e:	d1dd      	bne.n	800813c <_malloc_r+0x64>
 8008180:	e7cf      	b.n	8008122 <_malloc_r+0x4a>
 8008182:	bf00      	nop
 8008184:	2000042c 	.word	0x2000042c
 8008188:	20000430 	.word	0x20000430

0800818c <_realloc_r>:
 800818c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800818e:	4607      	mov	r7, r0
 8008190:	4614      	mov	r4, r2
 8008192:	460e      	mov	r6, r1
 8008194:	b921      	cbnz	r1, 80081a0 <_realloc_r+0x14>
 8008196:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800819a:	4611      	mov	r1, r2
 800819c:	f7ff bf9c 	b.w	80080d8 <_malloc_r>
 80081a0:	b922      	cbnz	r2, 80081ac <_realloc_r+0x20>
 80081a2:	f7ff ff49 	bl	8008038 <_free_r>
 80081a6:	4625      	mov	r5, r4
 80081a8:	4628      	mov	r0, r5
 80081aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081ac:	f000 f830 	bl	8008210 <_malloc_usable_size_r>
 80081b0:	42a0      	cmp	r0, r4
 80081b2:	d20f      	bcs.n	80081d4 <_realloc_r+0x48>
 80081b4:	4621      	mov	r1, r4
 80081b6:	4638      	mov	r0, r7
 80081b8:	f7ff ff8e 	bl	80080d8 <_malloc_r>
 80081bc:	4605      	mov	r5, r0
 80081be:	2800      	cmp	r0, #0
 80081c0:	d0f2      	beq.n	80081a8 <_realloc_r+0x1c>
 80081c2:	4631      	mov	r1, r6
 80081c4:	4622      	mov	r2, r4
 80081c6:	f7ff ff0f 	bl	8007fe8 <memcpy>
 80081ca:	4631      	mov	r1, r6
 80081cc:	4638      	mov	r0, r7
 80081ce:	f7ff ff33 	bl	8008038 <_free_r>
 80081d2:	e7e9      	b.n	80081a8 <_realloc_r+0x1c>
 80081d4:	4635      	mov	r5, r6
 80081d6:	e7e7      	b.n	80081a8 <_realloc_r+0x1c>

080081d8 <_sbrk_r>:
 80081d8:	b538      	push	{r3, r4, r5, lr}
 80081da:	4d06      	ldr	r5, [pc, #24]	; (80081f4 <_sbrk_r+0x1c>)
 80081dc:	2300      	movs	r3, #0
 80081de:	4604      	mov	r4, r0
 80081e0:	4608      	mov	r0, r1
 80081e2:	602b      	str	r3, [r5, #0]
 80081e4:	f7fa fb8c 	bl	8002900 <_sbrk>
 80081e8:	1c43      	adds	r3, r0, #1
 80081ea:	d102      	bne.n	80081f2 <_sbrk_r+0x1a>
 80081ec:	682b      	ldr	r3, [r5, #0]
 80081ee:	b103      	cbz	r3, 80081f2 <_sbrk_r+0x1a>
 80081f0:	6023      	str	r3, [r4, #0]
 80081f2:	bd38      	pop	{r3, r4, r5, pc}
 80081f4:	20001df4 	.word	0x20001df4

080081f8 <__malloc_lock>:
 80081f8:	4801      	ldr	r0, [pc, #4]	; (8008200 <__malloc_lock+0x8>)
 80081fa:	f000 b811 	b.w	8008220 <__retarget_lock_acquire_recursive>
 80081fe:	bf00      	nop
 8008200:	20001dfc 	.word	0x20001dfc

08008204 <__malloc_unlock>:
 8008204:	4801      	ldr	r0, [pc, #4]	; (800820c <__malloc_unlock+0x8>)
 8008206:	f000 b80c 	b.w	8008222 <__retarget_lock_release_recursive>
 800820a:	bf00      	nop
 800820c:	20001dfc 	.word	0x20001dfc

08008210 <_malloc_usable_size_r>:
 8008210:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008214:	1f18      	subs	r0, r3, #4
 8008216:	2b00      	cmp	r3, #0
 8008218:	bfbc      	itt	lt
 800821a:	580b      	ldrlt	r3, [r1, r0]
 800821c:	18c0      	addlt	r0, r0, r3
 800821e:	4770      	bx	lr

08008220 <__retarget_lock_acquire_recursive>:
 8008220:	4770      	bx	lr

08008222 <__retarget_lock_release_recursive>:
 8008222:	4770      	bx	lr

08008224 <_init>:
 8008224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008226:	bf00      	nop
 8008228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800822a:	bc08      	pop	{r3}
 800822c:	469e      	mov	lr, r3
 800822e:	4770      	bx	lr

08008230 <_fini>:
 8008230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008232:	bf00      	nop
 8008234:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008236:	bc08      	pop	{r3}
 8008238:	469e      	mov	lr, r3
 800823a:	4770      	bx	lr
