
RcMPPT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008508  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000174  080086e8  080086e8  000186e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800885c  0800885c  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800885c  0800885c  0001885c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008864  08008864  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008864  08008864  00018864  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008868  08008868  00018868  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800886c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006c68  200001e8  08008a54  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006e50  08008a54  00026e50  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00034ae9  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000050d1  00000000  00000000  00054d01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0001bce0  00000000  00000000  00059dd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001718  00000000  00000000  00075ab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002bf0  00000000  00000000  000771d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002f610  00000000  00000000  00079dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00027c53  00000000  00000000  000a93d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0011f6af  00000000  00000000  000d1023  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001f06d2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004228  00000000  00000000  001f0728  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e8 	.word	0x200001e8
 80001fc:	00000000 	.word	0x00000000
 8000200:	080086d0 	.word	0x080086d0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001ec 	.word	0x200001ec
 800021c:	080086d0 	.word	0x080086d0

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__aeabi_d2uiz>:
 8000a6c:	004a      	lsls	r2, r1, #1
 8000a6e:	d211      	bcs.n	8000a94 <__aeabi_d2uiz+0x28>
 8000a70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a74:	d211      	bcs.n	8000a9a <__aeabi_d2uiz+0x2e>
 8000a76:	d50d      	bpl.n	8000a94 <__aeabi_d2uiz+0x28>
 8000a78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a80:	d40e      	bmi.n	8000aa0 <__aeabi_d2uiz+0x34>
 8000a82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a9e:	d102      	bne.n	8000aa6 <__aeabi_d2uiz+0x3a>
 8000aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8000aa4:	4770      	bx	lr
 8000aa6:	f04f 0000 	mov.w	r0, #0
 8000aaa:	4770      	bx	lr

08000aac <__aeabi_uldivmod>:
 8000aac:	b953      	cbnz	r3, 8000ac4 <__aeabi_uldivmod+0x18>
 8000aae:	b94a      	cbnz	r2, 8000ac4 <__aeabi_uldivmod+0x18>
 8000ab0:	2900      	cmp	r1, #0
 8000ab2:	bf08      	it	eq
 8000ab4:	2800      	cmpeq	r0, #0
 8000ab6:	bf1c      	itt	ne
 8000ab8:	f04f 31ff 	movne.w	r1, #4294967295
 8000abc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ac0:	f000 b96e 	b.w	8000da0 <__aeabi_idiv0>
 8000ac4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000acc:	f000 f806 	bl	8000adc <__udivmoddi4>
 8000ad0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ad4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad8:	b004      	add	sp, #16
 8000ada:	4770      	bx	lr

08000adc <__udivmoddi4>:
 8000adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae0:	9d08      	ldr	r5, [sp, #32]
 8000ae2:	4604      	mov	r4, r0
 8000ae4:	468c      	mov	ip, r1
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	f040 8083 	bne.w	8000bf2 <__udivmoddi4+0x116>
 8000aec:	428a      	cmp	r2, r1
 8000aee:	4617      	mov	r7, r2
 8000af0:	d947      	bls.n	8000b82 <__udivmoddi4+0xa6>
 8000af2:	fab2 f282 	clz	r2, r2
 8000af6:	b142      	cbz	r2, 8000b0a <__udivmoddi4+0x2e>
 8000af8:	f1c2 0020 	rsb	r0, r2, #32
 8000afc:	fa24 f000 	lsr.w	r0, r4, r0
 8000b00:	4091      	lsls	r1, r2
 8000b02:	4097      	lsls	r7, r2
 8000b04:	ea40 0c01 	orr.w	ip, r0, r1
 8000b08:	4094      	lsls	r4, r2
 8000b0a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b0e:	0c23      	lsrs	r3, r4, #16
 8000b10:	fbbc f6f8 	udiv	r6, ip, r8
 8000b14:	fa1f fe87 	uxth.w	lr, r7
 8000b18:	fb08 c116 	mls	r1, r8, r6, ip
 8000b1c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b20:	fb06 f10e 	mul.w	r1, r6, lr
 8000b24:	4299      	cmp	r1, r3
 8000b26:	d909      	bls.n	8000b3c <__udivmoddi4+0x60>
 8000b28:	18fb      	adds	r3, r7, r3
 8000b2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b2e:	f080 8119 	bcs.w	8000d64 <__udivmoddi4+0x288>
 8000b32:	4299      	cmp	r1, r3
 8000b34:	f240 8116 	bls.w	8000d64 <__udivmoddi4+0x288>
 8000b38:	3e02      	subs	r6, #2
 8000b3a:	443b      	add	r3, r7
 8000b3c:	1a5b      	subs	r3, r3, r1
 8000b3e:	b2a4      	uxth	r4, r4
 8000b40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b44:	fb08 3310 	mls	r3, r8, r0, r3
 8000b48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b4c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b50:	45a6      	cmp	lr, r4
 8000b52:	d909      	bls.n	8000b68 <__udivmoddi4+0x8c>
 8000b54:	193c      	adds	r4, r7, r4
 8000b56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b5a:	f080 8105 	bcs.w	8000d68 <__udivmoddi4+0x28c>
 8000b5e:	45a6      	cmp	lr, r4
 8000b60:	f240 8102 	bls.w	8000d68 <__udivmoddi4+0x28c>
 8000b64:	3802      	subs	r0, #2
 8000b66:	443c      	add	r4, r7
 8000b68:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b6c:	eba4 040e 	sub.w	r4, r4, lr
 8000b70:	2600      	movs	r6, #0
 8000b72:	b11d      	cbz	r5, 8000b7c <__udivmoddi4+0xa0>
 8000b74:	40d4      	lsrs	r4, r2
 8000b76:	2300      	movs	r3, #0
 8000b78:	e9c5 4300 	strd	r4, r3, [r5]
 8000b7c:	4631      	mov	r1, r6
 8000b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b82:	b902      	cbnz	r2, 8000b86 <__udivmoddi4+0xaa>
 8000b84:	deff      	udf	#255	; 0xff
 8000b86:	fab2 f282 	clz	r2, r2
 8000b8a:	2a00      	cmp	r2, #0
 8000b8c:	d150      	bne.n	8000c30 <__udivmoddi4+0x154>
 8000b8e:	1bcb      	subs	r3, r1, r7
 8000b90:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b94:	fa1f f887 	uxth.w	r8, r7
 8000b98:	2601      	movs	r6, #1
 8000b9a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000b9e:	0c21      	lsrs	r1, r4, #16
 8000ba0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ba4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ba8:	fb08 f30c 	mul.w	r3, r8, ip
 8000bac:	428b      	cmp	r3, r1
 8000bae:	d907      	bls.n	8000bc0 <__udivmoddi4+0xe4>
 8000bb0:	1879      	adds	r1, r7, r1
 8000bb2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bb6:	d202      	bcs.n	8000bbe <__udivmoddi4+0xe2>
 8000bb8:	428b      	cmp	r3, r1
 8000bba:	f200 80e9 	bhi.w	8000d90 <__udivmoddi4+0x2b4>
 8000bbe:	4684      	mov	ip, r0
 8000bc0:	1ac9      	subs	r1, r1, r3
 8000bc2:	b2a3      	uxth	r3, r4
 8000bc4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bc8:	fb0e 1110 	mls	r1, lr, r0, r1
 8000bcc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000bd0:	fb08 f800 	mul.w	r8, r8, r0
 8000bd4:	45a0      	cmp	r8, r4
 8000bd6:	d907      	bls.n	8000be8 <__udivmoddi4+0x10c>
 8000bd8:	193c      	adds	r4, r7, r4
 8000bda:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bde:	d202      	bcs.n	8000be6 <__udivmoddi4+0x10a>
 8000be0:	45a0      	cmp	r8, r4
 8000be2:	f200 80d9 	bhi.w	8000d98 <__udivmoddi4+0x2bc>
 8000be6:	4618      	mov	r0, r3
 8000be8:	eba4 0408 	sub.w	r4, r4, r8
 8000bec:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000bf0:	e7bf      	b.n	8000b72 <__udivmoddi4+0x96>
 8000bf2:	428b      	cmp	r3, r1
 8000bf4:	d909      	bls.n	8000c0a <__udivmoddi4+0x12e>
 8000bf6:	2d00      	cmp	r5, #0
 8000bf8:	f000 80b1 	beq.w	8000d5e <__udivmoddi4+0x282>
 8000bfc:	2600      	movs	r6, #0
 8000bfe:	e9c5 0100 	strd	r0, r1, [r5]
 8000c02:	4630      	mov	r0, r6
 8000c04:	4631      	mov	r1, r6
 8000c06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c0a:	fab3 f683 	clz	r6, r3
 8000c0e:	2e00      	cmp	r6, #0
 8000c10:	d14a      	bne.n	8000ca8 <__udivmoddi4+0x1cc>
 8000c12:	428b      	cmp	r3, r1
 8000c14:	d302      	bcc.n	8000c1c <__udivmoddi4+0x140>
 8000c16:	4282      	cmp	r2, r0
 8000c18:	f200 80b8 	bhi.w	8000d8c <__udivmoddi4+0x2b0>
 8000c1c:	1a84      	subs	r4, r0, r2
 8000c1e:	eb61 0103 	sbc.w	r1, r1, r3
 8000c22:	2001      	movs	r0, #1
 8000c24:	468c      	mov	ip, r1
 8000c26:	2d00      	cmp	r5, #0
 8000c28:	d0a8      	beq.n	8000b7c <__udivmoddi4+0xa0>
 8000c2a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c2e:	e7a5      	b.n	8000b7c <__udivmoddi4+0xa0>
 8000c30:	f1c2 0320 	rsb	r3, r2, #32
 8000c34:	fa20 f603 	lsr.w	r6, r0, r3
 8000c38:	4097      	lsls	r7, r2
 8000c3a:	fa01 f002 	lsl.w	r0, r1, r2
 8000c3e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c42:	40d9      	lsrs	r1, r3
 8000c44:	4330      	orrs	r0, r6
 8000c46:	0c03      	lsrs	r3, r0, #16
 8000c48:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c4c:	fa1f f887 	uxth.w	r8, r7
 8000c50:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c54:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c58:	fb06 f108 	mul.w	r1, r6, r8
 8000c5c:	4299      	cmp	r1, r3
 8000c5e:	fa04 f402 	lsl.w	r4, r4, r2
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x19c>
 8000c64:	18fb      	adds	r3, r7, r3
 8000c66:	f106 3cff 	add.w	ip, r6, #4294967295
 8000c6a:	f080 808d 	bcs.w	8000d88 <__udivmoddi4+0x2ac>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 808a 	bls.w	8000d88 <__udivmoddi4+0x2ac>
 8000c74:	3e02      	subs	r6, #2
 8000c76:	443b      	add	r3, r7
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b281      	uxth	r1, r0
 8000c7c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c80:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c88:	fb00 f308 	mul.w	r3, r0, r8
 8000c8c:	428b      	cmp	r3, r1
 8000c8e:	d907      	bls.n	8000ca0 <__udivmoddi4+0x1c4>
 8000c90:	1879      	adds	r1, r7, r1
 8000c92:	f100 3cff 	add.w	ip, r0, #4294967295
 8000c96:	d273      	bcs.n	8000d80 <__udivmoddi4+0x2a4>
 8000c98:	428b      	cmp	r3, r1
 8000c9a:	d971      	bls.n	8000d80 <__udivmoddi4+0x2a4>
 8000c9c:	3802      	subs	r0, #2
 8000c9e:	4439      	add	r1, r7
 8000ca0:	1acb      	subs	r3, r1, r3
 8000ca2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ca6:	e778      	b.n	8000b9a <__udivmoddi4+0xbe>
 8000ca8:	f1c6 0c20 	rsb	ip, r6, #32
 8000cac:	fa03 f406 	lsl.w	r4, r3, r6
 8000cb0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000cb4:	431c      	orrs	r4, r3
 8000cb6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000cba:	fa01 f306 	lsl.w	r3, r1, r6
 8000cbe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000cc2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000cc6:	431f      	orrs	r7, r3
 8000cc8:	0c3b      	lsrs	r3, r7, #16
 8000cca:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cce:	fa1f f884 	uxth.w	r8, r4
 8000cd2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000cd6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000cda:	fb09 fa08 	mul.w	sl, r9, r8
 8000cde:	458a      	cmp	sl, r1
 8000ce0:	fa02 f206 	lsl.w	r2, r2, r6
 8000ce4:	fa00 f306 	lsl.w	r3, r0, r6
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x220>
 8000cea:	1861      	adds	r1, r4, r1
 8000cec:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cf0:	d248      	bcs.n	8000d84 <__udivmoddi4+0x2a8>
 8000cf2:	458a      	cmp	sl, r1
 8000cf4:	d946      	bls.n	8000d84 <__udivmoddi4+0x2a8>
 8000cf6:	f1a9 0902 	sub.w	r9, r9, #2
 8000cfa:	4421      	add	r1, r4
 8000cfc:	eba1 010a 	sub.w	r1, r1, sl
 8000d00:	b2bf      	uxth	r7, r7
 8000d02:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d06:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d0a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d0e:	fb00 f808 	mul.w	r8, r0, r8
 8000d12:	45b8      	cmp	r8, r7
 8000d14:	d907      	bls.n	8000d26 <__udivmoddi4+0x24a>
 8000d16:	19e7      	adds	r7, r4, r7
 8000d18:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d1c:	d22e      	bcs.n	8000d7c <__udivmoddi4+0x2a0>
 8000d1e:	45b8      	cmp	r8, r7
 8000d20:	d92c      	bls.n	8000d7c <__udivmoddi4+0x2a0>
 8000d22:	3802      	subs	r0, #2
 8000d24:	4427      	add	r7, r4
 8000d26:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d2a:	eba7 0708 	sub.w	r7, r7, r8
 8000d2e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d32:	454f      	cmp	r7, r9
 8000d34:	46c6      	mov	lr, r8
 8000d36:	4649      	mov	r1, r9
 8000d38:	d31a      	bcc.n	8000d70 <__udivmoddi4+0x294>
 8000d3a:	d017      	beq.n	8000d6c <__udivmoddi4+0x290>
 8000d3c:	b15d      	cbz	r5, 8000d56 <__udivmoddi4+0x27a>
 8000d3e:	ebb3 020e 	subs.w	r2, r3, lr
 8000d42:	eb67 0701 	sbc.w	r7, r7, r1
 8000d46:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d4a:	40f2      	lsrs	r2, r6
 8000d4c:	ea4c 0202 	orr.w	r2, ip, r2
 8000d50:	40f7      	lsrs	r7, r6
 8000d52:	e9c5 2700 	strd	r2, r7, [r5]
 8000d56:	2600      	movs	r6, #0
 8000d58:	4631      	mov	r1, r6
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	462e      	mov	r6, r5
 8000d60:	4628      	mov	r0, r5
 8000d62:	e70b      	b.n	8000b7c <__udivmoddi4+0xa0>
 8000d64:	4606      	mov	r6, r0
 8000d66:	e6e9      	b.n	8000b3c <__udivmoddi4+0x60>
 8000d68:	4618      	mov	r0, r3
 8000d6a:	e6fd      	b.n	8000b68 <__udivmoddi4+0x8c>
 8000d6c:	4543      	cmp	r3, r8
 8000d6e:	d2e5      	bcs.n	8000d3c <__udivmoddi4+0x260>
 8000d70:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d74:	eb69 0104 	sbc.w	r1, r9, r4
 8000d78:	3801      	subs	r0, #1
 8000d7a:	e7df      	b.n	8000d3c <__udivmoddi4+0x260>
 8000d7c:	4608      	mov	r0, r1
 8000d7e:	e7d2      	b.n	8000d26 <__udivmoddi4+0x24a>
 8000d80:	4660      	mov	r0, ip
 8000d82:	e78d      	b.n	8000ca0 <__udivmoddi4+0x1c4>
 8000d84:	4681      	mov	r9, r0
 8000d86:	e7b9      	b.n	8000cfc <__udivmoddi4+0x220>
 8000d88:	4666      	mov	r6, ip
 8000d8a:	e775      	b.n	8000c78 <__udivmoddi4+0x19c>
 8000d8c:	4630      	mov	r0, r6
 8000d8e:	e74a      	b.n	8000c26 <__udivmoddi4+0x14a>
 8000d90:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d94:	4439      	add	r1, r7
 8000d96:	e713      	b.n	8000bc0 <__udivmoddi4+0xe4>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	443c      	add	r4, r7
 8000d9c:	e724      	b.n	8000be8 <__udivmoddi4+0x10c>
 8000d9e:	bf00      	nop

08000da0 <__aeabi_idiv0>:
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop

08000da4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000da4:	b570      	push	{r4, r5, r6, lr}
 8000da6:	b08c      	sub	sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da8:	2400      	movs	r4, #0
 8000daa:	9407      	str	r4, [sp, #28]
 8000dac:	9408      	str	r4, [sp, #32]
 8000dae:	9409      	str	r4, [sp, #36]	; 0x24
 8000db0:	940a      	str	r4, [sp, #40]	; 0x28
 8000db2:	940b      	str	r4, [sp, #44]	; 0x2c

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000db4:	4b3b      	ldr	r3, [pc, #236]	; (8000ea4 <MX_GPIO_Init+0x100>)
 8000db6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000db8:	f042 0220 	orr.w	r2, r2, #32
 8000dbc:	64da      	str	r2, [r3, #76]	; 0x4c
 8000dbe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000dc0:	f002 0220 	and.w	r2, r2, #32
 8000dc4:	9201      	str	r2, [sp, #4]
 8000dc6:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000dc8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000dca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000dce:	64da      	str	r2, [r3, #76]	; 0x4c
 8000dd0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000dd2:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8000dd6:	9202      	str	r2, [sp, #8]
 8000dd8:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dda:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ddc:	f042 0204 	orr.w	r2, r2, #4
 8000de0:	64da      	str	r2, [r3, #76]	; 0x4c
 8000de2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000de4:	f002 0204 	and.w	r2, r2, #4
 8000de8:	9203      	str	r2, [sp, #12]
 8000dea:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000dee:	f042 0201 	orr.w	r2, r2, #1
 8000df2:	64da      	str	r2, [r3, #76]	; 0x4c
 8000df4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000df6:	f002 0201 	and.w	r2, r2, #1
 8000dfa:	9204      	str	r2, [sp, #16]
 8000dfc:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dfe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e00:	f042 0202 	orr.w	r2, r2, #2
 8000e04:	64da      	str	r2, [r3, #76]	; 0x4c
 8000e06:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e08:	f002 0202 	and.w	r2, r2, #2
 8000e0c:	9205      	str	r2, [sp, #20]
 8000e0e:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e10:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e12:	f042 0208 	orr.w	r2, r2, #8
 8000e16:	64da      	str	r2, [r3, #76]	; 0x4c
 8000e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e1a:	f003 0308 	and.w	r3, r3, #8
 8000e1e:	9306      	str	r3, [sp, #24]
 8000e20:	9b06      	ldr	r3, [sp, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TP1_GPIO_Port, TP1_Pin, GPIO_PIN_RESET);
 8000e22:	4622      	mov	r2, r4
 8000e24:	2110      	movs	r1, #16
 8000e26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e2a:	f002 fab3 	bl	8003394 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_14
 8000e2e:	4d1e      	ldr	r5, [pc, #120]	; (8000ea8 <MX_GPIO_Init+0x104>)
 8000e30:	4622      	mov	r2, r4
 8000e32:	f644 6104 	movw	r1, #19972	; 0x4e04
 8000e36:	4628      	mov	r0, r5
 8000e38:	f002 faac 	bl	8003394 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin : PG10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e40:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e42:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e44:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e46:	a907      	add	r1, sp, #28
 8000e48:	4818      	ldr	r0, [pc, #96]	; (8000eac <MX_GPIO_Init+0x108>)
 8000e4a:	f002 f9d1 	bl	80031f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : TP1_Pin */
  GPIO_InitStruct.Pin = TP1_Pin;
 8000e4e:	2310      	movs	r3, #16
 8000e50:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e52:	2601      	movs	r6, #1
 8000e54:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e56:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e58:	2303      	movs	r3, #3
 8000e5a:	930a      	str	r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(TP1_GPIO_Port, &GPIO_InitStruct);
 8000e5c:	a907      	add	r1, sp, #28
 8000e5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e62:	f002 f9c5 	bl	80031f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000e66:	23e0      	movs	r3, #224	; 0xe0
 8000e68:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e6a:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6c:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e6e:	a907      	add	r1, sp, #28
 8000e70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e74:	f002 f9bc 	bl	80031f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 PB11 PB14
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_14
 8000e78:	f644 6304 	movw	r3, #19972	; 0x4e04
 8000e7c:	9307      	str	r3, [sp, #28]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e7e:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e80:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e82:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e84:	a907      	add	r1, sp, #28
 8000e86:	4628      	mov	r0, r5
 8000e88:	f002 f9b2 	bl	80031f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW2_Pin BOOT0_Pin */
  GPIO_InitStruct.Pin = SW2_Pin|BOOT0_Pin;
 8000e8c:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000e90:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e92:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e94:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e96:	a907      	add	r1, sp, #28
 8000e98:	4628      	mov	r0, r5
 8000e9a:	f002 f9a9 	bl	80031f0 <HAL_GPIO_Init>

}
 8000e9e:	b00c      	add	sp, #48	; 0x30
 8000ea0:	bd70      	pop	{r4, r5, r6, pc}
 8000ea2:	bf00      	nop
 8000ea4:	40021000 	.word	0x40021000
 8000ea8:	48000400 	.word	0x48000400
 8000eac:	48001800 	.word	0x48001800

08000eb0 <LL_HRTIM_OUT_SetPolarity>:
  *         @arg @ref LL_HRTIM_OUT_POSITIVE_POLARITY
  *         @arg @ref LL_HRTIM_OUT_NEGATIVE_POLARITY
  * @retval None
  */
__STATIC_INLINE void LL_HRTIM_OUT_SetPolarity(HRTIM_TypeDef *HRTIMx, uint32_t Output, uint32_t Polarity)
{
 8000eb0:	b430      	push	{r4, r5}
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000eb2:	fa91 f1a1 	rbit	r1, r1
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000eb6:	b1c9      	cbz	r1, 8000eec <LL_HRTIM_OUT_SetPolarity+0x3c>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8000eb8:	fab1 f381 	clz	r3, r1
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ebc:	2101      	movs	r1, #1
 8000ebe:	fa91 f1a1 	rbit	r1, r1
  if (value == 0U)
 8000ec2:	b1a9      	cbz	r1, 8000ef0 <LL_HRTIM_OUT_SetPolarity+0x40>
  return __builtin_clz(value);
 8000ec4:	fab1 f181 	clz	r1, r1
  uint32_t iOutput = (uint8_t)(POSITION_VAL(Output) - POSITION_VAL(LL_HRTIM_OUTPUT_TA1));
 8000ec8:	1a5b      	subs	r3, r3, r1
 8000eca:	b2db      	uxtb	r3, r3
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sTimerxRegs[0].OUTxR) +
 8000ecc:	30e4      	adds	r0, #228	; 0xe4
                                                              REG_OFFSET_TAB_OUTxR[iOutput]));
 8000ece:	4909      	ldr	r1, [pc, #36]	; (8000ef4 <LL_HRTIM_OUT_SetPolarity+0x44>)
 8000ed0:	f831 4013 	ldrh.w	r4, [r1, r3, lsl #1]
  MODIFY_REG(*pReg, (HRTIM_OUTR_POL1 << REG_SHIFT_TAB_OUTxR[iOutput]), (Polarity << REG_SHIFT_TAB_OUTxR[iOutput]));
 8000ed4:	5901      	ldr	r1, [r0, r4]
 8000ed6:	4d08      	ldr	r5, [pc, #32]	; (8000ef8 <LL_HRTIM_OUT_SetPolarity+0x48>)
 8000ed8:	5ced      	ldrb	r5, [r5, r3]
 8000eda:	2302      	movs	r3, #2
 8000edc:	40ab      	lsls	r3, r5
 8000ede:	ea21 0303 	bic.w	r3, r1, r3
 8000ee2:	40aa      	lsls	r2, r5
 8000ee4:	431a      	orrs	r2, r3
 8000ee6:	5102      	str	r2, [r0, r4]
}
 8000ee8:	bc30      	pop	{r4, r5}
 8000eea:	4770      	bx	lr
    return 32U;
 8000eec:	2320      	movs	r3, #32
 8000eee:	e7e5      	b.n	8000ebc <LL_HRTIM_OUT_SetPolarity+0xc>
 8000ef0:	2120      	movs	r1, #32
 8000ef2:	e7e9      	b.n	8000ec8 <LL_HRTIM_OUT_SetPolarity+0x18>
 8000ef4:	08008750 	.word	0x08008750
 8000ef8:	08008798 	.word	0x08008798

08000efc <LL_HRTIM_OUT_SetIdleMode>:
  *         @arg @ref LL_HRTIM_OUT_NO_IDLE
  *         @arg @ref LL_HRTIM_OUT_IDLE_WHEN_BURST
  * @retval None
  */
__STATIC_INLINE void LL_HRTIM_OUT_SetIdleMode(HRTIM_TypeDef *HRTIMx, uint32_t Output, uint32_t IdleMode)
{
 8000efc:	b430      	push	{r4, r5}
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000efe:	fa91 f1a1 	rbit	r1, r1
  if (value == 0U)
 8000f02:	b1c9      	cbz	r1, 8000f38 <LL_HRTIM_OUT_SetIdleMode+0x3c>
  return __builtin_clz(value);
 8000f04:	fab1 f381 	clz	r3, r1
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f08:	2101      	movs	r1, #1
 8000f0a:	fa91 f1a1 	rbit	r1, r1
  if (value == 0U)
 8000f0e:	b1a9      	cbz	r1, 8000f3c <LL_HRTIM_OUT_SetIdleMode+0x40>
  return __builtin_clz(value);
 8000f10:	fab1 f181 	clz	r1, r1
  uint32_t iOutput = (uint8_t)(POSITION_VAL(Output) - POSITION_VAL(LL_HRTIM_OUTPUT_TA1));
 8000f14:	1a5b      	subs	r3, r3, r1
 8000f16:	b2db      	uxtb	r3, r3
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sTimerxRegs[0].OUTxR) +
 8000f18:	30e4      	adds	r0, #228	; 0xe4
                                                              REG_OFFSET_TAB_OUTxR[iOutput]));
 8000f1a:	4909      	ldr	r1, [pc, #36]	; (8000f40 <LL_HRTIM_OUT_SetIdleMode+0x44>)
 8000f1c:	f831 4013 	ldrh.w	r4, [r1, r3, lsl #1]
  MODIFY_REG(*pReg, (HRTIM_OUTR_IDLM1 << (REG_SHIFT_TAB_OUTxR[iOutput])), (IdleMode << (REG_SHIFT_TAB_OUTxR[iOutput])));
 8000f20:	5901      	ldr	r1, [r0, r4]
 8000f22:	4d08      	ldr	r5, [pc, #32]	; (8000f44 <LL_HRTIM_OUT_SetIdleMode+0x48>)
 8000f24:	5ced      	ldrb	r5, [r5, r3]
 8000f26:	2304      	movs	r3, #4
 8000f28:	40ab      	lsls	r3, r5
 8000f2a:	ea21 0303 	bic.w	r3, r1, r3
 8000f2e:	40aa      	lsls	r2, r5
 8000f30:	431a      	orrs	r2, r3
 8000f32:	5102      	str	r2, [r0, r4]
}
 8000f34:	bc30      	pop	{r4, r5}
 8000f36:	4770      	bx	lr
    return 32U;
 8000f38:	2320      	movs	r3, #32
 8000f3a:	e7e5      	b.n	8000f08 <LL_HRTIM_OUT_SetIdleMode+0xc>
 8000f3c:	2120      	movs	r1, #32
 8000f3e:	e7e9      	b.n	8000f14 <LL_HRTIM_OUT_SetIdleMode+0x18>
 8000f40:	08008750 	.word	0x08008750
 8000f44:	08008798 	.word	0x08008798

08000f48 <LL_HRTIM_OUT_SetIdleLevel>:
  *         @arg @ref LL_HRTIM_OUT_IDLELEVEL_INACTIVE
  *         @arg @ref LL_HRTIM_OUT_IDLELEVEL_ACTIVE
  * @retval None
  */
__STATIC_INLINE void LL_HRTIM_OUT_SetIdleLevel(HRTIM_TypeDef *HRTIMx, uint32_t Output, uint32_t IdleLevel)
{
 8000f48:	b430      	push	{r4, r5}
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f4a:	fa91 f1a1 	rbit	r1, r1
  if (value == 0U)
 8000f4e:	b1c9      	cbz	r1, 8000f84 <LL_HRTIM_OUT_SetIdleLevel+0x3c>
  return __builtin_clz(value);
 8000f50:	fab1 f381 	clz	r3, r1
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f54:	2101      	movs	r1, #1
 8000f56:	fa91 f1a1 	rbit	r1, r1
  if (value == 0U)
 8000f5a:	b1a9      	cbz	r1, 8000f88 <LL_HRTIM_OUT_SetIdleLevel+0x40>
  return __builtin_clz(value);
 8000f5c:	fab1 f181 	clz	r1, r1
  uint32_t iOutput = (uint8_t)(POSITION_VAL(Output) - POSITION_VAL(LL_HRTIM_OUTPUT_TA1));
 8000f60:	1a5b      	subs	r3, r3, r1
 8000f62:	b2db      	uxtb	r3, r3
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sTimerxRegs[0].OUTxR) +
 8000f64:	30e4      	adds	r0, #228	; 0xe4
                                                              REG_OFFSET_TAB_OUTxR[iOutput]));
 8000f66:	4909      	ldr	r1, [pc, #36]	; (8000f8c <LL_HRTIM_OUT_SetIdleLevel+0x44>)
 8000f68:	f831 4013 	ldrh.w	r4, [r1, r3, lsl #1]
  MODIFY_REG(*pReg, (HRTIM_OUTR_IDLES1 << REG_SHIFT_TAB_OUTxR[iOutput]), (IdleLevel << REG_SHIFT_TAB_OUTxR[iOutput]));
 8000f6c:	5901      	ldr	r1, [r0, r4]
 8000f6e:	4d08      	ldr	r5, [pc, #32]	; (8000f90 <LL_HRTIM_OUT_SetIdleLevel+0x48>)
 8000f70:	5ced      	ldrb	r5, [r5, r3]
 8000f72:	2308      	movs	r3, #8
 8000f74:	40ab      	lsls	r3, r5
 8000f76:	ea21 0303 	bic.w	r3, r1, r3
 8000f7a:	40aa      	lsls	r2, r5
 8000f7c:	431a      	orrs	r2, r3
 8000f7e:	5102      	str	r2, [r0, r4]
}
 8000f80:	bc30      	pop	{r4, r5}
 8000f82:	4770      	bx	lr
    return 32U;
 8000f84:	2320      	movs	r3, #32
 8000f86:	e7e5      	b.n	8000f54 <LL_HRTIM_OUT_SetIdleLevel+0xc>
 8000f88:	2120      	movs	r1, #32
 8000f8a:	e7e9      	b.n	8000f60 <LL_HRTIM_OUT_SetIdleLevel+0x18>
 8000f8c:	08008750 	.word	0x08008750
 8000f90:	08008798 	.word	0x08008798

08000f94 <LL_HRTIM_OUT_SetFaultState>:
  *         @arg @ref LL_HRTIM_OUT_FAULTSTATE_INACTIVE
  *         @arg @ref LL_HRTIM_OUT_FAULTSTATE_HIGHZ
  * @retval None
  */
__STATIC_INLINE void LL_HRTIM_OUT_SetFaultState(HRTIM_TypeDef *HRTIMx, uint32_t Output, uint32_t FaultState)
{
 8000f94:	b430      	push	{r4, r5}
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f96:	fa91 f1a1 	rbit	r1, r1
  if (value == 0U)
 8000f9a:	b1c9      	cbz	r1, 8000fd0 <LL_HRTIM_OUT_SetFaultState+0x3c>
  return __builtin_clz(value);
 8000f9c:	fab1 f381 	clz	r3, r1
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fa0:	2101      	movs	r1, #1
 8000fa2:	fa91 f1a1 	rbit	r1, r1
  if (value == 0U)
 8000fa6:	b1a9      	cbz	r1, 8000fd4 <LL_HRTIM_OUT_SetFaultState+0x40>
  return __builtin_clz(value);
 8000fa8:	fab1 f181 	clz	r1, r1
  uint32_t iOutput = (uint8_t)(POSITION_VAL(Output) - POSITION_VAL(LL_HRTIM_OUTPUT_TA1));
 8000fac:	1a5b      	subs	r3, r3, r1
 8000fae:	b2db      	uxtb	r3, r3
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sTimerxRegs[0].OUTxR) +
 8000fb0:	30e4      	adds	r0, #228	; 0xe4
                                                              REG_OFFSET_TAB_OUTxR[iOutput]));
 8000fb2:	4909      	ldr	r1, [pc, #36]	; (8000fd8 <LL_HRTIM_OUT_SetFaultState+0x44>)
 8000fb4:	f831 4013 	ldrh.w	r4, [r1, r3, lsl #1]
  MODIFY_REG(*pReg, (HRTIM_OUTR_FAULT1 << REG_SHIFT_TAB_OUTxR[iOutput]), (FaultState << REG_SHIFT_TAB_OUTxR[iOutput]));
 8000fb8:	5901      	ldr	r1, [r0, r4]
 8000fba:	4d08      	ldr	r5, [pc, #32]	; (8000fdc <LL_HRTIM_OUT_SetFaultState+0x48>)
 8000fbc:	5ced      	ldrb	r5, [r5, r3]
 8000fbe:	2330      	movs	r3, #48	; 0x30
 8000fc0:	40ab      	lsls	r3, r5
 8000fc2:	ea21 0303 	bic.w	r3, r1, r3
 8000fc6:	40aa      	lsls	r2, r5
 8000fc8:	431a      	orrs	r2, r3
 8000fca:	5102      	str	r2, [r0, r4]
}
 8000fcc:	bc30      	pop	{r4, r5}
 8000fce:	4770      	bx	lr
    return 32U;
 8000fd0:	2320      	movs	r3, #32
 8000fd2:	e7e5      	b.n	8000fa0 <LL_HRTIM_OUT_SetFaultState+0xc>
 8000fd4:	2120      	movs	r1, #32
 8000fd6:	e7e9      	b.n	8000fac <LL_HRTIM_OUT_SetFaultState+0x18>
 8000fd8:	08008750 	.word	0x08008750
 8000fdc:	08008798 	.word	0x08008798

08000fe0 <LL_HRTIM_OUT_SetChopperMode>:
  *         @arg @ref LL_HRTIM_OUT_CHOPPERMODE_DISABLED
  *         @arg @ref LL_HRTIM_OUT_CHOPPERMODE_ENABLED
  * @retval None
  */
__STATIC_INLINE void LL_HRTIM_OUT_SetChopperMode(HRTIM_TypeDef *HRTIMx, uint32_t Output, uint32_t ChopperMode)
{
 8000fe0:	b430      	push	{r4, r5}
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fe2:	fa91 f1a1 	rbit	r1, r1
  if (value == 0U)
 8000fe6:	b1c9      	cbz	r1, 800101c <LL_HRTIM_OUT_SetChopperMode+0x3c>
  return __builtin_clz(value);
 8000fe8:	fab1 f381 	clz	r3, r1
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fec:	2101      	movs	r1, #1
 8000fee:	fa91 f1a1 	rbit	r1, r1
  if (value == 0U)
 8000ff2:	b1a9      	cbz	r1, 8001020 <LL_HRTIM_OUT_SetChopperMode+0x40>
  return __builtin_clz(value);
 8000ff4:	fab1 f181 	clz	r1, r1
  uint32_t iOutput = (uint8_t)(POSITION_VAL(Output) - POSITION_VAL(LL_HRTIM_OUTPUT_TA1));
 8000ff8:	1a5b      	subs	r3, r3, r1
 8000ffa:	b2db      	uxtb	r3, r3
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sTimerxRegs[0].OUTxR) +
 8000ffc:	30e4      	adds	r0, #228	; 0xe4
                                                              REG_OFFSET_TAB_OUTxR[iOutput]));
 8000ffe:	4909      	ldr	r1, [pc, #36]	; (8001024 <LL_HRTIM_OUT_SetChopperMode+0x44>)
 8001000:	f831 4013 	ldrh.w	r4, [r1, r3, lsl #1]
  MODIFY_REG(*pReg, (HRTIM_OUTR_CHP1 << REG_SHIFT_TAB_OUTxR[iOutput]), (ChopperMode << REG_SHIFT_TAB_OUTxR[iOutput]));
 8001004:	5901      	ldr	r1, [r0, r4]
 8001006:	4d08      	ldr	r5, [pc, #32]	; (8001028 <LL_HRTIM_OUT_SetChopperMode+0x48>)
 8001008:	5ced      	ldrb	r5, [r5, r3]
 800100a:	2340      	movs	r3, #64	; 0x40
 800100c:	40ab      	lsls	r3, r5
 800100e:	ea21 0303 	bic.w	r3, r1, r3
 8001012:	40aa      	lsls	r2, r5
 8001014:	431a      	orrs	r2, r3
 8001016:	5102      	str	r2, [r0, r4]
}
 8001018:	bc30      	pop	{r4, r5}
 800101a:	4770      	bx	lr
    return 32U;
 800101c:	2320      	movs	r3, #32
 800101e:	e7e5      	b.n	8000fec <LL_HRTIM_OUT_SetChopperMode+0xc>
 8001020:	2120      	movs	r1, #32
 8001022:	e7e9      	b.n	8000ff8 <LL_HRTIM_OUT_SetChopperMode+0x18>
 8001024:	08008750 	.word	0x08008750
 8001028:	08008798 	.word	0x08008798

0800102c <MX_HRTIM1_Init>:
{
 800102c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001030:	b089      	sub	sp, #36	; 0x24
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001032:	2300      	movs	r3, #0
 8001034:	9302      	str	r3, [sp, #8]
 8001036:	9303      	str	r3, [sp, #12]
 8001038:	9304      	str	r3, [sp, #16]
 800103a:	9305      	str	r3, [sp, #20]
 800103c:	9306      	str	r3, [sp, #24]
 800103e:	9307      	str	r3, [sp, #28]
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001040:	4ac5      	ldr	r2, [pc, #788]	; (8001358 <MX_HRTIM1_Init+0x32c>)
 8001042:	6e11      	ldr	r1, [r2, #96]	; 0x60
 8001044:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 8001048:	6611      	str	r1, [r2, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800104a:	6e12      	ldr	r2, [r2, #96]	; 0x60
 800104c:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8001050:	9200      	str	r2, [sp, #0]
  (void)tmpreg;
 8001052:	9a00      	ldr	r2, [sp, #0]
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001054:	4ac1      	ldr	r2, [pc, #772]	; (800135c <MX_HRTIM1_Init+0x330>)
 8001056:	68d2      	ldr	r2, [r2, #12]
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001058:	4ac1      	ldr	r2, [pc, #772]	; (8001360 <MX_HRTIM1_Init+0x334>)
 800105a:	f882 334a 	strb.w	r3, [r2, #842]	; 0x34a
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800105e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001062:	6093      	str	r3, [r2, #8]
  MODIFY_REG(HRTIMx->sCommonRegs.DLLCR, (HRTIM_DLLCR_CALEN | HRTIM_DLLCR_CALRTE), (Mode | Period));
 8001064:	4abf      	ldr	r2, [pc, #764]	; (8001364 <MX_HRTIM1_Init+0x338>)
 8001066:	f8d2 33cc 	ldr.w	r3, [r2, #972]	; 0x3cc
 800106a:	f043 030e 	orr.w	r3, r3, #14
 800106e:	f8c2 33cc 	str.w	r3, [r2, #972]	; 0x3cc
  * @param  HRTIMx High Resolution Timer instance
  * @retval State of DLLRDY bit in HRTIM_ISR register (1 or 0).
  */
__STATIC_INLINE uint32_t LL_HRTIM_IsActiveFlag_DLLRDY(HRTIM_TypeDef *HRTIMx)
{
  return ((READ_BIT(HRTIMx->sCommonRegs.ISR, HRTIM_ISR_DLLRDY) == (HRTIM_ISR_DLLRDY)) ? 1UL : 0UL);
 8001072:	4bbc      	ldr	r3, [pc, #752]	; (8001364 <MX_HRTIM1_Init+0x338>)
 8001074:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 8001078:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800107c:	d0f9      	beq.n	8001072 <MX_HRTIM1_Init+0x46>
  __IO uint32_t *padcur = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sCommonRegs.CR1) +
 800107e:	49ba      	ldr	r1, [pc, #744]	; (8001368 <MX_HRTIM1_Init+0x33c>)
  __IO uint32_t *padcer = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sCommonRegs.ADC1R) +
 8001080:	4aba      	ldr	r2, [pc, #744]	; (800136c <MX_HRTIM1_Init+0x340>)
  MODIFY_REG(*padcur, REG_MASK_TAB_ADCUR[ADCTrig], (Update << REG_SHIFT_TAB_ADCUR[ADCTrig]));
 8001082:	680b      	ldr	r3, [r1, #0]
 8001084:	f423 1360 	bic.w	r3, r3, #3670016	; 0x380000
 8001088:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800108c:	600b      	str	r3, [r1, #0]
  MODIFY_REG(*padcer, REG_MASK_TAB_ADCER[ADCTrig], (Src << REG_SHIFT_TAB_ADCER[ADCTrig]));
 800108e:	6853      	ldr	r3, [r2, #4]
 8001090:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001094:	6053      	str	r3, [r2, #4]
  MODIFY_REG(HRTIMx->sCommonRegs.ADCPS1, (uint32_t)mask, (uint32_t)ratio);
 8001096:	4bb3      	ldr	r3, [pc, #716]	; (8001364 <MX_HRTIM1_Init+0x338>)
 8001098:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800109c:	f422 62f8 	bic.w	r2, r2, #1984	; 0x7c0
 80010a0:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  MODIFY_REG(HRTIMx->sCommonRegs.ADCPS2, (uint32_t)(mask >> 32U), (uint32_t)(ratio >> 32U));
 80010a4:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80010a8:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010ac:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80010b0:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	f000 861a 	beq.w	8001cee <MX_HRTIM1_Init+0xcc2>
  return __builtin_clz(value);
 80010ba:	fab3 f383 	clz	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_MCEN_Pos);
 80010be:	3b10      	subs	r3, #16
 80010c0:	b2db      	uxtb	r3, r3
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sMasterRegs.MCR) + REG_OFFSET_TAB_TIMER[iTimer]));
 80010c2:	4ca8      	ldr	r4, [pc, #672]	; (8001364 <MX_HRTIM1_Init+0x338>)
 80010c4:	4aaa      	ldr	r2, [pc, #680]	; (8001370 <MX_HRTIM1_Init+0x344>)
 80010c6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
  MODIFY_REG(*pReg, HRTIM_MCR_CK_PSC, Prescaler);
 80010ca:	58a3      	ldr	r3, [r4, r2]
 80010cc:	f023 0307 	bic.w	r3, r3, #7
 80010d0:	50a3      	str	r3, [r4, r2]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010d2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80010d6:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 80010da:	2b00      	cmp	r3, #0
 80010dc:	f000 860a 	beq.w	8001cf4 <MX_HRTIM1_Init+0xcc8>
  return __builtin_clz(value);
 80010e0:	fab3 f383 	clz	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_MCEN_Pos);
 80010e4:	3b10      	subs	r3, #16
 80010e6:	b2db      	uxtb	r3, r3
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sMasterRegs.MCR) + REG_OFFSET_TAB_TIMER[iTimer]));
 80010e8:	4aa1      	ldr	r2, [pc, #644]	; (8001370 <MX_HRTIM1_Init+0x344>)
 80010ea:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
  MODIFY_REG(*pReg, (HRTIM_TIMCR_RETRIG | HRTIM_MCR_CONT), Mode);
 80010ee:	5913      	ldr	r3, [r2, r4]
 80010f0:	f023 0318 	bic.w	r3, r3, #24
 80010f4:	f043 0308 	orr.w	r3, r3, #8
 80010f8:	5113      	str	r3, [r2, r4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010fa:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80010fe:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8001102:	2b00      	cmp	r3, #0
 8001104:	f000 85f9 	beq.w	8001cfa <MX_HRTIM1_Init+0xcce>
  return __builtin_clz(value);
 8001108:	fab3 f383 	clz	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_MCEN_Pos);
 800110c:	3b10      	subs	r3, #16
 800110e:	b2db      	uxtb	r3, r3
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sMasterRegs.MPER) +
 8001110:	f8df a284 	ldr.w	sl, [pc, #644]	; 8001398 <MX_HRTIM1_Init+0x36c>
                                                              REG_OFFSET_TAB_TIMER[iTimer]));
 8001114:	4a96      	ldr	r2, [pc, #600]	; (8001370 <MX_HRTIM1_Init+0x344>)
 8001116:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
  MODIFY_REG(* pReg, HRTIM_MPER_MPER, Period);
 800111a:	f85a 3002 	ldr.w	r3, [sl, r2]
 800111e:	0c1b      	lsrs	r3, r3, #16
 8001120:	041b      	lsls	r3, r3, #16
 8001122:	f443 43aa 	orr.w	r3, r3, #21760	; 0x5500
 8001126:	f84a 3002 	str.w	r3, [sl, r2]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800112a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800112e:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8001132:	2b00      	cmp	r3, #0
 8001134:	f000 85e4 	beq.w	8001d00 <MX_HRTIM1_Init+0xcd4>
  return __builtin_clz(value);
 8001138:	fab3 f383 	clz	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_MCEN_Pos);
 800113c:	3b10      	subs	r3, #16
 800113e:	b2db      	uxtb	r3, r3
                                                              REG_OFFSET_TAB_TIMER[iTimer]));
 8001140:	4a8b      	ldr	r2, [pc, #556]	; (8001370 <MX_HRTIM1_Init+0x344>)
 8001142:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
  MODIFY_REG(* pReg, HRTIM_MREP_MREP, Repetition);
 8001146:	498b      	ldr	r1, [pc, #556]	; (8001374 <MX_HRTIM1_Init+0x348>)
 8001148:	588b      	ldr	r3, [r1, r2]
 800114a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800114e:	508b      	str	r3, [r1, r2]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001150:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001154:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8001158:	2b00      	cmp	r3, #0
 800115a:	f000 85d4 	beq.w	8001d06 <MX_HRTIM1_Init+0xcda>
  return __builtin_clz(value);
 800115e:	fab3 f383 	clz	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_MCEN_Pos);
 8001162:	3b10      	subs	r3, #16
 8001164:	b2db      	uxtb	r3, r3
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sMasterRegs.MCR) + REG_OFFSET_TAB_TIMER[iTimer]));
 8001166:	4a82      	ldr	r2, [pc, #520]	; (8001370 <MX_HRTIM1_Init+0x344>)
 8001168:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
  MODIFY_REG(*pReg, REG_MASK_TAB_UPDATEGATING[iTimer], (UpdateGating << REG_SHIFT_TAB_UPDATEGATING[iTimer]));
 800116c:	590a      	ldr	r2, [r1, r4]
 800116e:	4882      	ldr	r0, [pc, #520]	; (8001378 <MX_HRTIM1_Init+0x34c>)
 8001170:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001174:	ea22 0303 	bic.w	r3, r2, r3
 8001178:	510b      	str	r3, [r1, r4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800117a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800117e:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8001182:	2b00      	cmp	r3, #0
 8001184:	f000 85c2 	beq.w	8001d0c <MX_HRTIM1_Init+0xce0>
  return __builtin_clz(value);
 8001188:	fab3 f383 	clz	r3, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800118c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001190:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8001194:	2a00      	cmp	r2, #0
 8001196:	f000 85bc 	beq.w	8001d12 <MX_HRTIM1_Init+0xce6>
  return __builtin_clz(value);
 800119a:	fab2 f282 	clz	r2, r2
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - POSITION_VAL(LL_HRTIM_TIMER_A));
 800119e:	1a9b      	subs	r3, r3, r2
 80011a0:	b2db      	uxtb	r3, r3
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sTimerxRegs[0].TIMxCR2) +
 80011a2:	4e76      	ldr	r6, [pc, #472]	; (800137c <MX_HRTIM1_Init+0x350>)
                                                              REG_OFFSET_TAB_TIMER[iTimer]));
 80011a4:	4a72      	ldr	r2, [pc, #456]	; (8001370 <MX_HRTIM1_Init+0x344>)
 80011a6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
  MODIFY_REG(* pReg, HRTIM_TIMCR2_UDM, Mode);
 80011aa:	58b3      	ldr	r3, [r6, r2]
 80011ac:	f023 0310 	bic.w	r3, r3, #16
 80011b0:	50b3      	str	r3, [r6, r2]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011b2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80011b6:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	f000 85ac 	beq.w	8001d18 <MX_HRTIM1_Init+0xcec>
  return __builtin_clz(value);
 80011c0:	fab3 f383 	clz	r3, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011c4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80011c8:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 80011cc:	2a00      	cmp	r2, #0
 80011ce:	f000 85a6 	beq.w	8001d1e <MX_HRTIM1_Init+0xcf2>
  return __builtin_clz(value);
 80011d2:	fab2 f282 	clz	r2, r2
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - POSITION_VAL(LL_HRTIM_TIMER_A));
 80011d6:	1a9b      	subs	r3, r3, r2
 80011d8:	b2db      	uxtb	r3, r3
                                                              REG_OFFSET_TAB_TIMER[iTimer]));
 80011da:	4a65      	ldr	r2, [pc, #404]	; (8001370 <MX_HRTIM1_Init+0x344>)
 80011dc:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
  MODIFY_REG(* pReg, HRTIM_TIMCR2_GTCMP1, Mode);
 80011e0:	5993      	ldr	r3, [r2, r6]
 80011e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011e6:	5193      	str	r3, [r2, r6]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011e8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80011ec:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	f000 8597 	beq.w	8001d24 <MX_HRTIM1_Init+0xcf8>
  return __builtin_clz(value);
 80011f6:	fab3 f383 	clz	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_MCEN_Pos);
 80011fa:	3b10      	subs	r3, #16
 80011fc:	b2db      	uxtb	r3, r3
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sMasterRegs.MCR) + REG_OFFSET_TAB_TIMER[iTimer]));
 80011fe:	4a5c      	ldr	r2, [pc, #368]	; (8001370 <MX_HRTIM1_Init+0x344>)
 8001200:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
  MODIFY_REG(*pReg, HRTIM_MCR_DACSYNC, DACTrig);
 8001204:	5913      	ldr	r3, [r2, r4]
 8001206:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800120a:	5113      	str	r3, [r2, r4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800120c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001210:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8001214:	2b00      	cmp	r3, #0
 8001216:	f000 8588 	beq.w	8001d2a <MX_HRTIM1_Init+0xcfe>
  return __builtin_clz(value);
 800121a:	fab3 f383 	clz	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_MCEN_Pos);
 800121e:	3b10      	subs	r3, #16
 8001220:	b2db      	uxtb	r3, r3
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sMasterRegs.MCR) + REG_OFFSET_TAB_TIMER[iTimer]));
 8001222:	4a53      	ldr	r2, [pc, #332]	; (8001370 <MX_HRTIM1_Init+0x344>)
 8001224:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
  CLEAR_BIT(*pReg, HRTIM_MCR_HALF);
 8001228:	5911      	ldr	r1, [r2, r4]
 800122a:	f021 0120 	bic.w	r1, r1, #32
 800122e:	5111      	str	r1, [r2, r4]
  CLEAR_BIT(*pReg, HRTIM_MCR_INTLVD << REG_SHIFT_TAB_INTLVD[iTimer]);
 8001230:	5911      	ldr	r1, [r2, r4]
 8001232:	4853      	ldr	r0, [pc, #332]	; (8001380 <MX_HRTIM1_Init+0x354>)
 8001234:	5cc0      	ldrb	r0, [r0, r3]
 8001236:	23c0      	movs	r3, #192	; 0xc0
 8001238:	4083      	lsls	r3, r0
 800123a:	ea21 0303 	bic.w	r3, r1, r3
 800123e:	5113      	str	r3, [r2, r4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001240:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001244:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8001248:	2b00      	cmp	r3, #0
 800124a:	f000 8571 	beq.w	8001d30 <MX_HRTIM1_Init+0xd04>
  return __builtin_clz(value);
 800124e:	fab3 f383 	clz	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_MCEN_Pos);
 8001252:	3b10      	subs	r3, #16
 8001254:	b2db      	uxtb	r3, r3
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sMasterRegs.MCR) + REG_OFFSET_TAB_TIMER[iTimer]));
 8001256:	4a46      	ldr	r2, [pc, #280]	; (8001370 <MX_HRTIM1_Init+0x344>)
 8001258:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
  MODIFY_REG(*pReg, REG_MASK_TAB_INTLVD[iTimer],
 800125c:	590a      	ldr	r2, [r1, r4]
 800125e:	4849      	ldr	r0, [pc, #292]	; (8001384 <MX_HRTIM1_Init+0x358>)
 8001260:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001264:	ea22 0303 	bic.w	r3, r2, r3
 8001268:	510b      	str	r3, [r1, r4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800126a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800126e:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8001272:	2b00      	cmp	r3, #0
 8001274:	f000 855f 	beq.w	8001d36 <MX_HRTIM1_Init+0xd0a>
  return __builtin_clz(value);
 8001278:	fab3 f383 	clz	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_MCEN_Pos);
 800127c:	3b10      	subs	r3, #16
 800127e:	b2db      	uxtb	r3, r3
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sMasterRegs.MCR) + REG_OFFSET_TAB_TIMER[iTimer]));
 8001280:	4a3b      	ldr	r2, [pc, #236]	; (8001370 <MX_HRTIM1_Init+0x344>)
 8001282:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
  CLEAR_BIT(*pReg, HRTIM_MCR_SYNCSTRTM);
 8001286:	5913      	ldr	r3, [r2, r4]
 8001288:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800128c:	5113      	str	r3, [r2, r4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800128e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001292:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8001296:	2b00      	cmp	r3, #0
 8001298:	f000 8550 	beq.w	8001d3c <MX_HRTIM1_Init+0xd10>
  return __builtin_clz(value);
 800129c:	fab3 f383 	clz	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_MCEN_Pos);
 80012a0:	3b10      	subs	r3, #16
 80012a2:	b2db      	uxtb	r3, r3
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sMasterRegs.MCR) + REG_OFFSET_TAB_TIMER[iTimer]));
 80012a4:	4a32      	ldr	r2, [pc, #200]	; (8001370 <MX_HRTIM1_Init+0x344>)
 80012a6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
  CLEAR_BIT(*pReg, HRTIM_MCR_SYNCRSTM);
 80012aa:	5913      	ldr	r3, [r2, r4]
 80012ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80012b0:	5113      	str	r3, [r2, r4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012b2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80012b6:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	f000 8541 	beq.w	8001d42 <MX_HRTIM1_Init+0xd16>
  return __builtin_clz(value);
 80012c0:	fab3 f383 	clz	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_MCEN_Pos);
 80012c4:	3b10      	subs	r3, #16
 80012c6:	b2db      	uxtb	r3, r3
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sMasterRegs.MCR) + REG_OFFSET_TAB_TIMER[iTimer]));
 80012c8:	4a29      	ldr	r2, [pc, #164]	; (8001370 <MX_HRTIM1_Init+0x344>)
 80012ca:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
  SET_BIT(*pReg, HRTIM_MCR_PREEN);
 80012ce:	5913      	ldr	r3, [r2, r4]
 80012d0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80012d4:	5113      	str	r3, [r2, r4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012d6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80012da:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 80012de:	2b00      	cmp	r3, #0
 80012e0:	f000 8532 	beq.w	8001d48 <MX_HRTIM1_Init+0xd1c>
  return __builtin_clz(value);
 80012e4:	fab3 f383 	clz	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_TACEN_Pos);
 80012e8:	3b11      	subs	r3, #17
 80012ea:	b2db      	uxtb	r3, r3
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sTimerxRegs[0].TIMxCR) +
 80012ec:	4f26      	ldr	r7, [pc, #152]	; (8001388 <MX_HRTIM1_Init+0x35c>)
                                                              REG_OFFSET_TAB_TIMER[iTimer]));
 80012ee:	4a20      	ldr	r2, [pc, #128]	; (8001370 <MX_HRTIM1_Init+0x344>)
 80012f0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
  CLEAR_BIT(*pReg, HRTIM_TIMCR_RSYNCU);
 80012f4:	58bb      	ldr	r3, [r7, r2]
 80012f6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80012fa:	50bb      	str	r3, [r7, r2]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012fc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001300:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8001304:	2b00      	cmp	r3, #0
 8001306:	f000 8522 	beq.w	8001d4e <MX_HRTIM1_Init+0xd22>
  return __builtin_clz(value);
 800130a:	fab3 f383 	clz	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_MCEN_Pos);
 800130e:	3b10      	subs	r3, #16
 8001310:	b2db      	uxtb	r3, r3
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sMasterRegs.MCR) + REG_OFFSET_TAB_TIMER[iTimer]));
 8001312:	4a17      	ldr	r2, [pc, #92]	; (8001370 <MX_HRTIM1_Init+0x344>)
 8001314:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
  MODIFY_REG(*pReg, REG_MASK_TAB_UPDATETRIG[iTimer], UpdateTrig << REG_SHIFT_TAB_UPDATETRIG[iTimer]);
 8001318:	590a      	ldr	r2, [r1, r4]
 800131a:	481c      	ldr	r0, [pc, #112]	; (800138c <MX_HRTIM1_Init+0x360>)
 800131c:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8001320:	ea22 0200 	bic.w	r2, r2, r0
 8001324:	481a      	ldr	r0, [pc, #104]	; (8001390 <MX_HRTIM1_Init+0x364>)
 8001326:	5cc0      	ldrb	r0, [r0, r3]
 8001328:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800132c:	4083      	lsls	r3, r0
 800132e:	4313      	orrs	r3, r2
 8001330:	510b      	str	r3, [r1, r4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001332:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001336:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 800133a:	2b00      	cmp	r3, #0
 800133c:	f000 850a 	beq.w	8001d54 <MX_HRTIM1_Init+0xd28>
  return __builtin_clz(value);
 8001340:	fab3 f383 	clz	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_TACEN_Pos);
 8001344:	3b11      	subs	r3, #17
 8001346:	b2db      	uxtb	r3, r3
                                                              REG_OFFSET_TAB_TIMER[iTimer]));
 8001348:	4a09      	ldr	r2, [pc, #36]	; (8001370 <MX_HRTIM1_Init+0x344>)
 800134a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
  WRITE_REG(*pReg, ResetTrig);
 800134e:	2200      	movs	r2, #0
 8001350:	4910      	ldr	r1, [pc, #64]	; (8001394 <MX_HRTIM1_Init+0x368>)
 8001352:	50ca      	str	r2, [r1, r3]
 8001354:	e022      	b.n	800139c <MX_HRTIM1_Init+0x370>
 8001356:	bf00      	nop
 8001358:	40021000 	.word	0x40021000
 800135c:	e000ed00 	.word	0xe000ed00
 8001360:	e000e100 	.word	0xe000e100
 8001364:	40016800 	.word	0x40016800
 8001368:	40016b80 	.word	0x40016b80
 800136c:	40016bbc 	.word	0x40016bbc
 8001370:	08008780 	.word	0x08008780
 8001374:	40016818 	.word	0x40016818
 8001378:	08008714 	.word	0x08008714
 800137c:	400168ec 	.word	0x400168ec
 8001380:	08008790 	.word	0x08008790
 8001384:	080086f8 	.word	0x080086f8
 8001388:	40016880 	.word	0x40016880
 800138c:	08008730 	.word	0x08008730
 8001390:	080087a4 	.word	0x080087a4
 8001394:	400168d4 	.word	0x400168d4
 8001398:	40016814 	.word	0x40016814
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800139c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80013a0:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	f000 84d8 	beq.w	8001d5a <MX_HRTIM1_Init+0xd2e>
  return __builtin_clz(value);
 80013aa:	fab3 f383 	clz	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_TACEN_Pos);
 80013ae:	3b11      	subs	r3, #17
 80013b0:	b2db      	uxtb	r3, r3
                                                              REG_OFFSET_TAB_TIMER[iTimer]));
 80013b2:	4ad3      	ldr	r2, [pc, #844]	; (8001700 <MX_HRTIM1_Init+0x6d4>)
 80013b4:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
  CLEAR_BIT(*pReg, HRTIM_TIMCR_PSHPLL);
 80013b8:	59d3      	ldr	r3, [r2, r7]
 80013ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80013be:	51d3      	str	r3, [r2, r7]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013c0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80013c4:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	f000 84c9 	beq.w	8001d60 <MX_HRTIM1_Init+0xd34>
  return __builtin_clz(value);
 80013ce:	fab3 f383 	clz	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_TACEN_Pos);
 80013d2:	3b11      	subs	r3, #17
 80013d4:	b2db      	uxtb	r3, r3
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sTimerxRegs[0].OUTxR) +
 80013d6:	f8df 8344 	ldr.w	r8, [pc, #836]	; 800171c <MX_HRTIM1_Init+0x6f0>
                                                              REG_OFFSET_TAB_TIMER[iTimer]));
 80013da:	4ac9      	ldr	r2, [pc, #804]	; (8001700 <MX_HRTIM1_Init+0x6d4>)
 80013dc:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
  SET_BIT(*pReg, HRTIM_OUTR_DTEN);
 80013e0:	f858 3002 	ldr.w	r3, [r8, r2]
 80013e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013e8:	f848 3002 	str.w	r3, [r8, r2]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013ec:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80013f0:	fa93 f2a3 	rbit	r2, r3
  MODIFY_REG(HRTIMx->sCommonRegs.BMCR, Timer, BurtsModeOption << iTimer);
 80013f4:	4ac3      	ldr	r2, [pc, #780]	; (8001704 <MX_HRTIM1_Init+0x6d8>)
 80013f6:	f8d2 13a0 	ldr.w	r1, [r2, #928]	; 0x3a0
 80013fa:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
 80013fe:	f8c2 13a0 	str.w	r1, [r2, #928]	; 0x3a0
  SET_BIT(HRTIMx->sCommonRegs.CR2, ((Timers >> HRTIM_MCR_MCEN_Pos) & HRTIM_CR2_SWUPD_MASK));
 8001402:	f8d2 1384 	ldr.w	r1, [r2, #900]	; 0x384
 8001406:	f041 0120 	orr.w	r1, r1, #32
 800140a:	f8c2 1384 	str.w	r1, [r2, #900]	; 0x384
 800140e:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8001412:	2b00      	cmp	r3, #0
 8001414:	f000 84a7 	beq.w	8001d66 <MX_HRTIM1_Init+0xd3a>
  return __builtin_clz(value);
 8001418:	fab3 f383 	clz	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_MCEN_Pos);
 800141c:	3b10      	subs	r3, #16
 800141e:	b2db      	uxtb	r3, r3
                                                              REG_OFFSET_TAB_TIMER[iTimer]));
 8001420:	4ab7      	ldr	r2, [pc, #732]	; (8001700 <MX_HRTIM1_Init+0x6d4>)
 8001422:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
  MODIFY_REG(* pReg, HRTIM_MCMP1R_MCMP1R, CompareValue);
 8001426:	49b8      	ldr	r1, [pc, #736]	; (8001708 <MX_HRTIM1_Init+0x6dc>)
 8001428:	588b      	ldr	r3, [r1, r2]
 800142a:	0c1b      	lsrs	r3, r3, #16
 800142c:	041b      	lsls	r3, r3, #16
 800142e:	f443 532a 	orr.w	r3, r3, #10880	; 0x2a80
 8001432:	508b      	str	r3, [r1, r2]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001434:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001438:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 800143c:	2b00      	cmp	r3, #0
 800143e:	f000 8495 	beq.w	8001d6c <MX_HRTIM1_Init+0xd40>
  return __builtin_clz(value);
 8001442:	fab3 f383 	clz	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_TACEN_Pos);
 8001446:	3b11      	subs	r3, #17
 8001448:	b2db      	uxtb	r3, r3
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sTimerxRegs[0].DTxR) +
 800144a:	4db0      	ldr	r5, [pc, #704]	; (800170c <MX_HRTIM1_Init+0x6e0>)
                                                              REG_OFFSET_TAB_TIMER[iTimer]));
 800144c:	4aac      	ldr	r2, [pc, #688]	; (8001700 <MX_HRTIM1_Init+0x6d4>)
 800144e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
  MODIFY_REG(*pReg, HRTIM_DTR_DTPRSC, Prescaler);
 8001452:	58ab      	ldr	r3, [r5, r2]
 8001454:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001458:	50ab      	str	r3, [r5, r2]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800145a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800145e:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8001462:	2b00      	cmp	r3, #0
 8001464:	f000 8485 	beq.w	8001d72 <MX_HRTIM1_Init+0xd46>
  return __builtin_clz(value);
 8001468:	fab3 f383 	clz	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_TACEN_Pos);
 800146c:	3b11      	subs	r3, #17
 800146e:	b2db      	uxtb	r3, r3
                                                              REG_OFFSET_TAB_TIMER[iTimer]));
 8001470:	4aa3      	ldr	r2, [pc, #652]	; (8001700 <MX_HRTIM1_Init+0x6d4>)
 8001472:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
  MODIFY_REG(*pReg, HRTIM_DTR_DTR, RisingValue);
 8001476:	5953      	ldr	r3, [r2, r5]
 8001478:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800147c:	f023 0301 	bic.w	r3, r3, #1
 8001480:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 8001484:	5153      	str	r3, [r2, r5]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001486:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800148a:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 800148e:	2b00      	cmp	r3, #0
 8001490:	f000 8472 	beq.w	8001d78 <MX_HRTIM1_Init+0xd4c>
  return __builtin_clz(value);
 8001494:	fab3 f383 	clz	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_TACEN_Pos);
 8001498:	3b11      	subs	r3, #17
 800149a:	b2db      	uxtb	r3, r3
                                                              REG_OFFSET_TAB_TIMER[iTimer]));
 800149c:	4a98      	ldr	r2, [pc, #608]	; (8001700 <MX_HRTIM1_Init+0x6d4>)
 800149e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
  MODIFY_REG(*pReg, HRTIM_DTR_SDTR, RisingSign);
 80014a2:	5953      	ldr	r3, [r2, r5]
 80014a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80014a8:	5153      	str	r3, [r2, r5]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014aa:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80014ae:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	f000 8463 	beq.w	8001d7e <MX_HRTIM1_Init+0xd52>
  return __builtin_clz(value);
 80014b8:	fab3 f383 	clz	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_TACEN_Pos);
 80014bc:	3b11      	subs	r3, #17
 80014be:	b2db      	uxtb	r3, r3
                                                              REG_OFFSET_TAB_TIMER[iTimer]));
 80014c0:	4a8f      	ldr	r2, [pc, #572]	; (8001700 <MX_HRTIM1_Init+0x6d4>)
 80014c2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
  MODIFY_REG(*pReg, HRTIM_DTR_DTF, FallingValue << HRTIM_DTR_DTF_Pos);
 80014c6:	5953      	ldr	r3, [r2, r5]
 80014c8:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80014cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014d0:	f443 0308 	orr.w	r3, r3, #8912896	; 0x880000
 80014d4:	5153      	str	r3, [r2, r5]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014d6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80014da:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 80014de:	2b00      	cmp	r3, #0
 80014e0:	f000 8450 	beq.w	8001d84 <MX_HRTIM1_Init+0xd58>
  return __builtin_clz(value);
 80014e4:	fab3 f383 	clz	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_TACEN_Pos);
 80014e8:	3b11      	subs	r3, #17
 80014ea:	b2db      	uxtb	r3, r3
                                                              REG_OFFSET_TAB_TIMER[iTimer]));
 80014ec:	4a84      	ldr	r2, [pc, #528]	; (8001700 <MX_HRTIM1_Init+0x6d4>)
 80014ee:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
  MODIFY_REG(*pReg, HRTIM_DTR_SDTF, FallingSign);
 80014f2:	5953      	ldr	r3, [r2, r5]
 80014f4:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80014f8:	5153      	str	r3, [r2, r5]
  LL_HRTIM_OUT_SetPolarity(HRTIM1, LL_HRTIM_OUTPUT_TE1, LL_HRTIM_OUT_POSITIVE_POLARITY);
 80014fa:	2200      	movs	r2, #0
 80014fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001500:	4880      	ldr	r0, [pc, #512]	; (8001704 <MX_HRTIM1_Init+0x6d8>)
 8001502:	f7ff fcd5 	bl	8000eb0 <LL_HRTIM_OUT_SetPolarity>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001506:	f44f 7380 	mov.w	r3, #256	; 0x100
 800150a:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 800150e:	2b00      	cmp	r3, #0
 8001510:	f000 843b 	beq.w	8001d8a <MX_HRTIM1_Init+0xd5e>
  return __builtin_clz(value);
 8001514:	fab3 f383 	clz	r3, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001518:	2201      	movs	r2, #1
 800151a:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 800151e:	2a00      	cmp	r2, #0
 8001520:	f000 8436 	beq.w	8001d90 <MX_HRTIM1_Init+0xd64>
  return __builtin_clz(value);
 8001524:	fab2 f282 	clz	r2, r2
  uint32_t iOutput = (uint8_t)(POSITION_VAL(Output) - POSITION_VAL(LL_HRTIM_OUTPUT_TA1));
 8001528:	1a9b      	subs	r3, r3, r2
 800152a:	b2db      	uxtb	r3, r3
                                                              REG_OFFSET_TAB_SETxR[iOutput]));
 800152c:	4a78      	ldr	r2, [pc, #480]	; (8001710 <MX_HRTIM1_Init+0x6e4>)
 800152e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
  WRITE_REG(*pReg, SetSrc);
 8001532:	2204      	movs	r2, #4
 8001534:	4977      	ldr	r1, [pc, #476]	; (8001714 <MX_HRTIM1_Init+0x6e8>)
 8001536:	50ca      	str	r2, [r1, r3]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001538:	f44f 7380 	mov.w	r3, #256	; 0x100
 800153c:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8001540:	2b00      	cmp	r3, #0
 8001542:	f000 8428 	beq.w	8001d96 <MX_HRTIM1_Init+0xd6a>
  return __builtin_clz(value);
 8001546:	fab3 f383 	clz	r3, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800154a:	2201      	movs	r2, #1
 800154c:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8001550:	2a00      	cmp	r2, #0
 8001552:	f000 8423 	beq.w	8001d9c <MX_HRTIM1_Init+0xd70>
  return __builtin_clz(value);
 8001556:	fab2 f282 	clz	r2, r2
  uint32_t iOutput = (uint8_t)(POSITION_VAL(Output) - POSITION_VAL(LL_HRTIM_OUTPUT_TA1));
 800155a:	1a9b      	subs	r3, r3, r2
 800155c:	b2db      	uxtb	r3, r3
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sTimerxRegs[0].RSTx1R) +
 800155e:	f8df b1c0 	ldr.w	fp, [pc, #448]	; 8001720 <MX_HRTIM1_Init+0x6f4>
                                                              REG_OFFSET_TAB_SETxR[iOutput]));
 8001562:	4a6b      	ldr	r2, [pc, #428]	; (8001710 <MX_HRTIM1_Init+0x6e4>)
 8001564:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
  WRITE_REG(*pReg, ResetSrc);
 8001568:	2208      	movs	r2, #8
 800156a:	f84b 2003 	str.w	r2, [fp, r3]
  LL_HRTIM_OUT_SetIdleMode(HRTIM1, LL_HRTIM_OUTPUT_TE1, LL_HRTIM_OUT_NO_IDLE);
 800156e:	f8df 9194 	ldr.w	r9, [pc, #404]	; 8001704 <MX_HRTIM1_Init+0x6d8>
 8001572:	2200      	movs	r2, #0
 8001574:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001578:	4648      	mov	r0, r9
 800157a:	f7ff fcbf 	bl	8000efc <LL_HRTIM_OUT_SetIdleMode>
  LL_HRTIM_OUT_SetIdleLevel(HRTIM1, LL_HRTIM_OUTPUT_TE1, LL_HRTIM_OUT_IDLELEVEL_INACTIVE);
 800157e:	2200      	movs	r2, #0
 8001580:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001584:	4648      	mov	r0, r9
 8001586:	f7ff fcdf 	bl	8000f48 <LL_HRTIM_OUT_SetIdleLevel>
  LL_HRTIM_OUT_SetFaultState(HRTIM1, LL_HRTIM_OUTPUT_TE1, LL_HRTIM_OUT_FAULTSTATE_NO_ACTION);
 800158a:	2200      	movs	r2, #0
 800158c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001590:	4648      	mov	r0, r9
 8001592:	f7ff fcff 	bl	8000f94 <LL_HRTIM_OUT_SetFaultState>
  LL_HRTIM_OUT_SetChopperMode(HRTIM1, LL_HRTIM_OUTPUT_TE1, LL_HRTIM_OUT_CHOPPERMODE_DISABLED);
 8001596:	2200      	movs	r2, #0
 8001598:	f44f 7180 	mov.w	r1, #256	; 0x100
 800159c:	4648      	mov	r0, r9
 800159e:	f7ff fd1f 	bl	8000fe0 <LL_HRTIM_OUT_SetChopperMode>
  LL_HRTIM_OUT_SetPolarity(HRTIM1, LL_HRTIM_OUTPUT_TE2, LL_HRTIM_OUT_POSITIVE_POLARITY);
 80015a2:	2200      	movs	r2, #0
 80015a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015a8:	4648      	mov	r0, r9
 80015aa:	f7ff fc81 	bl	8000eb0 <LL_HRTIM_OUT_SetPolarity>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015b2:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	f000 83f3 	beq.w	8001da2 <MX_HRTIM1_Init+0xd76>
  return __builtin_clz(value);
 80015bc:	fab3 f383 	clz	r3, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015c0:	2201      	movs	r2, #1
 80015c2:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 80015c6:	2a00      	cmp	r2, #0
 80015c8:	f000 83ed 	beq.w	8001da6 <MX_HRTIM1_Init+0xd7a>
  return __builtin_clz(value);
 80015cc:	fab2 f282 	clz	r2, r2
  uint32_t iOutput = (uint8_t)(POSITION_VAL(Output) - POSITION_VAL(LL_HRTIM_OUTPUT_TA1));
 80015d0:	1a9b      	subs	r3, r3, r2
 80015d2:	b2db      	uxtb	r3, r3
                                                              REG_OFFSET_TAB_SETxR[iOutput]));
 80015d4:	4a4e      	ldr	r2, [pc, #312]	; (8001710 <MX_HRTIM1_Init+0x6e4>)
 80015d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
  WRITE_REG(*pReg, SetSrc);
 80015da:	2200      	movs	r2, #0
 80015dc:	494d      	ldr	r1, [pc, #308]	; (8001714 <MX_HRTIM1_Init+0x6e8>)
 80015de:	505a      	str	r2, [r3, r1]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015e4:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	f000 83de 	beq.w	8001daa <MX_HRTIM1_Init+0xd7e>
  return __builtin_clz(value);
 80015ee:	fab3 f383 	clz	r3, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015f2:	2201      	movs	r2, #1
 80015f4:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 80015f8:	2a00      	cmp	r2, #0
 80015fa:	f000 83d8 	beq.w	8001dae <MX_HRTIM1_Init+0xd82>
  return __builtin_clz(value);
 80015fe:	fab2 f282 	clz	r2, r2
  uint32_t iOutput = (uint8_t)(POSITION_VAL(Output) - POSITION_VAL(LL_HRTIM_OUTPUT_TA1));
 8001602:	1a9b      	subs	r3, r3, r2
 8001604:	b2db      	uxtb	r3, r3
                                                              REG_OFFSET_TAB_SETxR[iOutput]));
 8001606:	4a42      	ldr	r2, [pc, #264]	; (8001710 <MX_HRTIM1_Init+0x6e4>)
 8001608:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
  WRITE_REG(*pReg, ResetSrc);
 800160c:	f04f 0900 	mov.w	r9, #0
 8001610:	f843 900b 	str.w	r9, [r3, fp]
  LL_HRTIM_OUT_SetIdleMode(HRTIM1, LL_HRTIM_OUTPUT_TE2, LL_HRTIM_OUT_NO_IDLE);
 8001614:	464a      	mov	r2, r9
 8001616:	f44f 7100 	mov.w	r1, #512	; 0x200
 800161a:	483a      	ldr	r0, [pc, #232]	; (8001704 <MX_HRTIM1_Init+0x6d8>)
 800161c:	f7ff fc6e 	bl	8000efc <LL_HRTIM_OUT_SetIdleMode>
  LL_HRTIM_OUT_SetIdleLevel(HRTIM1, LL_HRTIM_OUTPUT_TE2, LL_HRTIM_OUT_IDLELEVEL_INACTIVE);
 8001620:	464a      	mov	r2, r9
 8001622:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001626:	4837      	ldr	r0, [pc, #220]	; (8001704 <MX_HRTIM1_Init+0x6d8>)
 8001628:	f7ff fc8e 	bl	8000f48 <LL_HRTIM_OUT_SetIdleLevel>
  LL_HRTIM_OUT_SetFaultState(HRTIM1, LL_HRTIM_OUTPUT_TE2, LL_HRTIM_OUT_FAULTSTATE_NO_ACTION);
 800162c:	464a      	mov	r2, r9
 800162e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001632:	4834      	ldr	r0, [pc, #208]	; (8001704 <MX_HRTIM1_Init+0x6d8>)
 8001634:	f7ff fcae 	bl	8000f94 <LL_HRTIM_OUT_SetFaultState>
  LL_HRTIM_OUT_SetChopperMode(HRTIM1, LL_HRTIM_OUTPUT_TE2, LL_HRTIM_OUT_CHOPPERMODE_DISABLED);
 8001638:	464a      	mov	r2, r9
 800163a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800163e:	4831      	ldr	r0, [pc, #196]	; (8001704 <MX_HRTIM1_Init+0x6d8>)
 8001640:	f7ff fcce 	bl	8000fe0 <LL_HRTIM_OUT_SetChopperMode>
  return ((READ_BIT(HRTIMx->sCommonRegs.ISR, HRTIM_ISR_DLLRDY) == (HRTIM_ISR_DLLRDY)) ? 1UL : 0UL);
 8001644:	4b2f      	ldr	r3, [pc, #188]	; (8001704 <MX_HRTIM1_Init+0x6d8>)
 8001646:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 800164a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800164e:	d0f9      	beq.n	8001644 <MX_HRTIM1_Init+0x618>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001650:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001654:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8001658:	2b00      	cmp	r3, #0
 800165a:	f000 83aa 	beq.w	8001db2 <MX_HRTIM1_Init+0xd86>
  return __builtin_clz(value);
 800165e:	fab3 f383 	clz	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_MCEN_Pos);
 8001662:	3b10      	subs	r3, #16
 8001664:	b2db      	uxtb	r3, r3
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sMasterRegs.MCR) + REG_OFFSET_TAB_TIMER[iTimer]));
 8001666:	4a26      	ldr	r2, [pc, #152]	; (8001700 <MX_HRTIM1_Init+0x6d4>)
 8001668:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
  MODIFY_REG(*pReg, HRTIM_MCR_CK_PSC, Prescaler);
 800166c:	58a3      	ldr	r3, [r4, r2]
 800166e:	f023 0307 	bic.w	r3, r3, #7
 8001672:	50a3      	str	r3, [r4, r2]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001674:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001678:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 800167c:	2b00      	cmp	r3, #0
 800167e:	f000 839a 	beq.w	8001db6 <MX_HRTIM1_Init+0xd8a>
  return __builtin_clz(value);
 8001682:	fab3 f383 	clz	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_MCEN_Pos);
 8001686:	3b10      	subs	r3, #16
 8001688:	b2db      	uxtb	r3, r3
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sMasterRegs.MCR) + REG_OFFSET_TAB_TIMER[iTimer]));
 800168a:	4a1d      	ldr	r2, [pc, #116]	; (8001700 <MX_HRTIM1_Init+0x6d4>)
 800168c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
  MODIFY_REG(*pReg, (HRTIM_TIMCR_RETRIG | HRTIM_MCR_CONT), Mode);
 8001690:	58a3      	ldr	r3, [r4, r2]
 8001692:	f023 0318 	bic.w	r3, r3, #24
 8001696:	f043 0308 	orr.w	r3, r3, #8
 800169a:	50a3      	str	r3, [r4, r2]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800169c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80016a0:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	f000 8388 	beq.w	8001dba <MX_HRTIM1_Init+0xd8e>
  return __builtin_clz(value);
 80016aa:	fab3 f383 	clz	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_MCEN_Pos);
 80016ae:	3b10      	subs	r3, #16
 80016b0:	b2db      	uxtb	r3, r3
                                                              REG_OFFSET_TAB_TIMER[iTimer]));
 80016b2:	4a13      	ldr	r2, [pc, #76]	; (8001700 <MX_HRTIM1_Init+0x6d4>)
 80016b4:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
  MODIFY_REG(* pReg, HRTIM_MPER_MPER, Period);
 80016b8:	f85a 3002 	ldr.w	r3, [sl, r2]
 80016bc:	0c1b      	lsrs	r3, r3, #16
 80016be:	041b      	lsls	r3, r3, #16
 80016c0:	f443 43aa 	orr.w	r3, r3, #21760	; 0x5500
 80016c4:	f84a 3002 	str.w	r3, [sl, r2]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016c8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80016cc:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	f000 8374 	beq.w	8001dbe <MX_HRTIM1_Init+0xd92>
  return __builtin_clz(value);
 80016d6:	fab3 f383 	clz	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_MCEN_Pos);
 80016da:	3b10      	subs	r3, #16
 80016dc:	b2db      	uxtb	r3, r3
                                                              REG_OFFSET_TAB_TIMER[iTimer]));
 80016de:	4a08      	ldr	r2, [pc, #32]	; (8001700 <MX_HRTIM1_Init+0x6d4>)
 80016e0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
  MODIFY_REG(* pReg, HRTIM_MREP_MREP, Repetition);
 80016e4:	490c      	ldr	r1, [pc, #48]	; (8001718 <MX_HRTIM1_Init+0x6ec>)
 80016e6:	588b      	ldr	r3, [r1, r2]
 80016e8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80016ec:	508b      	str	r3, [r1, r2]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80016f2:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	f000 8363 	beq.w	8001dc2 <MX_HRTIM1_Init+0xd96>
 80016fc:	e012      	b.n	8001724 <MX_HRTIM1_Init+0x6f8>
 80016fe:	bf00      	nop
 8001700:	08008780 	.word	0x08008780
 8001704:	40016800 	.word	0x40016800
 8001708:	4001681c 	.word	0x4001681c
 800170c:	400168b8 	.word	0x400168b8
 8001710:	08008768 	.word	0x08008768
 8001714:	400168bc 	.word	0x400168bc
 8001718:	40016818 	.word	0x40016818
 800171c:	400168e4 	.word	0x400168e4
 8001720:	400168c0 	.word	0x400168c0
  return __builtin_clz(value);
 8001724:	fab3 f383 	clz	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_MCEN_Pos);
 8001728:	3b10      	subs	r3, #16
 800172a:	b2db      	uxtb	r3, r3
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sMasterRegs.MCR) + REG_OFFSET_TAB_TIMER[iTimer]));
 800172c:	4aca      	ldr	r2, [pc, #808]	; (8001a58 <MX_HRTIM1_Init+0xa2c>)
 800172e:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
  MODIFY_REG(*pReg, REG_MASK_TAB_UPDATEGATING[iTimer], (UpdateGating << REG_SHIFT_TAB_UPDATEGATING[iTimer]));
 8001732:	5862      	ldr	r2, [r4, r1]
 8001734:	48c9      	ldr	r0, [pc, #804]	; (8001a5c <MX_HRTIM1_Init+0xa30>)
 8001736:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800173a:	ea22 0303 	bic.w	r3, r2, r3
 800173e:	5063      	str	r3, [r4, r1]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001740:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001744:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8001748:	2b00      	cmp	r3, #0
 800174a:	f000 833c 	beq.w	8001dc6 <MX_HRTIM1_Init+0xd9a>
  return __builtin_clz(value);
 800174e:	fab3 f383 	clz	r3, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001752:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001756:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 800175a:	2a00      	cmp	r2, #0
 800175c:	f000 8335 	beq.w	8001dca <MX_HRTIM1_Init+0xd9e>
  return __builtin_clz(value);
 8001760:	fab2 f282 	clz	r2, r2
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - POSITION_VAL(LL_HRTIM_TIMER_A));
 8001764:	1a9b      	subs	r3, r3, r2
 8001766:	b2db      	uxtb	r3, r3
                                                              REG_OFFSET_TAB_TIMER[iTimer]));
 8001768:	4abb      	ldr	r2, [pc, #748]	; (8001a58 <MX_HRTIM1_Init+0xa2c>)
 800176a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
  MODIFY_REG(* pReg, HRTIM_TIMCR2_UDM, Mode);
 800176e:	58b3      	ldr	r3, [r6, r2]
 8001770:	f023 0310 	bic.w	r3, r3, #16
 8001774:	50b3      	str	r3, [r6, r2]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001776:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800177a:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 800177e:	2b00      	cmp	r3, #0
 8001780:	f000 8325 	beq.w	8001dce <MX_HRTIM1_Init+0xda2>
  return __builtin_clz(value);
 8001784:	fab3 f383 	clz	r3, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001788:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800178c:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8001790:	2a00      	cmp	r2, #0
 8001792:	f000 831e 	beq.w	8001dd2 <MX_HRTIM1_Init+0xda6>
  return __builtin_clz(value);
 8001796:	fab2 f282 	clz	r2, r2
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - POSITION_VAL(LL_HRTIM_TIMER_A));
 800179a:	1a9b      	subs	r3, r3, r2
 800179c:	b2db      	uxtb	r3, r3
                                                              REG_OFFSET_TAB_TIMER[iTimer]));
 800179e:	4aae      	ldr	r2, [pc, #696]	; (8001a58 <MX_HRTIM1_Init+0xa2c>)
 80017a0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
  MODIFY_REG(* pReg, HRTIM_TIMCR2_GTCMP1, Mode);
 80017a4:	58b3      	ldr	r3, [r6, r2]
 80017a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017aa:	50b3      	str	r3, [r6, r2]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ac:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017b0:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	f000 830e 	beq.w	8001dd6 <MX_HRTIM1_Init+0xdaa>
  return __builtin_clz(value);
 80017ba:	fab3 f383 	clz	r3, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017be:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80017c2:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 80017c6:	2a00      	cmp	r2, #0
 80017c8:	f000 8307 	beq.w	8001dda <MX_HRTIM1_Init+0xdae>
  return __builtin_clz(value);
 80017cc:	fab2 f282 	clz	r2, r2
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - POSITION_VAL(LL_HRTIM_TIMER_A));
 80017d0:	1a9b      	subs	r3, r3, r2
 80017d2:	b2db      	uxtb	r3, r3
                                                              REG_OFFSET_TAB_TIMER[iTimer]));
 80017d4:	4aa0      	ldr	r2, [pc, #640]	; (8001a58 <MX_HRTIM1_Init+0xa2c>)
 80017d6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
  MODIFY_REG(* pReg, HRTIM_TIMCR2_GTCMP3, (Mode));
 80017da:	58b3      	ldr	r3, [r6, r2]
 80017dc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80017e0:	50b3      	str	r3, [r6, r2]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017e2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017e6:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	f000 8304 	beq.w	8001df8 <MX_HRTIM1_Init+0xdcc>
  return __builtin_clz(value);
 80017f0:	fab3 f383 	clz	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_MCEN_Pos);
 80017f4:	3b10      	subs	r3, #16
 80017f6:	b2db      	uxtb	r3, r3
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sMasterRegs.MCR) + REG_OFFSET_TAB_TIMER[iTimer]));
 80017f8:	4a97      	ldr	r2, [pc, #604]	; (8001a58 <MX_HRTIM1_Init+0xa2c>)
 80017fa:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
  MODIFY_REG(*pReg, HRTIM_MCR_DACSYNC, DACTrig);
 80017fe:	58a3      	ldr	r3, [r4, r2]
 8001800:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8001804:	50a3      	str	r3, [r4, r2]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001806:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800180a:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 800180e:	2b00      	cmp	r3, #0
 8001810:	f000 82f4 	beq.w	8001dfc <MX_HRTIM1_Init+0xdd0>
  return __builtin_clz(value);
 8001814:	fab3 f383 	clz	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_MCEN_Pos);
 8001818:	3b10      	subs	r3, #16
 800181a:	b2db      	uxtb	r3, r3
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sMasterRegs.MCR) + REG_OFFSET_TAB_TIMER[iTimer]));
 800181c:	4a8e      	ldr	r2, [pc, #568]	; (8001a58 <MX_HRTIM1_Init+0xa2c>)
 800181e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
  CLEAR_BIT(*pReg, HRTIM_MCR_HALF);
 8001822:	58a1      	ldr	r1, [r4, r2]
 8001824:	f021 0120 	bic.w	r1, r1, #32
 8001828:	50a1      	str	r1, [r4, r2]
  CLEAR_BIT(*pReg, HRTIM_MCR_INTLVD << REG_SHIFT_TAB_INTLVD[iTimer]);
 800182a:	58a1      	ldr	r1, [r4, r2]
 800182c:	488c      	ldr	r0, [pc, #560]	; (8001a60 <MX_HRTIM1_Init+0xa34>)
 800182e:	5cc0      	ldrb	r0, [r0, r3]
 8001830:	23c0      	movs	r3, #192	; 0xc0
 8001832:	4083      	lsls	r3, r0
 8001834:	ea21 0303 	bic.w	r3, r1, r3
 8001838:	50a3      	str	r3, [r4, r2]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800183a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800183e:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8001842:	2b00      	cmp	r3, #0
 8001844:	f000 82dc 	beq.w	8001e00 <MX_HRTIM1_Init+0xdd4>
  return __builtin_clz(value);
 8001848:	fab3 f383 	clz	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_MCEN_Pos);
 800184c:	3b10      	subs	r3, #16
 800184e:	b2db      	uxtb	r3, r3
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sMasterRegs.MCR) + REG_OFFSET_TAB_TIMER[iTimer]));
 8001850:	4a81      	ldr	r2, [pc, #516]	; (8001a58 <MX_HRTIM1_Init+0xa2c>)
 8001852:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
  MODIFY_REG(*pReg, REG_MASK_TAB_INTLVD[iTimer],
 8001856:	5862      	ldr	r2, [r4, r1]
 8001858:	4882      	ldr	r0, [pc, #520]	; (8001a64 <MX_HRTIM1_Init+0xa38>)
 800185a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800185e:	ea22 0303 	bic.w	r3, r2, r3
 8001862:	5063      	str	r3, [r4, r1]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001864:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001868:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 800186c:	2b00      	cmp	r3, #0
 800186e:	f000 82c9 	beq.w	8001e04 <MX_HRTIM1_Init+0xdd8>
  return __builtin_clz(value);
 8001872:	fab3 f383 	clz	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_MCEN_Pos);
 8001876:	3b10      	subs	r3, #16
 8001878:	b2db      	uxtb	r3, r3
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sMasterRegs.MCR) + REG_OFFSET_TAB_TIMER[iTimer]));
 800187a:	4a77      	ldr	r2, [pc, #476]	; (8001a58 <MX_HRTIM1_Init+0xa2c>)
 800187c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
  CLEAR_BIT(*pReg, HRTIM_MCR_SYNCSTRTM);
 8001880:	58a3      	ldr	r3, [r4, r2]
 8001882:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001886:	50a3      	str	r3, [r4, r2]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001888:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800188c:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8001890:	2b00      	cmp	r3, #0
 8001892:	f000 82b9 	beq.w	8001e08 <MX_HRTIM1_Init+0xddc>
  return __builtin_clz(value);
 8001896:	fab3 f383 	clz	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_MCEN_Pos);
 800189a:	3b10      	subs	r3, #16
 800189c:	b2db      	uxtb	r3, r3
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sMasterRegs.MCR) + REG_OFFSET_TAB_TIMER[iTimer]));
 800189e:	4a6e      	ldr	r2, [pc, #440]	; (8001a58 <MX_HRTIM1_Init+0xa2c>)
 80018a0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
  CLEAR_BIT(*pReg, HRTIM_MCR_SYNCRSTM);
 80018a4:	58a3      	ldr	r3, [r4, r2]
 80018a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80018aa:	50a3      	str	r3, [r4, r2]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ac:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80018b0:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	f000 82a9 	beq.w	8001e0c <MX_HRTIM1_Init+0xde0>
  return __builtin_clz(value);
 80018ba:	fab3 f383 	clz	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_MCEN_Pos);
 80018be:	3b10      	subs	r3, #16
 80018c0:	b2db      	uxtb	r3, r3
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sMasterRegs.MCR) + REG_OFFSET_TAB_TIMER[iTimer]));
 80018c2:	4a65      	ldr	r2, [pc, #404]	; (8001a58 <MX_HRTIM1_Init+0xa2c>)
 80018c4:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
  SET_BIT(*pReg, HRTIM_MCR_PREEN);
 80018c8:	58a3      	ldr	r3, [r4, r2]
 80018ca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80018ce:	50a3      	str	r3, [r4, r2]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018d0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80018d4:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 80018d8:	2b00      	cmp	r3, #0
 80018da:	f000 8299 	beq.w	8001e10 <MX_HRTIM1_Init+0xde4>
  return __builtin_clz(value);
 80018de:	fab3 f383 	clz	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_TACEN_Pos);
 80018e2:	3b11      	subs	r3, #17
 80018e4:	b2db      	uxtb	r3, r3
                                                              REG_OFFSET_TAB_TIMER[iTimer]));
 80018e6:	4a5c      	ldr	r2, [pc, #368]	; (8001a58 <MX_HRTIM1_Init+0xa2c>)
 80018e8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
  CLEAR_BIT(*pReg, HRTIM_TIMCR_RSYNCU);
 80018ec:	58bb      	ldr	r3, [r7, r2]
 80018ee:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80018f2:	50bb      	str	r3, [r7, r2]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018f4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80018f8:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	f000 8289 	beq.w	8001e14 <MX_HRTIM1_Init+0xde8>
  return __builtin_clz(value);
 8001902:	fab3 f383 	clz	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_MCEN_Pos);
 8001906:	3b10      	subs	r3, #16
 8001908:	b2db      	uxtb	r3, r3
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sMasterRegs.MCR) + REG_OFFSET_TAB_TIMER[iTimer]));
 800190a:	4a53      	ldr	r2, [pc, #332]	; (8001a58 <MX_HRTIM1_Init+0xa2c>)
 800190c:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
  MODIFY_REG(*pReg, REG_MASK_TAB_UPDATETRIG[iTimer], UpdateTrig << REG_SHIFT_TAB_UPDATETRIG[iTimer]);
 8001910:	5862      	ldr	r2, [r4, r1]
 8001912:	4855      	ldr	r0, [pc, #340]	; (8001a68 <MX_HRTIM1_Init+0xa3c>)
 8001914:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8001918:	ea22 0200 	bic.w	r2, r2, r0
 800191c:	4853      	ldr	r0, [pc, #332]	; (8001a6c <MX_HRTIM1_Init+0xa40>)
 800191e:	5cc0      	ldrb	r0, [r0, r3]
 8001920:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001924:	4083      	lsls	r3, r0
 8001926:	4313      	orrs	r3, r2
 8001928:	5063      	str	r3, [r4, r1]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800192a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800192e:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8001932:	2b00      	cmp	r3, #0
 8001934:	f000 8270 	beq.w	8001e18 <MX_HRTIM1_Init+0xdec>
  return __builtin_clz(value);
 8001938:	fab3 f383 	clz	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_TACEN_Pos);
 800193c:	3b11      	subs	r3, #17
 800193e:	b2db      	uxtb	r3, r3
                                                              REG_OFFSET_TAB_TIMER[iTimer]));
 8001940:	4a45      	ldr	r2, [pc, #276]	; (8001a58 <MX_HRTIM1_Init+0xa2c>)
 8001942:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
  WRITE_REG(*pReg, ResetTrig);
 8001946:	2200      	movs	r2, #0
 8001948:	4949      	ldr	r1, [pc, #292]	; (8001a70 <MX_HRTIM1_Init+0xa44>)
 800194a:	50ca      	str	r2, [r1, r3]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800194c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001950:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8001954:	2b00      	cmp	r3, #0
 8001956:	f000 8261 	beq.w	8001e1c <MX_HRTIM1_Init+0xdf0>
  return __builtin_clz(value);
 800195a:	fab3 f383 	clz	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_TACEN_Pos);
 800195e:	3b11      	subs	r3, #17
 8001960:	b2db      	uxtb	r3, r3
                                                              REG_OFFSET_TAB_TIMER[iTimer]));
 8001962:	4a3d      	ldr	r2, [pc, #244]	; (8001a58 <MX_HRTIM1_Init+0xa2c>)
 8001964:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
  CLEAR_BIT(*pReg, HRTIM_TIMCR_PSHPLL);
 8001968:	58bb      	ldr	r3, [r7, r2]
 800196a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800196e:	50bb      	str	r3, [r7, r2]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001970:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001974:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8001978:	2b00      	cmp	r3, #0
 800197a:	f000 8251 	beq.w	8001e20 <MX_HRTIM1_Init+0xdf4>
  return __builtin_clz(value);
 800197e:	fab3 f383 	clz	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_TACEN_Pos);
 8001982:	3b11      	subs	r3, #17
 8001984:	b2db      	uxtb	r3, r3
                                                              REG_OFFSET_TAB_TIMER[iTimer]));
 8001986:	4a34      	ldr	r2, [pc, #208]	; (8001a58 <MX_HRTIM1_Init+0xa2c>)
 8001988:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
  SET_BIT(*pReg, HRTIM_OUTR_DTEN);
 800198c:	f858 3002 	ldr.w	r3, [r8, r2]
 8001990:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001994:	f848 3002 	str.w	r3, [r8, r2]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001998:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800199c:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	f000 823f 	beq.w	8001e24 <MX_HRTIM1_Init+0xdf8>
  return __builtin_clz(value);
 80019a6:	fab3 f383 	clz	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_TACEN_Pos);
 80019aa:	3b11      	subs	r3, #17
 80019ac:	b2db      	uxtb	r3, r3
                                                              REG_OFFSET_TAB_TIMER[iTimer]));
 80019ae:	4a2a      	ldr	r2, [pc, #168]	; (8001a58 <MX_HRTIM1_Init+0xa2c>)
 80019b0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
  SET_BIT(*pReg, HRTIM_OUTR_DLYPRTEN);
 80019b4:	f858 3002 	ldr.w	r3, [r8, r2]
 80019b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019bc:	f848 3002 	str.w	r3, [r8, r2]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019c0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80019c4:	fa93 f2a3 	rbit	r2, r3
  MODIFY_REG(HRTIMx->sCommonRegs.BMCR, Timer, BurtsModeOption << iTimer);
 80019c8:	4a2a      	ldr	r2, [pc, #168]	; (8001a74 <MX_HRTIM1_Init+0xa48>)
 80019ca:	f8d2 13a0 	ldr.w	r1, [r2, #928]	; 0x3a0
 80019ce:	f421 0180 	bic.w	r1, r1, #4194304	; 0x400000
 80019d2:	f8c2 13a0 	str.w	r1, [r2, #928]	; 0x3a0
  SET_BIT(HRTIMx->sCommonRegs.CR2, ((Timers >> HRTIM_MCR_MCEN_Pos) & HRTIM_CR2_SWUPD_MASK));
 80019d6:	f8d2 1384 	ldr.w	r1, [r2, #900]	; 0x384
 80019da:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 80019de:	f8c2 1384 	str.w	r1, [r2, #900]	; 0x384
 80019e2:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	f000 821e 	beq.w	8001e28 <MX_HRTIM1_Init+0xdfc>
  return __builtin_clz(value);
 80019ec:	fab3 f383 	clz	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_MCEN_Pos);
 80019f0:	3b10      	subs	r3, #16
 80019f2:	b2db      	uxtb	r3, r3
                                                              REG_OFFSET_TAB_TIMER[iTimer]));
 80019f4:	4a18      	ldr	r2, [pc, #96]	; (8001a58 <MX_HRTIM1_Init+0xa2c>)
 80019f6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
  MODIFY_REG(* pReg, HRTIM_MCMP1R_MCMP1R, CompareValue);
 80019fa:	491f      	ldr	r1, [pc, #124]	; (8001a78 <MX_HRTIM1_Init+0xa4c>)
 80019fc:	588b      	ldr	r3, [r1, r2]
 80019fe:	0c1b      	lsrs	r3, r3, #16
 8001a00:	041b      	lsls	r3, r3, #16
 8001a02:	f443 532a 	orr.w	r3, r3, #10880	; 0x2a80
 8001a06:	508b      	str	r3, [r1, r2]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a08:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a0c:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	f000 820b 	beq.w	8001e2c <MX_HRTIM1_Init+0xe00>
  return __builtin_clz(value);
 8001a16:	fab3 f383 	clz	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_MCEN_Pos);
 8001a1a:	3b10      	subs	r3, #16
 8001a1c:	b2db      	uxtb	r3, r3
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sMasterRegs.MCMP3R) +
 8001a1e:	4917      	ldr	r1, [pc, #92]	; (8001a7c <MX_HRTIM1_Init+0xa50>)
                                                              REG_OFFSET_TAB_TIMER[iTimer]));
 8001a20:	4a0d      	ldr	r2, [pc, #52]	; (8001a58 <MX_HRTIM1_Init+0xa2c>)
 8001a22:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
  MODIFY_REG(* pReg, HRTIM_MCMP1R_MCMP3R, CompareValue);
 8001a26:	588b      	ldr	r3, [r1, r2]
 8001a28:	0c1b      	lsrs	r3, r3, #16
 8001a2a:	041b      	lsls	r3, r3, #16
 8001a2c:	f443 539c 	orr.w	r3, r3, #4992	; 0x1380
 8001a30:	f043 0308 	orr.w	r3, r3, #8
 8001a34:	508b      	str	r3, [r1, r2]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a36:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a3a:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	f000 81f6 	beq.w	8001e30 <MX_HRTIM1_Init+0xe04>
  return __builtin_clz(value);
 8001a44:	fab3 f383 	clz	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_TACEN_Pos);
 8001a48:	3b11      	subs	r3, #17
 8001a4a:	b2db      	uxtb	r3, r3
                                                              REG_OFFSET_TAB_TIMER[iTimer]));
 8001a4c:	4a02      	ldr	r2, [pc, #8]	; (8001a58 <MX_HRTIM1_Init+0xa2c>)
 8001a4e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
  MODIFY_REG(*pReg, HRTIM_DTR_DTPRSC, Prescaler);
 8001a52:	58ab      	ldr	r3, [r5, r2]
 8001a54:	e014      	b.n	8001a80 <MX_HRTIM1_Init+0xa54>
 8001a56:	bf00      	nop
 8001a58:	08008780 	.word	0x08008780
 8001a5c:	08008714 	.word	0x08008714
 8001a60:	08008790 	.word	0x08008790
 8001a64:	080086f8 	.word	0x080086f8
 8001a68:	08008730 	.word	0x08008730
 8001a6c:	080087a4 	.word	0x080087a4
 8001a70:	400168d4 	.word	0x400168d4
 8001a74:	40016800 	.word	0x40016800
 8001a78:	4001681c 	.word	0x4001681c
 8001a7c:	40016828 	.word	0x40016828
 8001a80:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001a84:	50ab      	str	r3, [r5, r2]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a86:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a8a:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	f000 81d0 	beq.w	8001e34 <MX_HRTIM1_Init+0xe08>
  return __builtin_clz(value);
 8001a94:	fab3 f383 	clz	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_TACEN_Pos);
 8001a98:	3b11      	subs	r3, #17
 8001a9a:	b2db      	uxtb	r3, r3
                                                              REG_OFFSET_TAB_TIMER[iTimer]));
 8001a9c:	4ad0      	ldr	r2, [pc, #832]	; (8001de0 <MX_HRTIM1_Init+0xdb4>)
 8001a9e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
  MODIFY_REG(*pReg, HRTIM_DTR_DTR, RisingValue);
 8001aa2:	58ab      	ldr	r3, [r5, r2]
 8001aa4:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8001aa8:	f023 0301 	bic.w	r3, r3, #1
 8001aac:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 8001ab0:	50ab      	str	r3, [r5, r2]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ab2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ab6:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	f000 81bc 	beq.w	8001e38 <MX_HRTIM1_Init+0xe0c>
  return __builtin_clz(value);
 8001ac0:	fab3 f383 	clz	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_TACEN_Pos);
 8001ac4:	3b11      	subs	r3, #17
 8001ac6:	b2db      	uxtb	r3, r3
                                                              REG_OFFSET_TAB_TIMER[iTimer]));
 8001ac8:	4ac5      	ldr	r2, [pc, #788]	; (8001de0 <MX_HRTIM1_Init+0xdb4>)
 8001aca:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
  MODIFY_REG(*pReg, HRTIM_DTR_SDTR, RisingSign);
 8001ace:	58ab      	ldr	r3, [r5, r2]
 8001ad0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001ad4:	50ab      	str	r3, [r5, r2]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ada:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	f000 81ac 	beq.w	8001e3c <MX_HRTIM1_Init+0xe10>
  return __builtin_clz(value);
 8001ae4:	fab3 f383 	clz	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_TACEN_Pos);
 8001ae8:	3b11      	subs	r3, #17
 8001aea:	b2db      	uxtb	r3, r3
                                                              REG_OFFSET_TAB_TIMER[iTimer]));
 8001aec:	4abc      	ldr	r2, [pc, #752]	; (8001de0 <MX_HRTIM1_Init+0xdb4>)
 8001aee:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
  MODIFY_REG(*pReg, HRTIM_DTR_DTF, FallingValue << HRTIM_DTR_DTF_Pos);
 8001af2:	58ab      	ldr	r3, [r5, r2]
 8001af4:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8001af8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001afc:	f443 0308 	orr.w	r3, r3, #8912896	; 0x880000
 8001b00:	50ab      	str	r3, [r5, r2]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b02:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b06:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	f000 8198 	beq.w	8001e40 <MX_HRTIM1_Init+0xe14>
  return __builtin_clz(value);
 8001b10:	fab3 f383 	clz	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_TACEN_Pos);
 8001b14:	3b11      	subs	r3, #17
 8001b16:	b2db      	uxtb	r3, r3
                                                              REG_OFFSET_TAB_TIMER[iTimer]));
 8001b18:	4ab1      	ldr	r2, [pc, #708]	; (8001de0 <MX_HRTIM1_Init+0xdb4>)
 8001b1a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
  MODIFY_REG(*pReg, HRTIM_DTR_SDTF, FallingSign);
 8001b1e:	58ab      	ldr	r3, [r5, r2]
 8001b20:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8001b24:	50ab      	str	r3, [r5, r2]
  LL_HRTIM_OUT_SetPolarity(HRTIM1, LL_HRTIM_OUTPUT_TF1, LL_HRTIM_OUT_POSITIVE_POLARITY);
 8001b26:	2200      	movs	r2, #0
 8001b28:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b2c:	48ad      	ldr	r0, [pc, #692]	; (8001de4 <MX_HRTIM1_Init+0xdb8>)
 8001b2e:	f7ff f9bf 	bl	8000eb0 <LL_HRTIM_OUT_SetPolarity>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b36:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	f000 8182 	beq.w	8001e44 <MX_HRTIM1_Init+0xe18>
  return __builtin_clz(value);
 8001b40:	fab3 f383 	clz	r3, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b44:	2201      	movs	r2, #1
 8001b46:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8001b4a:	2a00      	cmp	r2, #0
 8001b4c:	f000 817c 	beq.w	8001e48 <MX_HRTIM1_Init+0xe1c>
  return __builtin_clz(value);
 8001b50:	fab2 f282 	clz	r2, r2
  uint32_t iOutput = (uint8_t)(POSITION_VAL(Output) - POSITION_VAL(LL_HRTIM_OUTPUT_TA1));
 8001b54:	1a9b      	subs	r3, r3, r2
 8001b56:	b2db      	uxtb	r3, r3
                                                              REG_OFFSET_TAB_SETxR[iOutput]));
 8001b58:	4aa3      	ldr	r2, [pc, #652]	; (8001de8 <MX_HRTIM1_Init+0xdbc>)
 8001b5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
  WRITE_REG(*pReg, SetSrc);
 8001b5e:	2208      	movs	r2, #8
 8001b60:	49a2      	ldr	r1, [pc, #648]	; (8001dec <MX_HRTIM1_Init+0xdc0>)
 8001b62:	50ca      	str	r2, [r1, r3]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b68:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	f000 816d 	beq.w	8001e4c <MX_HRTIM1_Init+0xe20>
  return __builtin_clz(value);
 8001b72:	fab3 f383 	clz	r3, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b76:	2201      	movs	r2, #1
 8001b78:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8001b7c:	2a00      	cmp	r2, #0
 8001b7e:	f000 8167 	beq.w	8001e50 <MX_HRTIM1_Init+0xe24>
  return __builtin_clz(value);
 8001b82:	fab2 f282 	clz	r2, r2
  uint32_t iOutput = (uint8_t)(POSITION_VAL(Output) - POSITION_VAL(LL_HRTIM_OUTPUT_TA1));
 8001b86:	1a9b      	subs	r3, r3, r2
 8001b88:	b2db      	uxtb	r3, r3
                                                              REG_OFFSET_TAB_SETxR[iOutput]));
 8001b8a:	4a97      	ldr	r2, [pc, #604]	; (8001de8 <MX_HRTIM1_Init+0xdbc>)
 8001b8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
  WRITE_REG(*pReg, ResetSrc);
 8001b90:	2204      	movs	r2, #4
 8001b92:	f84b 2003 	str.w	r2, [fp, r3]
  LL_HRTIM_OUT_SetIdleMode(HRTIM1, LL_HRTIM_OUTPUT_TF1, LL_HRTIM_OUT_NO_IDLE);
 8001b96:	4c93      	ldr	r4, [pc, #588]	; (8001de4 <MX_HRTIM1_Init+0xdb8>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b9e:	4620      	mov	r0, r4
 8001ba0:	f7ff f9ac 	bl	8000efc <LL_HRTIM_OUT_SetIdleMode>
  LL_HRTIM_OUT_SetIdleLevel(HRTIM1, LL_HRTIM_OUTPUT_TF1, LL_HRTIM_OUT_IDLELEVEL_INACTIVE);
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001baa:	4620      	mov	r0, r4
 8001bac:	f7ff f9cc 	bl	8000f48 <LL_HRTIM_OUT_SetIdleLevel>
  LL_HRTIM_OUT_SetFaultState(HRTIM1, LL_HRTIM_OUTPUT_TF1, LL_HRTIM_OUT_FAULTSTATE_NO_ACTION);
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001bb6:	4620      	mov	r0, r4
 8001bb8:	f7ff f9ec 	bl	8000f94 <LL_HRTIM_OUT_SetFaultState>
  LL_HRTIM_OUT_SetChopperMode(HRTIM1, LL_HRTIM_OUTPUT_TF1, LL_HRTIM_OUT_CHOPPERMODE_DISABLED);
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001bc2:	4620      	mov	r0, r4
 8001bc4:	f7ff fa0c 	bl	8000fe0 <LL_HRTIM_OUT_SetChopperMode>
  LL_HRTIM_OUT_SetPolarity(HRTIM1, LL_HRTIM_OUTPUT_TF2, LL_HRTIM_OUT_POSITIVE_POLARITY);
 8001bc8:	2200      	movs	r2, #0
 8001bca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001bce:	4620      	mov	r0, r4
 8001bd0:	f7ff f96e 	bl	8000eb0 <LL_HRTIM_OUT_SetPolarity>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001bd8:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	f000 8139 	beq.w	8001e54 <MX_HRTIM1_Init+0xe28>
  return __builtin_clz(value);
 8001be2:	fab3 f383 	clz	r3, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be6:	2201      	movs	r2, #1
 8001be8:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8001bec:	2a00      	cmp	r2, #0
 8001bee:	f000 8133 	beq.w	8001e58 <MX_HRTIM1_Init+0xe2c>
  return __builtin_clz(value);
 8001bf2:	fab2 f282 	clz	r2, r2
  uint32_t iOutput = (uint8_t)(POSITION_VAL(Output) - POSITION_VAL(LL_HRTIM_OUTPUT_TA1));
 8001bf6:	1a9b      	subs	r3, r3, r2
 8001bf8:	b2db      	uxtb	r3, r3
                                                              REG_OFFSET_TAB_SETxR[iOutput]));
 8001bfa:	4a7b      	ldr	r2, [pc, #492]	; (8001de8 <MX_HRTIM1_Init+0xdbc>)
 8001bfc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
  WRITE_REG(*pReg, SetSrc);
 8001c00:	2200      	movs	r2, #0
 8001c02:	497a      	ldr	r1, [pc, #488]	; (8001dec <MX_HRTIM1_Init+0xdc0>)
 8001c04:	50ca      	str	r2, [r1, r3]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c06:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001c0a:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	f000 8124 	beq.w	8001e5c <MX_HRTIM1_Init+0xe30>
  return __builtin_clz(value);
 8001c14:	fab3 f383 	clz	r3, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c18:	2201      	movs	r2, #1
 8001c1a:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8001c1e:	2a00      	cmp	r2, #0
 8001c20:	f000 811e 	beq.w	8001e60 <MX_HRTIM1_Init+0xe34>
  return __builtin_clz(value);
 8001c24:	fab2 f282 	clz	r2, r2
  uint32_t iOutput = (uint8_t)(POSITION_VAL(Output) - POSITION_VAL(LL_HRTIM_OUTPUT_TA1));
 8001c28:	1a9b      	subs	r3, r3, r2
 8001c2a:	b2db      	uxtb	r3, r3
                                                              REG_OFFSET_TAB_SETxR[iOutput]));
 8001c2c:	4a6e      	ldr	r2, [pc, #440]	; (8001de8 <MX_HRTIM1_Init+0xdbc>)
 8001c2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
  WRITE_REG(*pReg, ResetSrc);
 8001c32:	2400      	movs	r4, #0
 8001c34:	f84b 4003 	str.w	r4, [fp, r3]
  LL_HRTIM_OUT_SetIdleMode(HRTIM1, LL_HRTIM_OUTPUT_TF2, LL_HRTIM_OUT_NO_IDLE);
 8001c38:	4d6a      	ldr	r5, [pc, #424]	; (8001de4 <MX_HRTIM1_Init+0xdb8>)
 8001c3a:	4622      	mov	r2, r4
 8001c3c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c40:	4628      	mov	r0, r5
 8001c42:	f7ff f95b 	bl	8000efc <LL_HRTIM_OUT_SetIdleMode>
  LL_HRTIM_OUT_SetIdleLevel(HRTIM1, LL_HRTIM_OUTPUT_TF2, LL_HRTIM_OUT_IDLELEVEL_INACTIVE);
 8001c46:	4622      	mov	r2, r4
 8001c48:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c4c:	4628      	mov	r0, r5
 8001c4e:	f7ff f97b 	bl	8000f48 <LL_HRTIM_OUT_SetIdleLevel>
  LL_HRTIM_OUT_SetFaultState(HRTIM1, LL_HRTIM_OUTPUT_TF2, LL_HRTIM_OUT_FAULTSTATE_NO_ACTION);
 8001c52:	4622      	mov	r2, r4
 8001c54:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c58:	4628      	mov	r0, r5
 8001c5a:	f7ff f99b 	bl	8000f94 <LL_HRTIM_OUT_SetFaultState>
  LL_HRTIM_OUT_SetChopperMode(HRTIM1, LL_HRTIM_OUTPUT_TF2, LL_HRTIM_OUT_CHOPPERMODE_DISABLED);
 8001c5e:	4622      	mov	r2, r4
 8001c60:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c64:	4628      	mov	r0, r5
 8001c66:	f7ff f9bb 	bl	8000fe0 <LL_HRTIM_OUT_SetChopperMode>
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001c6a:	4b61      	ldr	r3, [pc, #388]	; (8001df0 <MX_HRTIM1_Init+0xdc4>)
 8001c6c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c6e:	f042 0204 	orr.w	r2, r2, #4
 8001c72:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001c74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c76:	f003 0304 	and.w	r3, r3, #4
 8001c7a:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001c7c:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8001c7e:	2340      	movs	r3, #64	; 0x40
 8001c80:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001c82:	2702      	movs	r7, #2
 8001c84:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001c86:	2503      	movs	r5, #3
 8001c88:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001c8a:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001c8c:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_13;
 8001c8e:	f04f 080d 	mov.w	r8, #13
 8001c92:	f8cd 801c 	str.w	r8, [sp, #28]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c96:	4e57      	ldr	r6, [pc, #348]	; (8001df4 <MX_HRTIM1_Init+0xdc8>)
 8001c98:	a902      	add	r1, sp, #8
 8001c9a:	4630      	mov	r0, r6
 8001c9c:	f003 feda 	bl	8005a54 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8001ca0:	2380      	movs	r3, #128	; 0x80
 8001ca2:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001ca4:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001ca6:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001ca8:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001caa:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_13;
 8001cac:	f8cd 801c 	str.w	r8, [sp, #28]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cb0:	a902      	add	r1, sp, #8
 8001cb2:	4630      	mov	r0, r6
 8001cb4:	f003 fece 	bl	8005a54 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8001cb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cbc:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001cbe:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001cc0:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001cc2:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001cc4:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_3;
 8001cc6:	9507      	str	r5, [sp, #28]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cc8:	a902      	add	r1, sp, #8
 8001cca:	4630      	mov	r0, r6
 8001ccc:	f003 fec2 	bl	8005a54 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8001cd0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cd4:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001cd6:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001cd8:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001cda:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001cdc:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_3;
 8001cde:	9507      	str	r5, [sp, #28]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ce0:	a902      	add	r1, sp, #8
 8001ce2:	4630      	mov	r0, r6
 8001ce4:	f003 feb6 	bl	8005a54 <LL_GPIO_Init>
}
 8001ce8:	b009      	add	sp, #36	; 0x24
 8001cea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return 32U;
 8001cee:	2320      	movs	r3, #32
 8001cf0:	f7ff b9e5 	b.w	80010be <MX_HRTIM1_Init+0x92>
 8001cf4:	2320      	movs	r3, #32
 8001cf6:	f7ff b9f5 	b.w	80010e4 <MX_HRTIM1_Init+0xb8>
 8001cfa:	2320      	movs	r3, #32
 8001cfc:	f7ff ba06 	b.w	800110c <MX_HRTIM1_Init+0xe0>
 8001d00:	2320      	movs	r3, #32
 8001d02:	f7ff ba1b 	b.w	800113c <MX_HRTIM1_Init+0x110>
 8001d06:	2320      	movs	r3, #32
 8001d08:	f7ff ba2b 	b.w	8001162 <MX_HRTIM1_Init+0x136>
 8001d0c:	2320      	movs	r3, #32
 8001d0e:	f7ff ba3d 	b.w	800118c <MX_HRTIM1_Init+0x160>
 8001d12:	2220      	movs	r2, #32
 8001d14:	f7ff ba43 	b.w	800119e <MX_HRTIM1_Init+0x172>
 8001d18:	2320      	movs	r3, #32
 8001d1a:	f7ff ba53 	b.w	80011c4 <MX_HRTIM1_Init+0x198>
 8001d1e:	2220      	movs	r2, #32
 8001d20:	f7ff ba59 	b.w	80011d6 <MX_HRTIM1_Init+0x1aa>
 8001d24:	2320      	movs	r3, #32
 8001d26:	f7ff ba68 	b.w	80011fa <MX_HRTIM1_Init+0x1ce>
 8001d2a:	2320      	movs	r3, #32
 8001d2c:	f7ff ba77 	b.w	800121e <MX_HRTIM1_Init+0x1f2>
 8001d30:	2320      	movs	r3, #32
 8001d32:	f7ff ba8e 	b.w	8001252 <MX_HRTIM1_Init+0x226>
 8001d36:	2320      	movs	r3, #32
 8001d38:	f7ff baa0 	b.w	800127c <MX_HRTIM1_Init+0x250>
 8001d3c:	2320      	movs	r3, #32
 8001d3e:	f7ff baaf 	b.w	80012a0 <MX_HRTIM1_Init+0x274>
 8001d42:	2320      	movs	r3, #32
 8001d44:	f7ff babe 	b.w	80012c4 <MX_HRTIM1_Init+0x298>
 8001d48:	2320      	movs	r3, #32
 8001d4a:	f7ff bacd 	b.w	80012e8 <MX_HRTIM1_Init+0x2bc>
 8001d4e:	2320      	movs	r3, #32
 8001d50:	f7ff badd 	b.w	800130e <MX_HRTIM1_Init+0x2e2>
 8001d54:	2320      	movs	r3, #32
 8001d56:	f7ff baf5 	b.w	8001344 <MX_HRTIM1_Init+0x318>
 8001d5a:	2320      	movs	r3, #32
 8001d5c:	f7ff bb27 	b.w	80013ae <MX_HRTIM1_Init+0x382>
 8001d60:	2320      	movs	r3, #32
 8001d62:	f7ff bb36 	b.w	80013d2 <MX_HRTIM1_Init+0x3a6>
 8001d66:	2320      	movs	r3, #32
 8001d68:	f7ff bb58 	b.w	800141c <MX_HRTIM1_Init+0x3f0>
 8001d6c:	2320      	movs	r3, #32
 8001d6e:	f7ff bb6a 	b.w	8001446 <MX_HRTIM1_Init+0x41a>
 8001d72:	2320      	movs	r3, #32
 8001d74:	f7ff bb7a 	b.w	800146c <MX_HRTIM1_Init+0x440>
 8001d78:	2320      	movs	r3, #32
 8001d7a:	f7ff bb8d 	b.w	8001498 <MX_HRTIM1_Init+0x46c>
 8001d7e:	2320      	movs	r3, #32
 8001d80:	f7ff bb9c 	b.w	80014bc <MX_HRTIM1_Init+0x490>
 8001d84:	2320      	movs	r3, #32
 8001d86:	f7ff bbaf 	b.w	80014e8 <MX_HRTIM1_Init+0x4bc>
 8001d8a:	2320      	movs	r3, #32
 8001d8c:	f7ff bbc4 	b.w	8001518 <MX_HRTIM1_Init+0x4ec>
 8001d90:	2220      	movs	r2, #32
 8001d92:	f7ff bbc9 	b.w	8001528 <MX_HRTIM1_Init+0x4fc>
 8001d96:	2320      	movs	r3, #32
 8001d98:	f7ff bbd7 	b.w	800154a <MX_HRTIM1_Init+0x51e>
 8001d9c:	2220      	movs	r2, #32
 8001d9e:	f7ff bbdc 	b.w	800155a <MX_HRTIM1_Init+0x52e>
 8001da2:	2320      	movs	r3, #32
 8001da4:	e40c      	b.n	80015c0 <MX_HRTIM1_Init+0x594>
 8001da6:	2220      	movs	r2, #32
 8001da8:	e412      	b.n	80015d0 <MX_HRTIM1_Init+0x5a4>
 8001daa:	2320      	movs	r3, #32
 8001dac:	e421      	b.n	80015f2 <MX_HRTIM1_Init+0x5c6>
 8001dae:	2220      	movs	r2, #32
 8001db0:	e427      	b.n	8001602 <MX_HRTIM1_Init+0x5d6>
 8001db2:	2320      	movs	r3, #32
 8001db4:	e455      	b.n	8001662 <MX_HRTIM1_Init+0x636>
 8001db6:	2320      	movs	r3, #32
 8001db8:	e465      	b.n	8001686 <MX_HRTIM1_Init+0x65a>
 8001dba:	2320      	movs	r3, #32
 8001dbc:	e477      	b.n	80016ae <MX_HRTIM1_Init+0x682>
 8001dbe:	2320      	movs	r3, #32
 8001dc0:	e48b      	b.n	80016da <MX_HRTIM1_Init+0x6ae>
 8001dc2:	2320      	movs	r3, #32
 8001dc4:	e4b0      	b.n	8001728 <MX_HRTIM1_Init+0x6fc>
 8001dc6:	2320      	movs	r3, #32
 8001dc8:	e4c3      	b.n	8001752 <MX_HRTIM1_Init+0x726>
 8001dca:	2220      	movs	r2, #32
 8001dcc:	e4ca      	b.n	8001764 <MX_HRTIM1_Init+0x738>
 8001dce:	2320      	movs	r3, #32
 8001dd0:	e4da      	b.n	8001788 <MX_HRTIM1_Init+0x75c>
 8001dd2:	2220      	movs	r2, #32
 8001dd4:	e4e1      	b.n	800179a <MX_HRTIM1_Init+0x76e>
 8001dd6:	2320      	movs	r3, #32
 8001dd8:	e4f1      	b.n	80017be <MX_HRTIM1_Init+0x792>
 8001dda:	2220      	movs	r2, #32
 8001ddc:	e4f8      	b.n	80017d0 <MX_HRTIM1_Init+0x7a4>
 8001dde:	bf00      	nop
 8001de0:	08008780 	.word	0x08008780
 8001de4:	40016800 	.word	0x40016800
 8001de8:	08008768 	.word	0x08008768
 8001dec:	400168bc 	.word	0x400168bc
 8001df0:	40021000 	.word	0x40021000
 8001df4:	48000800 	.word	0x48000800
 8001df8:	2320      	movs	r3, #32
 8001dfa:	e4fb      	b.n	80017f4 <MX_HRTIM1_Init+0x7c8>
 8001dfc:	2320      	movs	r3, #32
 8001dfe:	e50b      	b.n	8001818 <MX_HRTIM1_Init+0x7ec>
 8001e00:	2320      	movs	r3, #32
 8001e02:	e523      	b.n	800184c <MX_HRTIM1_Init+0x820>
 8001e04:	2320      	movs	r3, #32
 8001e06:	e536      	b.n	8001876 <MX_HRTIM1_Init+0x84a>
 8001e08:	2320      	movs	r3, #32
 8001e0a:	e546      	b.n	800189a <MX_HRTIM1_Init+0x86e>
 8001e0c:	2320      	movs	r3, #32
 8001e0e:	e556      	b.n	80018be <MX_HRTIM1_Init+0x892>
 8001e10:	2320      	movs	r3, #32
 8001e12:	e566      	b.n	80018e2 <MX_HRTIM1_Init+0x8b6>
 8001e14:	2320      	movs	r3, #32
 8001e16:	e576      	b.n	8001906 <MX_HRTIM1_Init+0x8da>
 8001e18:	2320      	movs	r3, #32
 8001e1a:	e58f      	b.n	800193c <MX_HRTIM1_Init+0x910>
 8001e1c:	2320      	movs	r3, #32
 8001e1e:	e59e      	b.n	800195e <MX_HRTIM1_Init+0x932>
 8001e20:	2320      	movs	r3, #32
 8001e22:	e5ae      	b.n	8001982 <MX_HRTIM1_Init+0x956>
 8001e24:	2320      	movs	r3, #32
 8001e26:	e5c0      	b.n	80019aa <MX_HRTIM1_Init+0x97e>
 8001e28:	2320      	movs	r3, #32
 8001e2a:	e5e1      	b.n	80019f0 <MX_HRTIM1_Init+0x9c4>
 8001e2c:	2320      	movs	r3, #32
 8001e2e:	e5f4      	b.n	8001a1a <MX_HRTIM1_Init+0x9ee>
 8001e30:	2320      	movs	r3, #32
 8001e32:	e609      	b.n	8001a48 <MX_HRTIM1_Init+0xa1c>
 8001e34:	2320      	movs	r3, #32
 8001e36:	e62f      	b.n	8001a98 <MX_HRTIM1_Init+0xa6c>
 8001e38:	2320      	movs	r3, #32
 8001e3a:	e643      	b.n	8001ac4 <MX_HRTIM1_Init+0xa98>
 8001e3c:	2320      	movs	r3, #32
 8001e3e:	e653      	b.n	8001ae8 <MX_HRTIM1_Init+0xabc>
 8001e40:	2320      	movs	r3, #32
 8001e42:	e667      	b.n	8001b14 <MX_HRTIM1_Init+0xae8>
 8001e44:	2320      	movs	r3, #32
 8001e46:	e67d      	b.n	8001b44 <MX_HRTIM1_Init+0xb18>
 8001e48:	2220      	movs	r2, #32
 8001e4a:	e683      	b.n	8001b54 <MX_HRTIM1_Init+0xb28>
 8001e4c:	2320      	movs	r3, #32
 8001e4e:	e692      	b.n	8001b76 <MX_HRTIM1_Init+0xb4a>
 8001e50:	2220      	movs	r2, #32
 8001e52:	e698      	b.n	8001b86 <MX_HRTIM1_Init+0xb5a>
 8001e54:	2320      	movs	r3, #32
 8001e56:	e6c6      	b.n	8001be6 <MX_HRTIM1_Init+0xbba>
 8001e58:	2220      	movs	r2, #32
 8001e5a:	e6cc      	b.n	8001bf6 <MX_HRTIM1_Init+0xbca>
 8001e5c:	2320      	movs	r3, #32
 8001e5e:	e6db      	b.n	8001c18 <MX_HRTIM1_Init+0xbec>
 8001e60:	2220      	movs	r2, #32
 8001e62:	e6e1      	b.n	8001c28 <MX_HRTIM1_Init+0xbfc>

08001e64 <MX_ADC1_Init>:
{
 8001e64:	b570      	push	{r4, r5, r6, lr}
 8001e66:	b09a      	sub	sp, #104	; 0x68
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8001e68:	2400      	movs	r4, #0
 8001e6a:	9417      	str	r4, [sp, #92]	; 0x5c
 8001e6c:	9418      	str	r4, [sp, #96]	; 0x60
 8001e6e:	9419      	str	r4, [sp, #100]	; 0x64
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8001e70:	9411      	str	r4, [sp, #68]	; 0x44
 8001e72:	9412      	str	r4, [sp, #72]	; 0x48
 8001e74:	9413      	str	r4, [sp, #76]	; 0x4c
 8001e76:	9414      	str	r4, [sp, #80]	; 0x50
 8001e78:	9415      	str	r4, [sp, #84]	; 0x54
 8001e7a:	9416      	str	r4, [sp, #88]	; 0x58
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8001e7c:	940d      	str	r4, [sp, #52]	; 0x34
 8001e7e:	940e      	str	r4, [sp, #56]	; 0x38
 8001e80:	940f      	str	r4, [sp, #60]	; 0x3c
 8001e82:	9410      	str	r4, [sp, #64]	; 0x40
  LL_ADC_INJ_InitTypeDef ADC_INJ_InitStruct = {0};
 8001e84:	9409      	str	r4, [sp, #36]	; 0x24
 8001e86:	940a      	str	r4, [sp, #40]	; 0x28
 8001e88:	940b      	str	r4, [sp, #44]	; 0x2c
 8001e8a:	940c      	str	r4, [sp, #48]	; 0x30
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e8c:	9405      	str	r4, [sp, #20]
 8001e8e:	9406      	str	r4, [sp, #24]
 8001e90:	9407      	str	r4, [sp, #28]
 8001e92:	9408      	str	r4, [sp, #32]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001e94:	4b7a      	ldr	r3, [pc, #488]	; (8002080 <MX_ADC1_Init+0x21c>)
 8001e96:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001e98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e9c:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001e9e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001ea0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001ea4:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8001ea6:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001ea8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001eaa:	f042 0204 	orr.w	r2, r2, #4
 8001eae:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001eb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eb2:	f003 0304 	and.w	r3, r3, #4
 8001eb6:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001eb8:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001ebe:	2603      	movs	r6, #3
 8001ec0:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001ec2:	9407      	str	r4, [sp, #28]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ec4:	4d6f      	ldr	r5, [pc, #444]	; (8002084 <MX_ADC1_Init+0x220>)
 8001ec6:	a903      	add	r1, sp, #12
 8001ec8:	4628      	mov	r0, r5
 8001eca:	f003 fdc3 	bl	8005a54 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8001ece:	2302      	movs	r3, #2
 8001ed0:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001ed2:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001ed4:	9407      	str	r4, [sp, #28]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ed6:	a903      	add	r1, sp, #12
 8001ed8:	4628      	mov	r0, r5
 8001eda:	f003 fdbb 	bl	8005a54 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8001ede:	2304      	movs	r3, #4
 8001ee0:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001ee2:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001ee4:	9407      	str	r4, [sp, #28]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ee6:	a903      	add	r1, sp, #12
 8001ee8:	4628      	mov	r0, r5
 8001eea:	f003 fdb3 	bl	8005a54 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8001eee:	2308      	movs	r3, #8
 8001ef0:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001ef2:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001ef4:	9407      	str	r4, [sp, #28]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ef6:	a903      	add	r1, sp, #12
 8001ef8:	4628      	mov	r0, r5
 8001efa:	f003 fdab 	bl	8005a54 <LL_GPIO_Init>
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001efe:	4b62      	ldr	r3, [pc, #392]	; (8002088 <MX_ADC1_Init+0x224>)
 8001f00:	68db      	ldr	r3, [r3, #12]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f02:	4b62      	ldr	r3, [pc, #392]	; (800208c <MX_ADC1_Init+0x228>)
 8001f04:	f883 4312 	strb.w	r4, [r3, #786]	; 0x312
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f08:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001f0c:	601a      	str	r2, [r3, #0]
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8001f0e:	9417      	str	r4, [sp, #92]	; 0x5c
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8001f10:	9418      	str	r4, [sp, #96]	; 0x60
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 8001f12:	9419      	str	r4, [sp, #100]	; 0x64
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8001f14:	a917      	add	r1, sp, #92	; 0x5c
 8001f16:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001f1a:	f003 fd2d 	bl	8005978 <LL_ADC_Init>
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 8001f1e:	9412      	str	r4, [sp, #72]	; 0x48
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8001f20:	9413      	str	r4, [sp, #76]	; 0x4c
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8001f22:	9414      	str	r4, [sp, #80]	; 0x50
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 8001f24:	9415      	str	r4, [sp, #84]	; 0x54
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 8001f26:	9416      	str	r4, [sp, #88]	; 0x58
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8001f28:	a911      	add	r1, sp, #68	; 0x44
 8001f2a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001f2e:	f003 fd3b 	bl	80059a8 <LL_ADC_REG_Init>
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 8001f32:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
 8001f36:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
 8001f3a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001f3e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f42:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_CFGR2_GCOMP_Pos);
 8001f46:	692b      	ldr	r3, [r5, #16]
 8001f48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f4c:	612b      	str	r3, [r5, #16]
  *         @arg @ref LL_ADC_OVS_GRP_INJ_REG_RESUMED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOverSamplingScope(ADC_TypeDef *ADCx, uint32_t OvsScope)
{
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_ROVSE | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSM, OvsScope);
 8001f4e:	692b      	ldr	r3, [r5, #16]
 8001f50:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001f54:	f023 0303 	bic.w	r3, r3, #3
 8001f58:	f043 0302 	orr.w	r3, r3, #2
 8001f5c:	612b      	str	r3, [r5, #16]
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_SYNC_PCLK_DIV4;
 8001f5e:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001f62:	930d      	str	r3, [sp, #52]	; 0x34
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 8001f64:	940e      	str	r4, [sp, #56]	; 0x38
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 8001f66:	a90d      	add	r1, sp, #52	; 0x34
 8001f68:	4849      	ldr	r0, [pc, #292]	; (8002090 <MX_ADC1_Init+0x22c>)
 8001f6a:	f003 fcaf 	bl	80058cc <LL_ADC_CommonInit>
  ADC_INJ_InitStruct.TriggerSource = LL_ADC_INJ_TRIG_EXT_HRTIM_TRG2;
 8001f6e:	23cc      	movs	r3, #204	; 0xcc
 8001f70:	9309      	str	r3, [sp, #36]	; 0x24
  ADC_INJ_InitStruct.SequencerLength = LL_ADC_INJ_SEQ_SCAN_ENABLE_4RANKS;
 8001f72:	960a      	str	r6, [sp, #40]	; 0x28
  ADC_INJ_InitStruct.SequencerDiscont = LL_ADC_INJ_SEQ_DISCONT_DISABLE;
 8001f74:	940b      	str	r4, [sp, #44]	; 0x2c
  ADC_INJ_InitStruct.TrigAuto = LL_ADC_INJ_TRIG_INDEPENDENT;
 8001f76:	940c      	str	r4, [sp, #48]	; 0x30
  LL_ADC_INJ_Init(ADC1, &ADC_INJ_InitStruct);
 8001f78:	a909      	add	r1, sp, #36	; 0x24
 8001f7a:	4628      	mov	r0, r5
 8001f7c:	f003 fd44 	bl	8005a08 <LL_ADC_INJ_Init>
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_JQM | ADC_CFGR_JQDIS, QueueMode);
 8001f80:	68eb      	ldr	r3, [r5, #12]
 8001f82:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001f86:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001f8a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001f8e:	60eb      	str	r3, [r5, #12]
  *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_8
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ConfigOverSamplingRatioShift(ADC_TypeDef *ADCx, uint32_t Ratio, uint32_t Shift)
{
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_OVSS | ADC_CFGR2_OVSR), (Shift | Ratio));
 8001f90:	692b      	ldr	r3, [r5, #16]
 8001f92:	f423 73fe 	bic.w	r3, r3, #508	; 0x1fc
 8001f96:	f043 030c 	orr.w	r3, r3, #12
 8001f9a:	612b      	str	r3, [r5, #16]
  MODIFY_REG(ADCx->JSQR, ADC_JSQR_JEXTEN, ExternalTriggerEdge);
 8001f9c:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8001f9e:	f423 73c0 	bic.w	r3, r3, #384	; 0x180
 8001fa2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fa6:	64eb      	str	r3, [r5, #76]	; 0x4c
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001fa8:	68ab      	ldr	r3, [r5, #8]
 8001faa:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001fae:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001fb2:	60ab      	str	r3, [r5, #8]
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001fb4:	68ab      	ldr	r3, [r5, #8]
 8001fb6:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001fba:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001fbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fc2:	60ab      	str	r3, [r5, #8]
  wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 8001fc4:	4b33      	ldr	r3, [pc, #204]	; (8002094 <MX_ADC1_Init+0x230>)
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	0992      	lsrs	r2, r2, #6
 8001fca:	4b33      	ldr	r3, [pc, #204]	; (8002098 <MX_ADC1_Init+0x234>)
 8001fcc:	fba3 3202 	umull	r3, r2, r3, r2
 8001fd0:	0992      	lsrs	r2, r2, #6
 8001fd2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001fd6:	0093      	lsls	r3, r2, #2
 8001fd8:	4a30      	ldr	r2, [pc, #192]	; (800209c <MX_ADC1_Init+0x238>)
 8001fda:	fba2 2303 	umull	r2, r3, r2, r3
 8001fde:	40f3      	lsrs	r3, r6
  while(wait_loop_index != 0)
 8001fe0:	b10b      	cbz	r3, 8001fe6 <MX_ADC1_Init+0x182>
    wait_loop_index--;
 8001fe2:	3b01      	subs	r3, #1
 8001fe4:	e7fc      	b.n	8001fe0 <MX_ADC1_Init+0x17c>
  MODIFY_REG(ADCx->JSQR,
 8001fe6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001fea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001fec:	f422 5278 	bic.w	r2, r2, #15872	; 0x3e00
 8001ff0:	f442 6240 	orr.w	r2, r2, #3072	; 0xc00
 8001ff4:	64da      	str	r2, [r3, #76]	; 0x4c
  MODIFY_REG(*preg,
 8001ff6:	695a      	ldr	r2, [r3, #20]
 8001ff8:	f422 12e0 	bic.w	r2, r2, #1835008	; 0x1c0000
 8001ffc:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8002000:	615a      	str	r2, [r3, #20]
  MODIFY_REG(ADCx->DIFSEL,
 8002002:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002006:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800200a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  MODIFY_REG(ADCx->JSQR,
 800200e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002010:	f422 2278 	bic.w	r2, r2, #1015808	; 0xf8000
 8002014:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002018:	64da      	str	r2, [r3, #76]	; 0x4c
  MODIFY_REG(*preg,
 800201a:	695a      	ldr	r2, [r3, #20]
 800201c:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 8002020:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8002024:	615a      	str	r2, [r3, #20]
  MODIFY_REG(ADCx->DIFSEL,
 8002026:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800202a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800202e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  MODIFY_REG(ADCx->JSQR,
 8002032:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002034:	f022 7278 	bic.w	r2, r2, #65011712	; 0x3e00000
 8002038:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
 800203c:	64da      	str	r2, [r3, #76]	; 0x4c
  MODIFY_REG(*preg,
 800203e:	695a      	ldr	r2, [r3, #20]
 8002040:	f422 0260 	bic.w	r2, r2, #14680064	; 0xe00000
 8002044:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002048:	615a      	str	r2, [r3, #20]
  MODIFY_REG(ADCx->DIFSEL,
 800204a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800204e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002052:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  MODIFY_REG(ADCx->JSQR,
 8002056:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002058:	f022 4278 	bic.w	r2, r2, #4160749568	; 0xf8000000
 800205c:	f042 4290 	orr.w	r2, r2, #1207959552	; 0x48000000
 8002060:	64da      	str	r2, [r3, #76]	; 0x4c
  MODIFY_REG(*preg,
 8002062:	695a      	ldr	r2, [r3, #20]
 8002064:	f022 5260 	bic.w	r2, r2, #939524096	; 0x38000000
 8002068:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800206c:	615a      	str	r2, [r3, #20]
  MODIFY_REG(ADCx->DIFSEL,
 800206e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002072:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002076:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 800207a:	b01a      	add	sp, #104	; 0x68
 800207c:	bd70      	pop	{r4, r5, r6, pc}
 800207e:	bf00      	nop
 8002080:	40021000 	.word	0x40021000
 8002084:	48000800 	.word	0x48000800
 8002088:	e000ed00 	.word	0xe000ed00
 800208c:	e000e100 	.word	0xe000e100
 8002090:	50000300 	.word	0x50000300
 8002094:	20000000 	.word	0x20000000
 8002098:	053e2d63 	.word	0x053e2d63
 800209c:	cccccccd 	.word	0xcccccccd

080020a0 <Error_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
 80020a0:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80020a2:	e7fe      	b.n	80020a2 <Error_Handler+0x2>

080020a4 <MX_FDCAN2_Init>:
{
 80020a4:	b508      	push	{r3, lr}
  hfdcan2.Instance = FDCAN2;
 80020a6:	480e      	ldr	r0, [pc, #56]	; (80020e0 <MX_FDCAN2_Init+0x3c>)
 80020a8:	4b0e      	ldr	r3, [pc, #56]	; (80020e4 <MX_FDCAN2_Init+0x40>)
 80020aa:	6003      	str	r3, [r0, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80020ac:	2300      	movs	r3, #0
 80020ae:	6083      	str	r3, [r0, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 80020b0:	60c3      	str	r3, [r0, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 80020b2:	7403      	strb	r3, [r0, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 80020b4:	7443      	strb	r3, [r0, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 80020b6:	7483      	strb	r3, [r0, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 80020b8:	2201      	movs	r2, #1
 80020ba:	6142      	str	r2, [r0, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 80020bc:	6182      	str	r2, [r0, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 80020be:	2102      	movs	r1, #2
 80020c0:	61c1      	str	r1, [r0, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 80020c2:	6201      	str	r1, [r0, #32]
  hfdcan2.Init.DataPrescaler = 1;
 80020c4:	6242      	str	r2, [r0, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 80020c6:	6282      	str	r2, [r0, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 80020c8:	62c2      	str	r2, [r0, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 80020ca:	6302      	str	r2, [r0, #48]	; 0x30
  hfdcan2.Init.StdFiltersNbr = 0;
 80020cc:	6343      	str	r3, [r0, #52]	; 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 80020ce:	6383      	str	r3, [r0, #56]	; 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80020d0:	63c3      	str	r3, [r0, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 80020d2:	f000 ffa3 	bl	800301c <HAL_FDCAN_Init>
 80020d6:	b900      	cbnz	r0, 80020da <MX_FDCAN2_Init+0x36>
}
 80020d8:	bd08      	pop	{r3, pc}
    Error_Handler();
 80020da:	f7ff ffe1 	bl	80020a0 <Error_Handler>
 80020de:	bf00      	nop
 80020e0:	200005f8 	.word	0x200005f8
 80020e4:	40006800 	.word	0x40006800

080020e8 <MX_I2C1_Init>:
{
 80020e8:	b508      	push	{r3, lr}
  hi2c1.Instance = I2C1;
 80020ea:	4813      	ldr	r0, [pc, #76]	; (8002138 <MX_I2C1_Init+0x50>)
 80020ec:	4b13      	ldr	r3, [pc, #76]	; (800213c <MX_I2C1_Init+0x54>)
 80020ee:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 80020f0:	f1a3 6375 	sub.w	r3, r3, #256901120	; 0xf500000
 80020f4:	f5a3 237a 	sub.w	r3, r3, #1024000	; 0xfa000
 80020f8:	f6a3 4305 	subw	r3, r3, #3077	; 0xc05
 80020fc:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80020fe:	2300      	movs	r3, #0
 8002100:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002102:	2201      	movs	r2, #1
 8002104:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002106:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002108:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800210a:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800210c:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800210e:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002110:	f001 f945 	bl	800339e <HAL_I2C_Init>
 8002114:	b950      	cbnz	r0, 800212c <MX_I2C1_Init+0x44>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002116:	2100      	movs	r1, #0
 8002118:	4807      	ldr	r0, [pc, #28]	; (8002138 <MX_I2C1_Init+0x50>)
 800211a:	f001 f99e 	bl	800345a <HAL_I2CEx_ConfigAnalogFilter>
 800211e:	b938      	cbnz	r0, 8002130 <MX_I2C1_Init+0x48>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002120:	2100      	movs	r1, #0
 8002122:	4805      	ldr	r0, [pc, #20]	; (8002138 <MX_I2C1_Init+0x50>)
 8002124:	f001 f9c7 	bl	80034b6 <HAL_I2CEx_ConfigDigitalFilter>
 8002128:	b920      	cbnz	r0, 8002134 <MX_I2C1_Init+0x4c>
}
 800212a:	bd08      	pop	{r3, pc}
    Error_Handler();
 800212c:	f7ff ffb8 	bl	80020a0 <Error_Handler>
    Error_Handler();
 8002130:	f7ff ffb6 	bl	80020a0 <Error_Handler>
    Error_Handler();
 8002134:	f7ff ffb4 	bl	80020a0 <Error_Handler>
 8002138:	2000043c 	.word	0x2000043c
 800213c:	40005400 	.word	0x40005400

08002140 <MX_I2C2_Init>:
{
 8002140:	b508      	push	{r3, lr}
  hi2c2.Instance = I2C2;
 8002142:	4813      	ldr	r0, [pc, #76]	; (8002190 <MX_I2C2_Init+0x50>)
 8002144:	4b13      	ldr	r3, [pc, #76]	; (8002194 <MX_I2C2_Init+0x54>)
 8002146:	6003      	str	r3, [r0, #0]
  hi2c2.Init.Timing = 0x30A0A7FB;
 8002148:	f1a3 6375 	sub.w	r3, r3, #256901120	; 0xf500000
 800214c:	f5a3 237b 	sub.w	r3, r3, #1028096	; 0xfb000
 8002150:	3b05      	subs	r3, #5
 8002152:	6043      	str	r3, [r0, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002154:	2300      	movs	r3, #0
 8002156:	6083      	str	r3, [r0, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002158:	2201      	movs	r2, #1
 800215a:	60c2      	str	r2, [r0, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800215c:	6103      	str	r3, [r0, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800215e:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002160:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002162:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002164:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002166:	f001 f91a 	bl	800339e <HAL_I2C_Init>
 800216a:	b950      	cbnz	r0, 8002182 <MX_I2C2_Init+0x42>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800216c:	2100      	movs	r1, #0
 800216e:	4808      	ldr	r0, [pc, #32]	; (8002190 <MX_I2C2_Init+0x50>)
 8002170:	f001 f973 	bl	800345a <HAL_I2CEx_ConfigAnalogFilter>
 8002174:	b938      	cbnz	r0, 8002186 <MX_I2C2_Init+0x46>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002176:	2100      	movs	r1, #0
 8002178:	4805      	ldr	r0, [pc, #20]	; (8002190 <MX_I2C2_Init+0x50>)
 800217a:	f001 f99c 	bl	80034b6 <HAL_I2CEx_ConfigDigitalFilter>
 800217e:	b920      	cbnz	r0, 800218a <MX_I2C2_Init+0x4a>
}
 8002180:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002182:	f7ff ff8d 	bl	80020a0 <Error_Handler>
    Error_Handler();
 8002186:	f7ff ff8b 	bl	80020a0 <Error_Handler>
    Error_Handler();
 800218a:	f7ff ff89 	bl	80020a0 <Error_Handler>
 800218e:	bf00      	nop
 8002190:	2000048c 	.word	0x2000048c
 8002194:	40005800 	.word	0x40005800

08002198 <MX_SPI3_Init>:
{
 8002198:	b508      	push	{r3, lr}
  hspi3.Instance = SPI3;
 800219a:	480f      	ldr	r0, [pc, #60]	; (80021d8 <MX_SPI3_Init+0x40>)
 800219c:	4b0f      	ldr	r3, [pc, #60]	; (80021dc <MX_SPI3_Init+0x44>)
 800219e:	6003      	str	r3, [r0, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80021a0:	f44f 7382 	mov.w	r3, #260	; 0x104
 80021a4:	6043      	str	r3, [r0, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80021a6:	2300      	movs	r3, #0
 80021a8:	6083      	str	r3, [r0, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80021aa:	f44f 7240 	mov.w	r2, #768	; 0x300
 80021ae:	60c2      	str	r2, [r0, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80021b0:	6103      	str	r3, [r0, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80021b2:	6143      	str	r3, [r0, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80021b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021b8:	6182      	str	r2, [r0, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80021ba:	2208      	movs	r2, #8
 80021bc:	61c2      	str	r2, [r0, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80021be:	6203      	str	r3, [r0, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80021c0:	6243      	str	r3, [r0, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021c2:	6283      	str	r3, [r0, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80021c4:	2107      	movs	r1, #7
 80021c6:	62c1      	str	r1, [r0, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80021c8:	6303      	str	r3, [r0, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80021ca:	6342      	str	r2, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80021cc:	f002 ff8a 	bl	80050e4 <HAL_SPI_Init>
 80021d0:	b900      	cbnz	r0, 80021d4 <MX_SPI3_Init+0x3c>
}
 80021d2:	bd08      	pop	{r3, pc}
    Error_Handler();
 80021d4:	f7ff ff64 	bl	80020a0 <Error_Handler>
 80021d8:	200004e0 	.word	0x200004e0
 80021dc:	40003c00 	.word	0x40003c00

080021e0 <MX_UART5_Init>:
{
 80021e0:	b508      	push	{r3, lr}
  huart5.Instance = UART5;
 80021e2:	4815      	ldr	r0, [pc, #84]	; (8002238 <MX_UART5_Init+0x58>)
 80021e4:	4b15      	ldr	r3, [pc, #84]	; (800223c <MX_UART5_Init+0x5c>)
 80021e6:	6003      	str	r3, [r0, #0]
  huart5.Init.BaudRate = 115200;
 80021e8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80021ec:	6043      	str	r3, [r0, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80021ee:	2300      	movs	r3, #0
 80021f0:	6083      	str	r3, [r0, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80021f2:	60c3      	str	r3, [r0, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80021f4:	6103      	str	r3, [r0, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80021f6:	220c      	movs	r2, #12
 80021f8:	6142      	str	r2, [r0, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021fa:	6183      	str	r3, [r0, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80021fc:	61c3      	str	r3, [r0, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021fe:	6203      	str	r3, [r0, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002200:	6243      	str	r3, [r0, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002202:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002204:	f003 fa9f 	bl	8005746 <HAL_UART_Init>
 8002208:	b970      	cbnz	r0, 8002228 <MX_UART5_Init+0x48>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800220a:	2100      	movs	r1, #0
 800220c:	480a      	ldr	r0, [pc, #40]	; (8002238 <MX_UART5_Init+0x58>)
 800220e:	f003 fb12 	bl	8005836 <HAL_UARTEx_SetTxFifoThreshold>
 8002212:	b958      	cbnz	r0, 800222c <MX_UART5_Init+0x4c>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002214:	2100      	movs	r1, #0
 8002216:	4808      	ldr	r0, [pc, #32]	; (8002238 <MX_UART5_Init+0x58>)
 8002218:	f003 fb32 	bl	8005880 <HAL_UARTEx_SetRxFifoThreshold>
 800221c:	b940      	cbnz	r0, 8002230 <MX_UART5_Init+0x50>
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 800221e:	4806      	ldr	r0, [pc, #24]	; (8002238 <MX_UART5_Init+0x58>)
 8002220:	f003 faea 	bl	80057f8 <HAL_UARTEx_DisableFifoMode>
 8002224:	b930      	cbnz	r0, 8002234 <MX_UART5_Init+0x54>
}
 8002226:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002228:	f7ff ff3a 	bl	80020a0 <Error_Handler>
    Error_Handler();
 800222c:	f7ff ff38 	bl	80020a0 <Error_Handler>
    Error_Handler();
 8002230:	f7ff ff36 	bl	80020a0 <Error_Handler>
    Error_Handler();
 8002234:	f7ff ff34 	bl	80020a0 <Error_Handler>
 8002238:	2000054c 	.word	0x2000054c
 800223c:	40005000 	.word	0x40005000

08002240 <SystemClock_Config>:
{
 8002240:	b510      	push	{r4, lr}
 8002242:	b0a8      	sub	sp, #160	; 0xa0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002244:	2238      	movs	r2, #56	; 0x38
 8002246:	2100      	movs	r1, #0
 8002248:	a81a      	add	r0, sp, #104	; 0x68
 800224a:	f005 fe19 	bl	8007e80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800224e:	2400      	movs	r4, #0
 8002250:	9415      	str	r4, [sp, #84]	; 0x54
 8002252:	9416      	str	r4, [sp, #88]	; 0x58
 8002254:	9417      	str	r4, [sp, #92]	; 0x5c
 8002256:	9418      	str	r4, [sp, #96]	; 0x60
 8002258:	9419      	str	r4, [sp, #100]	; 0x64
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800225a:	2254      	movs	r2, #84	; 0x54
 800225c:	4621      	mov	r1, r4
 800225e:	4668      	mov	r0, sp
 8002260:	f005 fe0e 	bl	8007e80 <memset>
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8002264:	4620      	mov	r0, r4
 8002266:	f002 f8d3 	bl	8004410 <HAL_PWREx_ControlVoltageScaling>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800226a:	2321      	movs	r3, #33	; 0x21
 800226c:	931a      	str	r3, [sp, #104]	; 0x68
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800226e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002272:	931b      	str	r3, [sp, #108]	; 0x6c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002274:	2301      	movs	r3, #1
 8002276:	9320      	str	r3, [sp, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002278:	2302      	movs	r3, #2
 800227a:	9321      	str	r3, [sp, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800227c:	2203      	movs	r2, #3
 800227e:	9222      	str	r2, [sp, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8002280:	2204      	movs	r2, #4
 8002282:	9223      	str	r2, [sp, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8002284:	2255      	movs	r2, #85	; 0x55
 8002286:	9224      	str	r2, [sp, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002288:	9325      	str	r3, [sp, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV6;
 800228a:	2206      	movs	r2, #6
 800228c:	9226      	str	r2, [sp, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800228e:	9327      	str	r3, [sp, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002290:	a81a      	add	r0, sp, #104	; 0x68
 8002292:	f002 f975 	bl	8004580 <HAL_RCC_OscConfig>
 8002296:	bb40      	cbnz	r0, 80022ea <SystemClock_Config+0xaa>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002298:	230f      	movs	r3, #15
 800229a:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800229c:	2303      	movs	r3, #3
 800229e:	9316      	str	r3, [sp, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022a0:	2300      	movs	r3, #0
 80022a2:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80022a4:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80022a6:	9319      	str	r3, [sp, #100]	; 0x64
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80022a8:	2104      	movs	r1, #4
 80022aa:	a815      	add	r0, sp, #84	; 0x54
 80022ac:	f002 fc1e 	bl	8004aec <HAL_RCC_ClockConfig>
 80022b0:	b9e8      	cbnz	r0, 80022ee <SystemClock_Config+0xae>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5|RCC_PERIPHCLK_I2C1
 80022b2:	f24b 03d0 	movw	r3, #45264	; 0xb0d0
 80022b6:	9300      	str	r3, [sp, #0]
  PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_SYSCLK;
 80022b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022bc:	9305      	str	r3, [sp, #20]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 80022be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022c2:	9307      	str	r3, [sp, #28]
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_SYSCLK;
 80022c4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80022c8:	9308      	str	r3, [sp, #32]
  PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80022ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022ce:	930e      	str	r3, [sp, #56]	; 0x38
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80022d0:	2300      	movs	r3, #0
 80022d2:	930f      	str	r3, [sp, #60]	; 0x3c
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80022d4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80022d8:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022da:	4668      	mov	r0, sp
 80022dc:	f002 fd46 	bl	8004d6c <HAL_RCCEx_PeriphCLKConfig>
 80022e0:	b938      	cbnz	r0, 80022f2 <SystemClock_Config+0xb2>
  HAL_RCC_EnableCSS();
 80022e2:	f002 fd29 	bl	8004d38 <HAL_RCC_EnableCSS>
}
 80022e6:	b028      	add	sp, #160	; 0xa0
 80022e8:	bd10      	pop	{r4, pc}
    Error_Handler();
 80022ea:	f7ff fed9 	bl	80020a0 <Error_Handler>
    Error_Handler();
 80022ee:	f7ff fed7 	bl	80020a0 <Error_Handler>
    Error_Handler();
 80022f2:	f7ff fed5 	bl	80020a0 <Error_Handler>
	...

080022f8 <main>:
{
 80022f8:	b500      	push	{lr}
 80022fa:	b091      	sub	sp, #68	; 0x44
	targetVout = 8000;
 80022fc:	4b5d      	ldr	r3, [pc, #372]	; (8002474 <main+0x17c>)
 80022fe:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8002302:	601a      	str	r2, [r3, #0]
	conversionState = CONVERSION_STATE_SHUTDOWN;
 8002304:	4b5c      	ldr	r3, [pc, #368]	; (8002478 <main+0x180>)
 8002306:	2200      	movs	r2, #0
 8002308:	701a      	strb	r2, [r3, #0]
  HAL_Init();
 800230a:	f000 fda1 	bl	8002e50 <HAL_Init>
  SET_BIT(HRTIMx->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 800230e:	4a5b      	ldr	r2, [pc, #364]	; (800247c <main+0x184>)
 8002310:	f8d2 33cc 	ldr.w	r3, [r2, #972]	; 0x3cc
 8002314:	f043 0301 	orr.w	r3, r3, #1
 8002318:	f8c2 33cc 	str.w	r3, [r2, #972]	; 0x3cc
  SystemClock_Config();
 800231c:	f7ff ff90 	bl	8002240 <SystemClock_Config>
  MX_GPIO_Init();
 8002320:	f7fe fd40 	bl	8000da4 <MX_GPIO_Init>
  MX_HRTIM1_Init();
 8002324:	f7fe fe82 	bl	800102c <MX_HRTIM1_Init>
  MX_ADC1_Init();
 8002328:	f7ff fd9c 	bl	8001e64 <MX_ADC1_Init>
  MX_FDCAN2_Init();
 800232c:	f7ff feba 	bl	80020a4 <MX_FDCAN2_Init>
  MX_I2C1_Init();
 8002330:	f7ff feda 	bl	80020e8 <MX_I2C1_Init>
  MX_I2C2_Init();
 8002334:	f7ff ff04 	bl	8002140 <MX_I2C2_Init>
  MX_SPI3_Init();
 8002338:	f7ff ff2e 	bl	8002198 <MX_SPI3_Init>
  MX_UART5_Init();
 800233c:	f7ff ff50 	bl	80021e0 <MX_UART5_Init>
  MX_USB_Device_Init();
 8002340:	f005 fad2 	bl	80078e8 <MX_USB_Device_Init>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002344:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
 8002348:	68a3      	ldr	r3, [r4, #8]
 800234a:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800234e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002352:	60a3      	str	r3, [r4, #8]
	HAL_Delay(1);	//Wait before powering up the regulator
 8002354:	2001      	movs	r0, #1
 8002356:	f000 fd9d 	bl	8002e94 <HAL_Delay>
  MODIFY_REG(ADCx->CR,
 800235a:	68a3      	ldr	r3, [r4, #8]
 800235c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002360:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002364:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002368:	60a3      	str	r3, [r4, #8]
	HAL_Delay(1);	//Wait for regulator stabilization
 800236a:	2001      	movs	r0, #1
 800236c:	f000 fd92 	bl	8002e94 <HAL_Delay>
__STATIC_INLINE void LL_ADC_StartCalibration(ADC_TypeDef *ADCx, uint32_t SingleDiff)
{
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002370:	68a3      	ldr	r3, [r4, #8]
 8002372:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002376:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800237a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800237e:	60a3      	str	r3, [r4, #8]
  * @param  ADCx ADC instance
  * @retval 0: calibration complete, 1: calibration in progress.
  */
__STATIC_INLINE uint32_t LL_ADC_IsCalibrationOnGoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002380:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	2b00      	cmp	r3, #0
 8002388:	dbfa      	blt.n	8002380 <main+0x88>
	HAL_Delay(1);	//Wait after calibration before activation ADC
 800238a:	2001      	movs	r0, #1
 800238c:	f000 fd82 	bl	8002e94 <HAL_Delay>
  MODIFY_REG(ADCx->CR,
 8002390:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002394:	6893      	ldr	r3, [r2, #8]
 8002396:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800239a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800239e:	f043 0301 	orr.w	r3, r3, #1
 80023a2:	6093      	str	r3, [r2, #8]
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_ADRDY(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 80023a4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f013 0f01 	tst.w	r3, #1
 80023ae:	d0f9      	beq.n	80023a4 <main+0xac>
	HAL_Delay(1);	//Wait before starting conversion
 80023b0:	2001      	movs	r0, #1
 80023b2:	f000 fd6f 	bl	8002e94 <HAL_Delay>
  MODIFY_REG(ADCx->CR,
 80023b6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80023ba:	6893      	ldr	r3, [r2, #8]
 80023bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80023c0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80023c4:	f043 0308 	orr.w	r3, r3, #8
 80023c8:	6093      	str	r3, [r2, #8]
  SET_BIT(HRTIMx->sMasterRegs.MCR, Timers);
 80023ca:	4a2c      	ldr	r2, [pc, #176]	; (800247c <main+0x184>)
 80023cc:	6813      	ldr	r3, [r2, #0]
 80023ce:	f443 03c0 	orr.w	r3, r3, #6291456	; 0x600000
 80023d2:	6013      	str	r3, [r2, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80023d8:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 80023dc:	b193      	cbz	r3, 8002404 <main+0x10c>
  return __builtin_clz(value);
 80023de:	fab3 f383 	clz	r3, r3
  *         @arg @ref LL_HRTIM_TIMER_F
  * @retval None
  */
__STATIC_INLINE void LL_HRTIM_EnableIT_REP(HRTIM_TypeDef *HRTIMx, uint32_t Timer)
{
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_MCEN_Pos);
 80023e2:	3b10      	subs	r3, #16
 80023e4:	b2db      	uxtb	r3, r3
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sMasterRegs.MDIER) +
 80023e6:	4926      	ldr	r1, [pc, #152]	; (8002480 <main+0x188>)
                                                    REG_OFFSET_TAB_TIMER[iTimer]));
 80023e8:	4a26      	ldr	r2, [pc, #152]	; (8002484 <main+0x18c>)
 80023ea:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
  SET_BIT(*pReg, HRTIM_MDIER_MREPIE);
 80023ee:	588b      	ldr	r3, [r1, r2]
 80023f0:	f043 0310 	orr.w	r3, r3, #16
 80023f4:	508b      	str	r3, [r1, r2]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_JEOS(ADC_TypeDef *ADCx)
{
  SET_BIT(ADCx->IER, LL_ADC_IT_JEOS);
 80023f6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80023fa:	6853      	ldr	r3, [r2, #4]
 80023fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002400:	6053      	str	r3, [r2, #4]
}
 8002402:	e019      	b.n	8002438 <main+0x140>
    return 32U;
 8002404:	2320      	movs	r3, #32
 8002406:	e7ec      	b.n	80023e2 <main+0xea>
		sprintf(txBuf, "%u,%u,%u,%u\r\n", Vin, Vout, CurIn, CurOut);
 8002408:	4b1f      	ldr	r3, [pc, #124]	; (8002488 <main+0x190>)
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	4b1f      	ldr	r3, [pc, #124]	; (800248c <main+0x194>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	491f      	ldr	r1, [pc, #124]	; (8002490 <main+0x198>)
 8002412:	6809      	ldr	r1, [r1, #0]
 8002414:	481f      	ldr	r0, [pc, #124]	; (8002494 <main+0x19c>)
 8002416:	6800      	ldr	r0, [r0, #0]
 8002418:	9001      	str	r0, [sp, #4]
 800241a:	9100      	str	r1, [sp, #0]
 800241c:	491e      	ldr	r1, [pc, #120]	; (8002498 <main+0x1a0>)
 800241e:	a806      	add	r0, sp, #24
 8002420:	f005 fd36 	bl	8007e90 <siprintf>
		CDC_Transmit_FS((uint8_t*) txBuf, strlen(txBuf));
 8002424:	a806      	add	r0, sp, #24
 8002426:	f7fd fefb 	bl	8000220 <strlen>
 800242a:	b281      	uxth	r1, r0
 800242c:	a806      	add	r0, sp, #24
 800242e:	f005 fac7 	bl	80079c0 <CDC_Transmit_FS>
		HAL_Delay(1);
 8002432:	2001      	movs	r0, #1
 8002434:	f000 fd2e 	bl	8002e94 <HAL_Delay>
		if (USB_retrieveCMD(USBCmd, &CMDLen))
 8002438:	a902      	add	r1, sp, #8
 800243a:	a803      	add	r0, sp, #12
 800243c:	f005 fad6 	bl	80079ec <USB_retrieveCMD>
 8002440:	2800      	cmp	r0, #0
 8002442:	d0e1      	beq.n	8002408 <main+0x110>
			if (CMDLen == 3)
 8002444:	9b02      	ldr	r3, [sp, #8]
 8002446:	2b03      	cmp	r3, #3
 8002448:	d1de      	bne.n	8002408 <main+0x110>
				switch (USBCmd[0])
 800244a:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800244e:	2b4f      	cmp	r3, #79	; 0x4f
 8002450:	d1da      	bne.n	8002408 <main+0x110>
					targetVout = (((USBCmd[1] - '0') * 10) + (USBCmd[2] - '0')) * 1000;
 8002452:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8002456:	3b30      	subs	r3, #48	; 0x30
 8002458:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800245c:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8002460:	3a30      	subs	r2, #48	; 0x30
 8002462:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8002466:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800246a:	fb02 f303 	mul.w	r3, r2, r3
 800246e:	4a01      	ldr	r2, [pc, #4]	; (8002474 <main+0x17c>)
 8002470:	6013      	str	r3, [r2, #0]
					break;
 8002472:	e7c9      	b.n	8002408 <main+0x110>
 8002474:	200005e4 	.word	0x200005e4
 8002478:	200004d8 	.word	0x200004d8
 800247c:	40016800 	.word	0x40016800
 8002480:	4001680c 	.word	0x4001680c
 8002484:	08008780 	.word	0x08008780
 8002488:	200005f0 	.word	0x200005f0
 800248c:	200005e0 	.word	0x200005e0
 8002490:	200005f4 	.word	0x200005f4
 8002494:	200005dc 	.word	0x200005dc
 8002498:	080086e8 	.word	0x080086e8

0800249c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800249c:	b500      	push	{lr}
 800249e:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024a0:	4b0b      	ldr	r3, [pc, #44]	; (80024d0 <HAL_MspInit+0x34>)
 80024a2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80024a4:	f042 0201 	orr.w	r2, r2, #1
 80024a8:	661a      	str	r2, [r3, #96]	; 0x60
 80024aa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80024ac:	f002 0201 	and.w	r2, r2, #1
 80024b0:	9200      	str	r2, [sp, #0]
 80024b2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024b4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80024b6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80024ba:	659a      	str	r2, [r3, #88]	; 0x58
 80024bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024c2:	9301      	str	r3, [sp, #4]
 80024c4:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80024c6:	f002 f829 	bl	800451c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024ca:	b003      	add	sp, #12
 80024cc:	f85d fb04 	ldr.w	pc, [sp], #4
 80024d0:	40021000 	.word	0x40021000

080024d4 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80024d4:	b500      	push	{lr}
 80024d6:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024d8:	2300      	movs	r3, #0
 80024da:	9303      	str	r3, [sp, #12]
 80024dc:	9304      	str	r3, [sp, #16]
 80024de:	9305      	str	r3, [sp, #20]
 80024e0:	9306      	str	r3, [sp, #24]
 80024e2:	9307      	str	r3, [sp, #28]
  if(hfdcan->Instance==FDCAN2)
 80024e4:	6802      	ldr	r2, [r0, #0]
 80024e6:	4b14      	ldr	r3, [pc, #80]	; (8002538 <HAL_FDCAN_MspInit+0x64>)
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d002      	beq.n	80024f2 <HAL_FDCAN_MspInit+0x1e>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 80024ec:	b009      	add	sp, #36	; 0x24
 80024ee:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80024f2:	f503 33d4 	add.w	r3, r3, #108544	; 0x1a800
 80024f6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80024f8:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80024fc:	659a      	str	r2, [r3, #88]	; 0x58
 80024fe:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002500:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8002504:	9201      	str	r2, [sp, #4]
 8002506:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002508:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800250a:	f042 0202 	orr.w	r2, r2, #2
 800250e:	64da      	str	r2, [r3, #76]	; 0x4c
 8002510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002512:	f003 0302 	and.w	r3, r3, #2
 8002516:	9302      	str	r3, [sp, #8]
 8002518:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800251a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800251e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002520:	2302      	movs	r3, #2
 8002522:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002524:	2300      	movs	r3, #0
 8002526:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002528:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 800252a:	2309      	movs	r3, #9
 800252c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800252e:	a903      	add	r1, sp, #12
 8002530:	4802      	ldr	r0, [pc, #8]	; (800253c <HAL_FDCAN_MspInit+0x68>)
 8002532:	f000 fe5d 	bl	80031f0 <HAL_GPIO_Init>
}
 8002536:	e7d9      	b.n	80024ec <HAL_FDCAN_MspInit+0x18>
 8002538:	40006800 	.word	0x40006800
 800253c:	48000400 	.word	0x48000400

08002540 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002544:	b08c      	sub	sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002546:	2300      	movs	r3, #0
 8002548:	9307      	str	r3, [sp, #28]
 800254a:	9308      	str	r3, [sp, #32]
 800254c:	9309      	str	r3, [sp, #36]	; 0x24
 800254e:	930a      	str	r3, [sp, #40]	; 0x28
 8002550:	930b      	str	r3, [sp, #44]	; 0x2c
  if(hi2c->Instance==I2C1)
 8002552:	6803      	ldr	r3, [r0, #0]
 8002554:	4a3e      	ldr	r2, [pc, #248]	; (8002650 <HAL_I2C_MspInit+0x110>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d005      	beq.n	8002566 <HAL_I2C_MspInit+0x26>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
  else if(hi2c->Instance==I2C2)
 800255a:	4a3e      	ldr	r2, [pc, #248]	; (8002654 <HAL_I2C_MspInit+0x114>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d03c      	beq.n	80025da <HAL_I2C_MspInit+0x9a>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002560:	b00c      	add	sp, #48	; 0x30
 8002562:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002566:	4c3c      	ldr	r4, [pc, #240]	; (8002658 <HAL_I2C_MspInit+0x118>)
 8002568:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800256a:	f043 0301 	orr.w	r3, r3, #1
 800256e:	64e3      	str	r3, [r4, #76]	; 0x4c
 8002570:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002572:	f003 0301 	and.w	r3, r3, #1
 8002576:	9301      	str	r3, [sp, #4]
 8002578:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800257a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800257c:	f043 0302 	orr.w	r3, r3, #2
 8002580:	64e3      	str	r3, [r4, #76]	; 0x4c
 8002582:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002584:	f003 0302 	and.w	r3, r3, #2
 8002588:	9302      	str	r3, [sp, #8]
 800258a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800258c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002590:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002592:	f04f 0812 	mov.w	r8, #18
 8002596:	f8cd 8020 	str.w	r8, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800259a:	2701      	movs	r7, #1
 800259c:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800259e:	2600      	movs	r6, #0
 80025a0:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80025a2:	2504      	movs	r5, #4
 80025a4:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025a6:	a907      	add	r1, sp, #28
 80025a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025ac:	f000 fe20 	bl	80031f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80025b0:	2380      	movs	r3, #128	; 0x80
 80025b2:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025b4:	f8cd 8020 	str.w	r8, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025b8:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ba:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80025bc:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025be:	a907      	add	r1, sp, #28
 80025c0:	4826      	ldr	r0, [pc, #152]	; (800265c <HAL_I2C_MspInit+0x11c>)
 80025c2:	f000 fe15 	bl	80031f0 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 80025c6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80025c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80025cc:	65a3      	str	r3, [r4, #88]	; 0x58
 80025ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80025d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025d4:	9303      	str	r3, [sp, #12]
 80025d6:	9b03      	ldr	r3, [sp, #12]
 80025d8:	e7c2      	b.n	8002560 <HAL_I2C_MspInit+0x20>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025da:	4c1f      	ldr	r4, [pc, #124]	; (8002658 <HAL_I2C_MspInit+0x118>)
 80025dc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80025de:	f043 0304 	orr.w	r3, r3, #4
 80025e2:	64e3      	str	r3, [r4, #76]	; 0x4c
 80025e4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80025e6:	f003 0304 	and.w	r3, r3, #4
 80025ea:	9304      	str	r3, [sp, #16]
 80025ec:	9b04      	ldr	r3, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025ee:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80025f0:	f043 0301 	orr.w	r3, r3, #1
 80025f4:	64e3      	str	r3, [r4, #76]	; 0x4c
 80025f6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80025f8:	f003 0301 	and.w	r3, r3, #1
 80025fc:	9305      	str	r3, [sp, #20]
 80025fe:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002600:	2310      	movs	r3, #16
 8002602:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002604:	f04f 0812 	mov.w	r8, #18
 8002608:	f8cd 8020 	str.w	r8, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800260c:	2701      	movs	r7, #1
 800260e:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002610:	2600      	movs	r6, #0
 8002612:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002614:	2504      	movs	r5, #4
 8002616:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002618:	a907      	add	r1, sp, #28
 800261a:	4811      	ldr	r0, [pc, #68]	; (8002660 <HAL_I2C_MspInit+0x120>)
 800261c:	f000 fde8 	bl	80031f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002620:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002624:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002626:	f8cd 8020 	str.w	r8, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800262a:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800262c:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800262e:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002630:	a907      	add	r1, sp, #28
 8002632:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002636:	f000 fddb 	bl	80031f0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800263a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800263c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002640:	65a3      	str	r3, [r4, #88]	; 0x58
 8002642:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002644:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002648:	9306      	str	r3, [sp, #24]
 800264a:	9b06      	ldr	r3, [sp, #24]
}
 800264c:	e788      	b.n	8002560 <HAL_I2C_MspInit+0x20>
 800264e:	bf00      	nop
 8002650:	40005400 	.word	0x40005400
 8002654:	40005800 	.word	0x40005800
 8002658:	40021000 	.word	0x40021000
 800265c:	48000400 	.word	0x48000400
 8002660:	48000800 	.word	0x48000800

08002664 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002664:	b570      	push	{r4, r5, r6, lr}
 8002666:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002668:	2300      	movs	r3, #0
 800266a:	9303      	str	r3, [sp, #12]
 800266c:	9304      	str	r3, [sp, #16]
 800266e:	9305      	str	r3, [sp, #20]
 8002670:	9306      	str	r3, [sp, #24]
 8002672:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI3)
 8002674:	6802      	ldr	r2, [r0, #0]
 8002676:	4b1d      	ldr	r3, [pc, #116]	; (80026ec <HAL_SPI_MspInit+0x88>)
 8002678:	429a      	cmp	r2, r3
 800267a:	d001      	beq.n	8002680 <HAL_SPI_MspInit+0x1c>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800267c:	b008      	add	sp, #32
 800267e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002680:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8002684:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002686:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800268a:	659a      	str	r2, [r3, #88]	; 0x58
 800268c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800268e:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8002692:	9200      	str	r2, [sp, #0]
 8002694:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002696:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002698:	f042 0204 	orr.w	r2, r2, #4
 800269c:	64da      	str	r2, [r3, #76]	; 0x4c
 800269e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80026a0:	f002 0204 	and.w	r2, r2, #4
 80026a4:	9201      	str	r2, [sp, #4]
 80026a6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026a8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80026aa:	f042 0202 	orr.w	r2, r2, #2
 80026ae:	64da      	str	r2, [r3, #76]	; 0x4c
 80026b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026b2:	f003 0302 	and.w	r3, r3, #2
 80026b6:	9302      	str	r3, [sp, #8]
 80026b8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80026ba:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80026be:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026c0:	2602      	movs	r6, #2
 80026c2:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c4:	2400      	movs	r4, #0
 80026c6:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026c8:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80026ca:	2506      	movs	r5, #6
 80026cc:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026ce:	a903      	add	r1, sp, #12
 80026d0:	4807      	ldr	r0, [pc, #28]	; (80026f0 <HAL_SPI_MspInit+0x8c>)
 80026d2:	f000 fd8d 	bl	80031f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80026d6:	2320      	movs	r3, #32
 80026d8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026da:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026dc:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026de:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80026e0:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026e2:	a903      	add	r1, sp, #12
 80026e4:	4803      	ldr	r0, [pc, #12]	; (80026f4 <HAL_SPI_MspInit+0x90>)
 80026e6:	f000 fd83 	bl	80031f0 <HAL_GPIO_Init>
}
 80026ea:	e7c7      	b.n	800267c <HAL_SPI_MspInit+0x18>
 80026ec:	40003c00 	.word	0x40003c00
 80026f0:	48000800 	.word	0x48000800
 80026f4:	48000400 	.word	0x48000400

080026f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80026f8:	b570      	push	{r4, r5, r6, lr}
 80026fa:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026fc:	2300      	movs	r3, #0
 80026fe:	9303      	str	r3, [sp, #12]
 8002700:	9304      	str	r3, [sp, #16]
 8002702:	9305      	str	r3, [sp, #20]
 8002704:	9306      	str	r3, [sp, #24]
 8002706:	9307      	str	r3, [sp, #28]
  if(huart->Instance==UART5)
 8002708:	6802      	ldr	r2, [r0, #0]
 800270a:	4b1d      	ldr	r3, [pc, #116]	; (8002780 <HAL_UART_MspInit+0x88>)
 800270c:	429a      	cmp	r2, r3
 800270e:	d001      	beq.n	8002714 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 8002710:	b008      	add	sp, #32
 8002712:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_UART5_CLK_ENABLE();
 8002714:	f503 33e0 	add.w	r3, r3, #114688	; 0x1c000
 8002718:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800271a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800271e:	659a      	str	r2, [r3, #88]	; 0x58
 8002720:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002722:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002726:	9200      	str	r2, [sp, #0]
 8002728:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800272a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800272c:	f042 0204 	orr.w	r2, r2, #4
 8002730:	64da      	str	r2, [r3, #76]	; 0x4c
 8002732:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002734:	f002 0204 	and.w	r2, r2, #4
 8002738:	9201      	str	r2, [sp, #4]
 800273a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800273c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800273e:	f042 0208 	orr.w	r2, r2, #8
 8002742:	64da      	str	r2, [r3, #76]	; 0x4c
 8002744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002746:	f003 0308 	and.w	r3, r3, #8
 800274a:	9302      	str	r3, [sp, #8]
 800274c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800274e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002752:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002754:	2602      	movs	r6, #2
 8002756:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002758:	2400      	movs	r4, #0
 800275a:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800275c:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 800275e:	2505      	movs	r5, #5
 8002760:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002762:	a903      	add	r1, sp, #12
 8002764:	4807      	ldr	r0, [pc, #28]	; (8002784 <HAL_UART_MspInit+0x8c>)
 8002766:	f000 fd43 	bl	80031f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800276a:	2304      	movs	r3, #4
 800276c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800276e:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002770:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002772:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8002774:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002776:	a903      	add	r1, sp, #12
 8002778:	4803      	ldr	r0, [pc, #12]	; (8002788 <HAL_UART_MspInit+0x90>)
 800277a:	f000 fd39 	bl	80031f0 <HAL_GPIO_Init>
}
 800277e:	e7c7      	b.n	8002710 <HAL_UART_MspInit+0x18>
 8002780:	40005000 	.word	0x40005000
 8002784:	48000800 	.word	0x48000800
 8002788:	48000c00 	.word	0x48000c00

0800278c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800278c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 800278e:	f002 fadd 	bl	8004d4c <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002792:	bd08      	pop	{r3, pc}

08002794 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002794:	e7fe      	b.n	8002794 <HardFault_Handler>

08002796 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002796:	e7fe      	b.n	8002796 <MemManage_Handler>

08002798 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002798:	e7fe      	b.n	8002798 <BusFault_Handler>

0800279a <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800279a:	e7fe      	b.n	800279a <UsageFault_Handler>

0800279c <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800279c:	4770      	bx	lr

0800279e <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800279e:	4770      	bx	lr

080027a0 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027a0:	4770      	bx	lr

080027a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027a2:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027a4:	f000 fb64 	bl	8002e70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027a8:	bd08      	pop	{r3, pc}
 80027aa:	0000      	movs	r0, r0
 80027ac:	0000      	movs	r0, r0
	...

080027b0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 80027b0:	b570      	push	{r4, r5, r6, lr}
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
 80027b2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80027b6:	2240      	movs	r2, #64	; 0x40
 80027b8:	601a      	str	r2, [r3, #0]
  return (uint32_t)(READ_BIT(*preg,
 80027ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80027be:	b29b      	uxth	r3, r3
  /* USER CODE BEGIN ADC1_2_IRQn 0 */
	LL_ADC_ClearFlag_JEOS(ADC1);
  /* USER CODE END ADC1_2_IRQn 0 */

  /* USER CODE BEGIN ADC1_2_IRQn 1 */
	vinRawADC = LL_ADC_INJ_ReadConversionData32(ADC1, LL_ADC_INJ_RANK_1);
 80027c0:	4a3b      	ldr	r2, [pc, #236]	; (80028b0 <ADC1_2_IRQHandler+0x100>)
 80027c2:	6013      	str	r3, [r2, #0]
	vinRawVolt = (vinRawADC * VDDA) / 0xFFF0;
 80027c4:	6813      	ldr	r3, [r2, #0]
 80027c6:	f640 44e4 	movw	r4, #3300	; 0xce4
 80027ca:	fb04 f303 	mul.w	r3, r4, r3
 80027ce:	091b      	lsrs	r3, r3, #4
 80027d0:	4d38      	ldr	r5, [pc, #224]	; (80028b4 <ADC1_2_IRQHandler+0x104>)
 80027d2:	fba5 2303 	umull	r2, r3, r5, r3
 80027d6:	0a1b      	lsrs	r3, r3, #8
 80027d8:	4a37      	ldr	r2, [pc, #220]	; (80028b8 <ADC1_2_IRQHandler+0x108>)
 80027da:	6013      	str	r3, [r2, #0]
	Vin = vinRawVolt / (33.0 / 1033.0);
 80027dc:	6810      	ldr	r0, [r2, #0]
 80027de:	f7fd feb9 	bl	8000554 <__aeabi_ui2d>
 80027e2:	a32f      	add	r3, pc, #188	; (adr r3, 80028a0 <ADC1_2_IRQHandler+0xf0>)
 80027e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027e8:	f7fe f858 	bl	800089c <__aeabi_ddiv>
 80027ec:	f7fe f93e 	bl	8000a6c <__aeabi_d2uiz>
 80027f0:	4b32      	ldr	r3, [pc, #200]	; (80028bc <ADC1_2_IRQHandler+0x10c>)
 80027f2:	6018      	str	r0, [r3, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->JDR1, ((Rank & ADC_INJ_JDRX_REGOFFSET_MASK) >> ADC_JDRX_REGOFFSET_POS));
 80027f4:	4e32      	ldr	r6, [pc, #200]	; (80028c0 <ADC1_2_IRQHandler+0x110>)
  return (uint32_t)(READ_BIT(*preg,
 80027f6:	6873      	ldr	r3, [r6, #4]
 80027f8:	b29b      	uxth	r3, r3

	voutRawADC = LL_ADC_INJ_ReadConversionData32(ADC1, LL_ADC_INJ_RANK_2);
 80027fa:	4a32      	ldr	r2, [pc, #200]	; (80028c4 <ADC1_2_IRQHandler+0x114>)
 80027fc:	6013      	str	r3, [r2, #0]
	voutRawVolt = (voutRawADC * VDDA) / 0xFFF0;
 80027fe:	6813      	ldr	r3, [r2, #0]
 8002800:	fb04 f303 	mul.w	r3, r4, r3
 8002804:	091b      	lsrs	r3, r3, #4
 8002806:	fba5 2303 	umull	r2, r3, r5, r3
 800280a:	0a1b      	lsrs	r3, r3, #8
 800280c:	4a2e      	ldr	r2, [pc, #184]	; (80028c8 <ADC1_2_IRQHandler+0x118>)
 800280e:	6013      	str	r3, [r2, #0]
	Vout = voutRawVolt / (33.0 / 1033.0);
 8002810:	6810      	ldr	r0, [r2, #0]
 8002812:	f7fd fe9f 	bl	8000554 <__aeabi_ui2d>
 8002816:	a322      	add	r3, pc, #136	; (adr r3, 80028a0 <ADC1_2_IRQHandler+0xf0>)
 8002818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800281c:	f7fe f83e 	bl	800089c <__aeabi_ddiv>
 8002820:	f7fe f924 	bl	8000a6c <__aeabi_d2uiz>
 8002824:	4b29      	ldr	r3, [pc, #164]	; (80028cc <ADC1_2_IRQHandler+0x11c>)
 8002826:	6018      	str	r0, [r3, #0]
 8002828:	68b3      	ldr	r3, [r6, #8]
 800282a:	b29b      	uxth	r3, r3

	curInRawADC = LL_ADC_INJ_ReadConversionData32(ADC1, LL_ADC_INJ_RANK_3);
 800282c:	4a28      	ldr	r2, [pc, #160]	; (80028d0 <ADC1_2_IRQHandler+0x120>)
 800282e:	6013      	str	r3, [r2, #0]
	curInRawVolt = (curInRawADC * VDDA) / 0xFFF0;
 8002830:	6813      	ldr	r3, [r2, #0]
 8002832:	fb04 f303 	mul.w	r3, r4, r3
 8002836:	091b      	lsrs	r3, r3, #4
 8002838:	fba5 2303 	umull	r2, r3, r5, r3
 800283c:	0a1b      	lsrs	r3, r3, #8
 800283e:	4a25      	ldr	r2, [pc, #148]	; (80028d4 <ADC1_2_IRQHandler+0x124>)
 8002840:	6013      	str	r3, [r2, #0]
	CurIn = (curInRawVolt / 200.0) / 0.0004293;
 8002842:	6810      	ldr	r0, [r2, #0]
 8002844:	f7fd fe86 	bl	8000554 <__aeabi_ui2d>
 8002848:	2200      	movs	r2, #0
 800284a:	4b23      	ldr	r3, [pc, #140]	; (80028d8 <ADC1_2_IRQHandler+0x128>)
 800284c:	f7fe f826 	bl	800089c <__aeabi_ddiv>
 8002850:	a315      	add	r3, pc, #84	; (adr r3, 80028a8 <ADC1_2_IRQHandler+0xf8>)
 8002852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002856:	f7fe f821 	bl	800089c <__aeabi_ddiv>
 800285a:	f7fe f907 	bl	8000a6c <__aeabi_d2uiz>
 800285e:	4b1f      	ldr	r3, [pc, #124]	; (80028dc <ADC1_2_IRQHandler+0x12c>)
 8002860:	6018      	str	r0, [r3, #0]
 8002862:	68f3      	ldr	r3, [r6, #12]
 8002864:	b29b      	uxth	r3, r3

	curOutRawADC = LL_ADC_INJ_ReadConversionData32(ADC1, LL_ADC_INJ_RANK_4);
 8002866:	4a1e      	ldr	r2, [pc, #120]	; (80028e0 <ADC1_2_IRQHandler+0x130>)
 8002868:	6013      	str	r3, [r2, #0]
	curOutRawVolt = (curOutRawADC * VDDA) / 0xFFF0;
 800286a:	6813      	ldr	r3, [r2, #0]
 800286c:	fb04 f403 	mul.w	r4, r4, r3
 8002870:	0924      	lsrs	r4, r4, #4
 8002872:	fba5 3404 	umull	r3, r4, r5, r4
 8002876:	0a24      	lsrs	r4, r4, #8
 8002878:	4b1a      	ldr	r3, [pc, #104]	; (80028e4 <ADC1_2_IRQHandler+0x134>)
 800287a:	601c      	str	r4, [r3, #0]
	CurOut = (curOutRawVolt / 200.0) / 0.0004293;
 800287c:	6818      	ldr	r0, [r3, #0]
 800287e:	f7fd fe69 	bl	8000554 <__aeabi_ui2d>
 8002882:	2200      	movs	r2, #0
 8002884:	4b14      	ldr	r3, [pc, #80]	; (80028d8 <ADC1_2_IRQHandler+0x128>)
 8002886:	f7fe f809 	bl	800089c <__aeabi_ddiv>
 800288a:	a307      	add	r3, pc, #28	; (adr r3, 80028a8 <ADC1_2_IRQHandler+0xf8>)
 800288c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002890:	f7fe f804 	bl	800089c <__aeabi_ddiv>
 8002894:	f7fe f8ea 	bl	8000a6c <__aeabi_d2uiz>
 8002898:	4b13      	ldr	r3, [pc, #76]	; (80028e8 <ADC1_2_IRQHandler+0x138>)
 800289a:	6018      	str	r0, [r3, #0]
  /* USER CODE END ADC1_2_IRQn 1 */
}
 800289c:	bd70      	pop	{r4, r5, r6, pc}
 800289e:	bf00      	nop
 80028a0:	cdb13151 	.word	0xcdb13151
 80028a4:	3fa05b32 	.word	0x3fa05b32
 80028a8:	75cde277 	.word	0x75cde277
 80028ac:	3f3c2275 	.word	0x3f3c2275
 80028b0:	200005ec 	.word	0x200005ec
 80028b4:	10010011 	.word	0x10010011
 80028b8:	20000488 	.word	0x20000488
 80028bc:	200005f0 	.word	0x200005f0
 80028c0:	50000080 	.word	0x50000080
 80028c4:	2000065c 	.word	0x2000065c
 80028c8:	200004dc 	.word	0x200004dc
 80028cc:	200005e0 	.word	0x200005e0
 80028d0:	20000660 	.word	0x20000660
 80028d4:	200005e8 	.word	0x200005e8
 80028d8:	40690000 	.word	0x40690000
 80028dc:	200005f4 	.word	0x200005f4
 80028e0:	20000434 	.word	0x20000434
 80028e4:	20000548 	.word	0x20000548
 80028e8:	200005dc 	.word	0x200005dc

080028ec <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 80028ec:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80028ee:	4802      	ldr	r0, [pc, #8]	; (80028f8 <USB_LP_IRQHandler+0xc>)
 80028f0:	f001 fb41 	bl	8003f76 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80028f4:	bd08      	pop	{r3, pc}
 80028f6:	bf00      	nop
 80028f8:	20006b4c 	.word	0x20006b4c

080028fc <HRTIM1_TIMF_IRQHandler>:

/**
  * @brief This function handles HRTIM timer F global interrupt.
  */
void HRTIM1_TIMF_IRQHandler(void)
{
 80028fc:	b410      	push	{r4}
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002902:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8002906:	2b00      	cmp	r3, #0
 8002908:	d038      	beq.n	800297c <HRTIM1_TIMF_IRQHandler+0x80>
  return __builtin_clz(value);
 800290a:	fab3 f383 	clz	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_MCEN_Pos);
 800290e:	3b10      	subs	r3, #16
 8002910:	b2db      	uxtb	r3, r3
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sMasterRegs.MICR) +
 8002912:	4974      	ldr	r1, [pc, #464]	; (8002ae4 <HRTIM1_TIMF_IRQHandler+0x1e8>)
                                                              REG_OFFSET_TAB_TIMER[iTimer]));
 8002914:	4a74      	ldr	r2, [pc, #464]	; (8002ae8 <HRTIM1_TIMF_IRQHandler+0x1ec>)
 8002916:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
  SET_BIT(*pReg, HRTIM_MICR_MREP);
 800291a:	588b      	ldr	r3, [r1, r2]
 800291c:	f043 0310 	orr.w	r3, r3, #16
 8002920:	508b      	str	r3, [r1, r2]
  /* USER CODE BEGIN HRTIM1_TIMF_IRQn 0 */
	LL_HRTIM_ClearFlag_REP(HRTIM1, LL_HRTIM_TIMER_F);

	//Choose Conversion Mode
	if (targetVout > (Vin + BUCK_BOOST_BAND))
 8002922:	4b72      	ldr	r3, [pc, #456]	; (8002aec <HRTIM1_TIMF_IRQHandler+0x1f0>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800292a:	4a71      	ldr	r2, [pc, #452]	; (8002af0 <HRTIM1_TIMF_IRQHandler+0x1f4>)
 800292c:	6812      	ldr	r2, [r2, #0]
 800292e:	4293      	cmp	r3, r2
 8002930:	d226      	bcs.n	8002980 <HRTIM1_TIMF_IRQHandler+0x84>
	{
		conversionState = CONVERSION_STATE_BOOST;
 8002932:	4b70      	ldr	r3, [pc, #448]	; (8002af4 <HRTIM1_TIMF_IRQHandler+0x1f8>)
 8002934:	2202      	movs	r2, #2
 8002936:	701a      	strb	r2, [r3, #0]
	{
		conversionState = CONVERSION_STATE_BUCKBOOST;
	}

	//Limit Operating Voltage
	if (Vin >= OVER_VOLTAGE_PROTECTION || Vout >= OVER_VOLTAGE_PROTECTION)
 8002938:	4b6c      	ldr	r3, [pc, #432]	; (8002aec <HRTIM1_TIMF_IRQHandler+0x1f0>)
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	f644 631f 	movw	r3, #19999	; 0x4e1f
 8002940:	429a      	cmp	r2, r3
 8002942:	d805      	bhi.n	8002950 <HRTIM1_TIMF_IRQHandler+0x54>
 8002944:	4b6c      	ldr	r3, [pc, #432]	; (8002af8 <HRTIM1_TIMF_IRQHandler+0x1fc>)
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	f644 631f 	movw	r3, #19999	; 0x4e1f
 800294c:	429a      	cmp	r2, r3
 800294e:	d902      	bls.n	8002956 <HRTIM1_TIMF_IRQHandler+0x5a>
	{
		conversionState = CONVERSION_STATE_SHUTDOWN;
 8002950:	4b68      	ldr	r3, [pc, #416]	; (8002af4 <HRTIM1_TIMF_IRQHandler+0x1f8>)
 8002952:	2200      	movs	r2, #0
 8002954:	701a      	strb	r2, [r3, #0]
	}

	switch (conversionState)
 8002956:	4b67      	ldr	r3, [pc, #412]	; (8002af4 <HRTIM1_TIMF_IRQHandler+0x1f8>)
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	b2db      	uxtb	r3, r3
 800295c:	2b02      	cmp	r3, #2
 800295e:	f000 815b 	beq.w	8002c18 <HRTIM1_TIMF_IRQHandler+0x31c>
 8002962:	2b03      	cmp	r3, #3
 8002964:	d027      	beq.n	80029b6 <HRTIM1_TIMF_IRQHandler+0xba>
 8002966:	2b01      	cmp	r3, #1
 8002968:	f000 80d0 	beq.w	8002b0c <HRTIM1_TIMF_IRQHandler+0x210>
  SET_BIT(HRTIMx->sCommonRegs.ODISR, (Outputs & HRTIM_OENR_ODIS_MASK));
 800296c:	4a63      	ldr	r2, [pc, #396]	; (8002afc <HRTIM1_TIMF_IRQHandler+0x200>)
 800296e:	f8d2 3398 	ldr.w	r3, [r2, #920]	; 0x398
 8002972:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 8002976:	f8c2 3398 	str.w	r3, [r2, #920]	; 0x398
  /* USER CODE END HRTIM1_TIMF_IRQn 0 */

  /* USER CODE BEGIN HRTIM1_TIMF_IRQn 1 */

  /* USER CODE END HRTIM1_TIMF_IRQn 1 */
}
 800297a:	e09e      	b.n	8002aba <HRTIM1_TIMF_IRQHandler+0x1be>
    return 32U;
 800297c:	2320      	movs	r3, #32
 800297e:	e7c6      	b.n	800290e <HRTIM1_TIMF_IRQHandler+0x12>
	else if (targetVout < (Vin - BUCK_BOOST_BAND))
 8002980:	4b5a      	ldr	r3, [pc, #360]	; (8002aec <HRTIM1_TIMF_IRQHandler+0x1f0>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8002988:	4a59      	ldr	r2, [pc, #356]	; (8002af0 <HRTIM1_TIMF_IRQHandler+0x1f4>)
 800298a:	6812      	ldr	r2, [r2, #0]
 800298c:	4293      	cmp	r3, r2
 800298e:	d903      	bls.n	8002998 <HRTIM1_TIMF_IRQHandler+0x9c>
		conversionState = CONVERSION_STATE_BUCK;
 8002990:	4b58      	ldr	r3, [pc, #352]	; (8002af4 <HRTIM1_TIMF_IRQHandler+0x1f8>)
 8002992:	2201      	movs	r2, #1
 8002994:	701a      	strb	r2, [r3, #0]
 8002996:	e7cf      	b.n	8002938 <HRTIM1_TIMF_IRQHandler+0x3c>
	else if (abs((int) (Vin - targetVout)) < BUCK_BOOST_BAND)
 8002998:	4b54      	ldr	r3, [pc, #336]	; (8002aec <HRTIM1_TIMF_IRQHandler+0x1f0>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a54      	ldr	r2, [pc, #336]	; (8002af0 <HRTIM1_TIMF_IRQHandler+0x1f4>)
 800299e:	6812      	ldr	r2, [r2, #0]
 80029a0:	1a9b      	subs	r3, r3, r2
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	bfb8      	it	lt
 80029a6:	425b      	neglt	r3, r3
 80029a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80029ac:	dac4      	bge.n	8002938 <HRTIM1_TIMF_IRQHandler+0x3c>
		conversionState = CONVERSION_STATE_BUCKBOOST;
 80029ae:	4b51      	ldr	r3, [pc, #324]	; (8002af4 <HRTIM1_TIMF_IRQHandler+0x1f8>)
 80029b0:	2203      	movs	r2, #3
 80029b2:	701a      	strb	r2, [r3, #0]
 80029b4:	e7c0      	b.n	8002938 <HRTIM1_TIMF_IRQHandler+0x3c>
  SET_BIT(HRTIMx->sCommonRegs.OENR, (Outputs & HRTIM_OENR_OEN_MASK));
 80029b6:	4a51      	ldr	r2, [pc, #324]	; (8002afc <HRTIM1_TIMF_IRQHandler+0x200>)
 80029b8:	f8d2 3394 	ldr.w	r3, [r2, #916]	; 0x394
 80029bc:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 80029c0:	f8c2 3394 	str.w	r3, [r2, #916]	; 0x394
		if (Vout > targetVout)
 80029c4:	4b4c      	ldr	r3, [pc, #304]	; (8002af8 <HRTIM1_TIMF_IRQHandler+0x1fc>)
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	4b49      	ldr	r3, [pc, #292]	; (8002af0 <HRTIM1_TIMF_IRQHandler+0x1f4>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d903      	bls.n	80029d8 <HRTIM1_TIMF_IRQHandler+0xdc>
			CurrentDuty--;
 80029d0:	4a4b      	ldr	r2, [pc, #300]	; (8002b00 <HRTIM1_TIMF_IRQHandler+0x204>)
 80029d2:	6813      	ldr	r3, [r2, #0]
 80029d4:	3b01      	subs	r3, #1
 80029d6:	6013      	str	r3, [r2, #0]
		if (Vout < targetVout)
 80029d8:	4b47      	ldr	r3, [pc, #284]	; (8002af8 <HRTIM1_TIMF_IRQHandler+0x1fc>)
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	4b44      	ldr	r3, [pc, #272]	; (8002af0 <HRTIM1_TIMF_IRQHandler+0x1f4>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d203      	bcs.n	80029ec <HRTIM1_TIMF_IRQHandler+0xf0>
			CurrentDuty++;
 80029e4:	4a46      	ldr	r2, [pc, #280]	; (8002b00 <HRTIM1_TIMF_IRQHandler+0x204>)
 80029e6:	6813      	ldr	r3, [r2, #0]
 80029e8:	3301      	adds	r3, #1
 80029ea:	6013      	str	r3, [r2, #0]
		LL_HRTIM_TIM_SetCompare1(HRTIM1, LL_HRTIM_TIMER_E, constrain(CurrentDuty, UPPER_DC_LIMIT_BUCKBOOST, LOWER_DC_LIMIT_BUCKBOOST));
 80029ec:	4b44      	ldr	r3, [pc, #272]	; (8002b00 <HRTIM1_TIMF_IRQHandler+0x204>)
 80029ee:	681b      	ldr	r3, [r3, #0]

/* USER CODE BEGIN 1 */
inline uint32_t constrain(uint32_t input, uint32_t upperLimit, uint32_t lowerLimit)
{
	return input > lowerLimit ? (input < upperLimit ? input : upperLimit) : lowerLimit;
 80029f0:	f5b3 6f88 	cmp.w	r3, #1088	; 0x440
 80029f4:	d964      	bls.n	8002ac0 <HRTIM1_TIMF_IRQHandler+0x1c4>
 80029f6:	f643 317f 	movw	r1, #15231	; 0x3b7f
 80029fa:	4299      	cmp	r1, r3
 80029fc:	bf28      	it	cs
 80029fe:	4619      	movcs	r1, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a00:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002a04:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d05c      	beq.n	8002ac6 <HRTIM1_TIMF_IRQHandler+0x1ca>
  return __builtin_clz(value);
 8002a0c:	fab3 f383 	clz	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_MCEN_Pos);
 8002a10:	3b10      	subs	r3, #16
 8002a12:	b2db      	uxtb	r3, r3
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sMasterRegs.MCMP1R) +
 8002a14:	4a3b      	ldr	r2, [pc, #236]	; (8002b04 <HRTIM1_TIMF_IRQHandler+0x208>)
                                                              REG_OFFSET_TAB_TIMER[iTimer]));
 8002a16:	4834      	ldr	r0, [pc, #208]	; (8002ae8 <HRTIM1_TIMF_IRQHandler+0x1ec>)
 8002a18:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
  MODIFY_REG(* pReg, HRTIM_MCMP1R_MCMP1R, CompareValue);
 8002a1c:	5813      	ldr	r3, [r2, r0]
 8002a1e:	0c1b      	lsrs	r3, r3, #16
 8002a20:	041b      	lsls	r3, r3, #16
 8002a22:	430b      	orrs	r3, r1
 8002a24:	5013      	str	r3, [r2, r0]
		LL_HRTIM_TIM_SetCompare1(HRTIM1, LL_HRTIM_TIMER_F, constrain(CurrentDuty, UPPER_DC_LIMIT_BUCKBOOST, LOWER_DC_LIMIT_BUCKBOOST));
 8002a26:	4b36      	ldr	r3, [pc, #216]	; (8002b00 <HRTIM1_TIMF_IRQHandler+0x204>)
 8002a28:	681b      	ldr	r3, [r3, #0]
	return input > lowerLimit ? (input < upperLimit ? input : upperLimit) : lowerLimit;
 8002a2a:	f5b3 6f88 	cmp.w	r3, #1088	; 0x440
 8002a2e:	d94c      	bls.n	8002aca <HRTIM1_TIMF_IRQHandler+0x1ce>
 8002a30:	f643 317f 	movw	r1, #15231	; 0x3b7f
 8002a34:	4299      	cmp	r1, r3
 8002a36:	bf28      	it	cs
 8002a38:	4619      	movcs	r1, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a3a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002a3e:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d044      	beq.n	8002ad0 <HRTIM1_TIMF_IRQHandler+0x1d4>
  return __builtin_clz(value);
 8002a46:	fab3 f383 	clz	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_MCEN_Pos);
 8002a4a:	3b10      	subs	r3, #16
 8002a4c:	b2db      	uxtb	r3, r3
                                                              REG_OFFSET_TAB_TIMER[iTimer]));
 8002a4e:	4826      	ldr	r0, [pc, #152]	; (8002ae8 <HRTIM1_TIMF_IRQHandler+0x1ec>)
 8002a50:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
  MODIFY_REG(* pReg, HRTIM_MCMP1R_MCMP1R, CompareValue);
 8002a54:	5883      	ldr	r3, [r0, r2]
 8002a56:	0c1b      	lsrs	r3, r3, #16
 8002a58:	041b      	lsls	r3, r3, #16
 8002a5a:	430b      	orrs	r3, r1
 8002a5c:	5083      	str	r3, [r0, r2]
		LL_HRTIM_TIM_SetCompare3(HRTIM1, LL_HRTIM_TIMER_F, constrain(CurrentDuty / 2, UPPER_DC_LIMIT_BUCKBOOST / 2, LOWER_DC_LIMIT_BUCKBOOST / 2));
 8002a5e:	4b28      	ldr	r3, [pc, #160]	; (8002b00 <HRTIM1_TIMF_IRQHandler+0x204>)
 8002a60:	6819      	ldr	r1, [r3, #0]
 8002a62:	084b      	lsrs	r3, r1, #1
	return input > lowerLimit ? (input < upperLimit ? input : upperLimit) : lowerLimit;
 8002a64:	f240 4041 	movw	r0, #1089	; 0x441
 8002a68:	4281      	cmp	r1, r0
 8002a6a:	d933      	bls.n	8002ad4 <HRTIM1_TIMF_IRQHandler+0x1d8>
 8002a6c:	f641 51bf 	movw	r1, #7615	; 0x1dbf
 8002a70:	4299      	cmp	r1, r3
 8002a72:	bf28      	it	cs
 8002a74:	4619      	movcs	r1, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a76:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002a7a:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8002a7e:	b363      	cbz	r3, 8002ada <HRTIM1_TIMF_IRQHandler+0x1de>
  return __builtin_clz(value);
 8002a80:	fab3 f383 	clz	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_MCEN_Pos);
 8002a84:	3b10      	subs	r3, #16
 8002a86:	b2db      	uxtb	r3, r3
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sMasterRegs.MCMP3R) +
 8002a88:	4c1f      	ldr	r4, [pc, #124]	; (8002b08 <HRTIM1_TIMF_IRQHandler+0x20c>)
                                                              REG_OFFSET_TAB_TIMER[iTimer]));
 8002a8a:	4817      	ldr	r0, [pc, #92]	; (8002ae8 <HRTIM1_TIMF_IRQHandler+0x1ec>)
 8002a8c:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
  MODIFY_REG(* pReg, HRTIM_MCMP1R_MCMP3R, CompareValue);
 8002a90:	5823      	ldr	r3, [r4, r0]
 8002a92:	0c1b      	lsrs	r3, r3, #16
 8002a94:	041b      	lsls	r3, r3, #16
 8002a96:	430b      	orrs	r3, r1
 8002a98:	5023      	str	r3, [r4, r0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a9a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002a9e:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8002aa2:	b1e3      	cbz	r3, 8002ade <HRTIM1_TIMF_IRQHandler+0x1e2>
  return __builtin_clz(value);
 8002aa4:	fab3 f383 	clz	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_MCEN_Pos);
 8002aa8:	3b10      	subs	r3, #16
 8002aaa:	b2db      	uxtb	r3, r3
                                                                    REG_OFFSET_TAB_TIMER[iTimer]));
 8002aac:	490e      	ldr	r1, [pc, #56]	; (8002ae8 <HRTIM1_TIMF_IRQHandler+0x1ec>)
 8002aae:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
  return (READ_BIT(*pReg, HRTIM_MCMP1R_MCMP1R));
 8002ab2:	589b      	ldr	r3, [r3, r2]
 8002ab4:	b29b      	uxth	r3, r3
		CurrentDuty = LL_HRTIM_TIM_GetCompare1(HRTIM1, LL_HRTIM_TIMER_E);
 8002ab6:	4a12      	ldr	r2, [pc, #72]	; (8002b00 <HRTIM1_TIMF_IRQHandler+0x204>)
 8002ab8:	6013      	str	r3, [r2, #0]
}
 8002aba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002abe:	4770      	bx	lr
	return input > lowerLimit ? (input < upperLimit ? input : upperLimit) : lowerLimit;
 8002ac0:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8002ac4:	e79c      	b.n	8002a00 <HRTIM1_TIMF_IRQHandler+0x104>
    return 32U;
 8002ac6:	2320      	movs	r3, #32
 8002ac8:	e7a2      	b.n	8002a10 <HRTIM1_TIMF_IRQHandler+0x114>
 8002aca:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8002ace:	e7b4      	b.n	8002a3a <HRTIM1_TIMF_IRQHandler+0x13e>
 8002ad0:	2320      	movs	r3, #32
 8002ad2:	e7ba      	b.n	8002a4a <HRTIM1_TIMF_IRQHandler+0x14e>
 8002ad4:	f44f 7108 	mov.w	r1, #544	; 0x220
 8002ad8:	e7cd      	b.n	8002a76 <HRTIM1_TIMF_IRQHandler+0x17a>
 8002ada:	2320      	movs	r3, #32
 8002adc:	e7d2      	b.n	8002a84 <HRTIM1_TIMF_IRQHandler+0x188>
 8002ade:	2320      	movs	r3, #32
 8002ae0:	e7e2      	b.n	8002aa8 <HRTIM1_TIMF_IRQHandler+0x1ac>
 8002ae2:	bf00      	nop
 8002ae4:	40016808 	.word	0x40016808
 8002ae8:	080087ac 	.word	0x080087ac
 8002aec:	200005f0 	.word	0x200005f0
 8002af0:	200005e4 	.word	0x200005e4
 8002af4:	200004d8 	.word	0x200004d8
 8002af8:	200005e0 	.word	0x200005e0
 8002afc:	40016800 	.word	0x40016800
 8002b00:	20000544 	.word	0x20000544
 8002b04:	4001681c 	.word	0x4001681c
 8002b08:	40016828 	.word	0x40016828
  SET_BIT(HRTIMx->sCommonRegs.OENR, (Outputs & HRTIM_OENR_OEN_MASK));
 8002b0c:	4a87      	ldr	r2, [pc, #540]	; (8002d2c <HRTIM1_TIMF_IRQHandler+0x430>)
 8002b0e:	f8d2 3394 	ldr.w	r3, [r2, #916]	; 0x394
 8002b12:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 8002b16:	f8c2 3394 	str.w	r3, [r2, #916]	; 0x394
		if (Vout > targetVout)
 8002b1a:	4b85      	ldr	r3, [pc, #532]	; (8002d30 <HRTIM1_TIMF_IRQHandler+0x434>)
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	4b85      	ldr	r3, [pc, #532]	; (8002d34 <HRTIM1_TIMF_IRQHandler+0x438>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d903      	bls.n	8002b2e <HRTIM1_TIMF_IRQHandler+0x232>
			CurrentDuty--;
 8002b26:	4a84      	ldr	r2, [pc, #528]	; (8002d38 <HRTIM1_TIMF_IRQHandler+0x43c>)
 8002b28:	6813      	ldr	r3, [r2, #0]
 8002b2a:	3b01      	subs	r3, #1
 8002b2c:	6013      	str	r3, [r2, #0]
		if (Vout < targetVout)
 8002b2e:	4b80      	ldr	r3, [pc, #512]	; (8002d30 <HRTIM1_TIMF_IRQHandler+0x434>)
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	4b80      	ldr	r3, [pc, #512]	; (8002d34 <HRTIM1_TIMF_IRQHandler+0x438>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d203      	bcs.n	8002b42 <HRTIM1_TIMF_IRQHandler+0x246>
			CurrentDuty++;
 8002b3a:	4a7f      	ldr	r2, [pc, #508]	; (8002d38 <HRTIM1_TIMF_IRQHandler+0x43c>)
 8002b3c:	6813      	ldr	r3, [r2, #0]
 8002b3e:	3301      	adds	r3, #1
 8002b40:	6013      	str	r3, [r2, #0]
		LL_HRTIM_TIM_SetCompare1(HRTIM1, LL_HRTIM_TIMER_E, constrain(CurrentDuty, UPPER_DC_LIMIT_BUCK, LOWER_DC_LIMIT_BUCK));
 8002b42:	4b7d      	ldr	r3, [pc, #500]	; (8002d38 <HRTIM1_TIMF_IRQHandler+0x43c>)
 8002b44:	681b      	ldr	r3, [r3, #0]
	return input > lowerLimit ? (input < upperLimit ? input : upperLimit) : lowerLimit;
 8002b46:	f5b3 6f88 	cmp.w	r3, #1088	; 0x440
 8002b4a:	d957      	bls.n	8002bfc <HRTIM1_TIMF_IRQHandler+0x300>
 8002b4c:	f245 01c0 	movw	r1, #20672	; 0x50c0
 8002b50:	4299      	cmp	r1, r3
 8002b52:	bf28      	it	cs
 8002b54:	4619      	movcs	r1, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b56:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002b5a:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d04f      	beq.n	8002c02 <HRTIM1_TIMF_IRQHandler+0x306>
  return __builtin_clz(value);
 8002b62:	fab3 f383 	clz	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_MCEN_Pos);
 8002b66:	3b10      	subs	r3, #16
 8002b68:	b2db      	uxtb	r3, r3
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sMasterRegs.MCMP1R) +
 8002b6a:	4a74      	ldr	r2, [pc, #464]	; (8002d3c <HRTIM1_TIMF_IRQHandler+0x440>)
                                                              REG_OFFSET_TAB_TIMER[iTimer]));
 8002b6c:	4874      	ldr	r0, [pc, #464]	; (8002d40 <HRTIM1_TIMF_IRQHandler+0x444>)
 8002b6e:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
  MODIFY_REG(* pReg, HRTIM_MCMP1R_MCMP1R, CompareValue);
 8002b72:	5813      	ldr	r3, [r2, r0]
 8002b74:	0c1b      	lsrs	r3, r3, #16
 8002b76:	041b      	lsls	r3, r3, #16
 8002b78:	430b      	orrs	r3, r1
 8002b7a:	5013      	str	r3, [r2, r0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b7c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002b80:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d03e      	beq.n	8002c06 <HRTIM1_TIMF_IRQHandler+0x30a>
  return __builtin_clz(value);
 8002b88:	fab3 f383 	clz	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_MCEN_Pos);
 8002b8c:	3b10      	subs	r3, #16
 8002b8e:	b2db      	uxtb	r3, r3
                                                              REG_OFFSET_TAB_TIMER[iTimer]));
 8002b90:	496b      	ldr	r1, [pc, #428]	; (8002d40 <HRTIM1_TIMF_IRQHandler+0x444>)
 8002b92:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
  MODIFY_REG(* pReg, HRTIM_MCMP1R_MCMP1R, CompareValue);
 8002b96:	588b      	ldr	r3, [r1, r2]
 8002b98:	0c1b      	lsrs	r3, r3, #16
 8002b9a:	041b      	lsls	r3, r3, #16
 8002b9c:	508b      	str	r3, [r1, r2]
		LL_HRTIM_TIM_SetCompare3(HRTIM1, LL_HRTIM_TIMER_F, constrain(CurrentDuty / 2, UPPER_DC_LIMIT_BUCK / 2, LOWER_DC_LIMIT_BUCK / 2));
 8002b9e:	4b66      	ldr	r3, [pc, #408]	; (8002d38 <HRTIM1_TIMF_IRQHandler+0x43c>)
 8002ba0:	6819      	ldr	r1, [r3, #0]
 8002ba2:	084b      	lsrs	r3, r1, #1
	return input > lowerLimit ? (input < upperLimit ? input : upperLimit) : lowerLimit;
 8002ba4:	f240 4041 	movw	r0, #1089	; 0x441
 8002ba8:	4281      	cmp	r1, r0
 8002baa:	d92e      	bls.n	8002c0a <HRTIM1_TIMF_IRQHandler+0x30e>
 8002bac:	f642 0160 	movw	r1, #10336	; 0x2860
 8002bb0:	4299      	cmp	r1, r3
 8002bb2:	bf28      	it	cs
 8002bb4:	4619      	movcs	r1, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002bba:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8002bbe:	b33b      	cbz	r3, 8002c10 <HRTIM1_TIMF_IRQHandler+0x314>
  return __builtin_clz(value);
 8002bc0:	fab3 f383 	clz	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_MCEN_Pos);
 8002bc4:	3b10      	subs	r3, #16
 8002bc6:	b2db      	uxtb	r3, r3
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sMasterRegs.MCMP3R) +
 8002bc8:	4c5e      	ldr	r4, [pc, #376]	; (8002d44 <HRTIM1_TIMF_IRQHandler+0x448>)
                                                              REG_OFFSET_TAB_TIMER[iTimer]));
 8002bca:	485d      	ldr	r0, [pc, #372]	; (8002d40 <HRTIM1_TIMF_IRQHandler+0x444>)
 8002bcc:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
  MODIFY_REG(* pReg, HRTIM_MCMP1R_MCMP3R, CompareValue);
 8002bd0:	5823      	ldr	r3, [r4, r0]
 8002bd2:	0c1b      	lsrs	r3, r3, #16
 8002bd4:	041b      	lsls	r3, r3, #16
 8002bd6:	430b      	orrs	r3, r1
 8002bd8:	5023      	str	r3, [r4, r0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bda:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002bde:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8002be2:	b1bb      	cbz	r3, 8002c14 <HRTIM1_TIMF_IRQHandler+0x318>
  return __builtin_clz(value);
 8002be4:	fab3 f383 	clz	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_MCEN_Pos);
 8002be8:	3b10      	subs	r3, #16
 8002bea:	b2db      	uxtb	r3, r3
                                                                    REG_OFFSET_TAB_TIMER[iTimer]));
 8002bec:	4954      	ldr	r1, [pc, #336]	; (8002d40 <HRTIM1_TIMF_IRQHandler+0x444>)
 8002bee:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
  return (READ_BIT(*pReg, HRTIM_MCMP1R_MCMP1R));
 8002bf2:	589b      	ldr	r3, [r3, r2]
 8002bf4:	b29b      	uxth	r3, r3
		CurrentDuty = LL_HRTIM_TIM_GetCompare1(HRTIM1, LL_HRTIM_TIMER_E);
 8002bf6:	4a50      	ldr	r2, [pc, #320]	; (8002d38 <HRTIM1_TIMF_IRQHandler+0x43c>)
 8002bf8:	6013      	str	r3, [r2, #0]
		break;
 8002bfa:	e75e      	b.n	8002aba <HRTIM1_TIMF_IRQHandler+0x1be>
	return input > lowerLimit ? (input < upperLimit ? input : upperLimit) : lowerLimit;
 8002bfc:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8002c00:	e7a9      	b.n	8002b56 <HRTIM1_TIMF_IRQHandler+0x25a>
    return 32U;
 8002c02:	2320      	movs	r3, #32
 8002c04:	e7af      	b.n	8002b66 <HRTIM1_TIMF_IRQHandler+0x26a>
 8002c06:	2320      	movs	r3, #32
 8002c08:	e7c0      	b.n	8002b8c <HRTIM1_TIMF_IRQHandler+0x290>
 8002c0a:	f44f 7108 	mov.w	r1, #544	; 0x220
 8002c0e:	e7d2      	b.n	8002bb6 <HRTIM1_TIMF_IRQHandler+0x2ba>
 8002c10:	2320      	movs	r3, #32
 8002c12:	e7d7      	b.n	8002bc4 <HRTIM1_TIMF_IRQHandler+0x2c8>
 8002c14:	2320      	movs	r3, #32
 8002c16:	e7e7      	b.n	8002be8 <HRTIM1_TIMF_IRQHandler+0x2ec>
  SET_BIT(HRTIMx->sCommonRegs.OENR, (Outputs & HRTIM_OENR_OEN_MASK));
 8002c18:	4a44      	ldr	r2, [pc, #272]	; (8002d2c <HRTIM1_TIMF_IRQHandler+0x430>)
 8002c1a:	f8d2 3394 	ldr.w	r3, [r2, #916]	; 0x394
 8002c1e:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 8002c22:	f8c2 3394 	str.w	r3, [r2, #916]	; 0x394
		if (Vout > targetVout)
 8002c26:	4b42      	ldr	r3, [pc, #264]	; (8002d30 <HRTIM1_TIMF_IRQHandler+0x434>)
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	4b42      	ldr	r3, [pc, #264]	; (8002d34 <HRTIM1_TIMF_IRQHandler+0x438>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d903      	bls.n	8002c3a <HRTIM1_TIMF_IRQHandler+0x33e>
			CurrentDuty--;
 8002c32:	4a41      	ldr	r2, [pc, #260]	; (8002d38 <HRTIM1_TIMF_IRQHandler+0x43c>)
 8002c34:	6813      	ldr	r3, [r2, #0]
 8002c36:	3b01      	subs	r3, #1
 8002c38:	6013      	str	r3, [r2, #0]
		if (Vout < targetVout)
 8002c3a:	4b3d      	ldr	r3, [pc, #244]	; (8002d30 <HRTIM1_TIMF_IRQHandler+0x434>)
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	4b3d      	ldr	r3, [pc, #244]	; (8002d34 <HRTIM1_TIMF_IRQHandler+0x438>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d203      	bcs.n	8002c4e <HRTIM1_TIMF_IRQHandler+0x352>
			CurrentDuty++;
 8002c46:	4a3c      	ldr	r2, [pc, #240]	; (8002d38 <HRTIM1_TIMF_IRQHandler+0x43c>)
 8002c48:	6813      	ldr	r3, [r2, #0]
 8002c4a:	3301      	adds	r3, #1
 8002c4c:	6013      	str	r3, [r2, #0]
		LL_HRTIM_TIM_SetCompare1(HRTIM1, LL_HRTIM_TIMER_F, constrain(CurrentDuty, UPPER_DC_LIMIT_BOOST, LOWER_DC_LIMIT_BOOST));
 8002c4e:	4b3a      	ldr	r3, [pc, #232]	; (8002d38 <HRTIM1_TIMF_IRQHandler+0x43c>)
 8002c50:	681b      	ldr	r3, [r3, #0]
	return input > lowerLimit ? (input < upperLimit ? input : upperLimit) : lowerLimit;
 8002c52:	f5b3 6f88 	cmp.w	r3, #1088	; 0x440
 8002c56:	d95b      	bls.n	8002d10 <HRTIM1_TIMF_IRQHandler+0x414>
 8002c58:	f643 317f 	movw	r1, #15231	; 0x3b7f
 8002c5c:	4299      	cmp	r1, r3
 8002c5e:	bf28      	it	cs
 8002c60:	4619      	movcs	r1, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c62:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002c66:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d053      	beq.n	8002d16 <HRTIM1_TIMF_IRQHandler+0x41a>
  return __builtin_clz(value);
 8002c6e:	fab3 f383 	clz	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_MCEN_Pos);
 8002c72:	3b10      	subs	r3, #16
 8002c74:	b2db      	uxtb	r3, r3
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sMasterRegs.MCMP1R) +
 8002c76:	4a31      	ldr	r2, [pc, #196]	; (8002d3c <HRTIM1_TIMF_IRQHandler+0x440>)
                                                              REG_OFFSET_TAB_TIMER[iTimer]));
 8002c78:	4831      	ldr	r0, [pc, #196]	; (8002d40 <HRTIM1_TIMF_IRQHandler+0x444>)
 8002c7a:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
  MODIFY_REG(* pReg, HRTIM_MCMP1R_MCMP1R, CompareValue);
 8002c7e:	5813      	ldr	r3, [r2, r0]
 8002c80:	0c1b      	lsrs	r3, r3, #16
 8002c82:	041b      	lsls	r3, r3, #16
 8002c84:	430b      	orrs	r3, r1
 8002c86:	5013      	str	r3, [r2, r0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c88:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002c8c:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d042      	beq.n	8002d1a <HRTIM1_TIMF_IRQHandler+0x41e>
  return __builtin_clz(value);
 8002c94:	fab3 f383 	clz	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_MCEN_Pos);
 8002c98:	3b10      	subs	r3, #16
 8002c9a:	b2db      	uxtb	r3, r3
                                                              REG_OFFSET_TAB_TIMER[iTimer]));
 8002c9c:	4928      	ldr	r1, [pc, #160]	; (8002d40 <HRTIM1_TIMF_IRQHandler+0x444>)
 8002c9e:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
  MODIFY_REG(* pReg, HRTIM_MCMP1R_MCMP1R, CompareValue);
 8002ca2:	588b      	ldr	r3, [r1, r2]
 8002ca4:	0c1b      	lsrs	r3, r3, #16
 8002ca6:	041b      	lsls	r3, r3, #16
 8002ca8:	f443 43aa 	orr.w	r3, r3, #21760	; 0x5500
 8002cac:	f043 0301 	orr.w	r3, r3, #1
 8002cb0:	508b      	str	r3, [r1, r2]
		LL_HRTIM_TIM_SetCompare3(HRTIM1, LL_HRTIM_TIMER_F, constrain(CurrentDuty / 2, UPPER_DC_LIMIT_BOOST / 2, LOWER_DC_LIMIT_BOOST / 2));
 8002cb2:	4b21      	ldr	r3, [pc, #132]	; (8002d38 <HRTIM1_TIMF_IRQHandler+0x43c>)
 8002cb4:	6819      	ldr	r1, [r3, #0]
 8002cb6:	084b      	lsrs	r3, r1, #1
	return input > lowerLimit ? (input < upperLimit ? input : upperLimit) : lowerLimit;
 8002cb8:	f240 4041 	movw	r0, #1089	; 0x441
 8002cbc:	4281      	cmp	r1, r0
 8002cbe:	d92e      	bls.n	8002d1e <HRTIM1_TIMF_IRQHandler+0x422>
 8002cc0:	f641 51bf 	movw	r1, #7615	; 0x1dbf
 8002cc4:	4299      	cmp	r1, r3
 8002cc6:	bf28      	it	cs
 8002cc8:	4619      	movcs	r1, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002cce:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8002cd2:	b33b      	cbz	r3, 8002d24 <HRTIM1_TIMF_IRQHandler+0x428>
  return __builtin_clz(value);
 8002cd4:	fab3 f383 	clz	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_MCEN_Pos);
 8002cd8:	3b10      	subs	r3, #16
 8002cda:	b2db      	uxtb	r3, r3
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sMasterRegs.MCMP3R) +
 8002cdc:	4c19      	ldr	r4, [pc, #100]	; (8002d44 <HRTIM1_TIMF_IRQHandler+0x448>)
                                                              REG_OFFSET_TAB_TIMER[iTimer]));
 8002cde:	4818      	ldr	r0, [pc, #96]	; (8002d40 <HRTIM1_TIMF_IRQHandler+0x444>)
 8002ce0:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
  MODIFY_REG(* pReg, HRTIM_MCMP1R_MCMP3R, CompareValue);
 8002ce4:	5823      	ldr	r3, [r4, r0]
 8002ce6:	0c1b      	lsrs	r3, r3, #16
 8002ce8:	041b      	lsls	r3, r3, #16
 8002cea:	430b      	orrs	r3, r1
 8002cec:	5023      	str	r3, [r4, r0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002cf2:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8002cf6:	b1bb      	cbz	r3, 8002d28 <HRTIM1_TIMF_IRQHandler+0x42c>
  return __builtin_clz(value);
 8002cf8:	fab3 f383 	clz	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_MCEN_Pos);
 8002cfc:	3b10      	subs	r3, #16
 8002cfe:	b2db      	uxtb	r3, r3
                                                                    REG_OFFSET_TAB_TIMER[iTimer]));
 8002d00:	490f      	ldr	r1, [pc, #60]	; (8002d40 <HRTIM1_TIMF_IRQHandler+0x444>)
 8002d02:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
  return (READ_BIT(*pReg, HRTIM_MCMP1R_MCMP1R));
 8002d06:	589b      	ldr	r3, [r3, r2]
 8002d08:	b29b      	uxth	r3, r3
		CurrentDuty = LL_HRTIM_TIM_GetCompare1(HRTIM1, LL_HRTIM_TIMER_F);
 8002d0a:	4a0b      	ldr	r2, [pc, #44]	; (8002d38 <HRTIM1_TIMF_IRQHandler+0x43c>)
 8002d0c:	6013      	str	r3, [r2, #0]
		break;
 8002d0e:	e6d4      	b.n	8002aba <HRTIM1_TIMF_IRQHandler+0x1be>
	return input > lowerLimit ? (input < upperLimit ? input : upperLimit) : lowerLimit;
 8002d10:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8002d14:	e7a5      	b.n	8002c62 <HRTIM1_TIMF_IRQHandler+0x366>
    return 32U;
 8002d16:	2320      	movs	r3, #32
 8002d18:	e7ab      	b.n	8002c72 <HRTIM1_TIMF_IRQHandler+0x376>
 8002d1a:	2320      	movs	r3, #32
 8002d1c:	e7bc      	b.n	8002c98 <HRTIM1_TIMF_IRQHandler+0x39c>
 8002d1e:	f44f 7108 	mov.w	r1, #544	; 0x220
 8002d22:	e7d2      	b.n	8002cca <HRTIM1_TIMF_IRQHandler+0x3ce>
 8002d24:	2320      	movs	r3, #32
 8002d26:	e7d7      	b.n	8002cd8 <HRTIM1_TIMF_IRQHandler+0x3dc>
 8002d28:	2320      	movs	r3, #32
 8002d2a:	e7e7      	b.n	8002cfc <HRTIM1_TIMF_IRQHandler+0x400>
 8002d2c:	40016800 	.word	0x40016800
 8002d30:	200005e0 	.word	0x200005e0
 8002d34:	200005e4 	.word	0x200005e4
 8002d38:	20000544 	.word	0x20000544
 8002d3c:	4001681c 	.word	0x4001681c
 8002d40:	080087ac 	.word	0x080087ac
 8002d44:	40016828 	.word	0x40016828

08002d48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d48:	b510      	push	{r4, lr}
 8002d4a:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d4c:	4a0c      	ldr	r2, [pc, #48]	; (8002d80 <_sbrk+0x38>)
 8002d4e:	490d      	ldr	r1, [pc, #52]	; (8002d84 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d50:	480d      	ldr	r0, [pc, #52]	; (8002d88 <_sbrk+0x40>)
 8002d52:	6800      	ldr	r0, [r0, #0]
 8002d54:	b140      	cbz	r0, 8002d68 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d56:	480c      	ldr	r0, [pc, #48]	; (8002d88 <_sbrk+0x40>)
 8002d58:	6800      	ldr	r0, [r0, #0]
 8002d5a:	4403      	add	r3, r0
 8002d5c:	1a52      	subs	r2, r2, r1
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d806      	bhi.n	8002d70 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8002d62:	4a09      	ldr	r2, [pc, #36]	; (8002d88 <_sbrk+0x40>)
 8002d64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8002d66:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8002d68:	4807      	ldr	r0, [pc, #28]	; (8002d88 <_sbrk+0x40>)
 8002d6a:	4c08      	ldr	r4, [pc, #32]	; (8002d8c <_sbrk+0x44>)
 8002d6c:	6004      	str	r4, [r0, #0]
 8002d6e:	e7f2      	b.n	8002d56 <_sbrk+0xe>
    errno = ENOMEM;
 8002d70:	f005 f84e 	bl	8007e10 <__errno>
 8002d74:	230c      	movs	r3, #12
 8002d76:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8002d78:	f04f 30ff 	mov.w	r0, #4294967295
 8002d7c:	e7f3      	b.n	8002d66 <_sbrk+0x1e>
 8002d7e:	bf00      	nop
 8002d80:	20020000 	.word	0x20020000
 8002d84:	00000400 	.word	0x00000400
 8002d88:	20000204 	.word	0x20000204
 8002d8c:	20006e50 	.word	0x20006e50

08002d90 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002d90:	4b05      	ldr	r3, [pc, #20]	; (8002da8 <SystemInit+0x18>)
 8002d92:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002d96:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8002d9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002d9e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002da2:	609a      	str	r2, [r3, #8]
#endif
}
 8002da4:	4770      	bx	lr
 8002da6:	bf00      	nop
 8002da8:	e000ed00 	.word	0xe000ed00

08002dac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002dac:	480d      	ldr	r0, [pc, #52]	; (8002de4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002dae:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002db0:	480d      	ldr	r0, [pc, #52]	; (8002de8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002db2:	490e      	ldr	r1, [pc, #56]	; (8002dec <LoopForever+0xa>)
  ldr r2, =_sidata
 8002db4:	4a0e      	ldr	r2, [pc, #56]	; (8002df0 <LoopForever+0xe>)
  movs r3, #0
 8002db6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002db8:	e002      	b.n	8002dc0 <LoopCopyDataInit>

08002dba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002dba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002dbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002dbe:	3304      	adds	r3, #4

08002dc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002dc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002dc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002dc4:	d3f9      	bcc.n	8002dba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002dc6:	4a0b      	ldr	r2, [pc, #44]	; (8002df4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002dc8:	4c0b      	ldr	r4, [pc, #44]	; (8002df8 <LoopForever+0x16>)
  movs r3, #0
 8002dca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002dcc:	e001      	b.n	8002dd2 <LoopFillZerobss>

08002dce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002dce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002dd0:	3204      	adds	r2, #4

08002dd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002dd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002dd4:	d3fb      	bcc.n	8002dce <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002dd6:	f7ff ffdb 	bl	8002d90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002dda:	f005 f81f 	bl	8007e1c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002dde:	f7ff fa8b 	bl	80022f8 <main>

08002de2 <LoopForever>:

LoopForever:
    b LoopForever
 8002de2:	e7fe      	b.n	8002de2 <LoopForever>
  ldr   r0, =_estack
 8002de4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002de8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002dec:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8002df0:	0800886c 	.word	0x0800886c
  ldr r2, =_sbss
 8002df4:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002df8:	20006e50 	.word	0x20006e50

08002dfc <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002dfc:	e7fe      	b.n	8002dfc <ADC3_IRQHandler>
	...

08002e00 <HAL_InitTick>:
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8002e00:	4b10      	ldr	r3, [pc, #64]	; (8002e44 <HAL_InitTick+0x44>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	b90b      	cbnz	r3, 8002e0a <HAL_InitTick+0xa>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8002e06:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8002e08:	4770      	bx	lr
{
 8002e0a:	b510      	push	{r4, lr}
 8002e0c:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002e0e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002e12:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e16:	4a0c      	ldr	r2, [pc, #48]	; (8002e48 <HAL_InitTick+0x48>)
 8002e18:	6810      	ldr	r0, [r2, #0]
 8002e1a:	fbb0 f0f3 	udiv	r0, r0, r3
 8002e1e:	f000 f8a1 	bl	8002f64 <HAL_SYSTICK_Config>
 8002e22:	b968      	cbnz	r0, 8002e40 <HAL_InitTick+0x40>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e24:	2c0f      	cmp	r4, #15
 8002e26:	d901      	bls.n	8002e2c <HAL_InitTick+0x2c>
        status = HAL_ERROR;
 8002e28:	2001      	movs	r0, #1
 8002e2a:	e00a      	b.n	8002e42 <HAL_InitTick+0x42>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	4621      	mov	r1, r4
 8002e30:	f04f 30ff 	mov.w	r0, #4294967295
 8002e34:	f000 f854 	bl	8002ee0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002e38:	4b04      	ldr	r3, [pc, #16]	; (8002e4c <HAL_InitTick+0x4c>)
 8002e3a:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 8002e3c:	2000      	movs	r0, #0
 8002e3e:	e000      	b.n	8002e42 <HAL_InitTick+0x42>
      status = HAL_ERROR;
 8002e40:	2001      	movs	r0, #1
}
 8002e42:	bd10      	pop	{r4, pc}
 8002e44:	20000004 	.word	0x20000004
 8002e48:	20000000 	.word	0x20000000
 8002e4c:	20000008 	.word	0x20000008

08002e50 <HAL_Init>:
{
 8002e50:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e52:	2003      	movs	r0, #3
 8002e54:	f000 f832 	bl	8002ebc <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002e58:	2000      	movs	r0, #0
 8002e5a:	f7ff ffd1 	bl	8002e00 <HAL_InitTick>
 8002e5e:	b110      	cbz	r0, 8002e66 <HAL_Init+0x16>
    status = HAL_ERROR;
 8002e60:	2401      	movs	r4, #1
}
 8002e62:	4620      	mov	r0, r4
 8002e64:	bd10      	pop	{r4, pc}
 8002e66:	4604      	mov	r4, r0
    HAL_MspInit();
 8002e68:	f7ff fb18 	bl	800249c <HAL_MspInit>
 8002e6c:	e7f9      	b.n	8002e62 <HAL_Init+0x12>
	...

08002e70 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002e70:	4a03      	ldr	r2, [pc, #12]	; (8002e80 <HAL_IncTick+0x10>)
 8002e72:	6813      	ldr	r3, [r2, #0]
 8002e74:	4903      	ldr	r1, [pc, #12]	; (8002e84 <HAL_IncTick+0x14>)
 8002e76:	6809      	ldr	r1, [r1, #0]
 8002e78:	440b      	add	r3, r1
 8002e7a:	6013      	str	r3, [r2, #0]
}
 8002e7c:	4770      	bx	lr
 8002e7e:	bf00      	nop
 8002e80:	20000664 	.word	0x20000664
 8002e84:	20000004 	.word	0x20000004

08002e88 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002e88:	4b01      	ldr	r3, [pc, #4]	; (8002e90 <HAL_GetTick+0x8>)
 8002e8a:	6818      	ldr	r0, [r3, #0]
}
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	20000664 	.word	0x20000664

08002e94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e94:	b538      	push	{r3, r4, r5, lr}
 8002e96:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002e98:	f7ff fff6 	bl	8002e88 <HAL_GetTick>
 8002e9c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e9e:	f1b4 3fff 	cmp.w	r4, #4294967295
 8002ea2:	d002      	beq.n	8002eaa <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ea4:	4b04      	ldr	r3, [pc, #16]	; (8002eb8 <HAL_Delay+0x24>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002eaa:	f7ff ffed 	bl	8002e88 <HAL_GetTick>
 8002eae:	1b40      	subs	r0, r0, r5
 8002eb0:	42a0      	cmp	r0, r4
 8002eb2:	d3fa      	bcc.n	8002eaa <HAL_Delay+0x16>
  {
  }
}
 8002eb4:	bd38      	pop	{r3, r4, r5, pc}
 8002eb6:	bf00      	nop
 8002eb8:	20000004 	.word	0x20000004

08002ebc <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ebc:	4a07      	ldr	r2, [pc, #28]	; (8002edc <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002ebe:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ec0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002ec4:	041b      	lsls	r3, r3, #16
 8002ec6:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ec8:	0200      	lsls	r0, r0, #8
 8002eca:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ece:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8002ed0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ed4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002ed8:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002eda:	4770      	bx	lr
 8002edc:	e000ed00 	.word	0xe000ed00

08002ee0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ee0:	b430      	push	{r4, r5}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ee2:	4b17      	ldr	r3, [pc, #92]	; (8002f40 <HAL_NVIC_SetPriority+0x60>)
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002eea:	f1c3 0407 	rsb	r4, r3, #7
 8002eee:	2c04      	cmp	r4, #4
 8002ef0:	bf28      	it	cs
 8002ef2:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ef4:	1d1d      	adds	r5, r3, #4
 8002ef6:	2d06      	cmp	r5, #6
 8002ef8:	d918      	bls.n	8002f2c <HAL_NVIC_SetPriority+0x4c>
 8002efa:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002efc:	f04f 35ff 	mov.w	r5, #4294967295
 8002f00:	fa05 f404 	lsl.w	r4, r5, r4
 8002f04:	ea21 0104 	bic.w	r1, r1, r4
 8002f08:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f0a:	fa05 f303 	lsl.w	r3, r5, r3
 8002f0e:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f12:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8002f14:	2800      	cmp	r0, #0
 8002f16:	db0b      	blt.n	8002f30 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f18:	0109      	lsls	r1, r1, #4
 8002f1a:	b2c9      	uxtb	r1, r1
 8002f1c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8002f20:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8002f24:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002f28:	bc30      	pop	{r4, r5}
 8002f2a:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	e7e5      	b.n	8002efc <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f30:	f000 000f 	and.w	r0, r0, #15
 8002f34:	0109      	lsls	r1, r1, #4
 8002f36:	b2c9      	uxtb	r1, r1
 8002f38:	4b02      	ldr	r3, [pc, #8]	; (8002f44 <HAL_NVIC_SetPriority+0x64>)
 8002f3a:	5419      	strb	r1, [r3, r0]
 8002f3c:	e7f4      	b.n	8002f28 <HAL_NVIC_SetPriority+0x48>
 8002f3e:	bf00      	nop
 8002f40:	e000ed00 	.word	0xe000ed00
 8002f44:	e000ed14 	.word	0xe000ed14

08002f48 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002f48:	2800      	cmp	r0, #0
 8002f4a:	db07      	blt.n	8002f5c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f4c:	f000 021f 	and.w	r2, r0, #31
 8002f50:	0940      	lsrs	r0, r0, #5
 8002f52:	2301      	movs	r3, #1
 8002f54:	4093      	lsls	r3, r2
 8002f56:	4a02      	ldr	r2, [pc, #8]	; (8002f60 <HAL_NVIC_EnableIRQ+0x18>)
 8002f58:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002f5c:	4770      	bx	lr
 8002f5e:	bf00      	nop
 8002f60:	e000e100 	.word	0xe000e100

08002f64 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f64:	3801      	subs	r0, #1
 8002f66:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002f6a:	d20a      	bcs.n	8002f82 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f6c:	4b06      	ldr	r3, [pc, #24]	; (8002f88 <HAL_SYSTICK_Config+0x24>)
 8002f6e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f70:	4a06      	ldr	r2, [pc, #24]	; (8002f8c <HAL_SYSTICK_Config+0x28>)
 8002f72:	21f0      	movs	r1, #240	; 0xf0
 8002f74:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f78:	2000      	movs	r0, #0
 8002f7a:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f7c:	2207      	movs	r2, #7
 8002f7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f80:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002f82:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002f84:	4770      	bx	lr
 8002f86:	bf00      	nop
 8002f88:	e000e010 	.word	0xe000e010
 8002f8c:	e000ed00 	.word	0xe000ed00

08002f90 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8002f90:	b410      	push	{r4}
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8002f92:	6802      	ldr	r2, [r0, #0]
 8002f94:	4b1d      	ldr	r3, [pc, #116]	; (800300c <FDCAN_CalcultateRamBlockAddresses+0x7c>)
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d02f      	beq.n	8002ffa <FDCAN_CalcultateRamBlockAddresses+0x6a>
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8002f9a:	491d      	ldr	r1, [pc, #116]	; (8003010 <FDCAN_CalcultateRamBlockAddresses+0x80>)
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8002f9c:	4b1d      	ldr	r3, [pc, #116]	; (8003014 <FDCAN_CalcultateRamBlockAddresses+0x84>)
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d02d      	beq.n	8002ffe <FDCAN_CalcultateRamBlockAddresses+0x6e>
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8002fa2:	6401      	str	r1, [r0, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8002fa4:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8002fa8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002fac:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8002fae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8002fb2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8002fb6:	f101 0370 	add.w	r3, r1, #112	; 0x70
 8002fba:	6443      	str	r3, [r0, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8002fbc:	6802      	ldr	r2, [r0, #0]
 8002fbe:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8002fc2:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8002fc6:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8002fc8:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
 8002fcc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8002fd0:	f101 03b0 	add.w	r3, r1, #176	; 0xb0
 8002fd4:	6483      	str	r3, [r0, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8002fd6:	f501 73c4 	add.w	r3, r1, #392	; 0x188
 8002fda:	64c3      	str	r3, [r0, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8002fdc:	f501 7318 	add.w	r3, r1, #608	; 0x260
 8002fe0:	6503      	str	r3, [r0, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8002fe2:	f501 731e 	add.w	r3, r1, #632	; 0x278
 8002fe6:	6543      	str	r3, [r0, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002fe8:	460b      	mov	r3, r1
 8002fea:	f501 7254 	add.w	r2, r1, #848	; 0x350
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d908      	bls.n	8003004 <FDCAN_CalcultateRamBlockAddresses+0x74>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f843 2b04 	str.w	r2, [r3], #4
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002ff8:	e7f7      	b.n	8002fea <FDCAN_CalcultateRamBlockAddresses+0x5a>
    SramCanInstanceBase += SRAMCAN_SIZE;
 8002ffa:	4907      	ldr	r1, [pc, #28]	; (8003018 <FDCAN_CalcultateRamBlockAddresses+0x88>)
 8002ffc:	e7ce      	b.n	8002f9c <FDCAN_CalcultateRamBlockAddresses+0xc>
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8002ffe:	f501 61d4 	add.w	r1, r1, #1696	; 0x6a0
 8003002:	e7ce      	b.n	8002fa2 <FDCAN_CalcultateRamBlockAddresses+0x12>
  }
}
 8003004:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003008:	4770      	bx	lr
 800300a:	bf00      	nop
 800300c:	40006800 	.word	0x40006800
 8003010:	4000a400 	.word	0x4000a400
 8003014:	40006c00 	.word	0x40006c00
 8003018:	4000a750 	.word	0x4000a750

0800301c <HAL_FDCAN_Init>:
  if (hfdcan == NULL)
 800301c:	2800      	cmp	r0, #0
 800301e:	f000 80e2 	beq.w	80031e6 <HAL_FDCAN_Init+0x1ca>
{
 8003022:	b538      	push	{r3, r4, r5, lr}
 8003024:	4604      	mov	r4, r0
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8003026:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 800302a:	b1d3      	cbz	r3, 8003062 <HAL_FDCAN_Init+0x46>
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800302c:	6822      	ldr	r2, [r4, #0]
 800302e:	6993      	ldr	r3, [r2, #24]
 8003030:	f023 0310 	bic.w	r3, r3, #16
 8003034:	6193      	str	r3, [r2, #24]
  tickstart = HAL_GetTick();
 8003036:	f7ff ff27 	bl	8002e88 <HAL_GetTick>
 800303a:	4605      	mov	r5, r0
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800303c:	6823      	ldr	r3, [r4, #0]
 800303e:	699a      	ldr	r2, [r3, #24]
 8003040:	f012 0f08 	tst.w	r2, #8
 8003044:	d012      	beq.n	800306c <HAL_FDCAN_Init+0x50>
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003046:	f7ff ff1f 	bl	8002e88 <HAL_GetTick>
 800304a:	1b40      	subs	r0, r0, r5
 800304c:	280a      	cmp	r0, #10
 800304e:	d9f5      	bls.n	800303c <HAL_FDCAN_Init+0x20>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003050:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003052:	f043 0301 	orr.w	r3, r3, #1
 8003056:	6623      	str	r3, [r4, #96]	; 0x60
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003058:	2303      	movs	r3, #3
 800305a:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
      return HAL_ERROR;
 800305e:	2001      	movs	r0, #1
}
 8003060:	bd38      	pop	{r3, r4, r5, pc}
    hfdcan->Lock = HAL_UNLOCKED;
 8003062:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
    HAL_FDCAN_MspInit(hfdcan);
 8003066:	f7ff fa35 	bl	80024d4 <HAL_FDCAN_MspInit>
 800306a:	e7df      	b.n	800302c <HAL_FDCAN_Init+0x10>
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800306c:	699a      	ldr	r2, [r3, #24]
 800306e:	f042 0201 	orr.w	r2, r2, #1
 8003072:	619a      	str	r2, [r3, #24]
  tickstart = HAL_GetTick();
 8003074:	f7ff ff08 	bl	8002e88 <HAL_GetTick>
 8003078:	4605      	mov	r5, r0
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800307a:	6823      	ldr	r3, [r4, #0]
 800307c:	699a      	ldr	r2, [r3, #24]
 800307e:	f012 0f01 	tst.w	r2, #1
 8003082:	d10d      	bne.n	80030a0 <HAL_FDCAN_Init+0x84>
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003084:	f7ff ff00 	bl	8002e88 <HAL_GetTick>
 8003088:	1b40      	subs	r0, r0, r5
 800308a:	280a      	cmp	r0, #10
 800308c:	d9f5      	bls.n	800307a <HAL_FDCAN_Init+0x5e>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800308e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003090:	f043 0301 	orr.w	r3, r3, #1
 8003094:	6623      	str	r3, [r4, #96]	; 0x60
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003096:	2303      	movs	r3, #3
 8003098:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
      return HAL_ERROR;
 800309c:	2001      	movs	r0, #1
 800309e:	e7df      	b.n	8003060 <HAL_FDCAN_Init+0x44>
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80030a0:	699a      	ldr	r2, [r3, #24]
 80030a2:	f042 0202 	orr.w	r2, r2, #2
 80030a6:	619a      	str	r2, [r3, #24]
  if (hfdcan->Instance == FDCAN1)
 80030a8:	6822      	ldr	r2, [r4, #0]
 80030aa:	4b50      	ldr	r3, [pc, #320]	; (80031ec <HAL_FDCAN_Init+0x1d0>)
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d042      	beq.n	8003136 <HAL_FDCAN_Init+0x11a>
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80030b0:	7c23      	ldrb	r3, [r4, #16]
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d044      	beq.n	8003140 <HAL_FDCAN_Init+0x124>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80030b6:	6822      	ldr	r2, [r4, #0]
 80030b8:	6993      	ldr	r3, [r2, #24]
 80030ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030be:	6193      	str	r3, [r2, #24]
  if (hfdcan->Init.TransmitPause == ENABLE)
 80030c0:	7c63      	ldrb	r3, [r4, #17]
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d042      	beq.n	800314c <HAL_FDCAN_Init+0x130>
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80030c6:	6822      	ldr	r2, [r4, #0]
 80030c8:	6993      	ldr	r3, [r2, #24]
 80030ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80030ce:	6193      	str	r3, [r2, #24]
  if (hfdcan->Init.ProtocolException == ENABLE)
 80030d0:	7ca3      	ldrb	r3, [r4, #18]
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d040      	beq.n	8003158 <HAL_FDCAN_Init+0x13c>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80030d6:	6822      	ldr	r2, [r4, #0]
 80030d8:	6993      	ldr	r3, [r2, #24]
 80030da:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80030de:	6193      	str	r3, [r2, #24]
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80030e0:	6822      	ldr	r2, [r4, #0]
 80030e2:	6993      	ldr	r3, [r2, #24]
 80030e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030e8:	68a1      	ldr	r1, [r4, #8]
 80030ea:	430b      	orrs	r3, r1
 80030ec:	6193      	str	r3, [r2, #24]
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80030ee:	6822      	ldr	r2, [r4, #0]
 80030f0:	6993      	ldr	r3, [r2, #24]
 80030f2:	f023 03a4 	bic.w	r3, r3, #164	; 0xa4
 80030f6:	6193      	str	r3, [r2, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80030f8:	6822      	ldr	r2, [r4, #0]
 80030fa:	6913      	ldr	r3, [r2, #16]
 80030fc:	f023 0310 	bic.w	r3, r3, #16
 8003100:	6113      	str	r3, [r2, #16]
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8003102:	68e3      	ldr	r3, [r4, #12]
 8003104:	2b01      	cmp	r3, #1
 8003106:	d02d      	beq.n	8003164 <HAL_FDCAN_Init+0x148>
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8003108:	2b00      	cmp	r3, #0
 800310a:	d030      	beq.n	800316e <HAL_FDCAN_Init+0x152>
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800310c:	2b02      	cmp	r3, #2
 800310e:	d053      	beq.n	80031b8 <HAL_FDCAN_Init+0x19c>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8003110:	6822      	ldr	r2, [r4, #0]
 8003112:	6993      	ldr	r3, [r2, #24]
 8003114:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003118:	6193      	str	r3, [r2, #24]
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800311a:	6822      	ldr	r2, [r4, #0]
 800311c:	6913      	ldr	r3, [r2, #16]
 800311e:	f043 0310 	orr.w	r3, r3, #16
 8003122:	6113      	str	r3, [r2, #16]
      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8003124:	68e3      	ldr	r3, [r4, #12]
 8003126:	2b03      	cmp	r3, #3
 8003128:	d121      	bne.n	800316e <HAL_FDCAN_Init+0x152>
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800312a:	6822      	ldr	r2, [r4, #0]
 800312c:	6993      	ldr	r3, [r2, #24]
 800312e:	f043 0320 	orr.w	r3, r3, #32
 8003132:	6193      	str	r3, [r2, #24]
 8003134:	e01b      	b.n	800316e <HAL_FDCAN_Init+0x152>
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8003136:	6862      	ldr	r2, [r4, #4]
 8003138:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800313c:	601a      	str	r2, [r3, #0]
 800313e:	e7b7      	b.n	80030b0 <HAL_FDCAN_Init+0x94>
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003140:	6822      	ldr	r2, [r4, #0]
 8003142:	6993      	ldr	r3, [r2, #24]
 8003144:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003148:	6193      	str	r3, [r2, #24]
 800314a:	e7b9      	b.n	80030c0 <HAL_FDCAN_Init+0xa4>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800314c:	6822      	ldr	r2, [r4, #0]
 800314e:	6993      	ldr	r3, [r2, #24]
 8003150:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003154:	6193      	str	r3, [r2, #24]
 8003156:	e7bb      	b.n	80030d0 <HAL_FDCAN_Init+0xb4>
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003158:	6822      	ldr	r2, [r4, #0]
 800315a:	6993      	ldr	r3, [r2, #24]
 800315c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003160:	6193      	str	r3, [r2, #24]
 8003162:	e7bd      	b.n	80030e0 <HAL_FDCAN_Init+0xc4>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8003164:	6822      	ldr	r2, [r4, #0]
 8003166:	6993      	ldr	r3, [r2, #24]
 8003168:	f043 0304 	orr.w	r3, r3, #4
 800316c:	6193      	str	r3, [r2, #24]
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800316e:	69a3      	ldr	r3, [r4, #24]
 8003170:	1e5a      	subs	r2, r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003172:	69e3      	ldr	r3, [r4, #28]
 8003174:	3b01      	subs	r3, #1
 8003176:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003178:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800317c:	6a22      	ldr	r2, [r4, #32]
 800317e:	3a01      	subs	r2, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003180:	4313      	orrs	r3, r2
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8003182:	6962      	ldr	r2, [r4, #20]
 8003184:	3a01      	subs	r2, #1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003186:	6821      	ldr	r1, [r4, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003188:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800318c:	61cb      	str	r3, [r1, #28]
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800318e:	68a3      	ldr	r3, [r4, #8]
 8003190:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003194:	d016      	beq.n	80031c4 <HAL_FDCAN_Init+0x1a8>
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8003196:	6822      	ldr	r2, [r4, #0]
 8003198:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 800319c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800319e:	430b      	orrs	r3, r1
 80031a0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80031a4:	4620      	mov	r0, r4
 80031a6:	f7ff fef3 	bl	8002f90 <FDCAN_CalcultateRamBlockAddresses>
  hfdcan->LatestTxFifoQRequest = 0U;
 80031aa:	2000      	movs	r0, #0
 80031ac:	65a0      	str	r0, [r4, #88]	; 0x58
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80031ae:	6620      	str	r0, [r4, #96]	; 0x60
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80031b0:	2301      	movs	r3, #1
 80031b2:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  return HAL_OK;
 80031b6:	e753      	b.n	8003060 <HAL_FDCAN_Init+0x44>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80031b8:	6822      	ldr	r2, [r4, #0]
 80031ba:	6993      	ldr	r3, [r2, #24]
 80031bc:	f043 0320 	orr.w	r3, r3, #32
 80031c0:	6193      	str	r3, [r2, #24]
 80031c2:	e7d4      	b.n	800316e <HAL_FDCAN_Init+0x152>
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80031c4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80031c6:	3b01      	subs	r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80031c8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80031ca:	3a01      	subs	r2, #1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80031cc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80031d0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80031d2:	3a01      	subs	r2, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80031d4:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80031d8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80031da:	3a01      	subs	r2, #1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80031dc:	6821      	ldr	r1, [r4, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80031de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80031e2:	60cb      	str	r3, [r1, #12]
 80031e4:	e7d7      	b.n	8003196 <HAL_FDCAN_Init+0x17a>
    return HAL_ERROR;
 80031e6:	2001      	movs	r0, #1
}
 80031e8:	4770      	bx	lr
 80031ea:	bf00      	nop
 80031ec:	40006400 	.word	0x40006400

080031f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031f2:	b083      	sub	sp, #12
  uint32_t position = 0x00U;
 80031f4:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80031f6:	e036      	b.n	8003266 <HAL_GPIO_Init+0x76>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80031f8:	2405      	movs	r4, #5
 80031fa:	e000      	b.n	80031fe <HAL_GPIO_Init+0xe>
 80031fc:	2400      	movs	r4, #0
 80031fe:	40b4      	lsls	r4, r6
 8003200:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003202:	3502      	adds	r5, #2
 8003204:	4e5f      	ldr	r6, [pc, #380]	; (8003384 <HAL_GPIO_Init+0x194>)
 8003206:	f846 4025 	str.w	r4, [r6, r5, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800320a:	4c5f      	ldr	r4, [pc, #380]	; (8003388 <HAL_GPIO_Init+0x198>)
 800320c:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 800320e:	43d4      	mvns	r4, r2
 8003210:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003214:	684f      	ldr	r7, [r1, #4]
 8003216:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 800321a:	d001      	beq.n	8003220 <HAL_GPIO_Init+0x30>
        {
          temp |= iocurrent;
 800321c:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->IMR1 = temp;
 8003220:	4d59      	ldr	r5, [pc, #356]	; (8003388 <HAL_GPIO_Init+0x198>)
 8003222:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR1;
 8003224:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8003226:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800322a:	684f      	ldr	r7, [r1, #4]
 800322c:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8003230:	d001      	beq.n	8003236 <HAL_GPIO_Init+0x46>
        {
          temp |= iocurrent;
 8003232:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR1 = temp;
 8003236:	4d54      	ldr	r5, [pc, #336]	; (8003388 <HAL_GPIO_Init+0x198>)
 8003238:	606e      	str	r6, [r5, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800323a:	68ad      	ldr	r5, [r5, #8]
        temp &= ~(iocurrent);
 800323c:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003240:	684f      	ldr	r7, [r1, #4]
 8003242:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8003246:	d001      	beq.n	800324c <HAL_GPIO_Init+0x5c>
        {
          temp |= iocurrent;
 8003248:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 800324c:	4d4e      	ldr	r5, [pc, #312]	; (8003388 <HAL_GPIO_Init+0x198>)
 800324e:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR1;
 8003250:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
 8003252:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003254:	684e      	ldr	r6, [r1, #4]
 8003256:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 800325a:	d001      	beq.n	8003260 <HAL_GPIO_Init+0x70>
        {
          temp |= iocurrent;
 800325c:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR1 = temp;
 8003260:	4a49      	ldr	r2, [pc, #292]	; (8003388 <HAL_GPIO_Init+0x198>)
 8003262:	60d4      	str	r4, [r2, #12]
      }
    }

    position++;
 8003264:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003266:	680a      	ldr	r2, [r1, #0]
 8003268:	fa32 f403 	lsrs.w	r4, r2, r3
 800326c:	f000 8087 	beq.w	800337e <HAL_GPIO_Init+0x18e>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003270:	2401      	movs	r4, #1
 8003272:	409c      	lsls	r4, r3
    if (iocurrent != 0x00u)
 8003274:	4022      	ands	r2, r4
 8003276:	d0f5      	beq.n	8003264 <HAL_GPIO_Init+0x74>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003278:	684d      	ldr	r5, [r1, #4]
 800327a:	1e6e      	subs	r6, r5, #1
 800327c:	2e01      	cmp	r6, #1
 800327e:	d903      	bls.n	8003288 <HAL_GPIO_Init+0x98>
 8003280:	2d11      	cmp	r5, #17
 8003282:	d001      	beq.n	8003288 <HAL_GPIO_Init+0x98>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003284:	2d12      	cmp	r5, #18
 8003286:	d112      	bne.n	80032ae <HAL_GPIO_Init+0xbe>
        temp = GPIOx->OSPEEDR;
 8003288:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800328a:	005f      	lsls	r7, r3, #1
 800328c:	2503      	movs	r5, #3
 800328e:	40bd      	lsls	r5, r7
 8003290:	ea26 0605 	bic.w	r6, r6, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003294:	68cd      	ldr	r5, [r1, #12]
 8003296:	40bd      	lsls	r5, r7
 8003298:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 800329a:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 800329c:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800329e:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80032a2:	684d      	ldr	r5, [r1, #4]
 80032a4:	f3c5 1400 	ubfx	r4, r5, #4, #1
 80032a8:	409c      	lsls	r4, r3
 80032aa:	4334      	orrs	r4, r6
        GPIOx->OTYPER = temp;
 80032ac:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 80032ae:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80032b0:	005e      	lsls	r6, r3, #1
 80032b2:	2503      	movs	r5, #3
 80032b4:	40b5      	lsls	r5, r6
 80032b6:	43ec      	mvns	r4, r5
 80032b8:	ea27 0705 	bic.w	r7, r7, r5
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032bc:	688d      	ldr	r5, [r1, #8]
 80032be:	40b5      	lsls	r5, r6
 80032c0:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80032c2:	60c5      	str	r5, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80032c4:	684d      	ldr	r5, [r1, #4]
 80032c6:	2d02      	cmp	r5, #2
 80032c8:	d001      	beq.n	80032ce <HAL_GPIO_Init+0xde>
 80032ca:	2d12      	cmp	r5, #18
 80032cc:	d113      	bne.n	80032f6 <HAL_GPIO_Init+0x106>
        temp = GPIOx->AFR[position >> 3U];
 80032ce:	08df      	lsrs	r7, r3, #3
 80032d0:	3708      	adds	r7, #8
 80032d2:	f850 e027 	ldr.w	lr, [r0, r7, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80032d6:	f003 0507 	and.w	r5, r3, #7
 80032da:	ea4f 0c85 	mov.w	ip, r5, lsl #2
 80032de:	250f      	movs	r5, #15
 80032e0:	fa05 f50c 	lsl.w	r5, r5, ip
 80032e4:	ea2e 0e05 	bic.w	lr, lr, r5
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80032e8:	690d      	ldr	r5, [r1, #16]
 80032ea:	fa05 f50c 	lsl.w	r5, r5, ip
 80032ee:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3U] = temp;
 80032f2:	f840 5027 	str.w	r5, [r0, r7, lsl #2]
      temp = GPIOx->MODER;
 80032f6:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80032f8:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80032fa:	684c      	ldr	r4, [r1, #4]
 80032fc:	f004 0403 	and.w	r4, r4, #3
 8003300:	40b4      	lsls	r4, r6
 8003302:	432c      	orrs	r4, r5
      GPIOx->MODER = temp;
 8003304:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003306:	684c      	ldr	r4, [r1, #4]
 8003308:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 800330c:	d0aa      	beq.n	8003264 <HAL_GPIO_Init+0x74>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800330e:	4c1f      	ldr	r4, [pc, #124]	; (800338c <HAL_GPIO_Init+0x19c>)
 8003310:	6e25      	ldr	r5, [r4, #96]	; 0x60
 8003312:	f045 0501 	orr.w	r5, r5, #1
 8003316:	6625      	str	r5, [r4, #96]	; 0x60
 8003318:	6e24      	ldr	r4, [r4, #96]	; 0x60
 800331a:	f004 0401 	and.w	r4, r4, #1
 800331e:	9401      	str	r4, [sp, #4]
 8003320:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8003322:	089d      	lsrs	r5, r3, #2
 8003324:	1cae      	adds	r6, r5, #2
 8003326:	4c17      	ldr	r4, [pc, #92]	; (8003384 <HAL_GPIO_Init+0x194>)
 8003328:	f854 7026 	ldr.w	r7, [r4, r6, lsl #2]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800332c:	f003 0403 	and.w	r4, r3, #3
 8003330:	00a6      	lsls	r6, r4, #2
 8003332:	240f      	movs	r4, #15
 8003334:	40b4      	lsls	r4, r6
 8003336:	ea27 0704 	bic.w	r7, r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800333a:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 800333e:	f43f af5d 	beq.w	80031fc <HAL_GPIO_Init+0xc>
 8003342:	4c13      	ldr	r4, [pc, #76]	; (8003390 <HAL_GPIO_Init+0x1a0>)
 8003344:	42a0      	cmp	r0, r4
 8003346:	d012      	beq.n	800336e <HAL_GPIO_Init+0x17e>
 8003348:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800334c:	42a0      	cmp	r0, r4
 800334e:	d010      	beq.n	8003372 <HAL_GPIO_Init+0x182>
 8003350:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003354:	42a0      	cmp	r0, r4
 8003356:	d00e      	beq.n	8003376 <HAL_GPIO_Init+0x186>
 8003358:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800335c:	42a0      	cmp	r0, r4
 800335e:	d00c      	beq.n	800337a <HAL_GPIO_Init+0x18a>
 8003360:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003364:	42a0      	cmp	r0, r4
 8003366:	f43f af47 	beq.w	80031f8 <HAL_GPIO_Init+0x8>
 800336a:	2406      	movs	r4, #6
 800336c:	e747      	b.n	80031fe <HAL_GPIO_Init+0xe>
 800336e:	2401      	movs	r4, #1
 8003370:	e745      	b.n	80031fe <HAL_GPIO_Init+0xe>
 8003372:	2402      	movs	r4, #2
 8003374:	e743      	b.n	80031fe <HAL_GPIO_Init+0xe>
 8003376:	2403      	movs	r4, #3
 8003378:	e741      	b.n	80031fe <HAL_GPIO_Init+0xe>
 800337a:	2404      	movs	r4, #4
 800337c:	e73f      	b.n	80031fe <HAL_GPIO_Init+0xe>
  }
}
 800337e:	b003      	add	sp, #12
 8003380:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003382:	bf00      	nop
 8003384:	40010000 	.word	0x40010000
 8003388:	40010400 	.word	0x40010400
 800338c:	40021000 	.word	0x40021000
 8003390:	48000400 	.word	0x48000400

08003394 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003394:	b10a      	cbz	r2, 800339a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003396:	6181      	str	r1, [r0, #24]
 8003398:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800339a:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 800339c:	4770      	bx	lr

0800339e <HAL_I2C_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800339e:	2800      	cmp	r0, #0
 80033a0:	d059      	beq.n	8003456 <HAL_I2C_Init+0xb8>
{
 80033a2:	b510      	push	{r4, lr}
 80033a4:	4604      	mov	r4, r0
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80033a6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d043      	beq.n	8003436 <HAL_I2C_Init+0x98>
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80033ae:	2324      	movs	r3, #36	; 0x24
 80033b0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80033b4:	6822      	ldr	r2, [r4, #0]
 80033b6:	6813      	ldr	r3, [r2, #0]
 80033b8:	f023 0301 	bic.w	r3, r3, #1
 80033bc:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80033be:	6863      	ldr	r3, [r4, #4]
 80033c0:	6822      	ldr	r2, [r4, #0]
 80033c2:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80033c6:	6113      	str	r3, [r2, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80033c8:	6822      	ldr	r2, [r4, #0]
 80033ca:	6893      	ldr	r3, [r2, #8]
 80033cc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80033d0:	6093      	str	r3, [r2, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80033d2:	68e3      	ldr	r3, [r4, #12]
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d033      	beq.n	8003440 <HAL_I2C_Init+0xa2>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80033d8:	68a3      	ldr	r3, [r4, #8]
 80033da:	6822      	ldr	r2, [r4, #0]
 80033dc:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 80033e0:	6093      	str	r3, [r2, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80033e2:	68e3      	ldr	r3, [r4, #12]
 80033e4:	2b02      	cmp	r3, #2
 80033e6:	d031      	beq.n	800344c <HAL_I2C_Init+0xae>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80033e8:	6822      	ldr	r2, [r4, #0]
 80033ea:	6853      	ldr	r3, [r2, #4]
 80033ec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80033f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033f4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80033f6:	6822      	ldr	r2, [r4, #0]
 80033f8:	68d3      	ldr	r3, [r2, #12]
 80033fa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80033fe:	60d3      	str	r3, [r2, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003400:	6923      	ldr	r3, [r4, #16]
 8003402:	6962      	ldr	r2, [r4, #20]
 8003404:	4313      	orrs	r3, r2
 8003406:	69a1      	ldr	r1, [r4, #24]
 8003408:	6822      	ldr	r2, [r4, #0]
 800340a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800340e:	60d3      	str	r3, [r2, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003410:	69e3      	ldr	r3, [r4, #28]
 8003412:	6a21      	ldr	r1, [r4, #32]
 8003414:	6822      	ldr	r2, [r4, #0]
 8003416:	430b      	orrs	r3, r1
 8003418:	6013      	str	r3, [r2, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800341a:	6822      	ldr	r2, [r4, #0]
 800341c:	6813      	ldr	r3, [r2, #0]
 800341e:	f043 0301 	orr.w	r3, r3, #1
 8003422:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003424:	2000      	movs	r0, #0
 8003426:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003428:	2320      	movs	r3, #32
 800342a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800342e:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003430:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42

  return HAL_OK;
}
 8003434:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8003436:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 800343a:	f7ff f881 	bl	8002540 <HAL_I2C_MspInit>
 800343e:	e7b6      	b.n	80033ae <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003440:	68a3      	ldr	r3, [r4, #8]
 8003442:	6822      	ldr	r2, [r4, #0]
 8003444:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003448:	6093      	str	r3, [r2, #8]
 800344a:	e7ca      	b.n	80033e2 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800344c:	6823      	ldr	r3, [r4, #0]
 800344e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003452:	605a      	str	r2, [r3, #4]
 8003454:	e7c8      	b.n	80033e8 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8003456:	2001      	movs	r0, #1
}
 8003458:	4770      	bx	lr

0800345a <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800345a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800345e:	b2db      	uxtb	r3, r3
 8003460:	2b20      	cmp	r3, #32
 8003462:	d124      	bne.n	80034ae <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003464:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8003468:	2b01      	cmp	r3, #1
 800346a:	d022      	beq.n	80034b2 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 800346c:	2301      	movs	r3, #1
 800346e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003472:	2324      	movs	r3, #36	; 0x24
 8003474:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003478:	6802      	ldr	r2, [r0, #0]
 800347a:	6813      	ldr	r3, [r2, #0]
 800347c:	f023 0301 	bic.w	r3, r3, #1
 8003480:	6013      	str	r3, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003482:	6802      	ldr	r2, [r0, #0]
 8003484:	6813      	ldr	r3, [r2, #0]
 8003486:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800348a:	6013      	str	r3, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800348c:	6802      	ldr	r2, [r0, #0]
 800348e:	6813      	ldr	r3, [r2, #0]
 8003490:	4319      	orrs	r1, r3
 8003492:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003494:	6802      	ldr	r2, [r0, #0]
 8003496:	6813      	ldr	r3, [r2, #0]
 8003498:	f043 0301 	orr.w	r3, r3, #1
 800349c:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800349e:	2320      	movs	r3, #32
 80034a0:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034a4:	2300      	movs	r3, #0
 80034a6:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80034aa:	4618      	mov	r0, r3
 80034ac:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 80034ae:	2002      	movs	r0, #2
 80034b0:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 80034b2:	2002      	movs	r0, #2
  }
}
 80034b4:	4770      	bx	lr

080034b6 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034b6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	2b20      	cmp	r3, #32
 80034be:	d122      	bne.n	8003506 <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034c0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d020      	beq.n	800350a <HAL_I2CEx_ConfigDigitalFilter+0x54>
 80034c8:	2301      	movs	r3, #1
 80034ca:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80034ce:	2324      	movs	r3, #36	; 0x24
 80034d0:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80034d4:	6802      	ldr	r2, [r0, #0]
 80034d6:	6813      	ldr	r3, [r2, #0]
 80034d8:	f023 0301 	bic.w	r3, r3, #1
 80034dc:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80034de:	6802      	ldr	r2, [r0, #0]
 80034e0:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80034e2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80034e6:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80034ea:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 80034ec:	6802      	ldr	r2, [r0, #0]
 80034ee:	6813      	ldr	r3, [r2, #0]
 80034f0:	f043 0301 	orr.w	r3, r3, #1
 80034f4:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034f6:	2320      	movs	r3, #32
 80034f8:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034fc:	2300      	movs	r3, #0
 80034fe:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8003502:	4618      	mov	r0, r3
 8003504:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8003506:	2002      	movs	r0, #2
 8003508:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 800350a:	2002      	movs	r0, #2
  }
}
 800350c:	4770      	bx	lr

0800350e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800350e:	b570      	push	{r4, r5, r6, lr}
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003510:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8003514:	d041      	beq.n	800359a <HAL_PCD_EP_DB_Receive+0x8c>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003516:	6804      	ldr	r4, [r0, #0]
 8003518:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 800351c:	780d      	ldrb	r5, [r1, #0]
 800351e:	00ee      	lsls	r6, r5, #3
 8003520:	fa16 f383 	uxtah	r3, r6, r3
 8003524:	4423      	add	r3, r4
 8003526:	f8b3 4402 	ldrh.w	r4, [r3, #1026]	; 0x402
 800352a:	f3c4 0409 	ubfx	r4, r4, #0, #10

    if (ep->xfer_len >= count)
 800352e:	698b      	ldr	r3, [r1, #24]
 8003530:	42a3      	cmp	r3, r4
 8003532:	d328      	bcc.n	8003586 <HAL_PCD_EP_DB_Receive+0x78>
    {
      ep->xfer_len -= count;
 8003534:	1b1b      	subs	r3, r3, r4
 8003536:	618b      	str	r3, [r1, #24]
    else
    {
      ep->xfer_len = 0U;
    }

    if (ep->xfer_len == 0U)
 8003538:	698b      	ldr	r3, [r1, #24]
 800353a:	b97b      	cbnz	r3, 800355c <HAL_PCD_EP_DB_Receive+0x4e>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800353c:	6806      	ldr	r6, [r0, #0]
 800353e:	f836 3025 	ldrh.w	r3, [r6, r5, lsl #2]
 8003542:	b29b      	uxth	r3, r3
 8003544:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003548:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800354c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003550:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003554:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003558:	f826 3025 	strh.w	r3, [r6, r5, lsl #2]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800355c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003560:	d00e      	beq.n	8003580 <HAL_PCD_EP_DB_Receive+0x72>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003562:	6802      	ldr	r2, [r0, #0]
 8003564:	780d      	ldrb	r5, [r1, #0]
 8003566:	f832 3025 	ldrh.w	r3, [r2, r5, lsl #2]
 800356a:	b29b      	uxth	r3, r3
 800356c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003570:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003574:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003578:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800357c:	f822 3025 	strh.w	r3, [r2, r5, lsl #2]
    }

    if (count != 0U)
 8003580:	b924      	cbnz	r4, 800358c <HAL_PCD_EP_DB_Receive+0x7e>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
    }
  }

  return count;
}
 8003582:	4620      	mov	r0, r4
 8003584:	bd70      	pop	{r4, r5, r6, pc}
      ep->xfer_len = 0U;
 8003586:	2300      	movs	r3, #0
 8003588:	618b      	str	r3, [r1, #24]
 800358a:	e7d5      	b.n	8003538 <HAL_PCD_EP_DB_Receive+0x2a>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800358c:	4623      	mov	r3, r4
 800358e:	890a      	ldrh	r2, [r1, #8]
 8003590:	6949      	ldr	r1, [r1, #20]
 8003592:	6800      	ldr	r0, [r0, #0]
 8003594:	f003 fac0 	bl	8006b18 <USB_ReadPMA>
 8003598:	e7f3      	b.n	8003582 <HAL_PCD_EP_DB_Receive+0x74>
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800359a:	6804      	ldr	r4, [r0, #0]
 800359c:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 80035a0:	780d      	ldrb	r5, [r1, #0]
 80035a2:	00ee      	lsls	r6, r5, #3
 80035a4:	fa16 f383 	uxtah	r3, r6, r3
 80035a8:	4423      	add	r3, r4
 80035aa:	f8b3 4406 	ldrh.w	r4, [r3, #1030]	; 0x406
 80035ae:	f3c4 0409 	ubfx	r4, r4, #0, #10
    if (ep->xfer_len >= count)
 80035b2:	698b      	ldr	r3, [r1, #24]
 80035b4:	42a3      	cmp	r3, r4
 80035b6:	d32e      	bcc.n	8003616 <HAL_PCD_EP_DB_Receive+0x108>
      ep->xfer_len -= count;
 80035b8:	1b1b      	subs	r3, r3, r4
 80035ba:	618b      	str	r3, [r1, #24]
    if (ep->xfer_len == 0U)
 80035bc:	698b      	ldr	r3, [r1, #24]
 80035be:	b97b      	cbnz	r3, 80035e0 <HAL_PCD_EP_DB_Receive+0xd2>
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80035c0:	6806      	ldr	r6, [r0, #0]
 80035c2:	f836 3025 	ldrh.w	r3, [r6, r5, lsl #2]
 80035c6:	b29b      	uxth	r3, r3
 80035c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80035cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035d0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80035d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035dc:	f826 3025 	strh.w	r3, [r6, r5, lsl #2]
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80035e0:	f012 0f40 	tst.w	r2, #64	; 0x40
 80035e4:	d10e      	bne.n	8003604 <HAL_PCD_EP_DB_Receive+0xf6>
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80035e6:	6802      	ldr	r2, [r0, #0]
 80035e8:	780d      	ldrb	r5, [r1, #0]
 80035ea:	f832 3025 	ldrh.w	r3, [r2, r5, lsl #2]
 80035ee:	b29b      	uxth	r3, r3
 80035f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035fc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003600:	f822 3025 	strh.w	r3, [r2, r5, lsl #2]
    if (count != 0U)
 8003604:	2c00      	cmp	r4, #0
 8003606:	d0bc      	beq.n	8003582 <HAL_PCD_EP_DB_Receive+0x74>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003608:	4623      	mov	r3, r4
 800360a:	894a      	ldrh	r2, [r1, #10]
 800360c:	6949      	ldr	r1, [r1, #20]
 800360e:	6800      	ldr	r0, [r0, #0]
 8003610:	f003 fa82 	bl	8006b18 <USB_ReadPMA>
 8003614:	e7b5      	b.n	8003582 <HAL_PCD_EP_DB_Receive+0x74>
      ep->xfer_len = 0U;
 8003616:	2300      	movs	r3, #0
 8003618:	618b      	str	r3, [r1, #24]
 800361a:	e7cf      	b.n	80035bc <HAL_PCD_EP_DB_Receive+0xae>

0800361c <HAL_PCD_Init>:
  if (hpcd == NULL)
 800361c:	2800      	cmp	r0, #0
 800361e:	d068      	beq.n	80036f2 <HAL_PCD_Init+0xd6>
{
 8003620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003622:	b087      	sub	sp, #28
 8003624:	4604      	mov	r4, r0
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003626:	f890 32a9 	ldrb.w	r3, [r0, #681]	; 0x2a9
 800362a:	b323      	cbz	r3, 8003676 <HAL_PCD_Init+0x5a>
  hpcd->State = HAL_PCD_STATE_BUSY;
 800362c:	2303      	movs	r3, #3
 800362e:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  __HAL_PCD_DISABLE(hpcd);
 8003632:	6820      	ldr	r0, [r4, #0]
 8003634:	f002 fad0 	bl	8005bd8 <USB_DisableGlobalInt>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003638:	2300      	movs	r3, #0
 800363a:	6860      	ldr	r0, [r4, #4]
 800363c:	4283      	cmp	r3, r0
 800363e:	d21f      	bcs.n	8003680 <HAL_PCD_Init+0x64>
    hpcd->IN_ep[i].is_in = 1U;
 8003640:	1c5a      	adds	r2, r3, #1
 8003642:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8003646:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 800364a:	2001      	movs	r0, #1
 800364c:	7048      	strb	r0, [r1, #1]
    hpcd->IN_ep[i].num = i;
 800364e:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8003652:	f804 3031 	strb.w	r3, [r4, r1, lsl #3]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003656:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800365a:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 800365e:	86cb      	strh	r3, [r1, #54]	; 0x36
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003660:	eb02 0582 	add.w	r5, r2, r2, lsl #2
 8003664:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8003668:	2000      	movs	r0, #0
 800366a:	70e8      	strb	r0, [r5, #3]
    hpcd->IN_ep[i].maxpacket = 0U;
 800366c:	6388      	str	r0, [r1, #56]	; 0x38
    hpcd->IN_ep[i].xfer_buff = 0U;
 800366e:	63c8      	str	r0, [r1, #60]	; 0x3c
    hpcd->IN_ep[i].xfer_len = 0U;
 8003670:	6408      	str	r0, [r1, #64]	; 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003672:	b2d3      	uxtb	r3, r2
 8003674:	e7e1      	b.n	800363a <HAL_PCD_Init+0x1e>
    hpcd->Lock = HAL_UNLOCKED;
 8003676:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
    HAL_PCD_MspInit(hpcd);
 800367a:	f004 fa7f 	bl	8007b7c <HAL_PCD_MspInit>
 800367e:	e7d5      	b.n	800362c <HAL_PCD_Init+0x10>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003680:	2300      	movs	r3, #0
 8003682:	e016      	b.n	80036b2 <HAL_PCD_Init+0x96>
    hpcd->OUT_ep[i].is_in = 0U;
 8003684:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8003688:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 800368c:	2100      	movs	r1, #0
 800368e:	f882 1169 	strb.w	r1, [r2, #361]	; 0x169
    hpcd->OUT_ep[i].num = i;
 8003692:	f882 3168 	strb.w	r3, [r2, #360]	; 0x168
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003696:	f882 116b 	strb.w	r1, [r2, #363]	; 0x16b
    hpcd->OUT_ep[i].maxpacket = 0U;
 800369a:	f8c2 1178 	str.w	r1, [r2, #376]	; 0x178
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800369e:	f8c2 117c 	str.w	r1, [r2, #380]	; 0x17c
    hpcd->OUT_ep[i].xfer_len = 0U;
 80036a2:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80036a6:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 80036aa:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036ae:	3301      	adds	r3, #1
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	4298      	cmp	r0, r3
 80036b4:	d8e6      	bhi.n	8003684 <HAL_PCD_Init+0x68>
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80036b6:	4625      	mov	r5, r4
 80036b8:	f855 7b10 	ldr.w	r7, [r5], #16
 80036bc:	466e      	mov	r6, sp
 80036be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80036c0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80036c2:	682b      	ldr	r3, [r5, #0]
 80036c4:	6033      	str	r3, [r6, #0]
 80036c6:	1d23      	adds	r3, r4, #4
 80036c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80036ca:	4638      	mov	r0, r7
 80036cc:	f002 fa8e 	bl	8005bec <USB_DevInit>
  hpcd->USB_Address = 0U;
 80036d0:	2300      	movs	r3, #0
 80036d2:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80036d6:	2301      	movs	r3, #1
 80036d8:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  if (hpcd->Init.lpm_enable == 1U)
 80036dc:	69e3      	ldr	r3, [r4, #28]
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d002      	beq.n	80036e8 <HAL_PCD_Init+0xcc>
  return HAL_OK;
 80036e2:	2000      	movs	r0, #0
}
 80036e4:	b007      	add	sp, #28
 80036e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80036e8:	4620      	mov	r0, r4
 80036ea:	f000 fe7a 	bl	80043e2 <HAL_PCDEx_ActivateLPM>
  return HAL_OK;
 80036ee:	2000      	movs	r0, #0
 80036f0:	e7f8      	b.n	80036e4 <HAL_PCD_Init+0xc8>
    return HAL_ERROR;
 80036f2:	2001      	movs	r0, #1
}
 80036f4:	4770      	bx	lr

080036f6 <HAL_PCD_Start>:
  __HAL_LOCK(hpcd);
 80036f6:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d00e      	beq.n	800371c <HAL_PCD_Start+0x26>
{
 80036fe:	b510      	push	{r4, lr}
 8003700:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8003702:	2301      	movs	r3, #1
 8003704:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8003708:	6800      	ldr	r0, [r0, #0]
 800370a:	f002 fa5c 	bl	8005bc6 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800370e:	6820      	ldr	r0, [r4, #0]
 8003710:	f002 fd87 	bl	8006222 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003714:	2000      	movs	r0, #0
 8003716:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 800371a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800371c:	2002      	movs	r0, #2
}
 800371e:	4770      	bx	lr

08003720 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003720:	b570      	push	{r4, r5, r6, lr}
 8003722:	4605      	mov	r5, r0
 8003724:	460c      	mov	r4, r1
 8003726:	4616      	mov	r6, r2
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003728:	f012 0f40 	tst.w	r2, #64	; 0x40
 800372c:	f000 8109 	beq.w	8003942 <HAL_PCD_EP_DB_Transmit+0x222>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003730:	6802      	ldr	r2, [r0, #0]
 8003732:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8003736:	7809      	ldrb	r1, [r1, #0]
 8003738:	00c8      	lsls	r0, r1, #3
 800373a:	fa10 f383 	uxtah	r3, r0, r3
 800373e:	4413      	add	r3, r2
 8003740:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 8003744:	f3c2 0209 	ubfx	r2, r2, #0, #10

    if (ep->xfer_len > TxByteNbre)
 8003748:	69a3      	ldr	r3, [r4, #24]
 800374a:	4293      	cmp	r3, r2
 800374c:	d951      	bls.n	80037f2 <HAL_PCD_EP_DB_Transmit+0xd2>
    {
      ep->xfer_len -= TxByteNbre;
 800374e:	1a9b      	subs	r3, r3, r2
 8003750:	61a3      	str	r3, [r4, #24]
    else
    {
      ep->xfer_len = 0U;
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003752:	69a3      	ldr	r3, [r4, #24]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d168      	bne.n	800382a <HAL_PCD_EP_DB_Transmit+0x10a>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003758:	7863      	ldrb	r3, [r4, #1]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d14c      	bne.n	80037f8 <HAL_PCD_EP_DB_Transmit+0xd8>
 800375e:	682a      	ldr	r2, [r5, #0]
 8003760:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8003764:	fa12 f383 	uxtah	r3, r2, r3
 8003768:	4403      	add	r3, r0
 800376a:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 800376e:	b292      	uxth	r2, r2
 8003770:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8003774:	b292      	uxth	r2, r2
 8003776:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800377a:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 800377e:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8003782:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8003786:	b292      	uxth	r2, r2
 8003788:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800378c:	6829      	ldr	r1, [r5, #0]
 800378e:	7862      	ldrb	r2, [r4, #1]
 8003790:	2a00      	cmp	r2, #0
 8003792:	d13d      	bne.n	8003810 <HAL_PCD_EP_DB_Transmit+0xf0>
 8003794:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 8003798:	fa11 f383 	uxtah	r3, r1, r3
 800379c:	7822      	ldrb	r2, [r4, #0]
 800379e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80037a2:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 80037a6:	b292      	uxth	r2, r2
 80037a8:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80037ac:	b292      	uxth	r2, r2
 80037ae:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 80037b2:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 80037b6:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80037ba:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80037be:	b292      	uxth	r2, r2
 80037c0:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80037c4:	7821      	ldrb	r1, [r4, #0]
 80037c6:	4628      	mov	r0, r5
 80037c8:	f004 fa0c 	bl	8007be4 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80037cc:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 80037d0:	d040      	beq.n	8003854 <HAL_PCD_EP_DB_Transmit+0x134>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80037d2:	682a      	ldr	r2, [r5, #0]
 80037d4:	7821      	ldrb	r1, [r4, #0]
 80037d6:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80037da:	b29b      	uxth	r3, r3
 80037dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80037e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037ec:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 80037f0:	e030      	b.n	8003854 <HAL_PCD_EP_DB_Transmit+0x134>
      ep->xfer_len = 0U;
 80037f2:	2300      	movs	r3, #0
 80037f4:	61a3      	str	r3, [r4, #24]
 80037f6:	e7ac      	b.n	8003752 <HAL_PCD_EP_DB_Transmit+0x32>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d1c7      	bne.n	800378c <HAL_PCD_EP_DB_Transmit+0x6c>
 80037fc:	682a      	ldr	r2, [r5, #0]
 80037fe:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8003802:	fa12 f383 	uxtah	r3, r2, r3
 8003806:	4403      	add	r3, r0
 8003808:	2200      	movs	r2, #0
 800380a:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800380e:	e7bd      	b.n	800378c <HAL_PCD_EP_DB_Transmit+0x6c>
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003810:	2a01      	cmp	r2, #1
 8003812:	d1d7      	bne.n	80037c4 <HAL_PCD_EP_DB_Transmit+0xa4>
 8003814:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 8003818:	fa11 f383 	uxtah	r3, r1, r3
 800381c:	7821      	ldrb	r1, [r4, #0]
 800381e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8003822:	2200      	movs	r2, #0
 8003824:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8003828:	e7cc      	b.n	80037c4 <HAL_PCD_EP_DB_Transmit+0xa4>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800382a:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 800382e:	d00d      	beq.n	800384c <HAL_PCD_EP_DB_Transmit+0x12c>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003830:	6828      	ldr	r0, [r5, #0]
 8003832:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8003836:	b29b      	uxth	r3, r3
 8003838:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800383c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003840:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003844:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003848:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800384c:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8003850:	2b01      	cmp	r3, #1
 8003852:	d012      	beq.n	800387a <HAL_PCD_EP_DB_Transmit+0x15a>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003854:	682a      	ldr	r2, [r5, #0]
 8003856:	7821      	ldrb	r1, [r4, #0]
 8003858:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800385c:	b29b      	uxth	r3, r3
 800385e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003862:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003866:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 800386a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800386e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003872:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
}
 8003876:	2000      	movs	r0, #0
 8003878:	bd70      	pop	{r4, r5, r6, pc}
        ep->xfer_buff += TxByteNbre;
 800387a:	6963      	ldr	r3, [r4, #20]
 800387c:	4413      	add	r3, r2
 800387e:	6163      	str	r3, [r4, #20]
        ep->xfer_count += TxByteNbre;
 8003880:	69e3      	ldr	r3, [r4, #28]
 8003882:	4413      	add	r3, r2
 8003884:	61e3      	str	r3, [r4, #28]
        if (ep->xfer_len_db >= ep->maxpacket)
 8003886:	6a21      	ldr	r1, [r4, #32]
 8003888:	6923      	ldr	r3, [r4, #16]
 800388a:	4299      	cmp	r1, r3
 800388c:	d31f      	bcc.n	80038ce <HAL_PCD_EP_DB_Transmit+0x1ae>
          ep->xfer_len_db -= len;
 800388e:	1ac9      	subs	r1, r1, r3
 8003890:	6221      	str	r1, [r4, #32]
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003892:	7862      	ldrb	r2, [r4, #1]
 8003894:	2a00      	cmp	r2, #0
 8003896:	d13f      	bne.n	8003918 <HAL_PCD_EP_DB_Transmit+0x1f8>
 8003898:	6829      	ldr	r1, [r5, #0]
 800389a:	f8b1 2050 	ldrh.w	r2, [r1, #80]	; 0x50
 800389e:	fa11 f282 	uxtah	r2, r1, r2
 80038a2:	7821      	ldrb	r1, [r4, #0]
 80038a4:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80038a8:	b9eb      	cbnz	r3, 80038e6 <HAL_PCD_EP_DB_Transmit+0x1c6>
 80038aa:	f8b2 1402 	ldrh.w	r1, [r2, #1026]	; 0x402
 80038ae:	b289      	uxth	r1, r1
 80038b0:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 80038b4:	b289      	uxth	r1, r1
 80038b6:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 80038ba:	f8b2 1402 	ldrh.w	r1, [r2, #1026]	; 0x402
 80038be:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 80038c2:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80038c6:	b289      	uxth	r1, r1
 80038c8:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 80038cc:	e026      	b.n	800391c <HAL_PCD_EP_DB_Transmit+0x1fc>
        else if (ep->xfer_len_db == 0U)
 80038ce:	b921      	cbnz	r1, 80038da <HAL_PCD_EP_DB_Transmit+0x1ba>
          ep->xfer_fill_db = 0U;
 80038d0:	2300      	movs	r3, #0
 80038d2:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          len = TxByteNbre;
 80038d6:	4613      	mov	r3, r2
 80038d8:	e7db      	b.n	8003892 <HAL_PCD_EP_DB_Transmit+0x172>
          ep->xfer_fill_db = 0U;
 80038da:	2300      	movs	r3, #0
 80038dc:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          ep->xfer_len_db = 0U;
 80038e0:	6223      	str	r3, [r4, #32]
          len = ep->xfer_len_db;
 80038e2:	460b      	mov	r3, r1
 80038e4:	e7d5      	b.n	8003892 <HAL_PCD_EP_DB_Transmit+0x172>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80038e6:	2b3e      	cmp	r3, #62	; 0x3e
 80038e8:	d809      	bhi.n	80038fe <HAL_PCD_EP_DB_Transmit+0x1de>
 80038ea:	0859      	lsrs	r1, r3, #1
 80038ec:	f013 0f01 	tst.w	r3, #1
 80038f0:	d000      	beq.n	80038f4 <HAL_PCD_EP_DB_Transmit+0x1d4>
 80038f2:	3101      	adds	r1, #1
 80038f4:	0289      	lsls	r1, r1, #10
 80038f6:	b289      	uxth	r1, r1
 80038f8:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 80038fc:	e00e      	b.n	800391c <HAL_PCD_EP_DB_Transmit+0x1fc>
 80038fe:	0959      	lsrs	r1, r3, #5
 8003900:	f013 0f1f 	tst.w	r3, #31
 8003904:	d100      	bne.n	8003908 <HAL_PCD_EP_DB_Transmit+0x1e8>
 8003906:	3901      	subs	r1, #1
 8003908:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 800390c:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8003910:	b289      	uxth	r1, r1
 8003912:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 8003916:	e001      	b.n	800391c <HAL_PCD_EP_DB_Transmit+0x1fc>
 8003918:	2a01      	cmp	r2, #1
 800391a:	d006      	beq.n	800392a <HAL_PCD_EP_DB_Transmit+0x20a>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800391c:	b29b      	uxth	r3, r3
 800391e:	8922      	ldrh	r2, [r4, #8]
 8003920:	6961      	ldr	r1, [r4, #20]
 8003922:	6828      	ldr	r0, [r5, #0]
 8003924:	f002 fc8c 	bl	8006240 <USB_WritePMA>
 8003928:	e794      	b.n	8003854 <HAL_PCD_EP_DB_Transmit+0x134>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800392a:	6829      	ldr	r1, [r5, #0]
 800392c:	f8b1 2050 	ldrh.w	r2, [r1, #80]	; 0x50
 8003930:	fa11 f282 	uxtah	r2, r1, r2
 8003934:	7821      	ldrb	r1, [r4, #0]
 8003936:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800393a:	b299      	uxth	r1, r3
 800393c:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 8003940:	e7ec      	b.n	800391c <HAL_PCD_EP_DB_Transmit+0x1fc>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003942:	6802      	ldr	r2, [r0, #0]
 8003944:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8003948:	7809      	ldrb	r1, [r1, #0]
 800394a:	00c8      	lsls	r0, r1, #3
 800394c:	fa10 f383 	uxtah	r3, r0, r3
 8003950:	4413      	add	r3, r2
 8003952:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8003956:	f3c2 0209 	ubfx	r2, r2, #0, #10
    if (ep->xfer_len >= TxByteNbre)
 800395a:	69a3      	ldr	r3, [r4, #24]
 800395c:	4293      	cmp	r3, r2
 800395e:	d352      	bcc.n	8003a06 <HAL_PCD_EP_DB_Transmit+0x2e6>
      ep->xfer_len -= TxByteNbre;
 8003960:	1a9b      	subs	r3, r3, r2
 8003962:	61a3      	str	r3, [r4, #24]
    if (ep->xfer_len == 0U)
 8003964:	69a3      	ldr	r3, [r4, #24]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d169      	bne.n	8003a3e <HAL_PCD_EP_DB_Transmit+0x31e>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800396a:	7863      	ldrb	r3, [r4, #1]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d14d      	bne.n	8003a0c <HAL_PCD_EP_DB_Transmit+0x2ec>
 8003970:	682a      	ldr	r2, [r5, #0]
 8003972:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8003976:	fa12 f383 	uxtah	r3, r2, r3
 800397a:	4418      	add	r0, r3
 800397c:	f8b0 3402 	ldrh.w	r3, [r0, #1026]	; 0x402
 8003980:	b29b      	uxth	r3, r3
 8003982:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003986:	b29b      	uxth	r3, r3
 8003988:	f8a0 3402 	strh.w	r3, [r0, #1026]	; 0x402
 800398c:	f8b0 3402 	ldrh.w	r3, [r0, #1026]	; 0x402
 8003990:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003994:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003998:	b29b      	uxth	r3, r3
 800399a:	f8a0 3402 	strh.w	r3, [r0, #1026]	; 0x402
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800399e:	6829      	ldr	r1, [r5, #0]
 80039a0:	7862      	ldrb	r2, [r4, #1]
 80039a2:	2a00      	cmp	r2, #0
 80039a4:	d13e      	bne.n	8003a24 <HAL_PCD_EP_DB_Transmit+0x304>
 80039a6:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 80039aa:	fa11 f383 	uxtah	r3, r1, r3
 80039ae:	7822      	ldrb	r2, [r4, #0]
 80039b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80039b4:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 80039b8:	b292      	uxth	r2, r2
 80039ba:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80039be:	b292      	uxth	r2, r2
 80039c0:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 80039c4:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 80039c8:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80039cc:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80039d0:	b292      	uxth	r2, r2
 80039d2:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80039d6:	7821      	ldrb	r1, [r4, #0]
 80039d8:	4628      	mov	r0, r5
 80039da:	f004 f903 	bl	8007be4 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80039de:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 80039e2:	f47f af37 	bne.w	8003854 <HAL_PCD_EP_DB_Transmit+0x134>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80039e6:	682a      	ldr	r2, [r5, #0]
 80039e8:	7821      	ldrb	r1, [r4, #0]
 80039ea:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80039fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a00:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8003a04:	e726      	b.n	8003854 <HAL_PCD_EP_DB_Transmit+0x134>
      ep->xfer_len = 0U;
 8003a06:	2300      	movs	r3, #0
 8003a08:	61a3      	str	r3, [r4, #24]
 8003a0a:	e7ab      	b.n	8003964 <HAL_PCD_EP_DB_Transmit+0x244>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d1c6      	bne.n	800399e <HAL_PCD_EP_DB_Transmit+0x27e>
 8003a10:	682a      	ldr	r2, [r5, #0]
 8003a12:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8003a16:	fa12 f383 	uxtah	r3, r2, r3
 8003a1a:	4418      	add	r0, r3
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	f8a0 3402 	strh.w	r3, [r0, #1026]	; 0x402
 8003a22:	e7bc      	b.n	800399e <HAL_PCD_EP_DB_Transmit+0x27e>
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003a24:	2a01      	cmp	r2, #1
 8003a26:	d1d6      	bne.n	80039d6 <HAL_PCD_EP_DB_Transmit+0x2b6>
 8003a28:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 8003a2c:	fa11 f383 	uxtah	r3, r1, r3
 8003a30:	7821      	ldrb	r1, [r4, #0]
 8003a32:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8003a36:	2200      	movs	r2, #0
 8003a38:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8003a3c:	e7cb      	b.n	80039d6 <HAL_PCD_EP_DB_Transmit+0x2b6>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003a3e:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 8003a42:	d10d      	bne.n	8003a60 <HAL_PCD_EP_DB_Transmit+0x340>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003a44:	6828      	ldr	r0, [r5, #0]
 8003a46:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a54:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a5c:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8003a60:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	f47f aef5 	bne.w	8003854 <HAL_PCD_EP_DB_Transmit+0x134>
        ep->xfer_buff += TxByteNbre;
 8003a6a:	6963      	ldr	r3, [r4, #20]
 8003a6c:	4413      	add	r3, r2
 8003a6e:	6163      	str	r3, [r4, #20]
        ep->xfer_count += TxByteNbre;
 8003a70:	69e3      	ldr	r3, [r4, #28]
 8003a72:	4413      	add	r3, r2
 8003a74:	61e3      	str	r3, [r4, #28]
        if (ep->xfer_len_db >= ep->maxpacket)
 8003a76:	6a21      	ldr	r1, [r4, #32]
 8003a78:	6923      	ldr	r3, [r4, #16]
 8003a7a:	4299      	cmp	r1, r3
 8003a7c:	d31f      	bcc.n	8003abe <HAL_PCD_EP_DB_Transmit+0x39e>
          ep->xfer_len_db -= len;
 8003a7e:	1ac9      	subs	r1, r1, r3
 8003a80:	6221      	str	r1, [r4, #32]
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003a82:	6829      	ldr	r1, [r5, #0]
 8003a84:	7862      	ldrb	r2, [r4, #1]
 8003a86:	2a00      	cmp	r2, #0
 8003a88:	d13e      	bne.n	8003b08 <HAL_PCD_EP_DB_Transmit+0x3e8>
 8003a8a:	f8b1 2050 	ldrh.w	r2, [r1, #80]	; 0x50
 8003a8e:	fa11 f282 	uxtah	r2, r1, r2
 8003a92:	7821      	ldrb	r1, [r4, #0]
 8003a94:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8003a98:	b9eb      	cbnz	r3, 8003ad6 <HAL_PCD_EP_DB_Transmit+0x3b6>
 8003a9a:	f8b2 1406 	ldrh.w	r1, [r2, #1030]	; 0x406
 8003a9e:	b289      	uxth	r1, r1
 8003aa0:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8003aa4:	b289      	uxth	r1, r1
 8003aa6:	f8a2 1406 	strh.w	r1, [r2, #1030]	; 0x406
 8003aaa:	f8b2 1406 	ldrh.w	r1, [r2, #1030]	; 0x406
 8003aae:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8003ab2:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8003ab6:	b289      	uxth	r1, r1
 8003ab8:	f8a2 1406 	strh.w	r1, [r2, #1030]	; 0x406
 8003abc:	e026      	b.n	8003b0c <HAL_PCD_EP_DB_Transmit+0x3ec>
        else if (ep->xfer_len_db == 0U)
 8003abe:	b921      	cbnz	r1, 8003aca <HAL_PCD_EP_DB_Transmit+0x3aa>
          ep->xfer_fill_db = 0U;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          len = TxByteNbre;
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	e7db      	b.n	8003a82 <HAL_PCD_EP_DB_Transmit+0x362>
          ep->xfer_len_db = 0U;
 8003aca:	2300      	movs	r3, #0
 8003acc:	6223      	str	r3, [r4, #32]
          ep->xfer_fill_db = 0;
 8003ace:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          len = ep->xfer_len_db;
 8003ad2:	460b      	mov	r3, r1
 8003ad4:	e7d5      	b.n	8003a82 <HAL_PCD_EP_DB_Transmit+0x362>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003ad6:	2b3e      	cmp	r3, #62	; 0x3e
 8003ad8:	d809      	bhi.n	8003aee <HAL_PCD_EP_DB_Transmit+0x3ce>
 8003ada:	0859      	lsrs	r1, r3, #1
 8003adc:	f013 0f01 	tst.w	r3, #1
 8003ae0:	d000      	beq.n	8003ae4 <HAL_PCD_EP_DB_Transmit+0x3c4>
 8003ae2:	3101      	adds	r1, #1
 8003ae4:	0289      	lsls	r1, r1, #10
 8003ae6:	b289      	uxth	r1, r1
 8003ae8:	f8a2 1406 	strh.w	r1, [r2, #1030]	; 0x406
 8003aec:	e00e      	b.n	8003b0c <HAL_PCD_EP_DB_Transmit+0x3ec>
 8003aee:	0959      	lsrs	r1, r3, #5
 8003af0:	f013 0f1f 	tst.w	r3, #31
 8003af4:	d100      	bne.n	8003af8 <HAL_PCD_EP_DB_Transmit+0x3d8>
 8003af6:	3901      	subs	r1, #1
 8003af8:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 8003afc:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8003b00:	b289      	uxth	r1, r1
 8003b02:	f8a2 1406 	strh.w	r1, [r2, #1030]	; 0x406
 8003b06:	e001      	b.n	8003b0c <HAL_PCD_EP_DB_Transmit+0x3ec>
 8003b08:	2a01      	cmp	r2, #1
 8003b0a:	d006      	beq.n	8003b1a <HAL_PCD_EP_DB_Transmit+0x3fa>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003b0c:	b29b      	uxth	r3, r3
 8003b0e:	8962      	ldrh	r2, [r4, #10]
 8003b10:	6961      	ldr	r1, [r4, #20]
 8003b12:	6828      	ldr	r0, [r5, #0]
 8003b14:	f002 fb94 	bl	8006240 <USB_WritePMA>
 8003b18:	e69c      	b.n	8003854 <HAL_PCD_EP_DB_Transmit+0x134>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003b1a:	f8b1 2050 	ldrh.w	r2, [r1, #80]	; 0x50
 8003b1e:	fa11 f282 	uxtah	r2, r1, r2
 8003b22:	7821      	ldrb	r1, [r4, #0]
 8003b24:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8003b28:	b299      	uxth	r1, r3
 8003b2a:	f8a2 1406 	strh.w	r1, [r2, #1030]	; 0x406
 8003b2e:	e7ed      	b.n	8003b0c <HAL_PCD_EP_DB_Transmit+0x3ec>

08003b30 <PCD_EP_ISR_Handler>:
{
 8003b30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b34:	4605      	mov	r5, r0
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003b36:	e195      	b.n	8003e64 <PCD_EP_ISR_Handler+0x334>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003b38:	8803      	ldrh	r3, [r0, #0]
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003b40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b4c:	b29b      	uxth	r3, r3
 8003b4e:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003b50:	6829      	ldr	r1, [r5, #0]
 8003b52:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 8003b56:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
 8003b5a:	00d2      	lsls	r2, r2, #3
 8003b5c:	fa12 f383 	uxtah	r3, r2, r3
 8003b60:	440b      	add	r3, r1
 8003b62:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 8003b66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b6a:	646b      	str	r3, [r5, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8003b6c:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8003b6e:	4413      	add	r3, r2
 8003b70:	63eb      	str	r3, [r5, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003b72:	2100      	movs	r1, #0
 8003b74:	4628      	mov	r0, r5
 8003b76:	f004 f835 	bl	8007be4 <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003b7a:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	f000 8170 	beq.w	8003e64 <PCD_EP_ISR_Handler+0x334>
 8003b84:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	f040 816c 	bne.w	8003e64 <PCD_EP_ISR_Handler+0x334>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003b8c:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 8003b90:	682a      	ldr	r2, [r5, #0]
 8003b92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b96:	f8a2 304c 	strh.w	r3, [r2, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 8003ba0:	e160      	b.n	8003e64 <PCD_EP_ISR_Handler+0x334>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003ba2:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003ba6:	f895 2168 	ldrb.w	r2, [r5, #360]	; 0x168
 8003baa:	00d2      	lsls	r2, r2, #3
 8003bac:	fa12 f383 	uxtah	r3, r2, r3
 8003bb0:	4403      	add	r3, r0
 8003bb2:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	; 0x406
 8003bb6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003bba:	f8c5 3184 	str.w	r3, [r5, #388]	; 0x184
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003bbe:	f8b5 216e 	ldrh.w	r2, [r5, #366]	; 0x16e
 8003bc2:	f505 712c 	add.w	r1, r5, #688	; 0x2b0
 8003bc6:	f002 ffa7 	bl	8006b18 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003bca:	682a      	ldr	r2, [r5, #0]
 8003bcc:	8813      	ldrh	r3, [r2, #0]
 8003bce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bd2:	051b      	lsls	r3, r3, #20
 8003bd4:	0d1b      	lsrs	r3, r3, #20
 8003bd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bda:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8003bdc:	4628      	mov	r0, r5
 8003bde:	f003 ffed 	bl	8007bbc <HAL_PCD_SetupStageCallback>
 8003be2:	e13f      	b.n	8003e64 <PCD_EP_ISR_Handler+0x334>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003be4:	2a3e      	cmp	r2, #62	; 0x3e
 8003be6:	d809      	bhi.n	8003bfc <PCD_EP_ISR_Handler+0xcc>
 8003be8:	0851      	lsrs	r1, r2, #1
 8003bea:	f012 0f01 	tst.w	r2, #1
 8003bee:	d000      	beq.n	8003bf2 <PCD_EP_ISR_Handler+0xc2>
 8003bf0:	3101      	adds	r1, #1
 8003bf2:	028a      	lsls	r2, r1, #10
 8003bf4:	b292      	uxth	r2, r2
 8003bf6:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8003bfa:	e196      	b.n	8003f2a <PCD_EP_ISR_Handler+0x3fa>
 8003bfc:	0951      	lsrs	r1, r2, #5
 8003bfe:	f012 0f1f 	tst.w	r2, #31
 8003c02:	d100      	bne.n	8003c06 <PCD_EP_ISR_Handler+0xd6>
 8003c04:	3901      	subs	r1, #1
 8003c06:	ea6f 62c1 	mvn.w	r2, r1, lsl #27
 8003c0a:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8003c0e:	b292      	uxth	r2, r2
 8003c10:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8003c14:	e189      	b.n	8003f2a <PCD_EP_ISR_Handler+0x3fa>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003c16:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8003c1a:	b29e      	uxth	r6, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003c1c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8003c20:	d14e      	bne.n	8003cc0 <PCD_EP_ISR_Handler+0x190>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003c22:	f016 0f80 	tst.w	r6, #128	; 0x80
 8003c26:	f000 811d 	beq.w	8003e64 <PCD_EP_ISR_Handler+0x334>
        ep = &hpcd->IN_ep[epindex];
 8003c2a:	1c62      	adds	r2, r4, #1
 8003c2c:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8003c30:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003c34:	6828      	ldr	r0, [r5, #0]
 8003c36:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003c40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
        if ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U))
 8003c52:	78cb      	ldrb	r3, [r1, #3]
 8003c54:	2b02      	cmp	r3, #2
 8003c56:	f040 8101 	bne.w	8003e5c <PCD_EP_ISR_Handler+0x32c>
 8003c5a:	f416 7f80 	tst.w	r6, #256	; 0x100
 8003c5e:	f040 80fd 	bne.w	8003e5c <PCD_EP_ISR_Handler+0x32c>
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003c62:	6828      	ldr	r0, [r5, #0]
 8003c64:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003c68:	1c62      	adds	r2, r4, #1
 8003c6a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003c6e:	f815 2032 	ldrb.w	r2, [r5, r2, lsl #3]
 8003c72:	00d2      	lsls	r2, r2, #3
 8003c74:	fa12 f383 	uxtah	r3, r2, r3
 8003c78:	4403      	add	r3, r0
 8003c7a:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 8003c7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
          if (ep->xfer_len > TxByteNbre)
 8003c82:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8003c86:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8003c8a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	f240 80d1 	bls.w	8003e34 <PCD_EP_ISR_Handler+0x304>
            ep->xfer_len -= TxByteNbre;
 8003c92:	eb04 0684 	add.w	r6, r4, r4, lsl #2
 8003c96:	eb05 06c6 	add.w	r6, r5, r6, lsl #3
 8003c9a:	1ad2      	subs	r2, r2, r3
 8003c9c:	6432      	str	r2, [r6, #64]	; 0x40
          if (ep->xfer_len == 0U)
 8003c9e:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8003ca2:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8003ca6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003ca8:	2a00      	cmp	r2, #0
 8003caa:	f040 80ca 	bne.w	8003e42 <PCD_EP_ISR_Handler+0x312>
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003cae:	3401      	adds	r4, #1
 8003cb0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8003cb4:	f815 1034 	ldrb.w	r1, [r5, r4, lsl #3]
 8003cb8:	4628      	mov	r0, r5
 8003cba:	f003 ff93 	bl	8007be4 <HAL_PCD_DataInStageCallback>
 8003cbe:	e0d1      	b.n	8003e64 <PCD_EP_ISR_Handler+0x334>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003cc0:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8003cc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cc8:	051b      	lsls	r3, r3, #20
 8003cca:	0d1b      	lsrs	r3, r3, #20
 8003ccc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cd0:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
        ep = &hpcd->OUT_ep[epindex];
 8003cd4:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8003cd8:	00c9      	lsls	r1, r1, #3
 8003cda:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 8003cde:	eb05 0801 	add.w	r8, r5, r1
        if (ep->doublebuffer == 0U)
 8003ce2:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8003ce6:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8003cea:	f893 3174 	ldrb.w	r3, [r3, #372]	; 0x174
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d140      	bne.n	8003d74 <PCD_EP_ISR_Handler+0x244>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003cf2:	6828      	ldr	r0, [r5, #0]
 8003cf4:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003cf8:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8003cfc:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8003d00:	f892 2168 	ldrb.w	r2, [r2, #360]	; 0x168
 8003d04:	00d2      	lsls	r2, r2, #3
 8003d06:	fa12 f383 	uxtah	r3, r2, r3
 8003d0a:	4403      	add	r3, r0
 8003d0c:	f8b3 7406 	ldrh.w	r7, [r3, #1030]	; 0x406
 8003d10:	f3c7 0709 	ubfx	r7, r7, #0, #10
          if (count != 0U)
 8003d14:	bb17      	cbnz	r7, 8003d5c <PCD_EP_ISR_Handler+0x22c>
        ep->xfer_count += count;
 8003d16:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8003d1a:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8003d1e:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 8003d22:	443a      	add	r2, r7
 8003d24:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
        ep->xfer_buff += count;
 8003d28:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 8003d2c:	443a      	add	r2, r7
 8003d2e:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003d32:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8003d36:	b13b      	cbz	r3, 8003d48 <PCD_EP_ISR_Handler+0x218>
 8003d38:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8003d3c:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8003d40:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8003d44:	429f      	cmp	r7, r3
 8003d46:	d270      	bcs.n	8003e2a <PCD_EP_ISR_Handler+0x2fa>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003d48:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8003d4c:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8003d50:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 8003d54:	4628      	mov	r0, r5
 8003d56:	f003 ff39 	bl	8007bcc <HAL_PCD_DataOutStageCallback>
 8003d5a:	e762      	b.n	8003c22 <PCD_EP_ISR_Handler+0xf2>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003d5c:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8003d60:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 8003d64:	463b      	mov	r3, r7
 8003d66:	f8b1 216e 	ldrh.w	r2, [r1, #366]	; 0x16e
 8003d6a:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8003d6e:	f002 fed3 	bl	8006b18 <USB_ReadPMA>
 8003d72:	e7d0      	b.n	8003d16 <PCD_EP_ISR_Handler+0x1e6>
          if (ep->type == EP_TYPE_BULK)
 8003d74:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8003d78:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8003d7c:	f893 316b 	ldrb.w	r3, [r3, #363]	; 0x16b
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	d033      	beq.n	8003dec <PCD_EP_ISR_Handler+0x2bc>
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003d84:	6829      	ldr	r1, [r5, #0]
 8003d86:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8003d8a:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8003d8e:	f892 0168 	ldrb.w	r0, [r2, #360]	; 0x168
 8003d92:	f831 3020 	ldrh.w	r3, [r1, r0, lsl #2]
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003da0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003da4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003da8:	f821 3020 	strh.w	r3, [r1, r0, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003dac:	6828      	ldr	r0, [r5, #0]
 8003dae:	f892 3168 	ldrb.w	r3, [r2, #360]	; 0x168
 8003db2:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003db6:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8003dba:	d01e      	beq.n	8003dfa <PCD_EP_ISR_Handler+0x2ca>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003dbc:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8003dc0:	00db      	lsls	r3, r3, #3
 8003dc2:	fa13 f382 	uxtah	r3, r3, r2
 8003dc6:	4403      	add	r3, r0
 8003dc8:	f8b3 7402 	ldrh.w	r7, [r3, #1026]	; 0x402
 8003dcc:	f3c7 0709 	ubfx	r7, r7, #0, #10
              if (count != 0U)
 8003dd0:	2f00      	cmp	r7, #0
 8003dd2:	d0a0      	beq.n	8003d16 <PCD_EP_ISR_Handler+0x1e6>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003dd4:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8003dd8:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 8003ddc:	463b      	mov	r3, r7
 8003dde:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 8003de2:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8003de6:	f002 fe97 	bl	8006b18 <USB_ReadPMA>
 8003dea:	e794      	b.n	8003d16 <PCD_EP_ISR_Handler+0x1e6>
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003dec:	4632      	mov	r2, r6
 8003dee:	4641      	mov	r1, r8
 8003df0:	4628      	mov	r0, r5
 8003df2:	f7ff fb8c 	bl	800350e <HAL_PCD_EP_DB_Receive>
 8003df6:	4607      	mov	r7, r0
 8003df8:	e78d      	b.n	8003d16 <PCD_EP_ISR_Handler+0x1e6>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003dfa:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8003dfe:	00db      	lsls	r3, r3, #3
 8003e00:	fa13 f382 	uxtah	r3, r3, r2
 8003e04:	4403      	add	r3, r0
 8003e06:	f8b3 7406 	ldrh.w	r7, [r3, #1030]	; 0x406
 8003e0a:	f3c7 0709 	ubfx	r7, r7, #0, #10
              if (count != 0U)
 8003e0e:	2f00      	cmp	r7, #0
 8003e10:	d081      	beq.n	8003d16 <PCD_EP_ISR_Handler+0x1e6>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003e12:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8003e16:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 8003e1a:	463b      	mov	r3, r7
 8003e1c:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 8003e20:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8003e24:	f002 fe78 	bl	8006b18 <USB_ReadPMA>
 8003e28:	e775      	b.n	8003d16 <PCD_EP_ISR_Handler+0x1e6>
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8003e2a:	4641      	mov	r1, r8
 8003e2c:	6828      	ldr	r0, [r5, #0]
 8003e2e:	f002 fa1a 	bl	8006266 <USB_EPStartXfer>
 8003e32:	e6f6      	b.n	8003c22 <PCD_EP_ISR_Handler+0xf2>
            ep->xfer_len = 0U;
 8003e34:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8003e38:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8003e3c:	2600      	movs	r6, #0
 8003e3e:	6416      	str	r6, [r2, #64]	; 0x40
 8003e40:	e72d      	b.n	8003c9e <PCD_EP_ISR_Handler+0x16e>
            ep->xfer_buff += TxByteNbre;
 8003e42:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8003e46:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8003e4a:	6bd6      	ldr	r6, [r2, #60]	; 0x3c
 8003e4c:	441e      	add	r6, r3
 8003e4e:	63d6      	str	r6, [r2, #60]	; 0x3c
            ep->xfer_count += TxByteNbre;
 8003e50:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8003e52:	4423      	add	r3, r4
 8003e54:	6453      	str	r3, [r2, #68]	; 0x44
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003e56:	f002 fa06 	bl	8006266 <USB_EPStartXfer>
 8003e5a:	e003      	b.n	8003e64 <PCD_EP_ISR_Handler+0x334>
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003e5c:	4632      	mov	r2, r6
 8003e5e:	4628      	mov	r0, r5
 8003e60:	f7ff fc5e 	bl	8003720 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003e64:	6828      	ldr	r0, [r5, #0]
 8003e66:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8003e6a:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8003e6e:	d06b      	beq.n	8003f48 <PCD_EP_ISR_Handler+0x418>
    wIstr = hpcd->Instance->ISTR;
 8003e70:	f8b0 4044 	ldrh.w	r4, [r0, #68]	; 0x44
 8003e74:	b2a3      	uxth	r3, r4
    if (epindex == 0U)
 8003e76:	f014 040f 	ands.w	r4, r4, #15
 8003e7a:	f47f aecc 	bne.w	8003c16 <PCD_EP_ISR_Handler+0xe6>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003e7e:	f013 0f10 	tst.w	r3, #16
 8003e82:	f43f ae59 	beq.w	8003b38 <PCD_EP_ISR_Handler+0x8>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003e86:	8803      	ldrh	r3, [r0, #0]
 8003e88:	b29a      	uxth	r2, r3
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003e8a:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8003e8e:	f47f ae88 	bne.w	8003ba2 <PCD_EP_ISR_Handler+0x72>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003e92:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8003e96:	d0e5      	beq.n	8003e64 <PCD_EP_ISR_Handler+0x334>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003e98:	8803      	ldrh	r3, [r0, #0]
 8003e9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e9e:	051b      	lsls	r3, r3, #20
 8003ea0:	0d1b      	lsrs	r3, r3, #20
 8003ea2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ea6:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003ea8:	6828      	ldr	r0, [r5, #0]
 8003eaa:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003eae:	f895 2168 	ldrb.w	r2, [r5, #360]	; 0x168
 8003eb2:	00d2      	lsls	r2, r2, #3
 8003eb4:	fa12 f383 	uxtah	r3, r2, r3
 8003eb8:	4403      	add	r3, r0
 8003eba:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	; 0x406
 8003ebe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ec2:	f8c5 3184 	str.w	r3, [r5, #388]	; 0x184
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003ec6:	b18b      	cbz	r3, 8003eec <PCD_EP_ISR_Handler+0x3bc>
 8003ec8:	f8d5 117c 	ldr.w	r1, [r5, #380]	; 0x17c
 8003ecc:	b171      	cbz	r1, 8003eec <PCD_EP_ISR_Handler+0x3bc>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003ece:	f8b5 216e 	ldrh.w	r2, [r5, #366]	; 0x16e
 8003ed2:	f002 fe21 	bl	8006b18 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8003ed6:	f8d5 2184 	ldr.w	r2, [r5, #388]	; 0x184
 8003eda:	f8d5 317c 	ldr.w	r3, [r5, #380]	; 0x17c
 8003ede:	4413      	add	r3, r2
 8003ee0:	f8c5 317c 	str.w	r3, [r5, #380]	; 0x17c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003ee4:	2100      	movs	r1, #0
 8003ee6:	4628      	mov	r0, r5
 8003ee8:	f003 fe70 	bl	8007bcc <HAL_PCD_DataOutStageCallback>
          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8003eec:	682b      	ldr	r3, [r5, #0]
 8003eee:	881a      	ldrh	r2, [r3, #0]
 8003ef0:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8003ef4:	d1b6      	bne.n	8003e64 <PCD_EP_ISR_Handler+0x334>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003ef6:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8003efa:	fa13 f382 	uxtah	r3, r3, r2
 8003efe:	f8d5 2178 	ldr.w	r2, [r5, #376]	; 0x178
 8003f02:	2a00      	cmp	r2, #0
 8003f04:	f47f ae6e 	bne.w	8003be4 <PCD_EP_ISR_Handler+0xb4>
 8003f08:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8003f0c:	b292      	uxth	r2, r2
 8003f0e:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8003f12:	b292      	uxth	r2, r2
 8003f14:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8003f18:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8003f1c:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8003f20:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8003f24:	b292      	uxth	r2, r2
 8003f26:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003f2a:	682a      	ldr	r2, [r5, #0]
 8003f2c:	8813      	ldrh	r3, [r2, #0]
 8003f2e:	b29b      	uxth	r3, r3
 8003f30:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f38:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8003f3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f44:	8013      	strh	r3, [r2, #0]
 8003f46:	e78d      	b.n	8003e64 <PCD_EP_ISR_Handler+0x334>
}
 8003f48:	2000      	movs	r0, #0
 8003f4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003f4e <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8003f4e:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	d00d      	beq.n	8003f72 <HAL_PCD_SetAddress+0x24>
{
 8003f56:	b510      	push	{r4, lr}
 8003f58:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8003f60:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003f64:	6800      	ldr	r0, [r0, #0]
 8003f66:	f002 f956 	bl	8006216 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003f6a:	2000      	movs	r0, #0
 8003f6c:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8003f70:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8003f72:	2002      	movs	r0, #2
}
 8003f74:	4770      	bx	lr

08003f76 <HAL_PCD_IRQHandler>:
{
 8003f76:	b510      	push	{r4, lr}
 8003f78:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8003f7a:	6800      	ldr	r0, [r0, #0]
 8003f7c:	f002 f95c 	bl	8006238 <USB_ReadInterrupts>
 8003f80:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8003f84:	f040 809b 	bne.w	80040be <HAL_PCD_IRQHandler+0x148>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8003f88:	6820      	ldr	r0, [r4, #0]
 8003f8a:	f002 f955 	bl	8006238 <USB_ReadInterrupts>
 8003f8e:	f410 6f80 	tst.w	r0, #1024	; 0x400
 8003f92:	f040 8098 	bne.w	80040c6 <HAL_PCD_IRQHandler+0x150>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8003f96:	6820      	ldr	r0, [r4, #0]
 8003f98:	f002 f94e 	bl	8006238 <USB_ReadInterrupts>
 8003f9c:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 8003fa0:	d008      	beq.n	8003fb4 <HAL_PCD_IRQHandler+0x3e>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003fa2:	6822      	ldr	r2, [r4, #0]
 8003fa4:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8003fa8:	b29b      	uxth	r3, r3
 8003faa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003fae:	b29b      	uxth	r3, r3
 8003fb0:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8003fb4:	6820      	ldr	r0, [r4, #0]
 8003fb6:	f002 f93f 	bl	8006238 <USB_ReadInterrupts>
 8003fba:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 8003fbe:	d008      	beq.n	8003fd2 <HAL_PCD_IRQHandler+0x5c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003fc0:	6822      	ldr	r2, [r4, #0]
 8003fc2:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8003fc6:	b29b      	uxth	r3, r3
 8003fc8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003fcc:	b29b      	uxth	r3, r3
 8003fce:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8003fd2:	6820      	ldr	r0, [r4, #0]
 8003fd4:	f002 f930 	bl	8006238 <USB_ReadInterrupts>
 8003fd8:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 8003fdc:	d021      	beq.n	8004022 <HAL_PCD_IRQHandler+0xac>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8003fde:	6822      	ldr	r2, [r4, #0]
 8003fe0:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8003fe4:	b29b      	uxth	r3, r3
 8003fe6:	f023 0304 	bic.w	r3, r3, #4
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003ff0:	6822      	ldr	r2, [r4, #0]
 8003ff2:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8003ff6:	b29b      	uxth	r3, r3
 8003ff8:	f023 0308 	bic.w	r3, r3, #8
 8003ffc:	b29b      	uxth	r3, r3
 8003ffe:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    if (hpcd->LPM_State == LPM_L1)
 8004002:	f894 32e0 	ldrb.w	r3, [r4, #736]	; 0x2e0
 8004006:	2b01      	cmp	r3, #1
 8004008:	d06e      	beq.n	80040e8 <HAL_PCD_IRQHandler+0x172>
    HAL_PCD_ResumeCallback(hpcd);
 800400a:	4620      	mov	r0, r4
 800400c:	f003 fe1e 	bl	8007c4c <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004010:	6822      	ldr	r2, [r4, #0]
 8004012:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8004016:	b29b      	uxth	r3, r3
 8004018:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800401c:	b29b      	uxth	r3, r3
 800401e:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8004022:	6820      	ldr	r0, [r4, #0]
 8004024:	f002 f908 	bl	8006238 <USB_ReadInterrupts>
 8004028:	f410 6f00 	tst.w	r0, #2048	; 0x800
 800402c:	d163      	bne.n	80040f6 <HAL_PCD_IRQHandler+0x180>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 800402e:	6820      	ldr	r0, [r4, #0]
 8004030:	f002 f902 	bl	8006238 <USB_ReadInterrupts>
 8004034:	f010 0f80 	tst.w	r0, #128	; 0x80
 8004038:	d02b      	beq.n	8004092 <HAL_PCD_IRQHandler+0x11c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800403a:	6822      	ldr	r2, [r4, #0]
 800403c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8004040:	b29b      	uxth	r3, r3
 8004042:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004046:	b29b      	uxth	r3, r3
 8004048:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 800404c:	f894 32e0 	ldrb.w	r3, [r4, #736]	; 0x2e0
 8004050:	2b00      	cmp	r3, #0
 8004052:	d16d      	bne.n	8004130 <HAL_PCD_IRQHandler+0x1ba>
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8004054:	6822      	ldr	r2, [r4, #0]
 8004056:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 800405a:	b29b      	uxth	r3, r3
 800405c:	f043 0304 	orr.w	r3, r3, #4
 8004060:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004064:	6822      	ldr	r2, [r4, #0]
 8004066:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 800406a:	b29b      	uxth	r3, r3
 800406c:	f043 0308 	orr.w	r3, r3, #8
 8004070:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
      hpcd->LPM_State = LPM_L1;
 8004074:	2101      	movs	r1, #1
 8004076:	f884 12e0 	strb.w	r1, [r4, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800407a:	6823      	ldr	r3, [r4, #0]
 800407c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004080:	f3c3 038d 	ubfx	r3, r3, #2, #14
 8004084:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8004088:	f8c4 32e4 	str.w	r3, [r4, #740]	; 0x2e4
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800408c:	4620      	mov	r0, r4
 800408e:	f003 fe95 	bl	8007dbc <HAL_PCDEx_LPM_Callback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8004092:	6820      	ldr	r0, [r4, #0]
 8004094:	f002 f8d0 	bl	8006238 <USB_ReadInterrupts>
 8004098:	f410 7f00 	tst.w	r0, #512	; 0x200
 800409c:	d14c      	bne.n	8004138 <HAL_PCD_IRQHandler+0x1c2>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800409e:	6820      	ldr	r0, [r4, #0]
 80040a0:	f002 f8ca 	bl	8006238 <USB_ReadInterrupts>
 80040a4:	f410 7f80 	tst.w	r0, #256	; 0x100
 80040a8:	d008      	beq.n	80040bc <HAL_PCD_IRQHandler+0x146>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80040aa:	6822      	ldr	r2, [r4, #0]
 80040ac:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80040b0:	b29b      	uxth	r3, r3
 80040b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 80040bc:	bd10      	pop	{r4, pc}
    (void)PCD_EP_ISR_Handler(hpcd);
 80040be:	4620      	mov	r0, r4
 80040c0:	f7ff fd36 	bl	8003b30 <PCD_EP_ISR_Handler>
 80040c4:	e760      	b.n	8003f88 <HAL_PCD_IRQHandler+0x12>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80040c6:	6822      	ldr	r2, [r4, #0]
 80040c8:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 80040d8:	4620      	mov	r0, r4
 80040da:	f003 fd94 	bl	8007c06 <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80040de:	2100      	movs	r1, #0
 80040e0:	4620      	mov	r0, r4
 80040e2:	f7ff ff34 	bl	8003f4e <HAL_PCD_SetAddress>
 80040e6:	e756      	b.n	8003f96 <HAL_PCD_IRQHandler+0x20>
      hpcd->LPM_State = LPM_L0;
 80040e8:	2100      	movs	r1, #0
 80040ea:	f884 12e0 	strb.w	r1, [r4, #736]	; 0x2e0
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80040ee:	4620      	mov	r0, r4
 80040f0:	f003 fe64 	bl	8007dbc <HAL_PCDEx_LPM_Callback>
 80040f4:	e789      	b.n	800400a <HAL_PCD_IRQHandler+0x94>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80040f6:	6822      	ldr	r2, [r4, #0]
 80040f8:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	f043 0308 	orr.w	r3, r3, #8
 8004102:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004106:	6822      	ldr	r2, [r4, #0]
 8004108:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800410c:	b29b      	uxth	r3, r3
 800410e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004112:	b29b      	uxth	r3, r3
 8004114:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8004118:	6822      	ldr	r2, [r4, #0]
 800411a:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 800411e:	b29b      	uxth	r3, r3
 8004120:	f043 0304 	orr.w	r3, r3, #4
 8004124:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 8004128:	4620      	mov	r0, r4
 800412a:	f003 fd7f 	bl	8007c2c <HAL_PCD_SuspendCallback>
 800412e:	e77e      	b.n	800402e <HAL_PCD_IRQHandler+0xb8>
      HAL_PCD_SuspendCallback(hpcd);
 8004130:	4620      	mov	r0, r4
 8004132:	f003 fd7b 	bl	8007c2c <HAL_PCD_SuspendCallback>
 8004136:	e7ac      	b.n	8004092 <HAL_PCD_IRQHandler+0x11c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004138:	6822      	ldr	r2, [r4, #0]
 800413a:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800413e:	b29b      	uxth	r3, r3
 8004140:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004144:	b29b      	uxth	r3, r3
 8004146:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 800414a:	4620      	mov	r0, r4
 800414c:	f003 fd55 	bl	8007bfa <HAL_PCD_SOFCallback>
 8004150:	e7a5      	b.n	800409e <HAL_PCD_IRQHandler+0x128>

08004152 <HAL_PCD_EP_Open>:
{
 8004152:	b570      	push	{r4, r5, r6, lr}
 8004154:	4605      	mov	r5, r0
 8004156:	460c      	mov	r4, r1
  if ((ep_addr & 0x80U) == 0x80U)
 8004158:	f011 0f80 	tst.w	r1, #128	; 0x80
 800415c:	d126      	bne.n	80041ac <HAL_PCD_EP_Open+0x5a>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800415e:	f001 0007 	and.w	r0, r1, #7
 8004162:	eb00 0180 	add.w	r1, r0, r0, lsl #2
 8004166:	00c9      	lsls	r1, r1, #3
 8004168:	f501 76b4 	add.w	r6, r1, #360	; 0x168
 800416c:	19a9      	adds	r1, r5, r6
    ep->is_in = 0U;
 800416e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004172:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
 8004176:	2600      	movs	r6, #0
 8004178:	f880 6169 	strb.w	r6, [r0, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 800417c:	f004 0407 	and.w	r4, r4, #7
 8004180:	700c      	strb	r4, [r1, #0]
  ep->maxpacket = ep_mps;
 8004182:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;
 8004184:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 8004186:	784a      	ldrb	r2, [r1, #1]
 8004188:	b102      	cbz	r2, 800418c <HAL_PCD_EP_Open+0x3a>
    ep->tx_fifo_num = ep->num;
 800418a:	81cc      	strh	r4, [r1, #14]
  if (ep_type == EP_TYPE_BULK)
 800418c:	2b02      	cmp	r3, #2
 800418e:	d017      	beq.n	80041c0 <HAL_PCD_EP_Open+0x6e>
  __HAL_LOCK(hpcd);
 8004190:	f895 32a8 	ldrb.w	r3, [r5, #680]	; 0x2a8
 8004194:	2b01      	cmp	r3, #1
 8004196:	d016      	beq.n	80041c6 <HAL_PCD_EP_Open+0x74>
 8004198:	2301      	movs	r3, #1
 800419a:	f885 32a8 	strb.w	r3, [r5, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800419e:	6828      	ldr	r0, [r5, #0]
 80041a0:	f001 fd38 	bl	8005c14 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80041a4:	2000      	movs	r0, #0
 80041a6:	f885 02a8 	strb.w	r0, [r5, #680]	; 0x2a8
}
 80041aa:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041ac:	f001 0007 	and.w	r0, r1, #7
 80041b0:	3001      	adds	r0, #1
 80041b2:	eb00 0180 	add.w	r1, r0, r0, lsl #2
 80041b6:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
    ep->is_in = 1U;
 80041ba:	2601      	movs	r6, #1
 80041bc:	704e      	strb	r6, [r1, #1]
 80041be:	e7dd      	b.n	800417c <HAL_PCD_EP_Open+0x2a>
    ep->data_pid_start = 0U;
 80041c0:	2300      	movs	r3, #0
 80041c2:	710b      	strb	r3, [r1, #4]
 80041c4:	e7e4      	b.n	8004190 <HAL_PCD_EP_Open+0x3e>
  __HAL_LOCK(hpcd);
 80041c6:	2002      	movs	r0, #2
 80041c8:	e7ef      	b.n	80041aa <HAL_PCD_EP_Open+0x58>

080041ca <HAL_PCD_EP_Close>:
{
 80041ca:	b510      	push	{r4, lr}
 80041cc:	4604      	mov	r4, r0
 80041ce:	460b      	mov	r3, r1
  if ((ep_addr & 0x80U) == 0x80U)
 80041d0:	f011 0f80 	tst.w	r1, #128	; 0x80
 80041d4:	d11f      	bne.n	8004216 <HAL_PCD_EP_Close+0x4c>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80041d6:	f001 0207 	and.w	r2, r1, #7
 80041da:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 80041de:	00c9      	lsls	r1, r1, #3
 80041e0:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 80041e4:	4401      	add	r1, r0
    ep->is_in = 0U;
 80041e6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80041ea:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 80041ee:	2000      	movs	r0, #0
 80041f0:	f882 0169 	strb.w	r0, [r2, #361]	; 0x169
  ep->num   = ep_addr & EP_ADDR_MSK;
 80041f4:	f003 0307 	and.w	r3, r3, #7
 80041f8:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 80041fa:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d013      	beq.n	800422a <HAL_PCD_EP_Close+0x60>
 8004202:	2301      	movs	r3, #1
 8004204:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004208:	6820      	ldr	r0, [r4, #0]
 800420a:	f001 fea3 	bl	8005f54 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800420e:	2000      	movs	r0, #0
 8004210:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8004214:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004216:	f001 0207 	and.w	r2, r1, #7
 800421a:	3201      	adds	r2, #1
 800421c:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8004220:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 8004224:	2001      	movs	r0, #1
 8004226:	7048      	strb	r0, [r1, #1]
 8004228:	e7e4      	b.n	80041f4 <HAL_PCD_EP_Close+0x2a>
  __HAL_LOCK(hpcd);
 800422a:	2002      	movs	r0, #2
 800422c:	e7f2      	b.n	8004214 <HAL_PCD_EP_Close+0x4a>

0800422e <HAL_PCD_EP_Receive>:
{
 800422e:	b538      	push	{r3, r4, r5, lr}
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004230:	f001 0407 	and.w	r4, r1, #7
 8004234:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8004238:	00c9      	lsls	r1, r1, #3
 800423a:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 800423e:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;
 8004240:	eb04 0584 	add.w	r5, r4, r4, lsl #2
 8004244:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
 8004248:	f8c5 217c 	str.w	r2, [r5, #380]	; 0x17c
  ep->xfer_len = len;
 800424c:	f8c5 3180 	str.w	r3, [r5, #384]	; 0x180
  ep->xfer_count = 0U;
 8004250:	2300      	movs	r3, #0
 8004252:	f8c5 3184 	str.w	r3, [r5, #388]	; 0x184
  ep->is_in = 0U;
 8004256:	f885 3169 	strb.w	r3, [r5, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 800425a:	f885 4168 	strb.w	r4, [r5, #360]	; 0x168
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800425e:	b924      	cbnz	r4, 800426a <HAL_PCD_EP_Receive+0x3c>
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004260:	6800      	ldr	r0, [r0, #0]
 8004262:	f002 f800 	bl	8006266 <USB_EPStartXfer>
}
 8004266:	2000      	movs	r0, #0
 8004268:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800426a:	6800      	ldr	r0, [r0, #0]
 800426c:	f001 fffb 	bl	8006266 <USB_EPStartXfer>
 8004270:	e7f9      	b.n	8004266 <HAL_PCD_EP_Receive+0x38>

08004272 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004272:	f001 0107 	and.w	r1, r1, #7
 8004276:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800427a:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
}
 800427e:	f8d1 0184 	ldr.w	r0, [r1, #388]	; 0x184
 8004282:	4770      	bx	lr

08004284 <HAL_PCD_EP_Transmit>:
{
 8004284:	b570      	push	{r4, r5, r6, lr}
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004286:	f001 0507 	and.w	r5, r1, #7
 800428a:	1c6c      	adds	r4, r5, #1
 800428c:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8004290:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
  ep->xfer_buff = pBuf;
 8004294:	eb05 0685 	add.w	r6, r5, r5, lsl #2
 8004298:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 800429c:	63f2      	str	r2, [r6, #60]	; 0x3c
  ep->xfer_len = len;
 800429e:	6433      	str	r3, [r6, #64]	; 0x40
  ep->xfer_fill_db = 1U;
 80042a0:	2201      	movs	r2, #1
 80042a2:	f886 204c 	strb.w	r2, [r6, #76]	; 0x4c
  ep->xfer_len_db = len;
 80042a6:	64b3      	str	r3, [r6, #72]	; 0x48
  ep->xfer_count = 0U;
 80042a8:	2300      	movs	r3, #0
 80042aa:	6473      	str	r3, [r6, #68]	; 0x44
  ep->is_in = 1U;
 80042ac:	704a      	strb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80042ae:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80042b2:	f800 5034 	strb.w	r5, [r0, r4, lsl #3]
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80042b6:	b925      	cbnz	r5, 80042c2 <HAL_PCD_EP_Transmit+0x3e>
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80042b8:	6800      	ldr	r0, [r0, #0]
 80042ba:	f001 ffd4 	bl	8006266 <USB_EPStartXfer>
}
 80042be:	2000      	movs	r0, #0
 80042c0:	bd70      	pop	{r4, r5, r6, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80042c2:	6800      	ldr	r0, [r0, #0]
 80042c4:	f001 ffcf 	bl	8006266 <USB_EPStartXfer>
 80042c8:	e7f9      	b.n	80042be <HAL_PCD_EP_Transmit+0x3a>

080042ca <HAL_PCD_EP_SetStall>:
{
 80042ca:	460b      	mov	r3, r1
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80042cc:	f001 0207 	and.w	r2, r1, #7
 80042d0:	6841      	ldr	r1, [r0, #4]
 80042d2:	428a      	cmp	r2, r1
 80042d4:	d82a      	bhi.n	800432c <HAL_PCD_EP_SetStall+0x62>
{
 80042d6:	b510      	push	{r4, lr}
 80042d8:	4604      	mov	r4, r0
  if ((0x80U & ep_addr) == 0x80U)
 80042da:	f013 0f80 	tst.w	r3, #128	; 0x80
 80042de:	d11d      	bne.n	800431c <HAL_PCD_EP_SetStall+0x52>
    ep = &hpcd->OUT_ep[ep_addr];
 80042e0:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80042e4:	00c9      	lsls	r1, r1, #3
 80042e6:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 80042ea:	4401      	add	r1, r0
    ep->is_in = 0U;
 80042ec:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80042f0:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 80042f4:	2000      	movs	r0, #0
 80042f6:	f883 0169 	strb.w	r0, [r3, #361]	; 0x169
  ep->is_stall = 1U;
 80042fa:	2301      	movs	r3, #1
 80042fc:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80042fe:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8004300:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8004304:	2b01      	cmp	r3, #1
 8004306:	d013      	beq.n	8004330 <HAL_PCD_EP_SetStall+0x66>
 8004308:	2301      	movs	r3, #1
 800430a:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800430e:	6820      	ldr	r0, [r4, #0]
 8004310:	f001 ff0b 	bl	800612a <USB_EPSetStall>
  __HAL_UNLOCK(hpcd);
 8004314:	2000      	movs	r0, #0
 8004316:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 800431a:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800431c:	1c53      	adds	r3, r2, #1
 800431e:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8004322:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 8004326:	2001      	movs	r0, #1
 8004328:	7048      	strb	r0, [r1, #1]
 800432a:	e7e6      	b.n	80042fa <HAL_PCD_EP_SetStall+0x30>
    return HAL_ERROR;
 800432c:	2001      	movs	r0, #1
}
 800432e:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 8004330:	2002      	movs	r0, #2
 8004332:	e7f2      	b.n	800431a <HAL_PCD_EP_SetStall+0x50>

08004334 <HAL_PCD_EP_ClrStall>:
{
 8004334:	460b      	mov	r3, r1
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004336:	f001 010f 	and.w	r1, r1, #15
 800433a:	6842      	ldr	r2, [r0, #4]
 800433c:	4291      	cmp	r1, r2
 800433e:	d830      	bhi.n	80043a2 <HAL_PCD_EP_ClrStall+0x6e>
{
 8004340:	b510      	push	{r4, lr}
 8004342:	4604      	mov	r4, r0
  if ((0x80U & ep_addr) == 0x80U)
 8004344:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004348:	d121      	bne.n	800438e <HAL_PCD_EP_ClrStall+0x5a>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800434a:	f003 0207 	and.w	r2, r3, #7
 800434e:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8004352:	00c9      	lsls	r1, r1, #3
 8004354:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 8004358:	4401      	add	r1, r0
    ep->is_in = 0U;
 800435a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800435e:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8004362:	2000      	movs	r0, #0
 8004364:	f882 0169 	strb.w	r0, [r2, #361]	; 0x169
  ep->is_stall = 0U;
 8004368:	2200      	movs	r2, #0
 800436a:	708a      	strb	r2, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800436c:	f003 0307 	and.w	r3, r3, #7
 8004370:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8004372:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8004376:	2b01      	cmp	r3, #1
 8004378:	d015      	beq.n	80043a6 <HAL_PCD_EP_ClrStall+0x72>
 800437a:	2301      	movs	r3, #1
 800437c:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004380:	6820      	ldr	r0, [r4, #0]
 8004382:	f001 fef7 	bl	8006174 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004386:	2000      	movs	r0, #0
 8004388:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 800438c:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800438e:	f003 0207 	and.w	r2, r3, #7
 8004392:	3201      	adds	r2, #1
 8004394:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8004398:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 800439c:	2001      	movs	r0, #1
 800439e:	7048      	strb	r0, [r1, #1]
 80043a0:	e7e2      	b.n	8004368 <HAL_PCD_EP_ClrStall+0x34>
    return HAL_ERROR;
 80043a2:	2001      	movs	r0, #1
}
 80043a4:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 80043a6:	2002      	movs	r0, #2
 80043a8:	e7f0      	b.n	800438c <HAL_PCD_EP_ClrStall+0x58>

080043aa <HAL_PCDEx_PMAConfig>:
                                       uint16_t ep_kind, uint32_t pmaadress)
{
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80043aa:	f011 0f80 	tst.w	r1, #128	; 0x80
 80043ae:	d00b      	beq.n	80043c8 <HAL_PCDEx_PMAConfig+0x1e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043b0:	f001 0107 	and.w	r1, r1, #7
 80043b4:	3101      	adds	r1, #1
 80043b6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80043ba:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80043be:	b952      	cbnz	r2, 80043d6 <HAL_PCDEx_PMAConfig+0x2c>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80043c0:	730a      	strb	r2, [r1, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80043c2:	80cb      	strh	r3, [r1, #6]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }

  return HAL_OK;
}
 80043c4:	2000      	movs	r0, #0
 80043c6:	4770      	bx	lr
    ep = &hpcd->OUT_ep[ep_addr];
 80043c8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80043cc:	00c9      	lsls	r1, r1, #3
 80043ce:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 80043d2:	4401      	add	r1, r0
 80043d4:	e7f3      	b.n	80043be <HAL_PCDEx_PMAConfig+0x14>
    ep->doublebuffer = 1U;
 80043d6:	2201      	movs	r2, #1
 80043d8:	730a      	strb	r2, [r1, #12]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80043da:	810b      	strh	r3, [r1, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80043dc:	0c1b      	lsrs	r3, r3, #16
 80043de:	814b      	strh	r3, [r1, #10]
 80043e0:	e7f0      	b.n	80043c4 <HAL_PCDEx_PMAConfig+0x1a>

080043e2 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80043e2:	4603      	mov	r3, r0

  USB_TypeDef *USBx = hpcd->Instance;
 80043e4:	6802      	ldr	r2, [r0, #0]
  hpcd->lpm_active = 1U;
 80043e6:	2101      	movs	r1, #1
 80043e8:	f8c0 12e8 	str.w	r1, [r0, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 80043ec:	2000      	movs	r0, #0
 80043ee:	f883 02e0 	strb.w	r0, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80043f2:	f8b2 3054 	ldrh.w	r3, [r2, #84]	; 0x54
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	430b      	orrs	r3, r1
 80043fa:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80043fe:	f8b2 3054 	ldrh.w	r3, [r2, #84]	; 0x54
 8004402:	b29b      	uxth	r3, r3
 8004404:	f043 0302 	orr.w	r3, r3, #2
 8004408:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

  return HAL_OK;
}
 800440c:	4770      	bx	lr
	...

08004410 <HAL_PWREx_ControlVoltageScaling>:
{
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004410:	2800      	cmp	r0, #0
 8004412:	d136      	bne.n	8004482 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004414:	4b3e      	ldr	r3, [pc, #248]	; (8004510 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800441c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004420:	d008      	beq.n	8004434 <HAL_PWREx_ControlVoltageScaling+0x24>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004422:	4a3b      	ldr	r2, [pc, #236]	; (8004510 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8004424:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8004428:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800442c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004430:	2000      	movs	r0, #0
 8004432:	4770      	bx	lr
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004434:	4a36      	ldr	r2, [pc, #216]	; (8004510 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8004436:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 800443a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800443e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004442:	6813      	ldr	r3, [r2, #0]
 8004444:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004448:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800444c:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800444e:	4b31      	ldr	r3, [pc, #196]	; (8004514 <HAL_PWREx_ControlVoltageScaling+0x104>)
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	2332      	movs	r3, #50	; 0x32
 8004454:	fb03 f302 	mul.w	r3, r3, r2
 8004458:	4a2f      	ldr	r2, [pc, #188]	; (8004518 <HAL_PWREx_ControlVoltageScaling+0x108>)
 800445a:	fba2 2303 	umull	r2, r3, r2, r3
 800445e:	0c9b      	lsrs	r3, r3, #18
 8004460:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004462:	e000      	b.n	8004466 <HAL_PWREx_ControlVoltageScaling+0x56>
        wait_loop_index--;
 8004464:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004466:	4a2a      	ldr	r2, [pc, #168]	; (8004510 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8004468:	6952      	ldr	r2, [r2, #20]
 800446a:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800446e:	d001      	beq.n	8004474 <HAL_PWREx_ControlVoltageScaling+0x64>
 8004470:	2b00      	cmp	r3, #0
 8004472:	d1f7      	bne.n	8004464 <HAL_PWREx_ControlVoltageScaling+0x54>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004474:	4b26      	ldr	r3, [pc, #152]	; (8004510 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8004476:	695b      	ldr	r3, [r3, #20]
 8004478:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800447c:	d144      	bne.n	8004508 <HAL_PWREx_ControlVoltageScaling+0xf8>
  return HAL_OK;
 800447e:	2000      	movs	r0, #0
 8004480:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004482:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8004486:	d008      	beq.n	800449a <HAL_PWREx_ControlVoltageScaling+0x8a>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004488:	4a21      	ldr	r2, [pc, #132]	; (8004510 <HAL_PWREx_ControlVoltageScaling+0x100>)
 800448a:	6813      	ldr	r3, [r2, #0]
 800448c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004490:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004494:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8004496:	2000      	movs	r0, #0
 8004498:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800449a:	4b1d      	ldr	r3, [pc, #116]	; (8004510 <HAL_PWREx_ControlVoltageScaling+0x100>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80044a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044a6:	d008      	beq.n	80044ba <HAL_PWREx_ControlVoltageScaling+0xaa>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80044a8:	4a19      	ldr	r2, [pc, #100]	; (8004510 <HAL_PWREx_ControlVoltageScaling+0x100>)
 80044aa:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 80044ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044b2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  return HAL_OK;
 80044b6:	2000      	movs	r0, #0
 80044b8:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80044ba:	4a15      	ldr	r2, [pc, #84]	; (8004510 <HAL_PWREx_ControlVoltageScaling+0x100>)
 80044bc:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 80044c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044c4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80044c8:	6813      	ldr	r3, [r2, #0]
 80044ca:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80044ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80044d2:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80044d4:	4b0f      	ldr	r3, [pc, #60]	; (8004514 <HAL_PWREx_ControlVoltageScaling+0x104>)
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	2332      	movs	r3, #50	; 0x32
 80044da:	fb03 f302 	mul.w	r3, r3, r2
 80044de:	4a0e      	ldr	r2, [pc, #56]	; (8004518 <HAL_PWREx_ControlVoltageScaling+0x108>)
 80044e0:	fba2 2303 	umull	r2, r3, r2, r3
 80044e4:	0c9b      	lsrs	r3, r3, #18
 80044e6:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80044e8:	e000      	b.n	80044ec <HAL_PWREx_ControlVoltageScaling+0xdc>
        wait_loop_index--;
 80044ea:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80044ec:	4a08      	ldr	r2, [pc, #32]	; (8004510 <HAL_PWREx_ControlVoltageScaling+0x100>)
 80044ee:	6952      	ldr	r2, [r2, #20]
 80044f0:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80044f4:	d001      	beq.n	80044fa <HAL_PWREx_ControlVoltageScaling+0xea>
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d1f7      	bne.n	80044ea <HAL_PWREx_ControlVoltageScaling+0xda>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80044fa:	4b05      	ldr	r3, [pc, #20]	; (8004510 <HAL_PWREx_ControlVoltageScaling+0x100>)
 80044fc:	695b      	ldr	r3, [r3, #20]
 80044fe:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004502:	d103      	bne.n	800450c <HAL_PWREx_ControlVoltageScaling+0xfc>
  return HAL_OK;
 8004504:	2000      	movs	r0, #0
 8004506:	4770      	bx	lr
        return HAL_TIMEOUT;
 8004508:	2003      	movs	r0, #3
 800450a:	4770      	bx	lr
        return HAL_TIMEOUT;
 800450c:	2003      	movs	r0, #3
}
 800450e:	4770      	bx	lr
 8004510:	40007000 	.word	0x40007000
 8004514:	20000000 	.word	0x20000000
 8004518:	431bde83 	.word	0x431bde83

0800451c <HAL_PWREx_DisableUCPDDeadBattery>:
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800451c:	4a02      	ldr	r2, [pc, #8]	; (8004528 <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 800451e:	6893      	ldr	r3, [r2, #8]
 8004520:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004524:	6093      	str	r3, [r2, #8]
}
 8004526:	4770      	bx	lr
 8004528:	40007000 	.word	0x40007000

0800452c <RCC_GetSysClockFreqFromPLLSource>:
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800452c:	4a12      	ldr	r2, [pc, #72]	; (8004578 <RCC_GetSysClockFreqFromPLLSource+0x4c>)
 800452e:	68d3      	ldr	r3, [r2, #12]
 8004530:	f003 0303 	and.w	r3, r3, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004534:	68d0      	ldr	r0, [r2, #12]
 8004536:	f3c0 1003 	ubfx	r0, r0, #4, #4
 800453a:	3001      	adds	r0, #1

  switch (pllsource)
 800453c:	2b03      	cmp	r3, #3
 800453e:	d011      	beq.n	8004564 <RCC_GetSysClockFreqFromPLLSource+0x38>
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004540:	4b0e      	ldr	r3, [pc, #56]	; (800457c <RCC_GetSysClockFreqFromPLLSource+0x50>)
 8004542:	fbb3 f3f0 	udiv	r3, r3, r0
 8004546:	4a0c      	ldr	r2, [pc, #48]	; (8004578 <RCC_GetSysClockFreqFromPLLSource+0x4c>)
 8004548:	68d0      	ldr	r0, [r2, #12]
 800454a:	f3c0 2006 	ubfx	r0, r0, #8, #7
 800454e:	fb00 f003 	mul.w	r0, r0, r3
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004552:	4b09      	ldr	r3, [pc, #36]	; (8004578 <RCC_GetSysClockFreqFromPLLSource+0x4c>)
 8004554:	68db      	ldr	r3, [r3, #12]
 8004556:	f3c3 6341 	ubfx	r3, r3, #25, #2
 800455a:	3301      	adds	r3, #1
 800455c:	005b      	lsls	r3, r3, #1
  sysclockfreq = pllvco/pllr;

  return sysclockfreq;
}
 800455e:	fbb0 f0f3 	udiv	r0, r0, r3
 8004562:	4770      	bx	lr
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004564:	4b05      	ldr	r3, [pc, #20]	; (800457c <RCC_GetSysClockFreqFromPLLSource+0x50>)
 8004566:	fbb3 f3f0 	udiv	r3, r3, r0
 800456a:	68d0      	ldr	r0, [r2, #12]
 800456c:	f3c0 2006 	ubfx	r0, r0, #8, #7
 8004570:	fb00 f003 	mul.w	r0, r0, r3
    break;
 8004574:	e7ed      	b.n	8004552 <RCC_GetSysClockFreqFromPLLSource+0x26>
 8004576:	bf00      	nop
 8004578:	40021000 	.word	0x40021000
 800457c:	00f42400 	.word	0x00f42400

08004580 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8004580:	2800      	cmp	r0, #0
 8004582:	f000 8254 	beq.w	8004a2e <HAL_RCC_OscConfig+0x4ae>
{
 8004586:	b570      	push	{r4, r5, r6, lr}
 8004588:	b082      	sub	sp, #8
 800458a:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800458c:	6803      	ldr	r3, [r0, #0]
 800458e:	f013 0f01 	tst.w	r3, #1
 8004592:	d037      	beq.n	8004604 <HAL_RCC_OscConfig+0x84>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004594:	4ab4      	ldr	r2, [pc, #720]	; (8004868 <HAL_RCC_OscConfig+0x2e8>)
 8004596:	6893      	ldr	r3, [r2, #8]
 8004598:	f003 030c 	and.w	r3, r3, #12
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800459c:	68d2      	ldr	r2, [r2, #12]
 800459e:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80045a2:	2b0c      	cmp	r3, #12
 80045a4:	d023      	beq.n	80045ee <HAL_RCC_OscConfig+0x6e>
 80045a6:	2b08      	cmp	r3, #8
 80045a8:	d023      	beq.n	80045f2 <HAL_RCC_OscConfig+0x72>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045aa:	6863      	ldr	r3, [r4, #4]
 80045ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045b0:	d04e      	beq.n	8004650 <HAL_RCC_OscConfig+0xd0>
 80045b2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045b6:	d051      	beq.n	800465c <HAL_RCC_OscConfig+0xdc>
 80045b8:	4bab      	ldr	r3, [pc, #684]	; (8004868 <HAL_RCC_OscConfig+0x2e8>)
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80045c0:	601a      	str	r2, [r3, #0]
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80045c8:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80045ca:	6863      	ldr	r3, [r4, #4]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d052      	beq.n	8004676 <HAL_RCC_OscConfig+0xf6>
        tickstart = HAL_GetTick();
 80045d0:	f7fe fc5a 	bl	8002e88 <HAL_GetTick>
 80045d4:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045d6:	4ba4      	ldr	r3, [pc, #656]	; (8004868 <HAL_RCC_OscConfig+0x2e8>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80045de:	d111      	bne.n	8004604 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045e0:	f7fe fc52 	bl	8002e88 <HAL_GetTick>
 80045e4:	1b40      	subs	r0, r0, r5
 80045e6:	2864      	cmp	r0, #100	; 0x64
 80045e8:	d9f5      	bls.n	80045d6 <HAL_RCC_OscConfig+0x56>
            return HAL_TIMEOUT;
 80045ea:	2003      	movs	r0, #3
 80045ec:	e228      	b.n	8004a40 <HAL_RCC_OscConfig+0x4c0>
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80045ee:	2a03      	cmp	r2, #3
 80045f0:	d1d9      	bne.n	80045a6 <HAL_RCC_OscConfig+0x26>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045f2:	4b9d      	ldr	r3, [pc, #628]	; (8004868 <HAL_RCC_OscConfig+0x2e8>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80045fa:	d003      	beq.n	8004604 <HAL_RCC_OscConfig+0x84>
 80045fc:	6863      	ldr	r3, [r4, #4]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	f000 8217 	beq.w	8004a32 <HAL_RCC_OscConfig+0x4b2>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004604:	6823      	ldr	r3, [r4, #0]
 8004606:	f013 0f02 	tst.w	r3, #2
 800460a:	d05d      	beq.n	80046c8 <HAL_RCC_OscConfig+0x148>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800460c:	4a96      	ldr	r2, [pc, #600]	; (8004868 <HAL_RCC_OscConfig+0x2e8>)
 800460e:	6893      	ldr	r3, [r2, #8]
 8004610:	f003 030c 	and.w	r3, r3, #12
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004614:	68d2      	ldr	r2, [r2, #12]
 8004616:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800461a:	2b0c      	cmp	r3, #12
 800461c:	d03a      	beq.n	8004694 <HAL_RCC_OscConfig+0x114>
 800461e:	2b04      	cmp	r3, #4
 8004620:	d03a      	beq.n	8004698 <HAL_RCC_OscConfig+0x118>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004622:	68e3      	ldr	r3, [r4, #12]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d075      	beq.n	8004714 <HAL_RCC_OscConfig+0x194>
        __HAL_RCC_HSI_ENABLE();
 8004628:	4a8f      	ldr	r2, [pc, #572]	; (8004868 <HAL_RCC_OscConfig+0x2e8>)
 800462a:	6813      	ldr	r3, [r2, #0]
 800462c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004630:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004632:	f7fe fc29 	bl	8002e88 <HAL_GetTick>
 8004636:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004638:	4b8b      	ldr	r3, [pc, #556]	; (8004868 <HAL_RCC_OscConfig+0x2e8>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004640:	d15f      	bne.n	8004702 <HAL_RCC_OscConfig+0x182>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004642:	f7fe fc21 	bl	8002e88 <HAL_GetTick>
 8004646:	1b40      	subs	r0, r0, r5
 8004648:	2802      	cmp	r0, #2
 800464a:	d9f5      	bls.n	8004638 <HAL_RCC_OscConfig+0xb8>
            return HAL_TIMEOUT;
 800464c:	2003      	movs	r0, #3
 800464e:	e1f7      	b.n	8004a40 <HAL_RCC_OscConfig+0x4c0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004650:	4a85      	ldr	r2, [pc, #532]	; (8004868 <HAL_RCC_OscConfig+0x2e8>)
 8004652:	6813      	ldr	r3, [r2, #0]
 8004654:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004658:	6013      	str	r3, [r2, #0]
 800465a:	e7b6      	b.n	80045ca <HAL_RCC_OscConfig+0x4a>
 800465c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004660:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800466a:	601a      	str	r2, [r3, #0]
 800466c:	681a      	ldr	r2, [r3, #0]
 800466e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004672:	601a      	str	r2, [r3, #0]
 8004674:	e7a9      	b.n	80045ca <HAL_RCC_OscConfig+0x4a>
        tickstart = HAL_GetTick();
 8004676:	f7fe fc07 	bl	8002e88 <HAL_GetTick>
 800467a:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800467c:	4b7a      	ldr	r3, [pc, #488]	; (8004868 <HAL_RCC_OscConfig+0x2e8>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004684:	d0be      	beq.n	8004604 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004686:	f7fe fbff 	bl	8002e88 <HAL_GetTick>
 800468a:	1b40      	subs	r0, r0, r5
 800468c:	2864      	cmp	r0, #100	; 0x64
 800468e:	d9f5      	bls.n	800467c <HAL_RCC_OscConfig+0xfc>
            return HAL_TIMEOUT;
 8004690:	2003      	movs	r0, #3
 8004692:	e1d5      	b.n	8004a40 <HAL_RCC_OscConfig+0x4c0>
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004694:	2a02      	cmp	r2, #2
 8004696:	d1c2      	bne.n	800461e <HAL_RCC_OscConfig+0x9e>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004698:	4b73      	ldr	r3, [pc, #460]	; (8004868 <HAL_RCC_OscConfig+0x2e8>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80046a0:	d003      	beq.n	80046aa <HAL_RCC_OscConfig+0x12a>
 80046a2:	68e3      	ldr	r3, [r4, #12]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	f000 81c6 	beq.w	8004a36 <HAL_RCC_OscConfig+0x4b6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046aa:	4a6f      	ldr	r2, [pc, #444]	; (8004868 <HAL_RCC_OscConfig+0x2e8>)
 80046ac:	6853      	ldr	r3, [r2, #4]
 80046ae:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80046b2:	6921      	ldr	r1, [r4, #16]
 80046b4:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80046b8:	6053      	str	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80046ba:	4b6c      	ldr	r3, [pc, #432]	; (800486c <HAL_RCC_OscConfig+0x2ec>)
 80046bc:	6818      	ldr	r0, [r3, #0]
 80046be:	f7fe fb9f 	bl	8002e00 <HAL_InitTick>
 80046c2:	2800      	cmp	r0, #0
 80046c4:	f040 81b9 	bne.w	8004a3a <HAL_RCC_OscConfig+0x4ba>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046c8:	6823      	ldr	r3, [r4, #0]
 80046ca:	f013 0f08 	tst.w	r3, #8
 80046ce:	d04c      	beq.n	800476a <HAL_RCC_OscConfig+0x1ea>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80046d0:	6963      	ldr	r3, [r4, #20]
 80046d2:	b39b      	cbz	r3, 800473c <HAL_RCC_OscConfig+0x1bc>
      __HAL_RCC_LSI_ENABLE();
 80046d4:	4a64      	ldr	r2, [pc, #400]	; (8004868 <HAL_RCC_OscConfig+0x2e8>)
 80046d6:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80046da:	f043 0301 	orr.w	r3, r3, #1
 80046de:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 80046e2:	f7fe fbd1 	bl	8002e88 <HAL_GetTick>
 80046e6:	4605      	mov	r5, r0
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80046e8:	4b5f      	ldr	r3, [pc, #380]	; (8004868 <HAL_RCC_OscConfig+0x2e8>)
 80046ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046ee:	f013 0f02 	tst.w	r3, #2
 80046f2:	d13a      	bne.n	800476a <HAL_RCC_OscConfig+0x1ea>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046f4:	f7fe fbc8 	bl	8002e88 <HAL_GetTick>
 80046f8:	1b40      	subs	r0, r0, r5
 80046fa:	2802      	cmp	r0, #2
 80046fc:	d9f4      	bls.n	80046e8 <HAL_RCC_OscConfig+0x168>
          return HAL_TIMEOUT;
 80046fe:	2003      	movs	r0, #3
 8004700:	e19e      	b.n	8004a40 <HAL_RCC_OscConfig+0x4c0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004702:	4a59      	ldr	r2, [pc, #356]	; (8004868 <HAL_RCC_OscConfig+0x2e8>)
 8004704:	6853      	ldr	r3, [r2, #4]
 8004706:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800470a:	6921      	ldr	r1, [r4, #16]
 800470c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8004710:	6053      	str	r3, [r2, #4]
 8004712:	e7d9      	b.n	80046c8 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_DISABLE();
 8004714:	4a54      	ldr	r2, [pc, #336]	; (8004868 <HAL_RCC_OscConfig+0x2e8>)
 8004716:	6813      	ldr	r3, [r2, #0]
 8004718:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800471c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800471e:	f7fe fbb3 	bl	8002e88 <HAL_GetTick>
 8004722:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004724:	4b50      	ldr	r3, [pc, #320]	; (8004868 <HAL_RCC_OscConfig+0x2e8>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800472c:	d0cc      	beq.n	80046c8 <HAL_RCC_OscConfig+0x148>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800472e:	f7fe fbab 	bl	8002e88 <HAL_GetTick>
 8004732:	1b40      	subs	r0, r0, r5
 8004734:	2802      	cmp	r0, #2
 8004736:	d9f5      	bls.n	8004724 <HAL_RCC_OscConfig+0x1a4>
            return HAL_TIMEOUT;
 8004738:	2003      	movs	r0, #3
 800473a:	e181      	b.n	8004a40 <HAL_RCC_OscConfig+0x4c0>
      __HAL_RCC_LSI_DISABLE();
 800473c:	4a4a      	ldr	r2, [pc, #296]	; (8004868 <HAL_RCC_OscConfig+0x2e8>)
 800473e:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8004742:	f023 0301 	bic.w	r3, r3, #1
 8004746:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 800474a:	f7fe fb9d 	bl	8002e88 <HAL_GetTick>
 800474e:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004750:	4b45      	ldr	r3, [pc, #276]	; (8004868 <HAL_RCC_OscConfig+0x2e8>)
 8004752:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004756:	f013 0f02 	tst.w	r3, #2
 800475a:	d006      	beq.n	800476a <HAL_RCC_OscConfig+0x1ea>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800475c:	f7fe fb94 	bl	8002e88 <HAL_GetTick>
 8004760:	1b40      	subs	r0, r0, r5
 8004762:	2802      	cmp	r0, #2
 8004764:	d9f4      	bls.n	8004750 <HAL_RCC_OscConfig+0x1d0>
          return HAL_TIMEOUT;
 8004766:	2003      	movs	r0, #3
 8004768:	e16a      	b.n	8004a40 <HAL_RCC_OscConfig+0x4c0>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800476a:	6823      	ldr	r3, [r4, #0]
 800476c:	f013 0f04 	tst.w	r3, #4
 8004770:	f000 8081 	beq.w	8004876 <HAL_RCC_OscConfig+0x2f6>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004774:	4b3c      	ldr	r3, [pc, #240]	; (8004868 <HAL_RCC_OscConfig+0x2e8>)
 8004776:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004778:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800477c:	d136      	bne.n	80047ec <HAL_RCC_OscConfig+0x26c>
      __HAL_RCC_PWR_CLK_ENABLE();
 800477e:	4b3a      	ldr	r3, [pc, #232]	; (8004868 <HAL_RCC_OscConfig+0x2e8>)
 8004780:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004782:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004786:	659a      	str	r2, [r3, #88]	; 0x58
 8004788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800478a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800478e:	9301      	str	r3, [sp, #4]
 8004790:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004792:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004794:	4b36      	ldr	r3, [pc, #216]	; (8004870 <HAL_RCC_OscConfig+0x2f0>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f413 7f80 	tst.w	r3, #256	; 0x100
 800479c:	d028      	beq.n	80047f0 <HAL_RCC_OscConfig+0x270>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800479e:	68a3      	ldr	r3, [r4, #8]
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d039      	beq.n	8004818 <HAL_RCC_OscConfig+0x298>
 80047a4:	2b05      	cmp	r3, #5
 80047a6:	d03f      	beq.n	8004828 <HAL_RCC_OscConfig+0x2a8>
 80047a8:	4b2f      	ldr	r3, [pc, #188]	; (8004868 <HAL_RCC_OscConfig+0x2e8>)
 80047aa:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80047ae:	f022 0201 	bic.w	r2, r2, #1
 80047b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80047b6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80047ba:	f022 0204 	bic.w	r2, r2, #4
 80047be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80047c2:	68a3      	ldr	r3, [r4, #8]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d03d      	beq.n	8004844 <HAL_RCC_OscConfig+0x2c4>
      tickstart = HAL_GetTick();
 80047c8:	f7fe fb5e 	bl	8002e88 <HAL_GetTick>
 80047cc:	4606      	mov	r6, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047ce:	4b26      	ldr	r3, [pc, #152]	; (8004868 <HAL_RCC_OscConfig+0x2e8>)
 80047d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047d4:	f013 0f02 	tst.w	r3, #2
 80047d8:	d14c      	bne.n	8004874 <HAL_RCC_OscConfig+0x2f4>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047da:	f7fe fb55 	bl	8002e88 <HAL_GetTick>
 80047de:	1b80      	subs	r0, r0, r6
 80047e0:	f241 3388 	movw	r3, #5000	; 0x1388
 80047e4:	4298      	cmp	r0, r3
 80047e6:	d9f2      	bls.n	80047ce <HAL_RCC_OscConfig+0x24e>
          return HAL_TIMEOUT;
 80047e8:	2003      	movs	r0, #3
 80047ea:	e129      	b.n	8004a40 <HAL_RCC_OscConfig+0x4c0>
    FlagStatus       pwrclkchanged = RESET;
 80047ec:	2500      	movs	r5, #0
 80047ee:	e7d1      	b.n	8004794 <HAL_RCC_OscConfig+0x214>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047f0:	4a1f      	ldr	r2, [pc, #124]	; (8004870 <HAL_RCC_OscConfig+0x2f0>)
 80047f2:	6813      	ldr	r3, [r2, #0]
 80047f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047f8:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80047fa:	f7fe fb45 	bl	8002e88 <HAL_GetTick>
 80047fe:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004800:	4b1b      	ldr	r3, [pc, #108]	; (8004870 <HAL_RCC_OscConfig+0x2f0>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004808:	d1c9      	bne.n	800479e <HAL_RCC_OscConfig+0x21e>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800480a:	f7fe fb3d 	bl	8002e88 <HAL_GetTick>
 800480e:	1b80      	subs	r0, r0, r6
 8004810:	2802      	cmp	r0, #2
 8004812:	d9f5      	bls.n	8004800 <HAL_RCC_OscConfig+0x280>
          return HAL_TIMEOUT;
 8004814:	2003      	movs	r0, #3
 8004816:	e113      	b.n	8004a40 <HAL_RCC_OscConfig+0x4c0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004818:	4a13      	ldr	r2, [pc, #76]	; (8004868 <HAL_RCC_OscConfig+0x2e8>)
 800481a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800481e:	f043 0301 	orr.w	r3, r3, #1
 8004822:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004826:	e7cc      	b.n	80047c2 <HAL_RCC_OscConfig+0x242>
 8004828:	4b0f      	ldr	r3, [pc, #60]	; (8004868 <HAL_RCC_OscConfig+0x2e8>)
 800482a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800482e:	f042 0204 	orr.w	r2, r2, #4
 8004832:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8004836:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800483a:	f042 0201 	orr.w	r2, r2, #1
 800483e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8004842:	e7be      	b.n	80047c2 <HAL_RCC_OscConfig+0x242>
      tickstart = HAL_GetTick();
 8004844:	f7fe fb20 	bl	8002e88 <HAL_GetTick>
 8004848:	4606      	mov	r6, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800484a:	4b07      	ldr	r3, [pc, #28]	; (8004868 <HAL_RCC_OscConfig+0x2e8>)
 800484c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004850:	f013 0f02 	tst.w	r3, #2
 8004854:	d00e      	beq.n	8004874 <HAL_RCC_OscConfig+0x2f4>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004856:	f7fe fb17 	bl	8002e88 <HAL_GetTick>
 800485a:	1b80      	subs	r0, r0, r6
 800485c:	f241 3388 	movw	r3, #5000	; 0x1388
 8004860:	4298      	cmp	r0, r3
 8004862:	d9f2      	bls.n	800484a <HAL_RCC_OscConfig+0x2ca>
          return HAL_TIMEOUT;
 8004864:	2003      	movs	r0, #3
 8004866:	e0eb      	b.n	8004a40 <HAL_RCC_OscConfig+0x4c0>
 8004868:	40021000 	.word	0x40021000
 800486c:	20000008 	.word	0x20000008
 8004870:	40007000 	.word	0x40007000
    if (pwrclkchanged == SET)
 8004874:	b9e5      	cbnz	r5, 80048b0 <HAL_RCC_OscConfig+0x330>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004876:	6823      	ldr	r3, [r4, #0]
 8004878:	f013 0f20 	tst.w	r3, #32
 800487c:	d035      	beq.n	80048ea <HAL_RCC_OscConfig+0x36a>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800487e:	69a3      	ldr	r3, [r4, #24]
 8004880:	b1e3      	cbz	r3, 80048bc <HAL_RCC_OscConfig+0x33c>
      __HAL_RCC_HSI48_ENABLE();
 8004882:	4a77      	ldr	r2, [pc, #476]	; (8004a60 <HAL_RCC_OscConfig+0x4e0>)
 8004884:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 8004888:	f043 0301 	orr.w	r3, r3, #1
 800488c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 8004890:	f7fe fafa 	bl	8002e88 <HAL_GetTick>
 8004894:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004896:	4b72      	ldr	r3, [pc, #456]	; (8004a60 <HAL_RCC_OscConfig+0x4e0>)
 8004898:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800489c:	f013 0f02 	tst.w	r3, #2
 80048a0:	d123      	bne.n	80048ea <HAL_RCC_OscConfig+0x36a>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80048a2:	f7fe faf1 	bl	8002e88 <HAL_GetTick>
 80048a6:	1b40      	subs	r0, r0, r5
 80048a8:	2802      	cmp	r0, #2
 80048aa:	d9f4      	bls.n	8004896 <HAL_RCC_OscConfig+0x316>
          return HAL_TIMEOUT;
 80048ac:	2003      	movs	r0, #3
 80048ae:	e0c7      	b.n	8004a40 <HAL_RCC_OscConfig+0x4c0>
      __HAL_RCC_PWR_CLK_DISABLE();
 80048b0:	4a6b      	ldr	r2, [pc, #428]	; (8004a60 <HAL_RCC_OscConfig+0x4e0>)
 80048b2:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80048b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048b8:	6593      	str	r3, [r2, #88]	; 0x58
 80048ba:	e7dc      	b.n	8004876 <HAL_RCC_OscConfig+0x2f6>
      __HAL_RCC_HSI48_DISABLE();
 80048bc:	4a68      	ldr	r2, [pc, #416]	; (8004a60 <HAL_RCC_OscConfig+0x4e0>)
 80048be:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 80048c2:	f023 0301 	bic.w	r3, r3, #1
 80048c6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 80048ca:	f7fe fadd 	bl	8002e88 <HAL_GetTick>
 80048ce:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80048d0:	4b63      	ldr	r3, [pc, #396]	; (8004a60 <HAL_RCC_OscConfig+0x4e0>)
 80048d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80048d6:	f013 0f02 	tst.w	r3, #2
 80048da:	d006      	beq.n	80048ea <HAL_RCC_OscConfig+0x36a>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80048dc:	f7fe fad4 	bl	8002e88 <HAL_GetTick>
 80048e0:	1b40      	subs	r0, r0, r5
 80048e2:	2802      	cmp	r0, #2
 80048e4:	d9f4      	bls.n	80048d0 <HAL_RCC_OscConfig+0x350>
          return HAL_TIMEOUT;
 80048e6:	2003      	movs	r0, #3
 80048e8:	e0aa      	b.n	8004a40 <HAL_RCC_OscConfig+0x4c0>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80048ea:	69e3      	ldr	r3, [r4, #28]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	f000 80a6 	beq.w	8004a3e <HAL_RCC_OscConfig+0x4be>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80048f2:	4a5b      	ldr	r2, [pc, #364]	; (8004a60 <HAL_RCC_OscConfig+0x4e0>)
 80048f4:	6892      	ldr	r2, [r2, #8]
 80048f6:	f002 020c 	and.w	r2, r2, #12
 80048fa:	2a0c      	cmp	r2, #12
 80048fc:	d069      	beq.n	80049d2 <HAL_RCC_OscConfig+0x452>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80048fe:	2b02      	cmp	r3, #2
 8004900:	d01d      	beq.n	800493e <HAL_RCC_OscConfig+0x3be>
        __HAL_RCC_PLL_DISABLE();
 8004902:	4b57      	ldr	r3, [pc, #348]	; (8004a60 <HAL_RCC_OscConfig+0x4e0>)
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800490a:	601a      	str	r2, [r3, #0]
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800490c:	68da      	ldr	r2, [r3, #12]
 800490e:	f022 0203 	bic.w	r2, r2, #3
 8004912:	60da      	str	r2, [r3, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004914:	68da      	ldr	r2, [r3, #12]
 8004916:	f022 7288 	bic.w	r2, r2, #17825792	; 0x1100000
 800491a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800491e:	60da      	str	r2, [r3, #12]
        tickstart = HAL_GetTick();
 8004920:	f7fe fab2 	bl	8002e88 <HAL_GetTick>
 8004924:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004926:	4b4e      	ldr	r3, [pc, #312]	; (8004a60 <HAL_RCC_OscConfig+0x4e0>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800492e:	d04e      	beq.n	80049ce <HAL_RCC_OscConfig+0x44e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004930:	f7fe faaa 	bl	8002e88 <HAL_GetTick>
 8004934:	1b00      	subs	r0, r0, r4
 8004936:	2802      	cmp	r0, #2
 8004938:	d9f5      	bls.n	8004926 <HAL_RCC_OscConfig+0x3a6>
            return HAL_TIMEOUT;
 800493a:	2003      	movs	r0, #3
 800493c:	e080      	b.n	8004a40 <HAL_RCC_OscConfig+0x4c0>
        __HAL_RCC_PLL_DISABLE();
 800493e:	4a48      	ldr	r2, [pc, #288]	; (8004a60 <HAL_RCC_OscConfig+0x4e0>)
 8004940:	6813      	ldr	r3, [r2, #0]
 8004942:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004946:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004948:	f7fe fa9e 	bl	8002e88 <HAL_GetTick>
 800494c:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800494e:	4b44      	ldr	r3, [pc, #272]	; (8004a60 <HAL_RCC_OscConfig+0x4e0>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004956:	d006      	beq.n	8004966 <HAL_RCC_OscConfig+0x3e6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004958:	f7fe fa96 	bl	8002e88 <HAL_GetTick>
 800495c:	1b40      	subs	r0, r0, r5
 800495e:	2802      	cmp	r0, #2
 8004960:	d9f5      	bls.n	800494e <HAL_RCC_OscConfig+0x3ce>
            return HAL_TIMEOUT;
 8004962:	2003      	movs	r0, #3
 8004964:	e06c      	b.n	8004a40 <HAL_RCC_OscConfig+0x4c0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004966:	4a3e      	ldr	r2, [pc, #248]	; (8004a60 <HAL_RCC_OscConfig+0x4e0>)
 8004968:	68d3      	ldr	r3, [r2, #12]
 800496a:	493e      	ldr	r1, [pc, #248]	; (8004a64 <HAL_RCC_OscConfig+0x4e4>)
 800496c:	4019      	ands	r1, r3
 800496e:	6a23      	ldr	r3, [r4, #32]
 8004970:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004972:	3801      	subs	r0, #1
 8004974:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8004978:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800497a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800497e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8004980:	0840      	lsrs	r0, r0, #1
 8004982:	3801      	subs	r0, #1
 8004984:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
 8004988:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800498a:	0840      	lsrs	r0, r0, #1
 800498c:	3801      	subs	r0, #1
 800498e:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 8004992:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8004994:	ea43 63c0 	orr.w	r3, r3, r0, lsl #27
 8004998:	430b      	orrs	r3, r1
 800499a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLL_ENABLE();
 800499c:	6813      	ldr	r3, [r2, #0]
 800499e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80049a2:	6013      	str	r3, [r2, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80049a4:	68d3      	ldr	r3, [r2, #12]
 80049a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80049aa:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 80049ac:	f7fe fa6c 	bl	8002e88 <HAL_GetTick>
 80049b0:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049b2:	4b2b      	ldr	r3, [pc, #172]	; (8004a60 <HAL_RCC_OscConfig+0x4e0>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80049ba:	d106      	bne.n	80049ca <HAL_RCC_OscConfig+0x44a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049bc:	f7fe fa64 	bl	8002e88 <HAL_GetTick>
 80049c0:	1b00      	subs	r0, r0, r4
 80049c2:	2802      	cmp	r0, #2
 80049c4:	d9f5      	bls.n	80049b2 <HAL_RCC_OscConfig+0x432>
            return HAL_TIMEOUT;
 80049c6:	2003      	movs	r0, #3
 80049c8:	e03a      	b.n	8004a40 <HAL_RCC_OscConfig+0x4c0>
  return HAL_OK;
 80049ca:	2000      	movs	r0, #0
 80049cc:	e038      	b.n	8004a40 <HAL_RCC_OscConfig+0x4c0>
 80049ce:	2000      	movs	r0, #0
 80049d0:	e036      	b.n	8004a40 <HAL_RCC_OscConfig+0x4c0>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d036      	beq.n	8004a44 <HAL_RCC_OscConfig+0x4c4>
      temp_pllckcfg = RCC->PLLCFGR;
 80049d6:	4b22      	ldr	r3, [pc, #136]	; (8004a60 <HAL_RCC_OscConfig+0x4e0>)
 80049d8:	68db      	ldr	r3, [r3, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049da:	f003 0103 	and.w	r1, r3, #3
 80049de:	6a22      	ldr	r2, [r4, #32]
 80049e0:	4291      	cmp	r1, r2
 80049e2:	d131      	bne.n	8004a48 <HAL_RCC_OscConfig+0x4c8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80049e4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80049e8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80049ea:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049ec:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 80049f0:	d12c      	bne.n	8004a4c <HAL_RCC_OscConfig+0x4cc>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80049f2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80049f6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80049f8:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 80049fc:	d128      	bne.n	8004a50 <HAL_RCC_OscConfig+0x4d0>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80049fe:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004a02:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a04:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 8004a08:	d124      	bne.n	8004a54 <HAL_RCC_OscConfig+0x4d4>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a0a:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8004a0e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004a10:	0852      	lsrs	r2, r2, #1
 8004a12:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004a14:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8004a18:	d11e      	bne.n	8004a58 <HAL_RCC_OscConfig+0x4d8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004a1a:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8004a1e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8004a20:	0852      	lsrs	r2, r2, #1
 8004a22:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a24:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8004a28:	d118      	bne.n	8004a5c <HAL_RCC_OscConfig+0x4dc>
  return HAL_OK;
 8004a2a:	2000      	movs	r0, #0
 8004a2c:	e008      	b.n	8004a40 <HAL_RCC_OscConfig+0x4c0>
    return HAL_ERROR;
 8004a2e:	2001      	movs	r0, #1
}
 8004a30:	4770      	bx	lr
        return HAL_ERROR;
 8004a32:	2001      	movs	r0, #1
 8004a34:	e004      	b.n	8004a40 <HAL_RCC_OscConfig+0x4c0>
        return HAL_ERROR;
 8004a36:	2001      	movs	r0, #1
 8004a38:	e002      	b.n	8004a40 <HAL_RCC_OscConfig+0x4c0>
          return HAL_ERROR;
 8004a3a:	2001      	movs	r0, #1
 8004a3c:	e000      	b.n	8004a40 <HAL_RCC_OscConfig+0x4c0>
  return HAL_OK;
 8004a3e:	2000      	movs	r0, #0
}
 8004a40:	b002      	add	sp, #8
 8004a42:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8004a44:	2001      	movs	r0, #1
 8004a46:	e7fb      	b.n	8004a40 <HAL_RCC_OscConfig+0x4c0>
        return HAL_ERROR;
 8004a48:	2001      	movs	r0, #1
 8004a4a:	e7f9      	b.n	8004a40 <HAL_RCC_OscConfig+0x4c0>
 8004a4c:	2001      	movs	r0, #1
 8004a4e:	e7f7      	b.n	8004a40 <HAL_RCC_OscConfig+0x4c0>
 8004a50:	2001      	movs	r0, #1
 8004a52:	e7f5      	b.n	8004a40 <HAL_RCC_OscConfig+0x4c0>
 8004a54:	2001      	movs	r0, #1
 8004a56:	e7f3      	b.n	8004a40 <HAL_RCC_OscConfig+0x4c0>
 8004a58:	2001      	movs	r0, #1
 8004a5a:	e7f1      	b.n	8004a40 <HAL_RCC_OscConfig+0x4c0>
 8004a5c:	2001      	movs	r0, #1
 8004a5e:	e7ef      	b.n	8004a40 <HAL_RCC_OscConfig+0x4c0>
 8004a60:	40021000 	.word	0x40021000
 8004a64:	019f800c 	.word	0x019f800c

08004a68 <HAL_RCC_GetSysClockFreq>:
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004a68:	4b1e      	ldr	r3, [pc, #120]	; (8004ae4 <HAL_RCC_GetSysClockFreq+0x7c>)
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	f003 030c 	and.w	r3, r3, #12
 8004a70:	2b04      	cmp	r3, #4
 8004a72:	d032      	beq.n	8004ada <HAL_RCC_GetSysClockFreq+0x72>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004a74:	4b1b      	ldr	r3, [pc, #108]	; (8004ae4 <HAL_RCC_GetSysClockFreq+0x7c>)
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	f003 030c 	and.w	r3, r3, #12
 8004a7c:	2b08      	cmp	r3, #8
 8004a7e:	d02e      	beq.n	8004ade <HAL_RCC_GetSysClockFreq+0x76>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004a80:	4b18      	ldr	r3, [pc, #96]	; (8004ae4 <HAL_RCC_GetSysClockFreq+0x7c>)
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	f003 030c 	and.w	r3, r3, #12
 8004a88:	2b0c      	cmp	r3, #12
 8004a8a:	d001      	beq.n	8004a90 <HAL_RCC_GetSysClockFreq+0x28>
    sysclockfreq = 0U;
 8004a8c:	2000      	movs	r0, #0
}
 8004a8e:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004a90:	4a14      	ldr	r2, [pc, #80]	; (8004ae4 <HAL_RCC_GetSysClockFreq+0x7c>)
 8004a92:	68d3      	ldr	r3, [r2, #12]
 8004a94:	f003 0303 	and.w	r3, r3, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004a98:	68d0      	ldr	r0, [r2, #12]
 8004a9a:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8004a9e:	3001      	adds	r0, #1
    switch (pllsource)
 8004aa0:	2b03      	cmp	r3, #3
 8004aa2:	d011      	beq.n	8004ac8 <HAL_RCC_GetSysClockFreq+0x60>
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004aa4:	4b10      	ldr	r3, [pc, #64]	; (8004ae8 <HAL_RCC_GetSysClockFreq+0x80>)
 8004aa6:	fbb3 f3f0 	udiv	r3, r3, r0
 8004aaa:	4a0e      	ldr	r2, [pc, #56]	; (8004ae4 <HAL_RCC_GetSysClockFreq+0x7c>)
 8004aac:	68d0      	ldr	r0, [r2, #12]
 8004aae:	f3c0 2006 	ubfx	r0, r0, #8, #7
 8004ab2:	fb00 f003 	mul.w	r0, r0, r3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004ab6:	4b0b      	ldr	r3, [pc, #44]	; (8004ae4 <HAL_RCC_GetSysClockFreq+0x7c>)
 8004ab8:	68db      	ldr	r3, [r3, #12]
 8004aba:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8004abe:	3301      	adds	r3, #1
 8004ac0:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8004ac2:	fbb0 f0f3 	udiv	r0, r0, r3
 8004ac6:	4770      	bx	lr
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004ac8:	4b07      	ldr	r3, [pc, #28]	; (8004ae8 <HAL_RCC_GetSysClockFreq+0x80>)
 8004aca:	fbb3 f3f0 	udiv	r3, r3, r0
 8004ace:	68d0      	ldr	r0, [r2, #12]
 8004ad0:	f3c0 2006 	ubfx	r0, r0, #8, #7
 8004ad4:	fb00 f003 	mul.w	r0, r0, r3
      break;
 8004ad8:	e7ed      	b.n	8004ab6 <HAL_RCC_GetSysClockFreq+0x4e>
    sysclockfreq = HSI_VALUE;
 8004ada:	4803      	ldr	r0, [pc, #12]	; (8004ae8 <HAL_RCC_GetSysClockFreq+0x80>)
 8004adc:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 8004ade:	4802      	ldr	r0, [pc, #8]	; (8004ae8 <HAL_RCC_GetSysClockFreq+0x80>)
 8004ae0:	4770      	bx	lr
 8004ae2:	bf00      	nop
 8004ae4:	40021000 	.word	0x40021000
 8004ae8:	00f42400 	.word	0x00f42400

08004aec <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8004aec:	2800      	cmp	r0, #0
 8004aee:	f000 80e6 	beq.w	8004cbe <HAL_RCC_ClockConfig+0x1d2>
{
 8004af2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004af4:	460c      	mov	r4, r1
 8004af6:	4605      	mov	r5, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004af8:	4b74      	ldr	r3, [pc, #464]	; (8004ccc <HAL_RCC_ClockConfig+0x1e0>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 030f 	and.w	r3, r3, #15
 8004b00:	428b      	cmp	r3, r1
 8004b02:	d20b      	bcs.n	8004b1c <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b04:	4a71      	ldr	r2, [pc, #452]	; (8004ccc <HAL_RCC_ClockConfig+0x1e0>)
 8004b06:	6813      	ldr	r3, [r2, #0]
 8004b08:	f023 030f 	bic.w	r3, r3, #15
 8004b0c:	430b      	orrs	r3, r1
 8004b0e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b10:	6813      	ldr	r3, [r2, #0]
 8004b12:	f003 030f 	and.w	r3, r3, #15
 8004b16:	428b      	cmp	r3, r1
 8004b18:	f040 80d3 	bne.w	8004cc2 <HAL_RCC_ClockConfig+0x1d6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b1c:	682e      	ldr	r6, [r5, #0]
 8004b1e:	f016 0601 	ands.w	r6, r6, #1
 8004b22:	d05f      	beq.n	8004be4 <HAL_RCC_ClockConfig+0xf8>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b24:	686b      	ldr	r3, [r5, #4]
 8004b26:	2b03      	cmp	r3, #3
 8004b28:	d015      	beq.n	8004b56 <HAL_RCC_ClockConfig+0x6a>
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b2a:	2b02      	cmp	r3, #2
 8004b2c:	d033      	beq.n	8004b96 <HAL_RCC_ClockConfig+0xaa>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b2e:	4b68      	ldr	r3, [pc, #416]	; (8004cd0 <HAL_RCC_ClockConfig+0x1e4>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004b36:	f000 80c6 	beq.w	8004cc6 <HAL_RCC_ClockConfig+0x1da>
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004b3a:	f7ff ff95 	bl	8004a68 <HAL_RCC_GetSysClockFreq>
      if(pllfreq > 80000000U)
 8004b3e:	4b65      	ldr	r3, [pc, #404]	; (8004cd4 <HAL_RCC_ClockConfig+0x1e8>)
 8004b40:	4298      	cmp	r0, r3
 8004b42:	d933      	bls.n	8004bac <HAL_RCC_ClockConfig+0xc0>
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004b44:	4a62      	ldr	r2, [pc, #392]	; (8004cd0 <HAL_RCC_ClockConfig+0x1e4>)
 8004b46:	6893      	ldr	r3, [r2, #8]
 8004b48:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b50:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004b52:	2680      	movs	r6, #128	; 0x80
 8004b54:	e02b      	b.n	8004bae <HAL_RCC_ClockConfig+0xc2>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b56:	4b5e      	ldr	r3, [pc, #376]	; (8004cd0 <HAL_RCC_ClockConfig+0x1e4>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004b5e:	d101      	bne.n	8004b64 <HAL_RCC_ClockConfig+0x78>
        return HAL_ERROR;
 8004b60:	2001      	movs	r0, #1
 8004b62:	e08b      	b.n	8004c7c <HAL_RCC_ClockConfig+0x190>
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004b64:	f7ff fce2 	bl	800452c <RCC_GetSysClockFreqFromPLLSource>
      if(pllfreq > 80000000U)
 8004b68:	4b5a      	ldr	r3, [pc, #360]	; (8004cd4 <HAL_RCC_ClockConfig+0x1e8>)
 8004b6a:	4298      	cmp	r0, r3
 8004b6c:	d91a      	bls.n	8004ba4 <HAL_RCC_ClockConfig+0xb8>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004b6e:	4b58      	ldr	r3, [pc, #352]	; (8004cd0 <HAL_RCC_ClockConfig+0x1e4>)
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 8004b76:	d005      	beq.n	8004b84 <HAL_RCC_ClockConfig+0x98>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004b78:	682e      	ldr	r6, [r5, #0]
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004b7a:	f016 0602 	ands.w	r6, r6, #2
 8004b7e:	d016      	beq.n	8004bae <HAL_RCC_ClockConfig+0xc2>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004b80:	68ab      	ldr	r3, [r5, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004b82:	b98b      	cbnz	r3, 8004ba8 <HAL_RCC_ClockConfig+0xbc>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004b84:	4a52      	ldr	r2, [pc, #328]	; (8004cd0 <HAL_RCC_ClockConfig+0x1e4>)
 8004b86:	6893      	ldr	r3, [r2, #8]
 8004b88:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b90:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004b92:	2680      	movs	r6, #128	; 0x80
 8004b94:	e00b      	b.n	8004bae <HAL_RCC_ClockConfig+0xc2>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b96:	4b4e      	ldr	r3, [pc, #312]	; (8004cd0 <HAL_RCC_ClockConfig+0x1e4>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004b9e:	d1cc      	bne.n	8004b3a <HAL_RCC_ClockConfig+0x4e>
          return HAL_ERROR;
 8004ba0:	2001      	movs	r0, #1
 8004ba2:	e06b      	b.n	8004c7c <HAL_RCC_ClockConfig+0x190>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004ba4:	2600      	movs	r6, #0
 8004ba6:	e002      	b.n	8004bae <HAL_RCC_ClockConfig+0xc2>
 8004ba8:	2600      	movs	r6, #0
 8004baa:	e000      	b.n	8004bae <HAL_RCC_ClockConfig+0xc2>
 8004bac:	2600      	movs	r6, #0
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004bae:	4a48      	ldr	r2, [pc, #288]	; (8004cd0 <HAL_RCC_ClockConfig+0x1e4>)
 8004bb0:	6893      	ldr	r3, [r2, #8]
 8004bb2:	f023 0303 	bic.w	r3, r3, #3
 8004bb6:	6869      	ldr	r1, [r5, #4]
 8004bb8:	430b      	orrs	r3, r1
 8004bba:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8004bbc:	f7fe f964 	bl	8002e88 <HAL_GetTick>
 8004bc0:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bc2:	4b43      	ldr	r3, [pc, #268]	; (8004cd0 <HAL_RCC_ClockConfig+0x1e4>)
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	f003 030c 	and.w	r3, r3, #12
 8004bca:	686a      	ldr	r2, [r5, #4]
 8004bcc:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004bd0:	d008      	beq.n	8004be4 <HAL_RCC_ClockConfig+0xf8>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bd2:	f7fe f959 	bl	8002e88 <HAL_GetTick>
 8004bd6:	1bc0      	subs	r0, r0, r7
 8004bd8:	f241 3388 	movw	r3, #5000	; 0x1388
 8004bdc:	4298      	cmp	r0, r3
 8004bde:	d9f0      	bls.n	8004bc2 <HAL_RCC_ClockConfig+0xd6>
        return HAL_TIMEOUT;
 8004be0:	2003      	movs	r0, #3
 8004be2:	e04b      	b.n	8004c7c <HAL_RCC_ClockConfig+0x190>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004be4:	682b      	ldr	r3, [r5, #0]
 8004be6:	f013 0f02 	tst.w	r3, #2
 8004bea:	d048      	beq.n	8004c7e <HAL_RCC_ClockConfig+0x192>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bec:	f013 0f04 	tst.w	r3, #4
 8004bf0:	d004      	beq.n	8004bfc <HAL_RCC_ClockConfig+0x110>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004bf2:	4a37      	ldr	r2, [pc, #220]	; (8004cd0 <HAL_RCC_ClockConfig+0x1e4>)
 8004bf4:	6893      	ldr	r3, [r2, #8]
 8004bf6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004bfa:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bfc:	682b      	ldr	r3, [r5, #0]
 8004bfe:	f013 0f08 	tst.w	r3, #8
 8004c02:	d006      	beq.n	8004c12 <HAL_RCC_ClockConfig+0x126>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004c04:	4a32      	ldr	r2, [pc, #200]	; (8004cd0 <HAL_RCC_ClockConfig+0x1e4>)
 8004c06:	6893      	ldr	r3, [r2, #8]
 8004c08:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004c0c:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004c10:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c12:	4a2f      	ldr	r2, [pc, #188]	; (8004cd0 <HAL_RCC_ClockConfig+0x1e4>)
 8004c14:	6893      	ldr	r3, [r2, #8]
 8004c16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c1a:	68a9      	ldr	r1, [r5, #8]
 8004c1c:	430b      	orrs	r3, r1
 8004c1e:	6093      	str	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c20:	4b2a      	ldr	r3, [pc, #168]	; (8004ccc <HAL_RCC_ClockConfig+0x1e0>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f003 030f 	and.w	r3, r3, #15
 8004c28:	42a3      	cmp	r3, r4
 8004c2a:	d830      	bhi.n	8004c8e <HAL_RCC_ClockConfig+0x1a2>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c2c:	682b      	ldr	r3, [r5, #0]
 8004c2e:	f013 0f04 	tst.w	r3, #4
 8004c32:	d006      	beq.n	8004c42 <HAL_RCC_ClockConfig+0x156>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c34:	4a26      	ldr	r2, [pc, #152]	; (8004cd0 <HAL_RCC_ClockConfig+0x1e4>)
 8004c36:	6893      	ldr	r3, [r2, #8]
 8004c38:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004c3c:	68e9      	ldr	r1, [r5, #12]
 8004c3e:	430b      	orrs	r3, r1
 8004c40:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c42:	682b      	ldr	r3, [r5, #0]
 8004c44:	f013 0f08 	tst.w	r3, #8
 8004c48:	d007      	beq.n	8004c5a <HAL_RCC_ClockConfig+0x16e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c4a:	4a21      	ldr	r2, [pc, #132]	; (8004cd0 <HAL_RCC_ClockConfig+0x1e4>)
 8004c4c:	6893      	ldr	r3, [r2, #8]
 8004c4e:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8004c52:	6929      	ldr	r1, [r5, #16]
 8004c54:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004c58:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004c5a:	f7ff ff05 	bl	8004a68 <HAL_RCC_GetSysClockFreq>
 8004c5e:	4b1c      	ldr	r3, [pc, #112]	; (8004cd0 <HAL_RCC_ClockConfig+0x1e4>)
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004c66:	4a1c      	ldr	r2, [pc, #112]	; (8004cd8 <HAL_RCC_ClockConfig+0x1ec>)
 8004c68:	5cd3      	ldrb	r3, [r2, r3]
 8004c6a:	f003 031f 	and.w	r3, r3, #31
 8004c6e:	40d8      	lsrs	r0, r3
 8004c70:	4b1a      	ldr	r3, [pc, #104]	; (8004cdc <HAL_RCC_ClockConfig+0x1f0>)
 8004c72:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 8004c74:	4b1a      	ldr	r3, [pc, #104]	; (8004ce0 <HAL_RCC_ClockConfig+0x1f4>)
 8004c76:	6818      	ldr	r0, [r3, #0]
 8004c78:	f7fe f8c2 	bl	8002e00 <HAL_InitTick>
}
 8004c7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(hpre == RCC_SYSCLK_DIV2)
 8004c7e:	2e80      	cmp	r6, #128	; 0x80
 8004c80:	d1ce      	bne.n	8004c20 <HAL_RCC_ClockConfig+0x134>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004c82:	4a13      	ldr	r2, [pc, #76]	; (8004cd0 <HAL_RCC_ClockConfig+0x1e4>)
 8004c84:	6893      	ldr	r3, [r2, #8]
 8004c86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c8a:	6093      	str	r3, [r2, #8]
 8004c8c:	e7c8      	b.n	8004c20 <HAL_RCC_ClockConfig+0x134>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c8e:	4a0f      	ldr	r2, [pc, #60]	; (8004ccc <HAL_RCC_ClockConfig+0x1e0>)
 8004c90:	6813      	ldr	r3, [r2, #0]
 8004c92:	f023 030f 	bic.w	r3, r3, #15
 8004c96:	4323      	orrs	r3, r4
 8004c98:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8004c9a:	f7fe f8f5 	bl	8002e88 <HAL_GetTick>
 8004c9e:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ca0:	4b0a      	ldr	r3, [pc, #40]	; (8004ccc <HAL_RCC_ClockConfig+0x1e0>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f003 030f 	and.w	r3, r3, #15
 8004ca8:	42a3      	cmp	r3, r4
 8004caa:	d0bf      	beq.n	8004c2c <HAL_RCC_ClockConfig+0x140>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cac:	f7fe f8ec 	bl	8002e88 <HAL_GetTick>
 8004cb0:	1b80      	subs	r0, r0, r6
 8004cb2:	f241 3388 	movw	r3, #5000	; 0x1388
 8004cb6:	4298      	cmp	r0, r3
 8004cb8:	d9f2      	bls.n	8004ca0 <HAL_RCC_ClockConfig+0x1b4>
        return HAL_TIMEOUT;
 8004cba:	2003      	movs	r0, #3
 8004cbc:	e7de      	b.n	8004c7c <HAL_RCC_ClockConfig+0x190>
    return HAL_ERROR;
 8004cbe:	2001      	movs	r0, #1
}
 8004cc0:	4770      	bx	lr
      return HAL_ERROR;
 8004cc2:	2001      	movs	r0, #1
 8004cc4:	e7da      	b.n	8004c7c <HAL_RCC_ClockConfig+0x190>
          return HAL_ERROR;
 8004cc6:	2001      	movs	r0, #1
 8004cc8:	e7d8      	b.n	8004c7c <HAL_RCC_ClockConfig+0x190>
 8004cca:	bf00      	nop
 8004ccc:	40022000 	.word	0x40022000
 8004cd0:	40021000 	.word	0x40021000
 8004cd4:	04c4b400 	.word	0x04c4b400
 8004cd8:	080087bc 	.word	0x080087bc
 8004cdc:	20000000 	.word	0x20000000
 8004ce0:	20000008 	.word	0x20000008

08004ce4 <HAL_RCC_GetHCLKFreq>:
}
 8004ce4:	4b01      	ldr	r3, [pc, #4]	; (8004cec <HAL_RCC_GetHCLKFreq+0x8>)
 8004ce6:	6818      	ldr	r0, [r3, #0]
 8004ce8:	4770      	bx	lr
 8004cea:	bf00      	nop
 8004cec:	20000000 	.word	0x20000000

08004cf0 <HAL_RCC_GetPCLK1Freq>:
{
 8004cf0:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004cf2:	f7ff fff7 	bl	8004ce4 <HAL_RCC_GetHCLKFreq>
 8004cf6:	4b05      	ldr	r3, [pc, #20]	; (8004d0c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8004cfe:	4a04      	ldr	r2, [pc, #16]	; (8004d10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d00:	5cd3      	ldrb	r3, [r2, r3]
 8004d02:	f003 031f 	and.w	r3, r3, #31
}
 8004d06:	40d8      	lsrs	r0, r3
 8004d08:	bd08      	pop	{r3, pc}
 8004d0a:	bf00      	nop
 8004d0c:	40021000 	.word	0x40021000
 8004d10:	080087cc 	.word	0x080087cc

08004d14 <HAL_RCC_GetPCLK2Freq>:
{
 8004d14:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004d16:	f7ff ffe5 	bl	8004ce4 <HAL_RCC_GetHCLKFreq>
 8004d1a:	4b05      	ldr	r3, [pc, #20]	; (8004d30 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8004d22:	4a04      	ldr	r2, [pc, #16]	; (8004d34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004d24:	5cd3      	ldrb	r3, [r2, r3]
 8004d26:	f003 031f 	and.w	r3, r3, #31
}
 8004d2a:	40d8      	lsrs	r0, r3
 8004d2c:	bd08      	pop	{r3, pc}
 8004d2e:	bf00      	nop
 8004d30:	40021000 	.word	0x40021000
 8004d34:	080087cc 	.word	0x080087cc

08004d38 <HAL_RCC_EnableCSS>:
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8004d38:	4a02      	ldr	r2, [pc, #8]	; (8004d44 <HAL_RCC_EnableCSS+0xc>)
 8004d3a:	6813      	ldr	r3, [r2, #0]
 8004d3c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d40:	6013      	str	r3, [r2, #0]
}
 8004d42:	4770      	bx	lr
 8004d44:	40021000 	.word	0x40021000

08004d48 <HAL_RCC_CSSCallback>:
}
 8004d48:	4770      	bx	lr
	...

08004d4c <HAL_RCC_NMI_IRQHandler>:
{
 8004d4c:	b508      	push	{r3, lr}
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8004d4e:	4b06      	ldr	r3, [pc, #24]	; (8004d68 <HAL_RCC_NMI_IRQHandler+0x1c>)
 8004d50:	69db      	ldr	r3, [r3, #28]
 8004d52:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004d56:	d100      	bne.n	8004d5a <HAL_RCC_NMI_IRQHandler+0xe>
}
 8004d58:	bd08      	pop	{r3, pc}
    HAL_RCC_CSSCallback();
 8004d5a:	f7ff fff5 	bl	8004d48 <HAL_RCC_CSSCallback>
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8004d5e:	4b02      	ldr	r3, [pc, #8]	; (8004d68 <HAL_RCC_NMI_IRQHandler+0x1c>)
 8004d60:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004d64:	621a      	str	r2, [r3, #32]
}
 8004d66:	e7f7      	b.n	8004d58 <HAL_RCC_NMI_IRQHandler+0xc>
 8004d68:	40021000 	.word	0x40021000

08004d6c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d6e:	b083      	sub	sp, #12
 8004d70:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004d72:	6803      	ldr	r3, [r0, #0]
 8004d74:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8004d78:	d06e      	beq.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0xec>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d7a:	4b35      	ldr	r3, [pc, #212]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8004d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d7e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8004d82:	d11e      	bne.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d84:	4b32      	ldr	r3, [pc, #200]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8004d86:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004d88:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004d8c:	659a      	str	r2, [r3, #88]	; 0x58
 8004d8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d94:	9301      	str	r3, [sp, #4]
 8004d96:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004d98:	2601      	movs	r6, #1
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d9a:	4a2e      	ldr	r2, [pc, #184]	; (8004e54 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004d9c:	6813      	ldr	r3, [r2, #0]
 8004d9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004da2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004da4:	f7fe f870 	bl	8002e88 <HAL_GetTick>
 8004da8:	4605      	mov	r5, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004daa:	4b2a      	ldr	r3, [pc, #168]	; (8004e54 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004db2:	d108      	bne.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004db4:	f7fe f868 	bl	8002e88 <HAL_GetTick>
 8004db8:	1b40      	subs	r0, r0, r5
 8004dba:	2802      	cmp	r0, #2
 8004dbc:	d9f5      	bls.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x3e>
      {
        ret = HAL_TIMEOUT;
 8004dbe:	2503      	movs	r5, #3
 8004dc0:	e002      	b.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    FlagStatus       pwrclkchanged = RESET;
 8004dc2:	2600      	movs	r6, #0
 8004dc4:	e7e9      	b.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x2e>
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004dc6:	2500      	movs	r5, #0
        break;
      }
    }

    if(ret == HAL_OK)
 8004dc8:	bb45      	cbnz	r5, 8004e1c <HAL_RCCEx_PeriphCLKConfig+0xb0>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004dca:	4b21      	ldr	r3, [pc, #132]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8004dcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004dd0:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8004dd4:	d015      	beq.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x96>
 8004dd6:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d012      	beq.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x96>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004ddc:	4a1c      	ldr	r2, [pc, #112]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8004dde:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004de2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004de6:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 8004dea:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8004dee:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004df2:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 8004df6:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8004dfa:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004dfe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004e02:	f013 0f01 	tst.w	r3, #1
 8004e06:	d110      	bne.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0xbe>
            break;
          }
        }
      }
      
      if(ret == HAL_OK)
 8004e08:	b945      	cbnz	r5, 8004e1c <HAL_RCCEx_PeriphCLKConfig+0xb0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e0a:	4a11      	ldr	r2, [pc, #68]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8004e0c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004e10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e14:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8004e16:	430b      	orrs	r3, r1
 8004e18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e1c:	b1ee      	cbz	r6, 8004e5a <HAL_RCCEx_PeriphCLKConfig+0xee>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e1e:	4a0c      	ldr	r2, [pc, #48]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8004e20:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004e22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e26:	6593      	str	r3, [r2, #88]	; 0x58
 8004e28:	e017      	b.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0xee>
        tickstart = HAL_GetTick();
 8004e2a:	f7fe f82d 	bl	8002e88 <HAL_GetTick>
 8004e2e:	4607      	mov	r7, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e30:	4b07      	ldr	r3, [pc, #28]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8004e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e36:	f013 0f02 	tst.w	r3, #2
 8004e3a:	d1e5      	bne.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x9c>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e3c:	f7fe f824 	bl	8002e88 <HAL_GetTick>
 8004e40:	1bc0      	subs	r0, r0, r7
 8004e42:	f241 3388 	movw	r3, #5000	; 0x1388
 8004e46:	4298      	cmp	r0, r3
 8004e48:	d9f2      	bls.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0xc4>
            ret = HAL_TIMEOUT;
 8004e4a:	2503      	movs	r5, #3
 8004e4c:	e7dc      	b.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 8004e4e:	bf00      	nop
 8004e50:	40021000 	.word	0x40021000
 8004e54:	40007000 	.word	0x40007000
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004e58:	2500      	movs	r5, #0
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004e5a:	6823      	ldr	r3, [r4, #0]
 8004e5c:	f013 0f01 	tst.w	r3, #1
 8004e60:	d008      	beq.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004e62:	4a9f      	ldr	r2, [pc, #636]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004e64:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004e68:	f023 0303 	bic.w	r3, r3, #3
 8004e6c:	6861      	ldr	r1, [r4, #4]
 8004e6e:	430b      	orrs	r3, r1
 8004e70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004e74:	6823      	ldr	r3, [r4, #0]
 8004e76:	f013 0f02 	tst.w	r3, #2
 8004e7a:	d008      	beq.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x122>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004e7c:	4a98      	ldr	r2, [pc, #608]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004e7e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004e82:	f023 030c 	bic.w	r3, r3, #12
 8004e86:	68a1      	ldr	r1, [r4, #8]
 8004e88:	430b      	orrs	r3, r1
 8004e8a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004e8e:	6823      	ldr	r3, [r4, #0]
 8004e90:	f013 0f04 	tst.w	r3, #4
 8004e94:	d008      	beq.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004e96:	4a92      	ldr	r2, [pc, #584]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004e98:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004e9c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004ea0:	68e1      	ldr	r1, [r4, #12]
 8004ea2:	430b      	orrs	r3, r1
 8004ea4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004ea8:	6823      	ldr	r3, [r4, #0]
 8004eaa:	f013 0f08 	tst.w	r3, #8
 8004eae:	d008      	beq.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004eb0:	4a8b      	ldr	r2, [pc, #556]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004eb2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004eb6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004eba:	6921      	ldr	r1, [r4, #16]
 8004ebc:	430b      	orrs	r3, r1
 8004ebe:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004ec2:	6823      	ldr	r3, [r4, #0]
 8004ec4:	f013 0f10 	tst.w	r3, #16
 8004ec8:	d008      	beq.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004eca:	4a85      	ldr	r2, [pc, #532]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004ecc:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004ed0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ed4:	6961      	ldr	r1, [r4, #20]
 8004ed6:	430b      	orrs	r3, r1
 8004ed8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004edc:	6823      	ldr	r3, [r4, #0]
 8004ede:	f013 0f20 	tst.w	r3, #32
 8004ee2:	d008      	beq.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004ee4:	4a7e      	ldr	r2, [pc, #504]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004ee6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004eea:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004eee:	69a1      	ldr	r1, [r4, #24]
 8004ef0:	430b      	orrs	r3, r1
 8004ef2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004ef6:	6823      	ldr	r3, [r4, #0]
 8004ef8:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004efc:	d008      	beq.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004efe:	4a78      	ldr	r2, [pc, #480]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004f00:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004f04:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004f08:	69e1      	ldr	r1, [r4, #28]
 8004f0a:	430b      	orrs	r3, r1
 8004f0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004f10:	6823      	ldr	r3, [r4, #0]
 8004f12:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004f16:	d008      	beq.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004f18:	4a71      	ldr	r2, [pc, #452]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004f1a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004f1e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004f22:	6a21      	ldr	r1, [r4, #32]
 8004f24:	430b      	orrs	r3, r1
 8004f26:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004f2a:	6823      	ldr	r3, [r4, #0]
 8004f2c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004f30:	d008      	beq.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004f32:	4a6b      	ldr	r2, [pc, #428]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004f34:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004f38:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004f3c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004f3e:	430b      	orrs	r3, r1
 8004f40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004f44:	6823      	ldr	r3, [r4, #0]
 8004f46:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004f4a:	d008      	beq.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x1f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004f4c:	4a64      	ldr	r2, [pc, #400]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004f4e:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8004f52:	f023 0303 	bic.w	r3, r3, #3
 8004f56:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004f58:	430b      	orrs	r3, r1
 8004f5a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004f5e:	6823      	ldr	r3, [r4, #0]
 8004f60:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004f64:	d008      	beq.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x20c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004f66:	4a5e      	ldr	r2, [pc, #376]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004f68:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004f6c:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8004f70:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004f72:	430b      	orrs	r3, r1
 8004f74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004f78:	6823      	ldr	r3, [r4, #0]
 8004f7a:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004f7e:	d00c      	beq.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x22e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004f80:	4a57      	ldr	r2, [pc, #348]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004f82:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004f86:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004f8a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004f8c:	430b      	orrs	r3, r1
 8004f8e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004f92:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004f94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f98:	d079      	beq.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x322>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004f9a:	6823      	ldr	r3, [r4, #0]
 8004f9c:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8004fa0:	d00c      	beq.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004fa2:	4a4f      	ldr	r2, [pc, #316]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004fa4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004fa8:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8004fac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004fae:	430b      	orrs	r3, r1
 8004fb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004fb4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004fb6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fba:	d06d      	beq.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004fbc:	6823      	ldr	r3, [r4, #0]
 8004fbe:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8004fc2:	d00c      	beq.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004fc4:	4a46      	ldr	r2, [pc, #280]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004fc6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004fca:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8004fce:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004fd0:	430b      	orrs	r3, r1
 8004fd2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004fd6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004fd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004fdc:	d061      	beq.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x336>
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004fde:	6823      	ldr	r3, [r4, #0]
 8004fe0:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8004fe4:	d00c      	beq.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x294>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004fe6:	4a3e      	ldr	r2, [pc, #248]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004fe8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004fec:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8004ff0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8004ff2:	430b      	orrs	r3, r1
 8004ff4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004ff8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004ffa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ffe:	d055      	beq.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x340>
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005000:	6823      	ldr	r3, [r4, #0]
 8005002:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8005006:	d00c      	beq.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005008:	4a35      	ldr	r2, [pc, #212]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800500a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800500e:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8005012:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005014:	430b      	orrs	r3, r1
 8005016:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800501a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800501c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005020:	d049      	beq.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005022:	6823      	ldr	r3, [r4, #0]
 8005024:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8005028:	d00c      	beq.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800502a:	4a2d      	ldr	r2, [pc, #180]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800502c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8005030:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8005034:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8005036:	430b      	orrs	r3, r1
 8005038:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800503c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800503e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005042:	d03d      	beq.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x354>
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005044:	6823      	ldr	r3, [r4, #0]
 8005046:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800504a:	d00c      	beq.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800504c:	4a24      	ldr	r2, [pc, #144]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800504e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8005052:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8005056:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005058:	430b      	orrs	r3, r1
 800505a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800505e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005060:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005064:	d031      	beq.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x35e>
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005066:	6823      	ldr	r3, [r4, #0]
 8005068:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 800506c:	d00c      	beq.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x31c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800506e:	4a1c      	ldr	r2, [pc, #112]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005070:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8005074:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005078:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800507a:	430b      	orrs	r3, r1
 800507c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005080:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8005082:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005086:	d025      	beq.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x368>
  }

#endif /* QUADSPI */

  return status;
}
 8005088:	4628      	mov	r0, r5
 800508a:	b003      	add	sp, #12
 800508c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800508e:	68d3      	ldr	r3, [r2, #12]
 8005090:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005094:	60d3      	str	r3, [r2, #12]
 8005096:	e780      	b.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x22e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005098:	68d3      	ldr	r3, [r2, #12]
 800509a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800509e:	60d3      	str	r3, [r2, #12]
 80050a0:	e78c      	b.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x250>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80050a2:	68d3      	ldr	r3, [r2, #12]
 80050a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80050a8:	60d3      	str	r3, [r2, #12]
 80050aa:	e798      	b.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x272>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80050ac:	68d3      	ldr	r3, [r2, #12]
 80050ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80050b2:	60d3      	str	r3, [r2, #12]
 80050b4:	e7a4      	b.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x294>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80050b6:	68d3      	ldr	r3, [r2, #12]
 80050b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80050bc:	60d3      	str	r3, [r2, #12]
 80050be:	e7b0      	b.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80050c0:	68d3      	ldr	r3, [r2, #12]
 80050c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050c6:	60d3      	str	r3, [r2, #12]
 80050c8:	e7bc      	b.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80050ca:	68d3      	ldr	r3, [r2, #12]
 80050cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050d0:	60d3      	str	r3, [r2, #12]
 80050d2:	e7c8      	b.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80050d4:	68d3      	ldr	r3, [r2, #12]
 80050d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80050da:	60d3      	str	r3, [r2, #12]
 80050dc:	e7d4      	b.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 80050de:	bf00      	nop
 80050e0:	40021000 	.word	0x40021000

080050e4 <HAL_SPI_Init>:
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80050e4:	2800      	cmp	r0, #0
 80050e6:	d06f      	beq.n	80051c8 <HAL_SPI_Init+0xe4>
{
 80050e8:	b510      	push	{r4, lr}
 80050ea:	4604      	mov	r4, r0
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80050ec:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80050ee:	b933      	cbnz	r3, 80050fe <HAL_SPI_Init+0x1a>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80050f0:	6843      	ldr	r3, [r0, #4]
 80050f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050f6:	d005      	beq.n	8005104 <HAL_SPI_Init+0x20>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80050f8:	2300      	movs	r3, #0
 80050fa:	61c3      	str	r3, [r0, #28]
 80050fc:	e002      	b.n	8005104 <HAL_SPI_Init+0x20>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80050fe:	2300      	movs	r3, #0
 8005100:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005102:	6143      	str	r3, [r0, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005104:	2300      	movs	r3, #0
 8005106:	62a3      	str	r3, [r4, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005108:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 800510c:	2b00      	cmp	r3, #0
 800510e:	d052      	beq.n	80051b6 <HAL_SPI_Init+0xd2>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005110:	2302      	movs	r3, #2
 8005112:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005116:	6822      	ldr	r2, [r4, #0]
 8005118:	6813      	ldr	r3, [r2, #0]
 800511a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800511e:	6013      	str	r3, [r2, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005120:	68e3      	ldr	r3, [r4, #12]
 8005122:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005126:	d94c      	bls.n	80051c2 <HAL_SPI_Init+0xde>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005128:	2200      	movs	r2, #0
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800512a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800512e:	d004      	beq.n	800513a <HAL_SPI_Init+0x56>
 8005130:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005134:	d001      	beq.n	800513a <HAL_SPI_Init+0x56>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005136:	2300      	movs	r3, #0
 8005138:	62a3      	str	r3, [r4, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800513a:	6863      	ldr	r3, [r4, #4]
 800513c:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8005140:	68a1      	ldr	r1, [r4, #8]
 8005142:	f401 4104 	and.w	r1, r1, #33792	; 0x8400
 8005146:	430b      	orrs	r3, r1
 8005148:	6921      	ldr	r1, [r4, #16]
 800514a:	f001 0102 	and.w	r1, r1, #2
 800514e:	430b      	orrs	r3, r1
 8005150:	6961      	ldr	r1, [r4, #20]
 8005152:	f001 0101 	and.w	r1, r1, #1
 8005156:	430b      	orrs	r3, r1
 8005158:	69a1      	ldr	r1, [r4, #24]
 800515a:	f401 7100 	and.w	r1, r1, #512	; 0x200
 800515e:	430b      	orrs	r3, r1
 8005160:	69e1      	ldr	r1, [r4, #28]
 8005162:	f001 0138 	and.w	r1, r1, #56	; 0x38
 8005166:	430b      	orrs	r3, r1
 8005168:	6a21      	ldr	r1, [r4, #32]
 800516a:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800516e:	430b      	orrs	r3, r1
 8005170:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8005172:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 8005176:	6820      	ldr	r0, [r4, #0]
 8005178:	430b      	orrs	r3, r1
 800517a:	6003      	str	r3, [r0, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800517c:	8b63      	ldrh	r3, [r4, #26]
 800517e:	f003 0304 	and.w	r3, r3, #4
 8005182:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005184:	f001 0110 	and.w	r1, r1, #16
 8005188:	430b      	orrs	r3, r1
 800518a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800518c:	f001 0108 	and.w	r1, r1, #8
 8005190:	430b      	orrs	r3, r1
 8005192:	68e1      	ldr	r1, [r4, #12]
 8005194:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
 8005198:	430b      	orrs	r3, r1
 800519a:	6821      	ldr	r1, [r4, #0]
 800519c:	4313      	orrs	r3, r2
 800519e:	604b      	str	r3, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80051a0:	6822      	ldr	r2, [r4, #0]
 80051a2:	69d3      	ldr	r3, [r2, #28]
 80051a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80051a8:	61d3      	str	r3, [r2, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80051aa:	2000      	movs	r0, #0
 80051ac:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80051ae:	2301      	movs	r3, #1
 80051b0:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  return HAL_OK;
}
 80051b4:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 80051b6:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 80051ba:	4620      	mov	r0, r4
 80051bc:	f7fd fa52 	bl	8002664 <HAL_SPI_MspInit>
 80051c0:	e7a6      	b.n	8005110 <HAL_SPI_Init+0x2c>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80051c2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80051c6:	e7b0      	b.n	800512a <HAL_SPI_Init+0x46>
    return HAL_ERROR;
 80051c8:	2001      	movs	r0, #1
}
 80051ca:	4770      	bx	lr

080051cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051d0:	4604      	mov	r4, r0
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 80051d2:	6801      	ldr	r1, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80051d4:	6883      	ldr	r3, [r0, #8]
 80051d6:	6902      	ldr	r2, [r0, #16]
 80051d8:	4313      	orrs	r3, r2
 80051da:	6942      	ldr	r2, [r0, #20]
 80051dc:	4313      	orrs	r3, r2
 80051de:	69c2      	ldr	r2, [r0, #28]
 80051e0:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80051e2:	6808      	ldr	r0, [r1, #0]
 80051e4:	4a9c      	ldr	r2, [pc, #624]	; (8005458 <UART_SetConfig+0x28c>)
 80051e6:	4002      	ands	r2, r0
 80051e8:	4313      	orrs	r3, r2
 80051ea:	600b      	str	r3, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051ec:	6822      	ldr	r2, [r4, #0]
 80051ee:	6853      	ldr	r3, [r2, #4]
 80051f0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80051f4:	68e1      	ldr	r1, [r4, #12]
 80051f6:	430b      	orrs	r3, r1
 80051f8:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80051fa:	69a1      	ldr	r1, [r4, #24]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80051fc:	6822      	ldr	r2, [r4, #0]
 80051fe:	4b97      	ldr	r3, [pc, #604]	; (800545c <UART_SetConfig+0x290>)
 8005200:	429a      	cmp	r2, r3
 8005202:	d001      	beq.n	8005208 <UART_SetConfig+0x3c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005204:	6a23      	ldr	r3, [r4, #32]
 8005206:	4319      	orrs	r1, r3
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005208:	6893      	ldr	r3, [r2, #8]
 800520a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800520e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005212:	430b      	orrs	r3, r1
 8005214:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005216:	6822      	ldr	r2, [r4, #0]
 8005218:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800521a:	f023 030f 	bic.w	r3, r3, #15
 800521e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005220:	430b      	orrs	r3, r1
 8005222:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005224:	6822      	ldr	r2, [r4, #0]
 8005226:	4b8e      	ldr	r3, [pc, #568]	; (8005460 <UART_SetConfig+0x294>)
 8005228:	429a      	cmp	r2, r3
 800522a:	d010      	beq.n	800524e <UART_SetConfig+0x82>
 800522c:	4b8d      	ldr	r3, [pc, #564]	; (8005464 <UART_SetConfig+0x298>)
 800522e:	429a      	cmp	r2, r3
 8005230:	d021      	beq.n	8005276 <UART_SetConfig+0xaa>
 8005232:	4b8d      	ldr	r3, [pc, #564]	; (8005468 <UART_SetConfig+0x29c>)
 8005234:	429a      	cmp	r2, r3
 8005236:	d037      	beq.n	80052a8 <UART_SetConfig+0xdc>
 8005238:	4b8c      	ldr	r3, [pc, #560]	; (800546c <UART_SetConfig+0x2a0>)
 800523a:	429a      	cmp	r2, r3
 800523c:	d05c      	beq.n	80052f8 <UART_SetConfig+0x12c>
 800523e:	4b8c      	ldr	r3, [pc, #560]	; (8005470 <UART_SetConfig+0x2a4>)
 8005240:	429a      	cmp	r2, r3
 8005242:	d06b      	beq.n	800531c <UART_SetConfig+0x150>
 8005244:	4b85      	ldr	r3, [pc, #532]	; (800545c <UART_SetConfig+0x290>)
 8005246:	429a      	cmp	r2, r3
 8005248:	d07d      	beq.n	8005346 <UART_SetConfig+0x17a>
 800524a:	2310      	movs	r3, #16
 800524c:	e03a      	b.n	80052c4 <UART_SetConfig+0xf8>
 800524e:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8005252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005256:	f003 0303 	and.w	r3, r3, #3
 800525a:	2b03      	cmp	r3, #3
 800525c:	d809      	bhi.n	8005272 <UART_SetConfig+0xa6>
 800525e:	e8df f003 	tbb	[pc, r3]
 8005262:	0402      	.short	0x0402
 8005264:	0687      	.short	0x0687
 8005266:	2301      	movs	r3, #1
 8005268:	e02c      	b.n	80052c4 <UART_SetConfig+0xf8>
 800526a:	2304      	movs	r3, #4
 800526c:	e02a      	b.n	80052c4 <UART_SetConfig+0xf8>
 800526e:	2308      	movs	r3, #8
 8005270:	e028      	b.n	80052c4 <UART_SetConfig+0xf8>
 8005272:	2310      	movs	r3, #16
 8005274:	e026      	b.n	80052c4 <UART_SetConfig+0xf8>
 8005276:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 800527a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800527e:	f003 030c 	and.w	r3, r3, #12
 8005282:	2b0c      	cmp	r3, #12
 8005284:	d80e      	bhi.n	80052a4 <UART_SetConfig+0xd8>
 8005286:	e8df f003 	tbb	[pc, r3]
 800528a:	0d07      	.short	0x0d07
 800528c:	0d090d0d 	.word	0x0d090d0d
 8005290:	0d750d0d 	.word	0x0d750d0d
 8005294:	0d0d      	.short	0x0d0d
 8005296:	0b          	.byte	0x0b
 8005297:	00          	.byte	0x00
 8005298:	2300      	movs	r3, #0
 800529a:	e013      	b.n	80052c4 <UART_SetConfig+0xf8>
 800529c:	2304      	movs	r3, #4
 800529e:	e011      	b.n	80052c4 <UART_SetConfig+0xf8>
 80052a0:	2308      	movs	r3, #8
 80052a2:	e00f      	b.n	80052c4 <UART_SetConfig+0xf8>
 80052a4:	2310      	movs	r3, #16
 80052a6:	e00d      	b.n	80052c4 <UART_SetConfig+0xf8>
 80052a8:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 80052ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052b0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80052b4:	2b20      	cmp	r3, #32
 80052b6:	d05f      	beq.n	8005378 <UART_SetConfig+0x1ac>
 80052b8:	d81a      	bhi.n	80052f0 <UART_SetConfig+0x124>
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d05e      	beq.n	800537c <UART_SetConfig+0x1b0>
 80052be:	2b10      	cmp	r3, #16
 80052c0:	d15e      	bne.n	8005380 <UART_SetConfig+0x1b4>
 80052c2:	2304      	movs	r3, #4

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80052c4:	4965      	ldr	r1, [pc, #404]	; (800545c <UART_SetConfig+0x290>)
 80052c6:	428a      	cmp	r2, r1
 80052c8:	d076      	beq.n	80053b8 <UART_SetConfig+0x1ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052ca:	69e0      	ldr	r0, [r4, #28]
 80052cc:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80052d0:	f000 80b6 	beq.w	8005440 <UART_SetConfig+0x274>
      }
    }
  }
  else
  {
    switch (clocksource)
 80052d4:	2b08      	cmp	r3, #8
 80052d6:	f200 8137 	bhi.w	8005548 <UART_SetConfig+0x37c>
 80052da:	e8df f013 	tbh	[pc, r3, lsl #1]
 80052de:	00f9      	.short	0x00f9
 80052e0:	00f7011c 	.word	0x00f7011c
 80052e4:	011f0135 	.word	0x011f0135
 80052e8:	01350135 	.word	0x01350135
 80052ec:	01220135 	.word	0x01220135
  UART_GETCLOCKSOURCE(huart, clocksource);
 80052f0:	2b30      	cmp	r3, #48	; 0x30
 80052f2:	d147      	bne.n	8005384 <UART_SetConfig+0x1b8>
 80052f4:	2308      	movs	r3, #8
 80052f6:	e7e5      	b.n	80052c4 <UART_SetConfig+0xf8>
 80052f8:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 80052fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005300:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005304:	2b80      	cmp	r3, #128	; 0x80
 8005306:	d03f      	beq.n	8005388 <UART_SetConfig+0x1bc>
 8005308:	d804      	bhi.n	8005314 <UART_SetConfig+0x148>
 800530a:	b3fb      	cbz	r3, 800538c <UART_SetConfig+0x1c0>
 800530c:	2b40      	cmp	r3, #64	; 0x40
 800530e:	d13f      	bne.n	8005390 <UART_SetConfig+0x1c4>
 8005310:	2304      	movs	r3, #4
 8005312:	e7d7      	b.n	80052c4 <UART_SetConfig+0xf8>
 8005314:	2bc0      	cmp	r3, #192	; 0xc0
 8005316:	d13d      	bne.n	8005394 <UART_SetConfig+0x1c8>
 8005318:	2308      	movs	r3, #8
 800531a:	e7d3      	b.n	80052c4 <UART_SetConfig+0xf8>
 800531c:	f503 33e0 	add.w	r3, r3, #114688	; 0x1c000
 8005320:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005324:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005328:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800532c:	d034      	beq.n	8005398 <UART_SetConfig+0x1cc>
 800532e:	d805      	bhi.n	800533c <UART_SetConfig+0x170>
 8005330:	b3a3      	cbz	r3, 800539c <UART_SetConfig+0x1d0>
 8005332:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005336:	d133      	bne.n	80053a0 <UART_SetConfig+0x1d4>
 8005338:	2304      	movs	r3, #4
 800533a:	e7c3      	b.n	80052c4 <UART_SetConfig+0xf8>
 800533c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005340:	d130      	bne.n	80053a4 <UART_SetConfig+0x1d8>
 8005342:	2308      	movs	r3, #8
 8005344:	e7be      	b.n	80052c4 <UART_SetConfig+0xf8>
 8005346:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 800534a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800534e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005352:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005356:	d027      	beq.n	80053a8 <UART_SetConfig+0x1dc>
 8005358:	d805      	bhi.n	8005366 <UART_SetConfig+0x19a>
 800535a:	b33b      	cbz	r3, 80053ac <UART_SetConfig+0x1e0>
 800535c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005360:	d126      	bne.n	80053b0 <UART_SetConfig+0x1e4>
 8005362:	2304      	movs	r3, #4
 8005364:	e7ae      	b.n	80052c4 <UART_SetConfig+0xf8>
 8005366:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800536a:	d123      	bne.n	80053b4 <UART_SetConfig+0x1e8>
 800536c:	2308      	movs	r3, #8
 800536e:	e7a9      	b.n	80052c4 <UART_SetConfig+0xf8>
 8005370:	2302      	movs	r3, #2
 8005372:	e7a7      	b.n	80052c4 <UART_SetConfig+0xf8>
 8005374:	2302      	movs	r3, #2
 8005376:	e7a5      	b.n	80052c4 <UART_SetConfig+0xf8>
 8005378:	2302      	movs	r3, #2
 800537a:	e7a3      	b.n	80052c4 <UART_SetConfig+0xf8>
 800537c:	2300      	movs	r3, #0
 800537e:	e7a1      	b.n	80052c4 <UART_SetConfig+0xf8>
 8005380:	2310      	movs	r3, #16
 8005382:	e79f      	b.n	80052c4 <UART_SetConfig+0xf8>
 8005384:	2310      	movs	r3, #16
 8005386:	e79d      	b.n	80052c4 <UART_SetConfig+0xf8>
 8005388:	2302      	movs	r3, #2
 800538a:	e79b      	b.n	80052c4 <UART_SetConfig+0xf8>
 800538c:	2300      	movs	r3, #0
 800538e:	e799      	b.n	80052c4 <UART_SetConfig+0xf8>
 8005390:	2310      	movs	r3, #16
 8005392:	e797      	b.n	80052c4 <UART_SetConfig+0xf8>
 8005394:	2310      	movs	r3, #16
 8005396:	e795      	b.n	80052c4 <UART_SetConfig+0xf8>
 8005398:	2302      	movs	r3, #2
 800539a:	e793      	b.n	80052c4 <UART_SetConfig+0xf8>
 800539c:	2300      	movs	r3, #0
 800539e:	e791      	b.n	80052c4 <UART_SetConfig+0xf8>
 80053a0:	2310      	movs	r3, #16
 80053a2:	e78f      	b.n	80052c4 <UART_SetConfig+0xf8>
 80053a4:	2310      	movs	r3, #16
 80053a6:	e78d      	b.n	80052c4 <UART_SetConfig+0xf8>
 80053a8:	2302      	movs	r3, #2
 80053aa:	e78b      	b.n	80052c4 <UART_SetConfig+0xf8>
 80053ac:	2300      	movs	r3, #0
 80053ae:	e789      	b.n	80052c4 <UART_SetConfig+0xf8>
 80053b0:	2310      	movs	r3, #16
 80053b2:	e787      	b.n	80052c4 <UART_SetConfig+0xf8>
 80053b4:	2310      	movs	r3, #16
 80053b6:	e785      	b.n	80052c4 <UART_SetConfig+0xf8>
    switch (clocksource)
 80053b8:	2b08      	cmp	r3, #8
 80053ba:	f200 80b5 	bhi.w	8005528 <UART_SetConfig+0x35c>
 80053be:	e8df f003 	tbb	[pc, r3]
 80053c2:	b308      	.short	0xb308
 80053c4:	b33ab33d 	.word	0xb33ab33d
 80053c8:	b3b3      	.short	0xb3b3
 80053ca:	05          	.byte	0x05
 80053cb:	00          	.byte	0x00
  if (UART_INSTANCE_LOWPOWER(huart))
 80053cc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80053d0:	e004      	b.n	80053dc <UART_SetConfig+0x210>
        pclk = HAL_RCC_GetPCLK1Freq();
 80053d2:	f7ff fc8d 	bl	8004cf0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80053d6:	2800      	cmp	r0, #0
 80053d8:	f000 80a8 	beq.w	800552c <UART_SetConfig+0x360>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80053dc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80053de:	4b25      	ldr	r3, [pc, #148]	; (8005474 <UART_SetConfig+0x2a8>)
 80053e0:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80053e4:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80053e8:	6865      	ldr	r5, [r4, #4]
 80053ea:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 80053ee:	4299      	cmp	r1, r3
 80053f0:	f200 809e 	bhi.w	8005530 <UART_SetConfig+0x364>
 80053f4:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 80053f8:	f200 809c 	bhi.w	8005534 <UART_SetConfig+0x368>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80053fc:	f04f 0800 	mov.w	r8, #0
 8005400:	b292      	uxth	r2, r2
 8005402:	2300      	movs	r3, #0
 8005404:	4641      	mov	r1, r8
 8005406:	f7fb fb51 	bl	8000aac <__aeabi_uldivmod>
 800540a:	020f      	lsls	r7, r1, #8
 800540c:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 8005410:	0206      	lsls	r6, r0, #8
 8005412:	0868      	lsrs	r0, r5, #1
 8005414:	462a      	mov	r2, r5
 8005416:	4643      	mov	r3, r8
 8005418:	1830      	adds	r0, r6, r0
 800541a:	f147 0100 	adc.w	r1, r7, #0
 800541e:	f7fb fb45 	bl	8000aac <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005422:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8005426:	4b14      	ldr	r3, [pc, #80]	; (8005478 <UART_SetConfig+0x2ac>)
 8005428:	429a      	cmp	r2, r3
 800542a:	f200 8085 	bhi.w	8005538 <UART_SetConfig+0x36c>
          huart->Instance->BRR = usartdiv;
 800542e:	6823      	ldr	r3, [r4, #0]
 8005430:	60d8      	str	r0, [r3, #12]
 8005432:	4640      	mov	r0, r8
 8005434:	e065      	b.n	8005502 <UART_SetConfig+0x336>
        pclk = HAL_RCC_GetSysClockFreq();
 8005436:	f7ff fb17 	bl	8004a68 <HAL_RCC_GetSysClockFreq>
        break;
 800543a:	e7cc      	b.n	80053d6 <UART_SetConfig+0x20a>
        pclk = (uint32_t) HSI_VALUE;
 800543c:	480f      	ldr	r0, [pc, #60]	; (800547c <UART_SetConfig+0x2b0>)
 800543e:	e7cd      	b.n	80053dc <UART_SetConfig+0x210>
    switch (clocksource)
 8005440:	2b08      	cmp	r3, #8
 8005442:	d87b      	bhi.n	800553c <UART_SetConfig+0x370>
 8005444:	e8df f003 	tbb	[pc, r3]
 8005448:	7a053c1c 	.word	0x7a053c1c
 800544c:	7a7a7a3f 	.word	0x7a7a7a3f
 8005450:	20          	.byte	0x20
 8005451:	00          	.byte	0x00
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005452:	480a      	ldr	r0, [pc, #40]	; (800547c <UART_SetConfig+0x2b0>)
 8005454:	e018      	b.n	8005488 <UART_SetConfig+0x2bc>
 8005456:	bf00      	nop
 8005458:	cfff69f3 	.word	0xcfff69f3
 800545c:	40008000 	.word	0x40008000
 8005460:	40013800 	.word	0x40013800
 8005464:	40004400 	.word	0x40004400
 8005468:	40004800 	.word	0x40004800
 800546c:	40004c00 	.word	0x40004c00
 8005470:	40005000 	.word	0x40005000
 8005474:	080087d4 	.word	0x080087d4
 8005478:	000ffcff 	.word	0x000ffcff
 800547c:	00f42400 	.word	0x00f42400
        pclk = HAL_RCC_GetPCLK1Freq();
 8005480:	f7ff fc36 	bl	8004cf0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8005484:	2800      	cmp	r0, #0
 8005486:	d05b      	beq.n	8005540 <UART_SetConfig+0x374>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005488:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800548a:	4b32      	ldr	r3, [pc, #200]	; (8005554 <UART_SetConfig+0x388>)
 800548c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8005490:	fbb0 f0f3 	udiv	r0, r0, r3
 8005494:	6862      	ldr	r2, [r4, #4]
 8005496:	0853      	lsrs	r3, r2, #1
 8005498:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800549c:	fbb0 f0f2 	udiv	r0, r0, r2
 80054a0:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054a2:	f1a0 0210 	sub.w	r2, r0, #16
 80054a6:	f64f 73ef 	movw	r3, #65519	; 0xffef
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d84a      	bhi.n	8005544 <UART_SetConfig+0x378>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80054ae:	f020 030f 	bic.w	r3, r0, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80054b2:	f3c0 0042 	ubfx	r0, r0, #1, #3
 80054b6:	4318      	orrs	r0, r3
        huart->Instance->BRR = brrtemp;
 80054b8:	6823      	ldr	r3, [r4, #0]
 80054ba:	60d8      	str	r0, [r3, #12]
 80054bc:	2000      	movs	r0, #0
 80054be:	e020      	b.n	8005502 <UART_SetConfig+0x336>
        pclk = HAL_RCC_GetPCLK2Freq();
 80054c0:	f7ff fc28 	bl	8004d14 <HAL_RCC_GetPCLK2Freq>
        break;
 80054c4:	e7de      	b.n	8005484 <UART_SetConfig+0x2b8>
        pclk = HAL_RCC_GetSysClockFreq();
 80054c6:	f7ff facf 	bl	8004a68 <HAL_RCC_GetSysClockFreq>
        break;
 80054ca:	e7db      	b.n	8005484 <UART_SetConfig+0x2b8>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054cc:	4822      	ldr	r0, [pc, #136]	; (8005558 <UART_SetConfig+0x38c>)
 80054ce:	e003      	b.n	80054d8 <UART_SetConfig+0x30c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054d0:	f7ff fc0e 	bl	8004cf0 <HAL_RCC_GetPCLK1Freq>
        pclk = 0U;
        ret = HAL_ERROR;
        break;
    }

    if (pclk != 0U)
 80054d4:	2800      	cmp	r0, #0
 80054d6:	d039      	beq.n	800554c <UART_SetConfig+0x380>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80054d8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80054da:	4b1e      	ldr	r3, [pc, #120]	; (8005554 <UART_SetConfig+0x388>)
 80054dc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80054e0:	fbb0 f0f3 	udiv	r0, r0, r3
 80054e4:	6863      	ldr	r3, [r4, #4]
 80054e6:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80054ea:	fbb0 f0f3 	udiv	r0, r0, r3
 80054ee:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054f0:	f1a0 0210 	sub.w	r2, r0, #16
 80054f4:	f64f 73ef 	movw	r3, #65519	; 0xffef
 80054f8:	429a      	cmp	r2, r3
 80054fa:	d829      	bhi.n	8005550 <UART_SetConfig+0x384>
      {
        huart->Instance->BRR = usartdiv;
 80054fc:	6823      	ldr	r3, [r4, #0]
 80054fe:	60d8      	str	r0, [r3, #12]
 8005500:	2000      	movs	r0, #0
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005502:	2301      	movs	r3, #1
 8005504:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005508:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800550c:	2300      	movs	r3, #0
 800550e:	6723      	str	r3, [r4, #112]	; 0x70
  huart->TxISR = NULL;
 8005510:	6763      	str	r3, [r4, #116]	; 0x74

  return ret;
}
 8005512:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 8005516:	f7ff fbfd 	bl	8004d14 <HAL_RCC_GetPCLK2Freq>
        break;
 800551a:	e7db      	b.n	80054d4 <UART_SetConfig+0x308>
        pclk = HAL_RCC_GetSysClockFreq();
 800551c:	f7ff faa4 	bl	8004a68 <HAL_RCC_GetSysClockFreq>
        break;
 8005520:	e7d8      	b.n	80054d4 <UART_SetConfig+0x308>
        pclk = (uint32_t) LSE_VALUE;
 8005522:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8005526:	e7d7      	b.n	80054d8 <UART_SetConfig+0x30c>
  if (UART_INSTANCE_LOWPOWER(huart))
 8005528:	2001      	movs	r0, #1
 800552a:	e7ea      	b.n	8005502 <UART_SetConfig+0x336>
 800552c:	2000      	movs	r0, #0
 800552e:	e7e8      	b.n	8005502 <UART_SetConfig+0x336>
        ret = HAL_ERROR;
 8005530:	2001      	movs	r0, #1
 8005532:	e7e6      	b.n	8005502 <UART_SetConfig+0x336>
 8005534:	2001      	movs	r0, #1
 8005536:	e7e4      	b.n	8005502 <UART_SetConfig+0x336>
          ret = HAL_ERROR;
 8005538:	2001      	movs	r0, #1
 800553a:	e7e2      	b.n	8005502 <UART_SetConfig+0x336>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800553c:	2001      	movs	r0, #1
 800553e:	e7e0      	b.n	8005502 <UART_SetConfig+0x336>
 8005540:	2000      	movs	r0, #0
 8005542:	e7de      	b.n	8005502 <UART_SetConfig+0x336>
        ret = HAL_ERROR;
 8005544:	2001      	movs	r0, #1
 8005546:	e7dc      	b.n	8005502 <UART_SetConfig+0x336>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005548:	2001      	movs	r0, #1
 800554a:	e7da      	b.n	8005502 <UART_SetConfig+0x336>
 800554c:	2000      	movs	r0, #0
 800554e:	e7d8      	b.n	8005502 <UART_SetConfig+0x336>
        ret = HAL_ERROR;
 8005550:	2001      	movs	r0, #1
 8005552:	e7d6      	b.n	8005502 <UART_SetConfig+0x336>
 8005554:	080087d4 	.word	0x080087d4
 8005558:	00f42400 	.word	0x00f42400

0800555c <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800555c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800555e:	f013 0f01 	tst.w	r3, #1
 8005562:	d006      	beq.n	8005572 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005564:	6802      	ldr	r2, [r0, #0]
 8005566:	6853      	ldr	r3, [r2, #4]
 8005568:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800556c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800556e:	430b      	orrs	r3, r1
 8005570:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005572:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005574:	f013 0f02 	tst.w	r3, #2
 8005578:	d006      	beq.n	8005588 <UART_AdvFeatureConfig+0x2c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800557a:	6802      	ldr	r2, [r0, #0]
 800557c:	6853      	ldr	r3, [r2, #4]
 800557e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005582:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8005584:	430b      	orrs	r3, r1
 8005586:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005588:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800558a:	f013 0f04 	tst.w	r3, #4
 800558e:	d006      	beq.n	800559e <UART_AdvFeatureConfig+0x42>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005590:	6802      	ldr	r2, [r0, #0]
 8005592:	6853      	ldr	r3, [r2, #4]
 8005594:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005598:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800559a:	430b      	orrs	r3, r1
 800559c:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800559e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80055a0:	f013 0f08 	tst.w	r3, #8
 80055a4:	d006      	beq.n	80055b4 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80055a6:	6802      	ldr	r2, [r0, #0]
 80055a8:	6853      	ldr	r3, [r2, #4]
 80055aa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80055ae:	6b81      	ldr	r1, [r0, #56]	; 0x38
 80055b0:	430b      	orrs	r3, r1
 80055b2:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80055b4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80055b6:	f013 0f10 	tst.w	r3, #16
 80055ba:	d006      	beq.n	80055ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80055bc:	6802      	ldr	r2, [r0, #0]
 80055be:	6893      	ldr	r3, [r2, #8]
 80055c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80055c4:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80055c6:	430b      	orrs	r3, r1
 80055c8:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80055ca:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80055cc:	f013 0f20 	tst.w	r3, #32
 80055d0:	d006      	beq.n	80055e0 <UART_AdvFeatureConfig+0x84>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80055d2:	6802      	ldr	r2, [r0, #0]
 80055d4:	6893      	ldr	r3, [r2, #8]
 80055d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80055da:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80055dc:	430b      	orrs	r3, r1
 80055de:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80055e0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80055e2:	f013 0f40 	tst.w	r3, #64	; 0x40
 80055e6:	d00a      	beq.n	80055fe <UART_AdvFeatureConfig+0xa2>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80055e8:	6802      	ldr	r2, [r0, #0]
 80055ea:	6853      	ldr	r3, [r2, #4]
 80055ec:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80055f0:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80055f2:	430b      	orrs	r3, r1
 80055f4:	6053      	str	r3, [r2, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80055f6:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80055f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055fc:	d00b      	beq.n	8005616 <UART_AdvFeatureConfig+0xba>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80055fe:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005600:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005604:	d006      	beq.n	8005614 <UART_AdvFeatureConfig+0xb8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005606:	6802      	ldr	r2, [r0, #0]
 8005608:	6853      	ldr	r3, [r2, #4]
 800560a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800560e:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8005610:	430b      	orrs	r3, r1
 8005612:	6053      	str	r3, [r2, #4]
  }
}
 8005614:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005616:	6802      	ldr	r2, [r0, #0]
 8005618:	6853      	ldr	r3, [r2, #4]
 800561a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800561e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8005620:	430b      	orrs	r3, r1
 8005622:	6053      	str	r3, [r2, #4]
 8005624:	e7eb      	b.n	80055fe <UART_AdvFeatureConfig+0xa2>

08005626 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005626:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800562a:	4605      	mov	r5, r0
 800562c:	460f      	mov	r7, r1
 800562e:	4616      	mov	r6, r2
 8005630:	4699      	mov	r9, r3
 8005632:	f8dd 8020 	ldr.w	r8, [sp, #32]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005636:	682c      	ldr	r4, [r5, #0]
 8005638:	69e4      	ldr	r4, [r4, #28]
 800563a:	ea37 0304 	bics.w	r3, r7, r4
 800563e:	bf0c      	ite	eq
 8005640:	2401      	moveq	r4, #1
 8005642:	2400      	movne	r4, #0
 8005644:	42b4      	cmp	r4, r6
 8005646:	d141      	bne.n	80056cc <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005648:	f1b8 3fff 	cmp.w	r8, #4294967295
 800564c:	d0f3      	beq.n	8005636 <UART_WaitOnFlagUntilTimeout+0x10>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800564e:	f7fd fc1b 	bl	8002e88 <HAL_GetTick>
 8005652:	eba0 0009 	sub.w	r0, r0, r9
 8005656:	4540      	cmp	r0, r8
 8005658:	d824      	bhi.n	80056a4 <UART_WaitOnFlagUntilTimeout+0x7e>
 800565a:	f1b8 0f00 	cmp.w	r8, #0
 800565e:	d021      	beq.n	80056a4 <UART_WaitOnFlagUntilTimeout+0x7e>
        __HAL_UNLOCK(huart);

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005660:	682b      	ldr	r3, [r5, #0]
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	f012 0f04 	tst.w	r2, #4
 8005668:	d0e5      	beq.n	8005636 <UART_WaitOnFlagUntilTimeout+0x10>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800566a:	69da      	ldr	r2, [r3, #28]
 800566c:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8005670:	d0e1      	beq.n	8005636 <UART_WaitOnFlagUntilTimeout+0x10>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005672:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005676:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005678:	682a      	ldr	r2, [r5, #0]
 800567a:	6813      	ldr	r3, [r2, #0]
 800567c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005680:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005682:	682a      	ldr	r2, [r5, #0]
 8005684:	6893      	ldr	r3, [r2, #8]
 8005686:	f023 0301 	bic.w	r3, r3, #1
 800568a:	6093      	str	r3, [r2, #8]

          huart->gState = HAL_UART_STATE_READY;
 800568c:	2320      	movs	r3, #32
 800568e:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005692:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005696:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800569a:	2300      	movs	r3, #0
 800569c:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80

          return HAL_TIMEOUT;
 80056a0:	2003      	movs	r0, #3
 80056a2:	e014      	b.n	80056ce <UART_WaitOnFlagUntilTimeout+0xa8>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80056a4:	682a      	ldr	r2, [r5, #0]
 80056a6:	6813      	ldr	r3, [r2, #0]
 80056a8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80056ac:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056ae:	682a      	ldr	r2, [r5, #0]
 80056b0:	6893      	ldr	r3, [r2, #8]
 80056b2:	f023 0301 	bic.w	r3, r3, #1
 80056b6:	6093      	str	r3, [r2, #8]
        huart->gState = HAL_UART_STATE_READY;
 80056b8:	2320      	movs	r3, #32
 80056ba:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80056be:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
        __HAL_UNLOCK(huart);
 80056c2:	2300      	movs	r3, #0
 80056c4:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
        return HAL_TIMEOUT;
 80056c8:	2003      	movs	r0, #3
 80056ca:	e000      	b.n	80056ce <UART_WaitOnFlagUntilTimeout+0xa8>
        }
      }
    }
  }
  return HAL_OK;
 80056cc:	2000      	movs	r0, #0
}
 80056ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080056d2 <UART_CheckIdleState>:
{
 80056d2:	b530      	push	{r4, r5, lr}
 80056d4:	b083      	sub	sp, #12
 80056d6:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056d8:	2300      	movs	r3, #0
 80056da:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  tickstart = HAL_GetTick();
 80056de:	f7fd fbd3 	bl	8002e88 <HAL_GetTick>
 80056e2:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80056e4:	6823      	ldr	r3, [r4, #0]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f013 0f08 	tst.w	r3, #8
 80056ec:	d10f      	bne.n	800570e <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80056ee:	6823      	ldr	r3, [r4, #0]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f013 0f04 	tst.w	r3, #4
 80056f6:	d118      	bne.n	800572a <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 80056f8:	2320      	movs	r3, #32
 80056fa:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80056fe:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005702:	2000      	movs	r0, #0
 8005704:	66e0      	str	r0, [r4, #108]	; 0x6c
  __HAL_UNLOCK(huart);
 8005706:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 800570a:	b003      	add	sp, #12
 800570c:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800570e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005712:	9300      	str	r3, [sp, #0]
 8005714:	4603      	mov	r3, r0
 8005716:	2200      	movs	r2, #0
 8005718:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800571c:	4620      	mov	r0, r4
 800571e:	f7ff ff82 	bl	8005626 <UART_WaitOnFlagUntilTimeout>
 8005722:	2800      	cmp	r0, #0
 8005724:	d0e3      	beq.n	80056ee <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 8005726:	2003      	movs	r0, #3
 8005728:	e7ef      	b.n	800570a <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800572a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800572e:	9300      	str	r3, [sp, #0]
 8005730:	462b      	mov	r3, r5
 8005732:	2200      	movs	r2, #0
 8005734:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005738:	4620      	mov	r0, r4
 800573a:	f7ff ff74 	bl	8005626 <UART_WaitOnFlagUntilTimeout>
 800573e:	2800      	cmp	r0, #0
 8005740:	d0da      	beq.n	80056f8 <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 8005742:	2003      	movs	r0, #3
 8005744:	e7e1      	b.n	800570a <UART_CheckIdleState+0x38>

08005746 <HAL_UART_Init>:
  if (huart == NULL)
 8005746:	b378      	cbz	r0, 80057a8 <HAL_UART_Init+0x62>
{
 8005748:	b510      	push	{r4, lr}
 800574a:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800574c:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8005750:	b30b      	cbz	r3, 8005796 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8005752:	2324      	movs	r3, #36	; 0x24
 8005754:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 8005758:	6822      	ldr	r2, [r4, #0]
 800575a:	6813      	ldr	r3, [r2, #0]
 800575c:	f023 0301 	bic.w	r3, r3, #1
 8005760:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005762:	4620      	mov	r0, r4
 8005764:	f7ff fd32 	bl	80051cc <UART_SetConfig>
 8005768:	2801      	cmp	r0, #1
 800576a:	d013      	beq.n	8005794 <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800576c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800576e:	b9bb      	cbnz	r3, 80057a0 <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005770:	6822      	ldr	r2, [r4, #0]
 8005772:	6853      	ldr	r3, [r2, #4]
 8005774:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8005778:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800577a:	6822      	ldr	r2, [r4, #0]
 800577c:	6893      	ldr	r3, [r2, #8]
 800577e:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8005782:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8005784:	6822      	ldr	r2, [r4, #0]
 8005786:	6813      	ldr	r3, [r2, #0]
 8005788:	f043 0301 	orr.w	r3, r3, #1
 800578c:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 800578e:	4620      	mov	r0, r4
 8005790:	f7ff ff9f 	bl	80056d2 <UART_CheckIdleState>
}
 8005794:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8005796:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 800579a:	f7fc ffad 	bl	80026f8 <HAL_UART_MspInit>
 800579e:	e7d8      	b.n	8005752 <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 80057a0:	4620      	mov	r0, r4
 80057a2:	f7ff fedb 	bl	800555c <UART_AdvFeatureConfig>
 80057a6:	e7e3      	b.n	8005770 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 80057a8:	2001      	movs	r0, #1
}
 80057aa:	4770      	bx	lr

080057ac <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80057ac:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80057ae:	b92b      	cbnz	r3, 80057bc <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 80057b0:	2301      	movs	r3, #1
 80057b2:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80057b6:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
 80057ba:	4770      	bx	lr
{
 80057bc:	b430      	push	{r4, r5}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80057be:	6803      	ldr	r3, [r0, #0]
 80057c0:	689a      	ldr	r2, [r3, #8]
 80057c2:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80057c6:	6899      	ldr	r1, [r3, #8]
 80057c8:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80057ca:	4d09      	ldr	r5, [pc, #36]	; (80057f0 <UARTEx_SetNbDataToProcess+0x44>)
 80057cc:	5c6b      	ldrb	r3, [r5, r1]
 80057ce:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 80057d0:	4c08      	ldr	r4, [pc, #32]	; (80057f4 <UARTEx_SetNbDataToProcess+0x48>)
 80057d2:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80057d4:	fb93 f3f1 	sdiv	r3, r3, r1
 80057d8:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80057dc:	5cab      	ldrb	r3, [r5, r2]
 80057de:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 80057e0:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80057e2:	fb93 f3f2 	sdiv	r3, r3, r2
 80057e6:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  }
}
 80057ea:	bc30      	pop	{r4, r5}
 80057ec:	4770      	bx	lr
 80057ee:	bf00      	nop
 80057f0:	080087f4 	.word	0x080087f4
 80057f4:	080087ec 	.word	0x080087ec

080057f8 <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 80057f8:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	d018      	beq.n	8005832 <HAL_UARTEx_DisableFifoMode+0x3a>
 8005800:	2301      	movs	r3, #1
 8005802:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8005806:	2324      	movs	r3, #36	; 0x24
 8005808:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800580c:	6803      	ldr	r3, [r0, #0]
 800580e:	681a      	ldr	r2, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8005810:	6819      	ldr	r1, [r3, #0]
 8005812:	f021 0101 	bic.w	r1, r1, #1
 8005816:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005818:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800581c:	2300      	movs	r3, #0
 800581e:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005820:	6801      	ldr	r1, [r0, #0]
 8005822:	600a      	str	r2, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 8005824:	2220      	movs	r2, #32
 8005826:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800582a:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  return HAL_OK;
 800582e:	4618      	mov	r0, r3
 8005830:	4770      	bx	lr
  __HAL_LOCK(huart);
 8005832:	2002      	movs	r0, #2
}
 8005834:	4770      	bx	lr

08005836 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8005836:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8005838:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800583c:	2b01      	cmp	r3, #1
 800583e:	d01d      	beq.n	800587c <HAL_UARTEx_SetTxFifoThreshold+0x46>
 8005840:	4604      	mov	r4, r0
 8005842:	2301      	movs	r3, #1
 8005844:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8005848:	2324      	movs	r3, #36	; 0x24
 800584a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800584e:	6803      	ldr	r3, [r0, #0]
 8005850:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8005852:	681a      	ldr	r2, [r3, #0]
 8005854:	f022 0201 	bic.w	r2, r2, #1
 8005858:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800585a:	6802      	ldr	r2, [r0, #0]
 800585c:	6893      	ldr	r3, [r2, #8]
 800585e:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8005862:	4319      	orrs	r1, r3
 8005864:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8005866:	f7ff ffa1 	bl	80057ac <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800586a:	6823      	ldr	r3, [r4, #0]
 800586c:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800586e:	2320      	movs	r3, #32
 8005870:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8005874:	2000      	movs	r0, #0
 8005876:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 800587a:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 800587c:	2002      	movs	r0, #2
 800587e:	e7fc      	b.n	800587a <HAL_UARTEx_SetTxFifoThreshold+0x44>

08005880 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8005880:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8005882:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8005886:	2b01      	cmp	r3, #1
 8005888:	d01d      	beq.n	80058c6 <HAL_UARTEx_SetRxFifoThreshold+0x46>
 800588a:	4604      	mov	r4, r0
 800588c:	2301      	movs	r3, #1
 800588e:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8005892:	2324      	movs	r3, #36	; 0x24
 8005894:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005898:	6803      	ldr	r3, [r0, #0]
 800589a:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	f022 0201 	bic.w	r2, r2, #1
 80058a2:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80058a4:	6802      	ldr	r2, [r0, #0]
 80058a6:	6893      	ldr	r3, [r2, #8]
 80058a8:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 80058ac:	4319      	orrs	r1, r3
 80058ae:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 80058b0:	f7ff ff7c 	bl	80057ac <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80058b4:	6823      	ldr	r3, [r4, #0]
 80058b6:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80058b8:	2320      	movs	r3, #32
 80058ba:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 80058be:	2000      	movs	r0, #0
 80058c0:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 80058c4:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 80058c6:	2002      	movs	r0, #2
 80058c8:	e7fc      	b.n	80058c4 <HAL_UARTEx_SetRxFifoThreshold+0x44>
	...

080058cc <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 80058cc:	b410      	push	{r4}
  assert_param(IS_ADC_COMMON_INSTANCE(ADCxy_COMMON));
  assert_param(IS_LL_ADC_COMMON_CLOCK(ADC_CommonInitStruct->CommonClock));

#if defined(ADC_MULTIMODE_SUPPORT)
  assert_param(IS_LL_ADC_MULTI_MODE(ADC_CommonInitStruct->Multimode));
  if (ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 80058ce:	684c      	ldr	r4, [r1, #4]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to  */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0UL)
 80058d0:	4b23      	ldr	r3, [pc, #140]	; (8005960 <LL_ADC_CommonInit+0x94>)
 80058d2:	4298      	cmp	r0, r3
 80058d4:	d025      	beq.n	8005922 <LL_ADC_CommonInit+0x56>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80058d6:	4b23      	ldr	r3, [pc, #140]	; (8005964 <LL_ADC_CommonInit+0x98>)
 80058d8:	689a      	ldr	r2, [r3, #8]
 80058da:	f012 0201 	ands.w	r2, r2, #1
 80058de:	d000      	beq.n	80058e2 <LL_ADC_CommonInit+0x16>
 80058e0:	2201      	movs	r2, #1
 80058e2:	4b21      	ldr	r3, [pc, #132]	; (8005968 <LL_ADC_CommonInit+0x9c>)
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	f013 0301 	ands.w	r3, r3, #1
 80058ea:	d000      	beq.n	80058ee <LL_ADC_CommonInit+0x22>
 80058ec:	2301      	movs	r3, #1
 80058ee:	4313      	orrs	r3, r2
 80058f0:	4a1e      	ldr	r2, [pc, #120]	; (800596c <LL_ADC_CommonInit+0xa0>)
 80058f2:	6892      	ldr	r2, [r2, #8]
 80058f4:	f012 0201 	ands.w	r2, r2, #1
 80058f8:	d000      	beq.n	80058fc <LL_ADC_CommonInit+0x30>
 80058fa:	2201      	movs	r2, #1
 80058fc:	4313      	orrs	r3, r2
 80058fe:	bf0c      	ite	eq
 8005900:	2301      	moveq	r3, #1
 8005902:	2300      	movne	r3, #0
 8005904:	b33b      	cbz	r3, 8005956 <LL_ADC_CommonInit+0x8a>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if (ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 8005906:	b1f4      	cbz	r4, 8005946 <LL_ADC_CommonInit+0x7a>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8005908:	6882      	ldr	r2, [r0, #8]
 800590a:	4b19      	ldr	r3, [pc, #100]	; (8005970 <LL_ADC_CommonInit+0xa4>)
 800590c:	4013      	ands	r3, r2
 800590e:	680a      	ldr	r2, [r1, #0]
 8005910:	4314      	orrs	r4, r2
 8005912:	688a      	ldr	r2, [r1, #8]
 8005914:	4314      	orrs	r4, r2
 8005916:	68ca      	ldr	r2, [r1, #12]
 8005918:	4314      	orrs	r4, r2
 800591a:	431c      	orrs	r4, r3
 800591c:	6084      	str	r4, [r0, #8]
  ErrorStatus status = SUCCESS;
 800591e:	2000      	movs	r0, #0
 8005920:	e01a      	b.n	8005958 <LL_ADC_CommonInit+0x8c>
 8005922:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	f013 0301 	ands.w	r3, r3, #1
 800592c:	d000      	beq.n	8005930 <LL_ADC_CommonInit+0x64>
 800592e:	2301      	movs	r3, #1
 8005930:	4a10      	ldr	r2, [pc, #64]	; (8005974 <LL_ADC_CommonInit+0xa8>)
 8005932:	6892      	ldr	r2, [r2, #8]
 8005934:	f012 0201 	ands.w	r2, r2, #1
 8005938:	d000      	beq.n	800593c <LL_ADC_CommonInit+0x70>
 800593a:	2201      	movs	r2, #1
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0UL)
 800593c:	4313      	orrs	r3, r2
 800593e:	bf0c      	ite	eq
 8005940:	2301      	moveq	r3, #1
 8005942:	2300      	movne	r3, #0
 8005944:	e7de      	b.n	8005904 <LL_ADC_CommonInit+0x38>
                 | ADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8005946:	6882      	ldr	r2, [r0, #8]
 8005948:	4b09      	ldr	r3, [pc, #36]	; (8005970 <LL_ADC_CommonInit+0xa4>)
 800594a:	4013      	ands	r3, r2
 800594c:	680a      	ldr	r2, [r1, #0]
 800594e:	4313      	orrs	r3, r2
 8005950:	6083      	str	r3, [r0, #8]
  ErrorStatus status = SUCCESS;
 8005952:	2000      	movs	r0, #0
 8005954:	e000      	b.n	8005958 <LL_ADC_CommonInit+0x8c>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 8005956:	2001      	movs	r0, #1
  }

  return status;
}
 8005958:	f85d 4b04 	ldr.w	r4, [sp], #4
 800595c:	4770      	bx	lr
 800595e:	bf00      	nop
 8005960:	50000300 	.word	0x50000300
 8005964:	50000400 	.word	0x50000400
 8005968:	50000500 	.word	0x50000500
 800596c:	50000600 	.word	0x50000600
 8005970:	ffc030e0 	.word	0xffc030e0
 8005974:	50000100 	.word	0x50000100

08005978 <LL_ADC_Init>:
 8005978:	6883      	ldr	r3, [r0, #8]
 800597a:	f013 0f01 	tst.w	r3, #1
 800597e:	d110      	bne.n	80059a2 <LL_ADC_Init+0x2a>
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8005980:	b410      	push	{r4}
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR,
 8005982:	68c3      	ldr	r3, [r0, #12]
 8005984:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8005988:	f023 0318 	bic.w	r3, r3, #24
 800598c:	680a      	ldr	r2, [r1, #0]
 800598e:	684c      	ldr	r4, [r1, #4]
 8005990:	4322      	orrs	r2, r4
 8005992:	6889      	ldr	r1, [r1, #8]
 8005994:	430a      	orrs	r2, r1
 8005996:	4313      	orrs	r3, r2
 8005998:	60c3      	str	r3, [r0, #12]
  ErrorStatus status = SUCCESS;
 800599a:	2000      	movs	r0, #0
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
  }

  return status;
}
 800599c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80059a0:	4770      	bx	lr
    status = ERROR;
 80059a2:	2001      	movs	r0, #1
}
 80059a4:	4770      	bx	lr
	...

080059a8 <LL_ADC_REG_Init>:

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(ADCx));
  assert_param(IS_LL_ADC_REG_TRIG_SOURCE(ADCx, ADC_REG_InitStruct->TriggerSource));
  assert_param(IS_LL_ADC_REG_SEQ_SCAN_LENGTH(ADC_REG_InitStruct->SequencerLength));
  if (ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 80059a8:	684a      	ldr	r2, [r1, #4]
 80059aa:	6883      	ldr	r3, [r0, #8]
 80059ac:	f013 0f01 	tst.w	r3, #1
 80059b0:	d126      	bne.n	8005a00 <LL_ADC_REG_Init+0x58>
{
 80059b2:	b410      	push	{r4}
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 series, ADC trigger edge is set to value 0x0 by    */
    /*       setting of trigger source to SW start.                           */
    if (ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 80059b4:	b1ba      	cbz	r2, 80059e6 <LL_ADC_REG_Init+0x3e>
    {
      MODIFY_REG(ADCx->CFGR,
 80059b6:	68c3      	ldr	r3, [r0, #12]
 80059b8:	4a12      	ldr	r2, [pc, #72]	; (8005a04 <LL_ADC_REG_Init+0x5c>)
 80059ba:	401a      	ands	r2, r3
 80059bc:	680b      	ldr	r3, [r1, #0]
 80059be:	688c      	ldr	r4, [r1, #8]
 80059c0:	4323      	orrs	r3, r4
 80059c2:	68cc      	ldr	r4, [r1, #12]
 80059c4:	4323      	orrs	r3, r4
 80059c6:	690c      	ldr	r4, [r1, #16]
 80059c8:	4323      	orrs	r3, r4
 80059ca:	694c      	ldr	r4, [r1, #20]
 80059cc:	4323      	orrs	r3, r4
 80059ce:	4313      	orrs	r3, r2
 80059d0:	60c3      	str	r3, [r0, #12]
                 | ADC_REG_InitStruct->Overrun
                );
    }

    /* Set ADC group regular sequencer length and scan direction */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 80059d2:	684b      	ldr	r3, [r1, #4]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 80059d4:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80059d6:	f022 020f 	bic.w	r2, r2, #15
 80059da:	4313      	orrs	r3, r2
 80059dc:	6303      	str	r3, [r0, #48]	; 0x30
  ErrorStatus status = SUCCESS;
 80059de:	2000      	movs	r0, #0
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
  }
  return status;
}
 80059e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80059e4:	4770      	bx	lr
      MODIFY_REG(ADCx->CFGR,
 80059e6:	68c3      	ldr	r3, [r0, #12]
 80059e8:	4a06      	ldr	r2, [pc, #24]	; (8005a04 <LL_ADC_REG_Init+0x5c>)
 80059ea:	401a      	ands	r2, r3
 80059ec:	680b      	ldr	r3, [r1, #0]
 80059ee:	68cc      	ldr	r4, [r1, #12]
 80059f0:	4323      	orrs	r3, r4
 80059f2:	690c      	ldr	r4, [r1, #16]
 80059f4:	4323      	orrs	r3, r4
 80059f6:	694c      	ldr	r4, [r1, #20]
 80059f8:	4323      	orrs	r3, r4
 80059fa:	4313      	orrs	r3, r2
 80059fc:	60c3      	str	r3, [r0, #12]
 80059fe:	e7e8      	b.n	80059d2 <LL_ADC_REG_Init+0x2a>
    status = ERROR;
 8005a00:	2001      	movs	r0, #1
}
 8005a02:	4770      	bx	lr
 8005a04:	fff0c01c 	.word	0xfff0c01c

08005a08 <LL_ADC_INJ_Init>:

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(ADCx));
  assert_param(IS_LL_ADC_INJ_TRIG_SOURCE(ADCx, ADC_INJ_InitStruct->TriggerSource));
  assert_param(IS_LL_ADC_INJ_SEQ_SCAN_LENGTH(ADC_INJ_InitStruct->SequencerLength));
  if (ADC_INJ_InitStruct->SequencerLength != LL_ADC_INJ_SEQ_SCAN_DISABLE)
 8005a08:	684a      	ldr	r2, [r1, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005a0a:	6883      	ldr	r3, [r0, #8]
 8005a0c:	f013 0f01 	tst.w	r3, #1
 8005a10:	d11e      	bne.n	8005a50 <LL_ADC_INJ_Init+0x48>
{
 8005a12:	b410      	push	{r4}
    /*    - Set ADC group injected sequencer discontinuous mode               */
    /*    - Set ADC group injected conversion trigger: independent or         */
    /*      from ADC group regular                                            */
    /* Note: On this STM32 series, ADC trigger edge is set to value 0x0 by    */
    /*       setting of trigger source to SW start.                           */
    if (ADC_INJ_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8005a14:	b1aa      	cbz	r2, 8005a42 <LL_ADC_INJ_Init+0x3a>
    {
      MODIFY_REG(ADCx->CFGR,
 8005a16:	68c3      	ldr	r3, [r0, #12]
 8005a18:	f023 7304 	bic.w	r3, r3, #34603008	; 0x2100000
 8005a1c:	688a      	ldr	r2, [r1, #8]
 8005a1e:	68cc      	ldr	r4, [r1, #12]
 8005a20:	4322      	orrs	r2, r4
 8005a22:	4313      	orrs	r3, r2
 8005a24:	60c3      	str	r3, [r0, #12]
                 LL_ADC_REG_SEQ_DISCONT_DISABLE
                 | ADC_INJ_InitStruct->TrigAuto
                );
    }

    MODIFY_REG(ADCx->JSQR,
 8005a26:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8005a28:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8005a2c:	f023 0301 	bic.w	r3, r3, #1
 8005a30:	680a      	ldr	r2, [r1, #0]
 8005a32:	6849      	ldr	r1, [r1, #4]
 8005a34:	430a      	orrs	r2, r1
 8005a36:	4313      	orrs	r3, r2
 8005a38:	64c3      	str	r3, [r0, #76]	; 0x4c
  ErrorStatus status = SUCCESS;
 8005a3a:	2000      	movs	r0, #0
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
  }
  return status;
}
 8005a3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005a40:	4770      	bx	lr
      MODIFY_REG(ADCx->CFGR,
 8005a42:	68c3      	ldr	r3, [r0, #12]
 8005a44:	f023 7304 	bic.w	r3, r3, #34603008	; 0x2100000
 8005a48:	68ca      	ldr	r2, [r1, #12]
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	60c3      	str	r3, [r0, #12]
 8005a4e:	e7ea      	b.n	8005a26 <LL_ADC_INJ_Init+0x1e>
    status = ERROR;
 8005a50:	2001      	movs	r0, #1
}
 8005a52:	4770      	bx	lr

08005a54 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8005a54:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8005a56:	680a      	ldr	r2, [r1, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a58:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8005a5c:	b112      	cbz	r2, 8005a64 <LL_GPIO_Init+0x10>
  return __builtin_clz(value);
 8005a5e:	fab2 f282 	clz	r2, r2
 8005a62:	e048      	b.n	8005af6 <LL_GPIO_Init+0xa2>
    return 32U;
 8005a64:	2220      	movs	r2, #32

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8005a66:	e046      	b.n	8005af6 <LL_GPIO_Init+0xa2>
 8005a68:	2520      	movs	r5, #32
 8005a6a:	e058      	b.n	8005b1e <LL_GPIO_Init+0xca>
 8005a6c:	2420      	movs	r4, #32
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8005a6e:	0064      	lsls	r4, r4, #1
 8005a70:	fa06 f404 	lsl.w	r4, r6, r4
 8005a74:	432c      	orrs	r4, r5
 8005a76:	6084      	str	r4, [r0, #8]

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8005a78:	680e      	ldr	r6, [r1, #0]
 8005a7a:	68cd      	ldr	r5, [r1, #12]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8005a7c:	6844      	ldr	r4, [r0, #4]
 8005a7e:	ea24 0406 	bic.w	r4, r4, r6
 8005a82:	fb05 f506 	mul.w	r5, r5, r6
 8005a86:	432c      	orrs	r4, r5
 8005a88:	6044      	str	r4, [r0, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8005a8a:	690e      	ldr	r6, [r1, #16]
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8005a8c:	68c4      	ldr	r4, [r0, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a8e:	fa93 f5a3 	rbit	r5, r3
  if (value == 0U)
 8005a92:	2d00      	cmp	r5, #0
 8005a94:	d050      	beq.n	8005b38 <LL_GPIO_Init+0xe4>
  return __builtin_clz(value);
 8005a96:	fab5 f585 	clz	r5, r5
 8005a9a:	006d      	lsls	r5, r5, #1
 8005a9c:	2703      	movs	r7, #3
 8005a9e:	fa07 f505 	lsl.w	r5, r7, r5
 8005aa2:	ea24 0505 	bic.w	r5, r4, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005aa6:	fa93 f4a3 	rbit	r4, r3
  if (value == 0U)
 8005aaa:	2c00      	cmp	r4, #0
 8005aac:	d046      	beq.n	8005b3c <LL_GPIO_Init+0xe8>
  return __builtin_clz(value);
 8005aae:	fab4 f484 	clz	r4, r4
 8005ab2:	0064      	lsls	r4, r4, #1
 8005ab4:	fa06 f404 	lsl.w	r4, r6, r4
 8005ab8:	432c      	orrs	r4, r5
 8005aba:	60c4      	str	r4, [r0, #12]

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8005abc:	684c      	ldr	r4, [r1, #4]
 8005abe:	2c02      	cmp	r4, #2
 8005ac0:	d03e      	beq.n	8005b40 <LL_GPIO_Init+0xec>
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8005ac2:	684e      	ldr	r6, [r1, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8005ac4:	6805      	ldr	r5, [r0, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ac6:	fa93 f4a3 	rbit	r4, r3
  if (value == 0U)
 8005aca:	2c00      	cmp	r4, #0
 8005acc:	d074      	beq.n	8005bb8 <LL_GPIO_Init+0x164>
  return __builtin_clz(value);
 8005ace:	fab4 f484 	clz	r4, r4
 8005ad2:	0064      	lsls	r4, r4, #1
 8005ad4:	2703      	movs	r7, #3
 8005ad6:	fa07 f404 	lsl.w	r4, r7, r4
 8005ada:	ea25 0404 	bic.w	r4, r5, r4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ade:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d06a      	beq.n	8005bbc <LL_GPIO_Init+0x168>
  return __builtin_clz(value);
 8005ae6:	fab3 f383 	clz	r3, r3
 8005aea:	005b      	lsls	r3, r3, #1
 8005aec:	fa06 f303 	lsl.w	r3, r6, r3
 8005af0:	4323      	orrs	r3, r4
 8005af2:	6003      	str	r3, [r0, #0]
    }
    pinpos++;
 8005af4:	3201      	adds	r2, #1
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8005af6:	680b      	ldr	r3, [r1, #0]
 8005af8:	fa33 f402 	lsrs.w	r4, r3, r2
 8005afc:	d060      	beq.n	8005bc0 <LL_GPIO_Init+0x16c>
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 8005afe:	2401      	movs	r4, #1
 8005b00:	4094      	lsls	r4, r2
    if (currentpin != 0x00u)
 8005b02:	4023      	ands	r3, r4
 8005b04:	d0f6      	beq.n	8005af4 <LL_GPIO_Init+0xa0>
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8005b06:	684c      	ldr	r4, [r1, #4]
 8005b08:	3c01      	subs	r4, #1
 8005b0a:	2c01      	cmp	r4, #1
 8005b0c:	d8bd      	bhi.n	8005a8a <LL_GPIO_Init+0x36>
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8005b0e:	688e      	ldr	r6, [r1, #8]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8005b10:	6884      	ldr	r4, [r0, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b12:	fa93 f5a3 	rbit	r5, r3
  if (value == 0U)
 8005b16:	2d00      	cmp	r5, #0
 8005b18:	d0a6      	beq.n	8005a68 <LL_GPIO_Init+0x14>
  return __builtin_clz(value);
 8005b1a:	fab5 f585 	clz	r5, r5
 8005b1e:	006d      	lsls	r5, r5, #1
 8005b20:	2703      	movs	r7, #3
 8005b22:	fa07 f505 	lsl.w	r5, r7, r5
 8005b26:	ea24 0505 	bic.w	r5, r4, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b2a:	fa93 f4a3 	rbit	r4, r3
  if (value == 0U)
 8005b2e:	2c00      	cmp	r4, #0
 8005b30:	d09c      	beq.n	8005a6c <LL_GPIO_Init+0x18>
  return __builtin_clz(value);
 8005b32:	fab4 f484 	clz	r4, r4
 8005b36:	e79a      	b.n	8005a6e <LL_GPIO_Init+0x1a>
    return 32U;
 8005b38:	2520      	movs	r5, #32
 8005b3a:	e7ae      	b.n	8005a9a <LL_GPIO_Init+0x46>
 8005b3c:	2420      	movs	r4, #32
 8005b3e:	e7b8      	b.n	8005ab2 <LL_GPIO_Init+0x5e>
        if (currentpin < LL_GPIO_PIN_8)
 8005b40:	2bff      	cmp	r3, #255	; 0xff
 8005b42:	d81b      	bhi.n	8005b7c <LL_GPIO_Init+0x128>
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005b44:	694e      	ldr	r6, [r1, #20]
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8005b46:	6a04      	ldr	r4, [r0, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b48:	fa93 f5a3 	rbit	r5, r3
  if (value == 0U)
 8005b4c:	b195      	cbz	r5, 8005b74 <LL_GPIO_Init+0x120>
  return __builtin_clz(value);
 8005b4e:	fab5 f585 	clz	r5, r5
 8005b52:	00ad      	lsls	r5, r5, #2
 8005b54:	270f      	movs	r7, #15
 8005b56:	fa07 f505 	lsl.w	r5, r7, r5
 8005b5a:	ea24 0505 	bic.w	r5, r4, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b5e:	fa93 f4a3 	rbit	r4, r3
  if (value == 0U)
 8005b62:	b14c      	cbz	r4, 8005b78 <LL_GPIO_Init+0x124>
  return __builtin_clz(value);
 8005b64:	fab4 f484 	clz	r4, r4
 8005b68:	00a4      	lsls	r4, r4, #2
 8005b6a:	fa06 f404 	lsl.w	r4, r6, r4
 8005b6e:	432c      	orrs	r4, r5
 8005b70:	6204      	str	r4, [r0, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8005b72:	e7a6      	b.n	8005ac2 <LL_GPIO_Init+0x6e>
    return 32U;
 8005b74:	2520      	movs	r5, #32
 8005b76:	e7ec      	b.n	8005b52 <LL_GPIO_Init+0xfe>
 8005b78:	2420      	movs	r4, #32
 8005b7a:	e7f5      	b.n	8005b68 <LL_GPIO_Init+0x114>
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005b7c:	694f      	ldr	r7, [r1, #20]
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8005b7e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005b80:	0a1c      	lsrs	r4, r3, #8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b82:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 8005b86:	b19d      	cbz	r5, 8005bb0 <LL_GPIO_Init+0x15c>
  return __builtin_clz(value);
 8005b88:	fab5 f585 	clz	r5, r5
 8005b8c:	00ad      	lsls	r5, r5, #2
 8005b8e:	f04f 0c0f 	mov.w	ip, #15
 8005b92:	fa0c f505 	lsl.w	r5, ip, r5
 8005b96:	ea26 0505 	bic.w	r5, r6, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b9a:	fa94 f4a4 	rbit	r4, r4
  if (value == 0U)
 8005b9e:	b14c      	cbz	r4, 8005bb4 <LL_GPIO_Init+0x160>
  return __builtin_clz(value);
 8005ba0:	fab4 f484 	clz	r4, r4
 8005ba4:	00a4      	lsls	r4, r4, #2
 8005ba6:	fa07 f404 	lsl.w	r4, r7, r4
 8005baa:	432c      	orrs	r4, r5
 8005bac:	6244      	str	r4, [r0, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8005bae:	e788      	b.n	8005ac2 <LL_GPIO_Init+0x6e>
    return 32U;
 8005bb0:	2520      	movs	r5, #32
 8005bb2:	e7eb      	b.n	8005b8c <LL_GPIO_Init+0x138>
 8005bb4:	2420      	movs	r4, #32
 8005bb6:	e7f5      	b.n	8005ba4 <LL_GPIO_Init+0x150>
 8005bb8:	2420      	movs	r4, #32
 8005bba:	e78a      	b.n	8005ad2 <LL_GPIO_Init+0x7e>
 8005bbc:	2320      	movs	r3, #32
 8005bbe:	e794      	b.n	8005aea <LL_GPIO_Init+0x96>
  }
  return (SUCCESS);
}
 8005bc0:	2000      	movs	r0, #0
 8005bc2:	bcf0      	pop	{r4, r5, r6, r7}
 8005bc4:	4770      	bx	lr

08005bc6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005bc6:	4603      	mov	r3, r0
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005bc8:	2000      	movs	r0, #0
 8005bca:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005bce:	f64b 7280 	movw	r2, #49024	; 0xbf80
 8005bd2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
}
 8005bd6:	4770      	bx	lr

08005bd8 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005bd8:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8005bdc:	f423 537e 	bic.w	r3, r3, #16256	; 0x3f80
 8005be0:	045b      	lsls	r3, r3, #17
 8005be2:	0c5b      	lsrs	r3, r3, #17
 8005be4:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 8005be8:	2000      	movs	r0, #0
 8005bea:	4770      	bx	lr

08005bec <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005bec:	b084      	sub	sp, #16
 8005bee:	b410      	push	{r4}
 8005bf0:	4604      	mov	r4, r0
 8005bf2:	a802      	add	r0, sp, #8
 8005bf4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005bfe:	2000      	movs	r0, #0
 8005c00:	f8a4 0040 	strh.w	r0, [r4, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005c04:	f8a4 0044 	strh.w	r0, [r4, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005c08:	f8a4 0050 	strh.w	r0, [r4, #80]	; 0x50

  return HAL_OK;
}
 8005c0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005c10:	b004      	add	sp, #16
 8005c12:	4770      	bx	lr

08005c14 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005c14:	b430      	push	{r4, r5}
 8005c16:	4603      	mov	r3, r0
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005c18:	780a      	ldrb	r2, [r1, #0]
 8005c1a:	f830 4022 	ldrh.w	r4, [r0, r2, lsl #2]
 8005c1e:	b2a4      	uxth	r4, r4
 8005c20:	f424 44ec 	bic.w	r4, r4, #30208	; 0x7600
 8005c24:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 8005c28:	b2a4      	uxth	r4, r4

  /* initialize Endpoint */
  switch (ep->type)
 8005c2a:	78c8      	ldrb	r0, [r1, #3]
 8005c2c:	2803      	cmp	r0, #3
 8005c2e:	d85b      	bhi.n	8005ce8 <USB_ActivateEndpoint+0xd4>
 8005c30:	e8df f000 	tbb	[pc, r0]
 8005c34:	5202564f 	.word	0x5202564f
 8005c38:	2000      	movs	r0, #0
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005c3a:	f248 0580 	movw	r5, #32896	; 0x8080
 8005c3e:	432c      	orrs	r4, r5
 8005c40:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005c44:	780c      	ldrb	r4, [r1, #0]
 8005c46:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8005c4a:	b212      	sxth	r2, r2
 8005c4c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8005c50:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005c54:	4322      	orrs	r2, r4
 8005c56:	b292      	uxth	r2, r2
 8005c58:	432a      	orrs	r2, r5
 8005c5a:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

  if (ep->doublebuffer == 0U)
 8005c5e:	7b0a      	ldrb	r2, [r1, #12]
 8005c60:	2a00      	cmp	r2, #0
 8005c62:	f040 80b6 	bne.w	8005dd2 <USB_ActivateEndpoint+0x1be>
  {
    if (ep->is_in != 0U)
 8005c66:	784a      	ldrb	r2, [r1, #1]
 8005c68:	2a00      	cmp	r2, #0
 8005c6a:	d04e      	beq.n	8005d0a <USB_ActivateEndpoint+0xf6>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005c6c:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8005c70:	fa13 f282 	uxtah	r2, r3, r2
 8005c74:	780c      	ldrb	r4, [r1, #0]
 8005c76:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8005c7a:	88cc      	ldrh	r4, [r1, #6]
 8005c7c:	0864      	lsrs	r4, r4, #1
 8005c7e:	0064      	lsls	r4, r4, #1
 8005c80:	f8a2 4400 	strh.w	r4, [r2, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005c84:	780c      	ldrb	r4, [r1, #0]
 8005c86:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8005c8a:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005c8e:	d00c      	beq.n	8005caa <USB_ActivateEndpoint+0x96>
 8005c90:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8005c94:	b292      	uxth	r2, r2
 8005c96:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8005c9a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005c9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005ca2:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8005ca6:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8005caa:	78ca      	ldrb	r2, [r1, #3]
 8005cac:	2a01      	cmp	r2, #1
 8005cae:	d01d      	beq.n	8005cec <USB_ActivateEndpoint+0xd8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005cb0:	7809      	ldrb	r1, [r1, #0]
 8005cb2:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8005cb6:	b292      	uxth	r2, r2
 8005cb8:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8005cbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cc0:	f082 0220 	eor.w	r2, r2, #32
 8005cc4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005cc8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005ccc:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8005cd0:	e064      	b.n	8005d9c <USB_ActivateEndpoint+0x188>
      wEpRegVal |= USB_EP_CONTROL;
 8005cd2:	f444 7400 	orr.w	r4, r4, #512	; 0x200
      break;
 8005cd6:	e7b0      	b.n	8005c3a <USB_ActivateEndpoint+0x26>
      wEpRegVal |= USB_EP_INTERRUPT;
 8005cd8:	f444 64c0 	orr.w	r4, r4, #1536	; 0x600
  HAL_StatusTypeDef ret = HAL_OK;
 8005cdc:	2000      	movs	r0, #0
      break;
 8005cde:	e7ac      	b.n	8005c3a <USB_ActivateEndpoint+0x26>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005ce0:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
  HAL_StatusTypeDef ret = HAL_OK;
 8005ce4:	2000      	movs	r0, #0
      break;
 8005ce6:	e7a8      	b.n	8005c3a <USB_ActivateEndpoint+0x26>
      ret = HAL_ERROR;
 8005ce8:	2001      	movs	r0, #1
 8005cea:	e7a6      	b.n	8005c3a <USB_ActivateEndpoint+0x26>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005cec:	7809      	ldrb	r1, [r1, #0]
 8005cee:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8005cf2:	b292      	uxth	r2, r2
 8005cf4:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8005cf8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cfc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005d00:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005d04:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8005d08:	e048      	b.n	8005d9c <USB_ActivateEndpoint+0x188>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005d0a:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8005d0e:	fa13 f282 	uxtah	r2, r3, r2
 8005d12:	780c      	ldrb	r4, [r1, #0]
 8005d14:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8005d18:	88cc      	ldrh	r4, [r1, #6]
 8005d1a:	0864      	lsrs	r4, r4, #1
 8005d1c:	0064      	lsls	r4, r4, #1
 8005d1e:	f8a2 4404 	strh.w	r4, [r2, #1028]	; 0x404

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005d22:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8005d26:	fa13 f282 	uxtah	r2, r3, r2
 8005d2a:	780c      	ldrb	r4, [r1, #0]
 8005d2c:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8005d30:	690c      	ldr	r4, [r1, #16]
 8005d32:	bbac      	cbnz	r4, 8005da0 <USB_ActivateEndpoint+0x18c>
 8005d34:	f8b2 4406 	ldrh.w	r4, [r2, #1030]	; 0x406
 8005d38:	b2a4      	uxth	r4, r4
 8005d3a:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
 8005d3e:	b2a4      	uxth	r4, r4
 8005d40:	f8a2 4406 	strh.w	r4, [r2, #1030]	; 0x406
 8005d44:	f8b2 4406 	ldrh.w	r4, [r2, #1030]	; 0x406
 8005d48:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 8005d4c:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8005d50:	b2a4      	uxth	r4, r4
 8005d52:	f8a2 4406 	strh.w	r4, [r2, #1030]	; 0x406
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005d56:	780c      	ldrb	r4, [r1, #0]
 8005d58:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8005d5c:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8005d60:	d00c      	beq.n	8005d7c <USB_ActivateEndpoint+0x168>
 8005d62:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8005d66:	b292      	uxth	r2, r2
 8005d68:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8005d6c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005d70:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8005d74:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005d78:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005d7c:	7809      	ldrb	r1, [r1, #0]
 8005d7e:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8005d82:	b292      	uxth	r2, r2
 8005d84:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005d88:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005d8c:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8005d90:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005d94:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005d98:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return ret;
}
 8005d9c:	bc30      	pop	{r4, r5}
 8005d9e:	4770      	bx	lr
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005da0:	2c3e      	cmp	r4, #62	; 0x3e
 8005da2:	d809      	bhi.n	8005db8 <USB_ActivateEndpoint+0x1a4>
 8005da4:	0865      	lsrs	r5, r4, #1
 8005da6:	f014 0f01 	tst.w	r4, #1
 8005daa:	d000      	beq.n	8005dae <USB_ActivateEndpoint+0x19a>
 8005dac:	3501      	adds	r5, #1
 8005dae:	02ad      	lsls	r5, r5, #10
 8005db0:	b2ad      	uxth	r5, r5
 8005db2:	f8a2 5406 	strh.w	r5, [r2, #1030]	; 0x406
 8005db6:	e7ce      	b.n	8005d56 <USB_ActivateEndpoint+0x142>
 8005db8:	0965      	lsrs	r5, r4, #5
 8005dba:	f014 0f1f 	tst.w	r4, #31
 8005dbe:	d100      	bne.n	8005dc2 <USB_ActivateEndpoint+0x1ae>
 8005dc0:	3d01      	subs	r5, #1
 8005dc2:	ea6f 64c5 	mvn.w	r4, r5, lsl #27
 8005dc6:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8005dca:	b2a4      	uxth	r4, r4
 8005dcc:	f8a2 4406 	strh.w	r4, [r2, #1030]	; 0x406
 8005dd0:	e7c1      	b.n	8005d56 <USB_ActivateEndpoint+0x142>
    PCD_SET_EP_DBUF(USBx, ep->num);
 8005dd2:	780c      	ldrb	r4, [r1, #0]
 8005dd4:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8005dd8:	b292      	uxth	r2, r2
 8005dda:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8005dde:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005de2:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 8005de6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005dea:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005dee:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8005df2:	fa13 f282 	uxtah	r2, r3, r2
 8005df6:	780c      	ldrb	r4, [r1, #0]
 8005df8:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8005dfc:	890c      	ldrh	r4, [r1, #8]
 8005dfe:	0864      	lsrs	r4, r4, #1
 8005e00:	0064      	lsls	r4, r4, #1
 8005e02:	f8a2 4400 	strh.w	r4, [r2, #1024]	; 0x400
 8005e06:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8005e0a:	fa13 f282 	uxtah	r2, r3, r2
 8005e0e:	780c      	ldrb	r4, [r1, #0]
 8005e10:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8005e14:	894c      	ldrh	r4, [r1, #10]
 8005e16:	0864      	lsrs	r4, r4, #1
 8005e18:	0064      	lsls	r4, r4, #1
 8005e1a:	f8a2 4404 	strh.w	r4, [r2, #1028]	; 0x404
    if (ep->is_in == 0U)
 8005e1e:	784a      	ldrb	r2, [r1, #1]
 8005e20:	2a00      	cmp	r2, #0
 8005e22:	d140      	bne.n	8005ea6 <USB_ActivateEndpoint+0x292>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005e24:	780c      	ldrb	r4, [r1, #0]
 8005e26:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8005e2a:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8005e2e:	d00c      	beq.n	8005e4a <USB_ActivateEndpoint+0x236>
 8005e30:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8005e34:	b292      	uxth	r2, r2
 8005e36:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8005e3a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005e3e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8005e42:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005e46:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005e4a:	780c      	ldrb	r4, [r1, #0]
 8005e4c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8005e50:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005e54:	d00c      	beq.n	8005e70 <USB_ActivateEndpoint+0x25c>
 8005e56:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8005e5a:	b292      	uxth	r2, r2
 8005e5c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8005e60:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005e64:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005e68:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8005e6c:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005e70:	780d      	ldrb	r5, [r1, #0]
 8005e72:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 8005e76:	b292      	uxth	r2, r2
 8005e78:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005e7c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005e80:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8005e84:	f248 0480 	movw	r4, #32896	; 0x8080
 8005e88:	4322      	orrs	r2, r4
 8005e8a:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005e8e:	7809      	ldrb	r1, [r1, #0]
 8005e90:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8005e94:	b292      	uxth	r2, r2
 8005e96:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8005e9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e9e:	4322      	orrs	r2, r4
 8005ea0:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8005ea4:	e77a      	b.n	8005d9c <USB_ActivateEndpoint+0x188>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005ea6:	780c      	ldrb	r4, [r1, #0]
 8005ea8:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8005eac:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8005eb0:	d00c      	beq.n	8005ecc <USB_ActivateEndpoint+0x2b8>
 8005eb2:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8005eb6:	b292      	uxth	r2, r2
 8005eb8:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8005ebc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005ec0:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8005ec4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005ec8:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005ecc:	780c      	ldrb	r4, [r1, #0]
 8005ece:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8005ed2:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005ed6:	d00c      	beq.n	8005ef2 <USB_ActivateEndpoint+0x2de>
 8005ed8:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8005edc:	b292      	uxth	r2, r2
 8005ede:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8005ee2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005ee6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005eea:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8005eee:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 8005ef2:	78ca      	ldrb	r2, [r1, #3]
 8005ef4:	2a01      	cmp	r2, #1
 8005ef6:	d01e      	beq.n	8005f36 <USB_ActivateEndpoint+0x322>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005ef8:	780c      	ldrb	r4, [r1, #0]
 8005efa:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8005efe:	b292      	uxth	r2, r2
 8005f00:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8005f04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f08:	f082 0220 	eor.w	r2, r2, #32
 8005f0c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005f10:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005f14:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005f18:	7809      	ldrb	r1, [r1, #0]
 8005f1a:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8005f1e:	b292      	uxth	r2, r2
 8005f20:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005f24:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005f28:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005f2c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005f30:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8005f34:	e732      	b.n	8005d9c <USB_ActivateEndpoint+0x188>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005f36:	780c      	ldrb	r4, [r1, #0]
 8005f38:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8005f3c:	b292      	uxth	r2, r2
 8005f3e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8005f42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005f4a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005f4e:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
 8005f52:	e7e1      	b.n	8005f18 <USB_ActivateEndpoint+0x304>

08005f54 <USB_DeactivateEndpoint>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8005f54:	7b0b      	ldrb	r3, [r1, #12]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d146      	bne.n	8005fe8 <USB_DeactivateEndpoint+0x94>
  {
    if (ep->is_in != 0U)
 8005f5a:	784b      	ldrb	r3, [r1, #1]
 8005f5c:	b313      	cbz	r3, 8005fa4 <USB_DeactivateEndpoint+0x50>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005f5e:	780a      	ldrb	r2, [r1, #0]
 8005f60:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005f64:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005f68:	d00c      	beq.n	8005f84 <USB_DeactivateEndpoint+0x30>
 8005f6a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005f6e:	b29b      	uxth	r3, r3
 8005f70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f7c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005f80:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005f84:	780a      	ldrb	r2, [r1, #0]
 8005f86:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f9c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return HAL_OK;
}
 8005fa0:	2000      	movs	r0, #0
 8005fa2:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005fa4:	780a      	ldrb	r2, [r1, #0]
 8005fa6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005faa:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8005fae:	d00c      	beq.n	8005fca <USB_DeactivateEndpoint+0x76>
 8005fb0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005fb4:	b29b      	uxth	r3, r3
 8005fb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fbe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005fc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fc6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005fca:	780a      	ldrb	r2, [r1, #0]
 8005fcc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005fd0:	b29b      	uxth	r3, r3
 8005fd2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005fd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fe2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8005fe6:	e7db      	b.n	8005fa0 <USB_DeactivateEndpoint+0x4c>
{
 8005fe8:	b410      	push	{r4}
    if (ep->is_in == 0U)
 8005fea:	784b      	ldrb	r3, [r1, #1]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d14f      	bne.n	8006090 <USB_DeactivateEndpoint+0x13c>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005ff0:	780a      	ldrb	r2, [r1, #0]
 8005ff2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005ff6:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8005ffa:	d00c      	beq.n	8006016 <USB_DeactivateEndpoint+0xc2>
 8005ffc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006000:	b29b      	uxth	r3, r3
 8006002:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006006:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800600a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800600e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006012:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006016:	780a      	ldrb	r2, [r1, #0]
 8006018:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800601c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006020:	d00c      	beq.n	800603c <USB_DeactivateEndpoint+0xe8>
 8006022:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006026:	b29b      	uxth	r3, r3
 8006028:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800602c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006030:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006034:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006038:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 800603c:	780a      	ldrb	r2, [r1, #0]
 800603e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006042:	b29b      	uxth	r3, r3
 8006044:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006048:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800604c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006050:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006054:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006058:	780b      	ldrb	r3, [r1, #0]
 800605a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800605e:	b292      	uxth	r2, r2
 8006060:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006064:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006068:	f248 0480 	movw	r4, #32896	; 0x8080
 800606c:	4322      	orrs	r2, r4
 800606e:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006072:	780a      	ldrb	r2, [r1, #0]
 8006074:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006078:	b29b      	uxth	r3, r3
 800607a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800607e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006082:	4323      	orrs	r3, r4
 8006084:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 8006088:	2000      	movs	r0, #0
 800608a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800608e:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006090:	780a      	ldrb	r2, [r1, #0]
 8006092:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006096:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800609a:	d00c      	beq.n	80060b6 <USB_DeactivateEndpoint+0x162>
 800609c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80060a0:	b29b      	uxth	r3, r3
 80060a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80060ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060b2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80060b6:	780a      	ldrb	r2, [r1, #0]
 80060b8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80060bc:	f013 0f40 	tst.w	r3, #64	; 0x40
 80060c0:	d00c      	beq.n	80060dc <USB_DeactivateEndpoint+0x188>
 80060c2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060d4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80060d8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 80060dc:	780a      	ldrb	r2, [r1, #0]
 80060de:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80060e2:	b29b      	uxth	r3, r3
 80060e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80060f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060f4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80060f8:	780b      	ldrb	r3, [r1, #0]
 80060fa:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80060fe:	b292      	uxth	r2, r2
 8006100:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8006104:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006108:	f248 0480 	movw	r4, #32896	; 0x8080
 800610c:	4322      	orrs	r2, r4
 800610e:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006112:	780a      	ldrb	r2, [r1, #0]
 8006114:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006118:	b29b      	uxth	r3, r3
 800611a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800611e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006122:	4323      	orrs	r3, r4
 8006124:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8006128:	e7ae      	b.n	8006088 <USB_DeactivateEndpoint+0x134>

0800612a <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 800612a:	784b      	ldrb	r3, [r1, #1]
 800612c:	b18b      	cbz	r3, 8006152 <USB_EPSetStall+0x28>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800612e:	780a      	ldrb	r2, [r1, #0]
 8006130:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006134:	b29b      	uxth	r3, r3
 8006136:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800613a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800613e:	f083 0310 	eor.w	r3, r3, #16
 8006142:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006146:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800614a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
  }

  return HAL_OK;
}
 800614e:	2000      	movs	r0, #0
 8006150:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006152:	780a      	ldrb	r2, [r1, #0]
 8006154:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006158:	b29b      	uxth	r3, r3
 800615a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800615e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006162:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006166:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800616a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800616e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8006172:	e7ec      	b.n	800614e <USB_EPSetStall+0x24>

08006174 <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8006174:	7b0b      	ldrb	r3, [r1, #12]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d14b      	bne.n	8006212 <USB_EPClearStall+0x9e>
  {
    if (ep->is_in != 0U)
 800617a:	784b      	ldrb	r3, [r1, #1]
 800617c:	b333      	cbz	r3, 80061cc <USB_EPClearStall+0x58>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800617e:	780a      	ldrb	r2, [r1, #0]
 8006180:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006184:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006188:	d00c      	beq.n	80061a4 <USB_EPClearStall+0x30>
 800618a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800618e:	b29b      	uxth	r3, r3
 8006190:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006194:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006198:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800619c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80061a0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 80061a4:	78cb      	ldrb	r3, [r1, #3]
 80061a6:	2b01      	cmp	r3, #1
 80061a8:	d033      	beq.n	8006212 <USB_EPClearStall+0x9e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80061aa:	780a      	ldrb	r2, [r1, #0]
 80061ac:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80061b0:	b29b      	uxth	r3, r3
 80061b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061ba:	f083 0320 	eor.w	r3, r3, #32
 80061be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061c6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 80061ca:	e022      	b.n	8006212 <USB_EPClearStall+0x9e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80061cc:	780a      	ldrb	r2, [r1, #0]
 80061ce:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80061d2:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80061d6:	d00c      	beq.n	80061f2 <USB_EPClearStall+0x7e>
 80061d8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80061dc:	b29b      	uxth	r3, r3
 80061de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80061ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061ee:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80061f2:	780a      	ldrb	r2, [r1, #0]
 80061f4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80061f8:	b29b      	uxth	r3, r3
 80061fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80061fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006202:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8006206:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800620a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800620e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 8006212:	2000      	movs	r0, #0
 8006214:	4770      	bx	lr

08006216 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 8006216:	b911      	cbnz	r1, 800621e <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006218:	2380      	movs	r3, #128	; 0x80
 800621a:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }

  return HAL_OK;
}
 800621e:	2000      	movs	r0, #0
 8006220:	4770      	bx	lr

08006222 <USB_DevConnect>:
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8006222:	f8b0 3058 	ldrh.w	r3, [r0, #88]	; 0x58
 8006226:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800622a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800622e:	b29b      	uxth	r3, r3
 8006230:	f8a0 3058 	strh.w	r3, [r0, #88]	; 0x58

  return HAL_OK;
}
 8006234:	2000      	movs	r0, #0
 8006236:	4770      	bx	lr

08006238 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006238:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 800623c:	b280      	uxth	r0, r0
 800623e:	4770      	bx	lr

08006240 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006240:	b410      	push	{r4}
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006242:	1c5c      	adds	r4, r3, #1
 8006244:	0864      	lsrs	r4, r4, #1
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006246:	4402      	add	r2, r0
 8006248:	f502 6280 	add.w	r2, r2, #1024	; 0x400

  for (i = n; i != 0U; i--)
 800624c:	b144      	cbz	r4, 8006260 <USB_WritePMA+0x20>
  {
    temp1 = *pBuf;
 800624e:	780b      	ldrb	r3, [r1, #0]
    pBuf++;
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006250:	7848      	ldrb	r0, [r1, #1]
    *pdwVal = (uint16_t)temp2;
 8006252:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8006256:	f822 3b02 	strh.w	r3, [r2], #2

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 800625a:	3102      	adds	r1, #2
  for (i = n; i != 0U; i--)
 800625c:	3c01      	subs	r4, #1
 800625e:	e7f5      	b.n	800624c <USB_WritePMA+0xc>
  }
}
 8006260:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006264:	4770      	bx	lr

08006266 <USB_EPStartXfer>:
{
 8006266:	b570      	push	{r4, r5, r6, lr}
 8006268:	4605      	mov	r5, r0
 800626a:	460c      	mov	r4, r1
  if (ep->is_in == 1U)
 800626c:	784b      	ldrb	r3, [r1, #1]
 800626e:	2b01      	cmp	r3, #1
 8006270:	d037      	beq.n	80062e2 <USB_EPStartXfer+0x7c>
    if (ep->doublebuffer == 0U)
 8006272:	7b0a      	ldrb	r2, [r1, #12]
 8006274:	2a00      	cmp	r2, #0
 8006276:	f040 8326 	bne.w	80068c6 <USB_EPStartXfer+0x660>
      if (ep->xfer_len > ep->maxpacket)
 800627a:	698b      	ldr	r3, [r1, #24]
 800627c:	690a      	ldr	r2, [r1, #16]
 800627e:	4293      	cmp	r3, r2
 8006280:	f240 8304 	bls.w	800688c <USB_EPStartXfer+0x626>
        ep->xfer_len -= len;
 8006284:	1a9b      	subs	r3, r3, r2
 8006286:	618b      	str	r3, [r1, #24]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006288:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 800628c:	fa15 f383 	uxtah	r3, r5, r3
 8006290:	7821      	ldrb	r1, [r4, #0]
 8006292:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8006296:	2a00      	cmp	r2, #0
 8006298:	f040 82fc 	bne.w	8006894 <USB_EPStartXfer+0x62e>
 800629c:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 80062a0:	b292      	uxth	r2, r2
 80062a2:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80062a6:	b292      	uxth	r2, r2
 80062a8:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 80062ac:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 80062b0:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80062b4:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80062b8:	b292      	uxth	r2, r2
 80062ba:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80062be:	7822      	ldrb	r2, [r4, #0]
 80062c0:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 80062c4:	b29b      	uxth	r3, r3
 80062c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80062ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062ce:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80062d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062da:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
  return HAL_OK;
 80062de:	2000      	movs	r0, #0
}
 80062e0:	bd70      	pop	{r4, r5, r6, pc}
    if (ep->xfer_len > ep->maxpacket)
 80062e2:	698e      	ldr	r6, [r1, #24]
 80062e4:	690a      	ldr	r2, [r1, #16]
 80062e6:	4296      	cmp	r6, r2
 80062e8:	d900      	bls.n	80062ec <USB_EPStartXfer+0x86>
      len = ep->maxpacket;
 80062ea:	4616      	mov	r6, r2
    if (ep->doublebuffer == 0U)
 80062ec:	7b23      	ldrb	r3, [r4, #12]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d039      	beq.n	8006366 <USB_EPStartXfer+0x100>
      if (ep->type == EP_TYPE_BULK)
 80062f2:	78e3      	ldrb	r3, [r4, #3]
 80062f4:	2b02      	cmp	r3, #2
 80062f6:	d058      	beq.n	80063aa <USB_EPStartXfer+0x144>
        PCD_SET_EP_DBUF(USBx, ep->num);
 80062f8:	7822      	ldrb	r2, [r4, #0]
 80062fa:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 80062fe:	b29b      	uxth	r3, r3
 8006300:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006304:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006308:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800630c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006310:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
        ep->xfer_len_db -= len;
 8006314:	6a23      	ldr	r3, [r4, #32]
 8006316:	1b9b      	subs	r3, r3, r6
 8006318:	6223      	str	r3, [r4, #32]
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800631a:	7823      	ldrb	r3, [r4, #0]
 800631c:	f835 2023 	ldrh.w	r2, [r5, r3, lsl #2]
 8006320:	f012 0f40 	tst.w	r2, #64	; 0x40
 8006324:	f000 8226 	beq.w	8006774 <USB_EPStartXfer+0x50e>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006328:	7862      	ldrb	r2, [r4, #1]
 800632a:	2a00      	cmp	r2, #0
 800632c:	f040 81ca 	bne.w	80066c4 <USB_EPStartXfer+0x45e>
 8006330:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8006334:	fa15 f282 	uxtah	r2, r5, r2
 8006338:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800633c:	2e00      	cmp	r6, #0
 800633e:	f040 81a8 	bne.w	8006692 <USB_EPStartXfer+0x42c>
 8006342:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8006346:	b292      	uxth	r2, r2
 8006348:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800634c:	b292      	uxth	r2, r2
 800634e:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8006352:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8006356:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800635a:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800635e:	b292      	uxth	r2, r2
 8006360:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8006364:	e1b0      	b.n	80066c8 <USB_EPStartXfer+0x462>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006366:	b2b6      	uxth	r6, r6
 8006368:	4633      	mov	r3, r6
 800636a:	88e2      	ldrh	r2, [r4, #6]
 800636c:	6961      	ldr	r1, [r4, #20]
 800636e:	4628      	mov	r0, r5
 8006370:	f7ff ff66 	bl	8006240 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006374:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8006378:	fa15 f383 	uxtah	r3, r5, r3
 800637c:	7822      	ldrb	r2, [r4, #0]
 800637e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006382:	f8a3 6402 	strh.w	r6, [r3, #1026]	; 0x402
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006386:	7822      	ldrb	r2, [r4, #0]
 8006388:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 800638c:	b29b      	uxth	r3, r3
 800638e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006392:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006396:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 800639a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800639e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063a2:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
  return HAL_OK;
 80063a6:	2000      	movs	r0, #0
 80063a8:	e79a      	b.n	80062e0 <USB_EPStartXfer+0x7a>
        if (ep->xfer_len_db > ep->maxpacket)
 80063aa:	6a23      	ldr	r3, [r4, #32]
 80063ac:	429a      	cmp	r2, r3
 80063ae:	f080 8152 	bcs.w	8006656 <USB_EPStartXfer+0x3f0>
          PCD_SET_EP_DBUF(USBx, ep->num);
 80063b2:	7822      	ldrb	r2, [r4, #0]
 80063b4:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 80063b8:	b29b      	uxth	r3, r3
 80063ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063c2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80063c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063ca:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
          ep->xfer_len_db -= len;
 80063ce:	6a23      	ldr	r3, [r4, #32]
 80063d0:	1b9b      	subs	r3, r3, r6
 80063d2:	6223      	str	r3, [r4, #32]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80063d4:	7823      	ldrb	r3, [r4, #0]
 80063d6:	f835 2023 	ldrh.w	r2, [r5, r3, lsl #2]
 80063da:	f012 0f40 	tst.w	r2, #64	; 0x40
 80063de:	f000 809d 	beq.w	800651c <USB_EPStartXfer+0x2b6>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80063e2:	7862      	ldrb	r2, [r4, #1]
 80063e4:	bb8a      	cbnz	r2, 800644a <USB_EPStartXfer+0x1e4>
 80063e6:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 80063ea:	fa15 f282 	uxtah	r2, r5, r2
 80063ee:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80063f2:	b98e      	cbnz	r6, 8006418 <USB_EPStartXfer+0x1b2>
 80063f4:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 80063f8:	b292      	uxth	r2, r2
 80063fa:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80063fe:	b292      	uxth	r2, r2
 8006400:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8006404:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8006408:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800640c:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8006410:	b292      	uxth	r2, r2
 8006412:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8006416:	e01a      	b.n	800644e <USB_EPStartXfer+0x1e8>
 8006418:	2e3e      	cmp	r6, #62	; 0x3e
 800641a:	d809      	bhi.n	8006430 <USB_EPStartXfer+0x1ca>
 800641c:	0872      	lsrs	r2, r6, #1
 800641e:	f016 0f01 	tst.w	r6, #1
 8006422:	d000      	beq.n	8006426 <USB_EPStartXfer+0x1c0>
 8006424:	3201      	adds	r2, #1
 8006426:	0292      	lsls	r2, r2, #10
 8006428:	b292      	uxth	r2, r2
 800642a:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800642e:	e00e      	b.n	800644e <USB_EPStartXfer+0x1e8>
 8006430:	0972      	lsrs	r2, r6, #5
 8006432:	f016 0f1f 	tst.w	r6, #31
 8006436:	d100      	bne.n	800643a <USB_EPStartXfer+0x1d4>
 8006438:	3a01      	subs	r2, #1
 800643a:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 800643e:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8006442:	b292      	uxth	r2, r2
 8006444:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8006448:	e001      	b.n	800644e <USB_EPStartXfer+0x1e8>
 800644a:	2a01      	cmp	r2, #1
 800644c:	d02b      	beq.n	80064a6 <USB_EPStartXfer+0x240>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800644e:	b2b3      	uxth	r3, r6
 8006450:	8962      	ldrh	r2, [r4, #10]
 8006452:	6961      	ldr	r1, [r4, #20]
 8006454:	4628      	mov	r0, r5
 8006456:	f7ff fef3 	bl	8006240 <USB_WritePMA>
            ep->xfer_buff += len;
 800645a:	6963      	ldr	r3, [r4, #20]
 800645c:	4433      	add	r3, r6
 800645e:	6163      	str	r3, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8006460:	6a23      	ldr	r3, [r4, #32]
 8006462:	6922      	ldr	r2, [r4, #16]
 8006464:	4293      	cmp	r3, r2
 8006466:	d928      	bls.n	80064ba <USB_EPStartXfer+0x254>
              ep->xfer_len_db -= len;
 8006468:	1b9b      	subs	r3, r3, r6
 800646a:	6223      	str	r3, [r4, #32]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800646c:	7863      	ldrb	r3, [r4, #1]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d140      	bne.n	80064f4 <USB_EPStartXfer+0x28e>
 8006472:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8006476:	fa15 f383 	uxtah	r3, r5, r3
 800647a:	7822      	ldrb	r2, [r4, #0]
 800647c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006480:	b9fe      	cbnz	r6, 80064c2 <USB_EPStartXfer+0x25c>
 8006482:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 8006486:	b292      	uxth	r2, r2
 8006488:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800648c:	b292      	uxth	r2, r2
 800648e:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8006492:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 8006496:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800649a:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800649e:	b292      	uxth	r2, r2
 80064a0:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 80064a4:	e028      	b.n	80064f8 <USB_EPStartXfer+0x292>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80064a6:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 80064aa:	fa15 f282 	uxtah	r2, r5, r2
 80064ae:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80064b2:	b2b2      	uxth	r2, r6
 80064b4:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 80064b8:	e7c9      	b.n	800644e <USB_EPStartXfer+0x1e8>
              ep->xfer_len_db = 0U;
 80064ba:	2200      	movs	r2, #0
 80064bc:	6222      	str	r2, [r4, #32]
              len = ep->xfer_len_db;
 80064be:	461e      	mov	r6, r3
 80064c0:	e7d4      	b.n	800646c <USB_EPStartXfer+0x206>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80064c2:	2e3e      	cmp	r6, #62	; 0x3e
 80064c4:	d809      	bhi.n	80064da <USB_EPStartXfer+0x274>
 80064c6:	0872      	lsrs	r2, r6, #1
 80064c8:	f016 0f01 	tst.w	r6, #1
 80064cc:	d000      	beq.n	80064d0 <USB_EPStartXfer+0x26a>
 80064ce:	3201      	adds	r2, #1
 80064d0:	0292      	lsls	r2, r2, #10
 80064d2:	b292      	uxth	r2, r2
 80064d4:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 80064d8:	e00e      	b.n	80064f8 <USB_EPStartXfer+0x292>
 80064da:	0972      	lsrs	r2, r6, #5
 80064dc:	f016 0f1f 	tst.w	r6, #31
 80064e0:	d100      	bne.n	80064e4 <USB_EPStartXfer+0x27e>
 80064e2:	3a01      	subs	r2, #1
 80064e4:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 80064e8:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80064ec:	b292      	uxth	r2, r2
 80064ee:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 80064f2:	e001      	b.n	80064f8 <USB_EPStartXfer+0x292>
 80064f4:	2b01      	cmp	r3, #1
 80064f6:	d006      	beq.n	8006506 <USB_EPStartXfer+0x2a0>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80064f8:	b2b3      	uxth	r3, r6
 80064fa:	8922      	ldrh	r2, [r4, #8]
 80064fc:	6961      	ldr	r1, [r4, #20]
 80064fe:	4628      	mov	r0, r5
 8006500:	f7ff fe9e 	bl	8006240 <USB_WritePMA>
 8006504:	e73f      	b.n	8006386 <USB_EPStartXfer+0x120>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006506:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 800650a:	fa15 f383 	uxtah	r3, r5, r3
 800650e:	7822      	ldrb	r2, [r4, #0]
 8006510:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006514:	b2b2      	uxth	r2, r6
 8006516:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800651a:	e7ed      	b.n	80064f8 <USB_EPStartXfer+0x292>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800651c:	7862      	ldrb	r2, [r4, #1]
 800651e:	bb8a      	cbnz	r2, 8006584 <USB_EPStartXfer+0x31e>
 8006520:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8006524:	fa15 f282 	uxtah	r2, r5, r2
 8006528:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800652c:	b98e      	cbnz	r6, 8006552 <USB_EPStartXfer+0x2ec>
 800652e:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 8006532:	b292      	uxth	r2, r2
 8006534:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8006538:	b292      	uxth	r2, r2
 800653a:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800653e:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 8006542:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8006546:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800654a:	b292      	uxth	r2, r2
 800654c:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8006550:	e01a      	b.n	8006588 <USB_EPStartXfer+0x322>
 8006552:	2e3e      	cmp	r6, #62	; 0x3e
 8006554:	d809      	bhi.n	800656a <USB_EPStartXfer+0x304>
 8006556:	0872      	lsrs	r2, r6, #1
 8006558:	f016 0f01 	tst.w	r6, #1
 800655c:	d000      	beq.n	8006560 <USB_EPStartXfer+0x2fa>
 800655e:	3201      	adds	r2, #1
 8006560:	0292      	lsls	r2, r2, #10
 8006562:	b292      	uxth	r2, r2
 8006564:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8006568:	e00e      	b.n	8006588 <USB_EPStartXfer+0x322>
 800656a:	0972      	lsrs	r2, r6, #5
 800656c:	f016 0f1f 	tst.w	r6, #31
 8006570:	d100      	bne.n	8006574 <USB_EPStartXfer+0x30e>
 8006572:	3a01      	subs	r2, #1
 8006574:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8006578:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800657c:	b292      	uxth	r2, r2
 800657e:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8006582:	e001      	b.n	8006588 <USB_EPStartXfer+0x322>
 8006584:	2a01      	cmp	r2, #1
 8006586:	d02b      	beq.n	80065e0 <USB_EPStartXfer+0x37a>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006588:	b2b3      	uxth	r3, r6
 800658a:	8922      	ldrh	r2, [r4, #8]
 800658c:	6961      	ldr	r1, [r4, #20]
 800658e:	4628      	mov	r0, r5
 8006590:	f7ff fe56 	bl	8006240 <USB_WritePMA>
            ep->xfer_buff += len;
 8006594:	6963      	ldr	r3, [r4, #20]
 8006596:	4433      	add	r3, r6
 8006598:	6163      	str	r3, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 800659a:	6a23      	ldr	r3, [r4, #32]
 800659c:	6922      	ldr	r2, [r4, #16]
 800659e:	4293      	cmp	r3, r2
 80065a0:	d928      	bls.n	80065f4 <USB_EPStartXfer+0x38e>
              ep->xfer_len_db -= len;
 80065a2:	1b9b      	subs	r3, r3, r6
 80065a4:	6223      	str	r3, [r4, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80065a6:	7863      	ldrb	r3, [r4, #1]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d140      	bne.n	800662e <USB_EPStartXfer+0x3c8>
 80065ac:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 80065b0:	fa15 f383 	uxtah	r3, r5, r3
 80065b4:	7822      	ldrb	r2, [r4, #0]
 80065b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80065ba:	b9fe      	cbnz	r6, 80065fc <USB_EPStartXfer+0x396>
 80065bc:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 80065c0:	b292      	uxth	r2, r2
 80065c2:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80065c6:	b292      	uxth	r2, r2
 80065c8:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 80065cc:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 80065d0:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80065d4:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80065d8:	b292      	uxth	r2, r2
 80065da:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 80065de:	e028      	b.n	8006632 <USB_EPStartXfer+0x3cc>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80065e0:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 80065e4:	fa15 f282 	uxtah	r2, r5, r2
 80065e8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80065ec:	b2b2      	uxth	r2, r6
 80065ee:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 80065f2:	e7c9      	b.n	8006588 <USB_EPStartXfer+0x322>
              ep->xfer_len_db = 0U;
 80065f4:	2200      	movs	r2, #0
 80065f6:	6222      	str	r2, [r4, #32]
              len = ep->xfer_len_db;
 80065f8:	461e      	mov	r6, r3
 80065fa:	e7d4      	b.n	80065a6 <USB_EPStartXfer+0x340>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80065fc:	2e3e      	cmp	r6, #62	; 0x3e
 80065fe:	d809      	bhi.n	8006614 <USB_EPStartXfer+0x3ae>
 8006600:	0872      	lsrs	r2, r6, #1
 8006602:	f016 0f01 	tst.w	r6, #1
 8006606:	d000      	beq.n	800660a <USB_EPStartXfer+0x3a4>
 8006608:	3201      	adds	r2, #1
 800660a:	0292      	lsls	r2, r2, #10
 800660c:	b292      	uxth	r2, r2
 800660e:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8006612:	e00e      	b.n	8006632 <USB_EPStartXfer+0x3cc>
 8006614:	0972      	lsrs	r2, r6, #5
 8006616:	f016 0f1f 	tst.w	r6, #31
 800661a:	d100      	bne.n	800661e <USB_EPStartXfer+0x3b8>
 800661c:	3a01      	subs	r2, #1
 800661e:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8006622:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8006626:	b292      	uxth	r2, r2
 8006628:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800662c:	e001      	b.n	8006632 <USB_EPStartXfer+0x3cc>
 800662e:	2b01      	cmp	r3, #1
 8006630:	d006      	beq.n	8006640 <USB_EPStartXfer+0x3da>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006632:	b2b3      	uxth	r3, r6
 8006634:	8962      	ldrh	r2, [r4, #10]
 8006636:	6961      	ldr	r1, [r4, #20]
 8006638:	4628      	mov	r0, r5
 800663a:	f7ff fe01 	bl	8006240 <USB_WritePMA>
 800663e:	e6a2      	b.n	8006386 <USB_EPStartXfer+0x120>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006640:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8006644:	fa15 f383 	uxtah	r3, r5, r3
 8006648:	7822      	ldrb	r2, [r4, #0]
 800664a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800664e:	b2b2      	uxth	r2, r6
 8006650:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8006654:	e7ed      	b.n	8006632 <USB_EPStartXfer+0x3cc>
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8006656:	7821      	ldrb	r1, [r4, #0]
 8006658:	f835 2021 	ldrh.w	r2, [r5, r1, lsl #2]
 800665c:	b292      	uxth	r2, r2
 800665e:	f422 42e2 	bic.w	r2, r2, #28928	; 0x7100
 8006662:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006666:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800666a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800666e:	f825 2021 	strh.w	r2, [r5, r1, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006672:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8006676:	fa15 f282 	uxtah	r2, r5, r2
 800667a:	7821      	ldrb	r1, [r4, #0]
 800667c:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8006680:	b29b      	uxth	r3, r3
 8006682:	f8a2 3402 	strh.w	r3, [r2, #1026]	; 0x402
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006686:	8922      	ldrh	r2, [r4, #8]
 8006688:	6961      	ldr	r1, [r4, #20]
 800668a:	4628      	mov	r0, r5
 800668c:	f7ff fdd8 	bl	8006240 <USB_WritePMA>
 8006690:	e679      	b.n	8006386 <USB_EPStartXfer+0x120>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006692:	2e3e      	cmp	r6, #62	; 0x3e
 8006694:	d809      	bhi.n	80066aa <USB_EPStartXfer+0x444>
 8006696:	0872      	lsrs	r2, r6, #1
 8006698:	f016 0f01 	tst.w	r6, #1
 800669c:	d000      	beq.n	80066a0 <USB_EPStartXfer+0x43a>
 800669e:	3201      	adds	r2, #1
 80066a0:	0292      	lsls	r2, r2, #10
 80066a2:	b292      	uxth	r2, r2
 80066a4:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 80066a8:	e00e      	b.n	80066c8 <USB_EPStartXfer+0x462>
 80066aa:	0972      	lsrs	r2, r6, #5
 80066ac:	f016 0f1f 	tst.w	r6, #31
 80066b0:	d100      	bne.n	80066b4 <USB_EPStartXfer+0x44e>
 80066b2:	3a01      	subs	r2, #1
 80066b4:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 80066b8:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80066bc:	b292      	uxth	r2, r2
 80066be:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 80066c2:	e001      	b.n	80066c8 <USB_EPStartXfer+0x462>
 80066c4:	2a01      	cmp	r2, #1
 80066c6:	d026      	beq.n	8006716 <USB_EPStartXfer+0x4b0>
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80066c8:	b2b3      	uxth	r3, r6
 80066ca:	8962      	ldrh	r2, [r4, #10]
 80066cc:	6961      	ldr	r1, [r4, #20]
 80066ce:	4628      	mov	r0, r5
 80066d0:	f7ff fdb6 	bl	8006240 <USB_WritePMA>
          ep->xfer_buff += len;
 80066d4:	6963      	ldr	r3, [r4, #20]
 80066d6:	4433      	add	r3, r6
 80066d8:	6163      	str	r3, [r4, #20]
          if (ep->xfer_len_db > ep->maxpacket)
 80066da:	6a23      	ldr	r3, [r4, #32]
 80066dc:	6922      	ldr	r2, [r4, #16]
 80066de:	4293      	cmp	r3, r2
 80066e0:	d923      	bls.n	800672a <USB_EPStartXfer+0x4c4>
            ep->xfer_len_db -= len;
 80066e2:	1b9b      	subs	r3, r3, r6
 80066e4:	6223      	str	r3, [r4, #32]
          if (len > 0U)
 80066e6:	2e00      	cmp	r6, #0
 80066e8:	f43f ae4d 	beq.w	8006386 <USB_EPStartXfer+0x120>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80066ec:	7863      	ldrb	r3, [r4, #1]
 80066ee:	bb6b      	cbnz	r3, 800674c <USB_EPStartXfer+0x4e6>
 80066f0:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 80066f4:	fa15 f383 	uxtah	r3, r5, r3
 80066f8:	7822      	ldrb	r2, [r4, #0]
 80066fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80066fe:	2e3e      	cmp	r6, #62	; 0x3e
 8006700:	d817      	bhi.n	8006732 <USB_EPStartXfer+0x4cc>
 8006702:	0872      	lsrs	r2, r6, #1
 8006704:	f016 0f01 	tst.w	r6, #1
 8006708:	d000      	beq.n	800670c <USB_EPStartXfer+0x4a6>
 800670a:	3201      	adds	r2, #1
 800670c:	0292      	lsls	r2, r2, #10
 800670e:	b292      	uxth	r2, r2
 8006710:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8006714:	e01c      	b.n	8006750 <USB_EPStartXfer+0x4ea>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006716:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800671a:	fa15 f282 	uxtah	r2, r5, r2
 800671e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006722:	b2b2      	uxth	r2, r6
 8006724:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8006728:	e7ce      	b.n	80066c8 <USB_EPStartXfer+0x462>
            ep->xfer_len_db = 0U;
 800672a:	2200      	movs	r2, #0
 800672c:	6222      	str	r2, [r4, #32]
            len = ep->xfer_len_db;
 800672e:	461e      	mov	r6, r3
 8006730:	e7d9      	b.n	80066e6 <USB_EPStartXfer+0x480>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006732:	0972      	lsrs	r2, r6, #5
 8006734:	f016 0f1f 	tst.w	r6, #31
 8006738:	d100      	bne.n	800673c <USB_EPStartXfer+0x4d6>
 800673a:	3a01      	subs	r2, #1
 800673c:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8006740:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8006744:	b292      	uxth	r2, r2
 8006746:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800674a:	e001      	b.n	8006750 <USB_EPStartXfer+0x4ea>
 800674c:	2b01      	cmp	r3, #1
 800674e:	d006      	beq.n	800675e <USB_EPStartXfer+0x4f8>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006750:	b2b3      	uxth	r3, r6
 8006752:	8922      	ldrh	r2, [r4, #8]
 8006754:	6961      	ldr	r1, [r4, #20]
 8006756:	4628      	mov	r0, r5
 8006758:	f7ff fd72 	bl	8006240 <USB_WritePMA>
 800675c:	e613      	b.n	8006386 <USB_EPStartXfer+0x120>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800675e:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8006762:	fa15 f383 	uxtah	r3, r5, r3
 8006766:	7822      	ldrb	r2, [r4, #0]
 8006768:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800676c:	b2b2      	uxth	r2, r6
 800676e:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8006772:	e7ed      	b.n	8006750 <USB_EPStartXfer+0x4ea>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006774:	7862      	ldrb	r2, [r4, #1]
 8006776:	bb8a      	cbnz	r2, 80067dc <USB_EPStartXfer+0x576>
 8006778:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800677c:	fa15 f282 	uxtah	r2, r5, r2
 8006780:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006784:	b98e      	cbnz	r6, 80067aa <USB_EPStartXfer+0x544>
 8006786:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 800678a:	b292      	uxth	r2, r2
 800678c:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8006790:	b292      	uxth	r2, r2
 8006792:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8006796:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 800679a:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800679e:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80067a2:	b292      	uxth	r2, r2
 80067a4:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 80067a8:	e01a      	b.n	80067e0 <USB_EPStartXfer+0x57a>
 80067aa:	2e3e      	cmp	r6, #62	; 0x3e
 80067ac:	d809      	bhi.n	80067c2 <USB_EPStartXfer+0x55c>
 80067ae:	0872      	lsrs	r2, r6, #1
 80067b0:	f016 0f01 	tst.w	r6, #1
 80067b4:	d000      	beq.n	80067b8 <USB_EPStartXfer+0x552>
 80067b6:	3201      	adds	r2, #1
 80067b8:	0292      	lsls	r2, r2, #10
 80067ba:	b292      	uxth	r2, r2
 80067bc:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 80067c0:	e00e      	b.n	80067e0 <USB_EPStartXfer+0x57a>
 80067c2:	0972      	lsrs	r2, r6, #5
 80067c4:	f016 0f1f 	tst.w	r6, #31
 80067c8:	d100      	bne.n	80067cc <USB_EPStartXfer+0x566>
 80067ca:	3a01      	subs	r2, #1
 80067cc:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 80067d0:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80067d4:	b292      	uxth	r2, r2
 80067d6:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 80067da:	e001      	b.n	80067e0 <USB_EPStartXfer+0x57a>
 80067dc:	2a01      	cmp	r2, #1
 80067de:	d026      	beq.n	800682e <USB_EPStartXfer+0x5c8>
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80067e0:	b2b3      	uxth	r3, r6
 80067e2:	8922      	ldrh	r2, [r4, #8]
 80067e4:	6961      	ldr	r1, [r4, #20]
 80067e6:	4628      	mov	r0, r5
 80067e8:	f7ff fd2a 	bl	8006240 <USB_WritePMA>
          ep->xfer_buff += len;
 80067ec:	6963      	ldr	r3, [r4, #20]
 80067ee:	4433      	add	r3, r6
 80067f0:	6163      	str	r3, [r4, #20]
          if (ep->xfer_len_db > ep->maxpacket)
 80067f2:	6a23      	ldr	r3, [r4, #32]
 80067f4:	6922      	ldr	r2, [r4, #16]
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d923      	bls.n	8006842 <USB_EPStartXfer+0x5dc>
            ep->xfer_len_db -= len;
 80067fa:	1b9b      	subs	r3, r3, r6
 80067fc:	6223      	str	r3, [r4, #32]
          if (len > 0U)
 80067fe:	2e00      	cmp	r6, #0
 8006800:	f43f adc1 	beq.w	8006386 <USB_EPStartXfer+0x120>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006804:	7863      	ldrb	r3, [r4, #1]
 8006806:	bb6b      	cbnz	r3, 8006864 <USB_EPStartXfer+0x5fe>
 8006808:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 800680c:	fa15 f383 	uxtah	r3, r5, r3
 8006810:	7822      	ldrb	r2, [r4, #0]
 8006812:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006816:	2e3e      	cmp	r6, #62	; 0x3e
 8006818:	d817      	bhi.n	800684a <USB_EPStartXfer+0x5e4>
 800681a:	0872      	lsrs	r2, r6, #1
 800681c:	f016 0f01 	tst.w	r6, #1
 8006820:	d000      	beq.n	8006824 <USB_EPStartXfer+0x5be>
 8006822:	3201      	adds	r2, #1
 8006824:	0292      	lsls	r2, r2, #10
 8006826:	b292      	uxth	r2, r2
 8006828:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800682c:	e01c      	b.n	8006868 <USB_EPStartXfer+0x602>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800682e:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8006832:	fa15 f282 	uxtah	r2, r5, r2
 8006836:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800683a:	b2b2      	uxth	r2, r6
 800683c:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8006840:	e7ce      	b.n	80067e0 <USB_EPStartXfer+0x57a>
            ep->xfer_len_db = 0U;
 8006842:	2200      	movs	r2, #0
 8006844:	6222      	str	r2, [r4, #32]
            len = ep->xfer_len_db;
 8006846:	461e      	mov	r6, r3
 8006848:	e7d9      	b.n	80067fe <USB_EPStartXfer+0x598>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800684a:	0972      	lsrs	r2, r6, #5
 800684c:	f016 0f1f 	tst.w	r6, #31
 8006850:	d100      	bne.n	8006854 <USB_EPStartXfer+0x5ee>
 8006852:	3a01      	subs	r2, #1
 8006854:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8006858:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800685c:	b292      	uxth	r2, r2
 800685e:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8006862:	e001      	b.n	8006868 <USB_EPStartXfer+0x602>
 8006864:	2b01      	cmp	r3, #1
 8006866:	d006      	beq.n	8006876 <USB_EPStartXfer+0x610>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006868:	b2b3      	uxth	r3, r6
 800686a:	8962      	ldrh	r2, [r4, #10]
 800686c:	6961      	ldr	r1, [r4, #20]
 800686e:	4628      	mov	r0, r5
 8006870:	f7ff fce6 	bl	8006240 <USB_WritePMA>
 8006874:	e587      	b.n	8006386 <USB_EPStartXfer+0x120>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006876:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 800687a:	fa15 f383 	uxtah	r3, r5, r3
 800687e:	7822      	ldrb	r2, [r4, #0]
 8006880:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006884:	b2b2      	uxth	r2, r6
 8006886:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 800688a:	e7ed      	b.n	8006868 <USB_EPStartXfer+0x602>
        ep->xfer_len = 0U;
 800688c:	2200      	movs	r2, #0
 800688e:	618a      	str	r2, [r1, #24]
        len = ep->xfer_len;
 8006890:	461a      	mov	r2, r3
 8006892:	e4f9      	b.n	8006288 <USB_EPStartXfer+0x22>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006894:	2a3e      	cmp	r2, #62	; 0x3e
 8006896:	d809      	bhi.n	80068ac <USB_EPStartXfer+0x646>
 8006898:	0851      	lsrs	r1, r2, #1
 800689a:	f012 0f01 	tst.w	r2, #1
 800689e:	d000      	beq.n	80068a2 <USB_EPStartXfer+0x63c>
 80068a0:	3101      	adds	r1, #1
 80068a2:	0289      	lsls	r1, r1, #10
 80068a4:	b289      	uxth	r1, r1
 80068a6:	f8a3 1406 	strh.w	r1, [r3, #1030]	; 0x406
 80068aa:	e508      	b.n	80062be <USB_EPStartXfer+0x58>
 80068ac:	0951      	lsrs	r1, r2, #5
 80068ae:	f012 0f1f 	tst.w	r2, #31
 80068b2:	d100      	bne.n	80068b6 <USB_EPStartXfer+0x650>
 80068b4:	3901      	subs	r1, #1
 80068b6:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 80068ba:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80068be:	b289      	uxth	r1, r1
 80068c0:	f8a3 1406 	strh.w	r1, [r3, #1030]	; 0x406
 80068c4:	e4fb      	b.n	80062be <USB_EPStartXfer+0x58>
      if (ep->type == EP_TYPE_BULK)
 80068c6:	78ca      	ldrb	r2, [r1, #3]
 80068c8:	2a02      	cmp	r2, #2
 80068ca:	d045      	beq.n	8006958 <USB_EPStartXfer+0x6f2>
      else if (ep->type == EP_TYPE_ISOC)
 80068cc:	2a01      	cmp	r2, #1
 80068ce:	f040 8120 	bne.w	8006b12 <USB_EPStartXfer+0x8ac>
        if (ep->xfer_len > ep->maxpacket)
 80068d2:	6989      	ldr	r1, [r1, #24]
 80068d4:	6922      	ldr	r2, [r4, #16]
 80068d6:	4291      	cmp	r1, r2
 80068d8:	f240 80d4 	bls.w	8006a84 <USB_EPStartXfer+0x81e>
          ep->xfer_len -= len;
 80068dc:	1a89      	subs	r1, r1, r2
 80068de:	61a1      	str	r1, [r4, #24]
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80068e0:	b9d3      	cbnz	r3, 8006918 <USB_EPStartXfer+0x6b2>
 80068e2:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 80068e6:	fa15 f383 	uxtah	r3, r5, r3
 80068ea:	7821      	ldrb	r1, [r4, #0]
 80068ec:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80068f0:	2a00      	cmp	r2, #0
 80068f2:	f040 80cb 	bne.w	8006a8c <USB_EPStartXfer+0x826>
 80068f6:	f8b3 1402 	ldrh.w	r1, [r3, #1026]	; 0x402
 80068fa:	b289      	uxth	r1, r1
 80068fc:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8006900:	b289      	uxth	r1, r1
 8006902:	f8a3 1402 	strh.w	r1, [r3, #1026]	; 0x402
 8006906:	f8b3 1402 	ldrh.w	r1, [r3, #1026]	; 0x402
 800690a:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 800690e:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8006912:	b289      	uxth	r1, r1
 8006914:	f8a3 1402 	strh.w	r1, [r3, #1026]	; 0x402
 8006918:	7863      	ldrb	r3, [r4, #1]
 800691a:	2b00      	cmp	r3, #0
 800691c:	f040 80ea 	bne.w	8006af4 <USB_EPStartXfer+0x88e>
 8006920:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8006924:	fa15 f383 	uxtah	r3, r5, r3
 8006928:	7821      	ldrb	r1, [r4, #0]
 800692a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800692e:	2a00      	cmp	r2, #0
 8006930:	f040 80c5 	bne.w	8006abe <USB_EPStartXfer+0x858>
 8006934:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8006938:	b292      	uxth	r2, r2
 800693a:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800693e:	b292      	uxth	r2, r2
 8006940:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8006944:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8006948:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800694c:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8006950:	b292      	uxth	r2, r2
 8006952:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8006956:	e4b2      	b.n	80062be <USB_EPStartXfer+0x58>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006958:	b9cb      	cbnz	r3, 800698e <USB_EPStartXfer+0x728>
 800695a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800695e:	fa10 f383 	uxtah	r3, r0, r3
 8006962:	780a      	ldrb	r2, [r1, #0]
 8006964:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006968:	690a      	ldr	r2, [r1, #16]
 800696a:	bb72      	cbnz	r2, 80069ca <USB_EPStartXfer+0x764>
 800696c:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 8006970:	b292      	uxth	r2, r2
 8006972:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8006976:	b292      	uxth	r2, r2
 8006978:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800697c:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 8006980:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8006984:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8006988:	b292      	uxth	r2, r2
 800698a:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 800698e:	7863      	ldrb	r3, [r4, #1]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d14c      	bne.n	8006a2e <USB_EPStartXfer+0x7c8>
 8006994:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8006998:	fa15 f383 	uxtah	r3, r5, r3
 800699c:	7822      	ldrb	r2, [r4, #0]
 800699e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80069a2:	6922      	ldr	r2, [r4, #16]
 80069a4:	bb52      	cbnz	r2, 80069fc <USB_EPStartXfer+0x796>
 80069a6:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 80069aa:	b292      	uxth	r2, r2
 80069ac:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80069b0:	b292      	uxth	r2, r2
 80069b2:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 80069b6:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 80069ba:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80069be:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80069c2:	b292      	uxth	r2, r2
 80069c4:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 80069c8:	e033      	b.n	8006a32 <USB_EPStartXfer+0x7cc>
 80069ca:	2a3e      	cmp	r2, #62	; 0x3e
 80069cc:	d809      	bhi.n	80069e2 <USB_EPStartXfer+0x77c>
 80069ce:	0851      	lsrs	r1, r2, #1
 80069d0:	f012 0f01 	tst.w	r2, #1
 80069d4:	d000      	beq.n	80069d8 <USB_EPStartXfer+0x772>
 80069d6:	3101      	adds	r1, #1
 80069d8:	028a      	lsls	r2, r1, #10
 80069da:	b292      	uxth	r2, r2
 80069dc:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 80069e0:	e7d5      	b.n	800698e <USB_EPStartXfer+0x728>
 80069e2:	0951      	lsrs	r1, r2, #5
 80069e4:	f012 0f1f 	tst.w	r2, #31
 80069e8:	d100      	bne.n	80069ec <USB_EPStartXfer+0x786>
 80069ea:	3901      	subs	r1, #1
 80069ec:	ea6f 62c1 	mvn.w	r2, r1, lsl #27
 80069f0:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80069f4:	b292      	uxth	r2, r2
 80069f6:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 80069fa:	e7c8      	b.n	800698e <USB_EPStartXfer+0x728>
 80069fc:	2a3e      	cmp	r2, #62	; 0x3e
 80069fe:	d809      	bhi.n	8006a14 <USB_EPStartXfer+0x7ae>
 8006a00:	0851      	lsrs	r1, r2, #1
 8006a02:	f012 0f01 	tst.w	r2, #1
 8006a06:	d000      	beq.n	8006a0a <USB_EPStartXfer+0x7a4>
 8006a08:	3101      	adds	r1, #1
 8006a0a:	028a      	lsls	r2, r1, #10
 8006a0c:	b292      	uxth	r2, r2
 8006a0e:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8006a12:	e00e      	b.n	8006a32 <USB_EPStartXfer+0x7cc>
 8006a14:	0951      	lsrs	r1, r2, #5
 8006a16:	f012 0f1f 	tst.w	r2, #31
 8006a1a:	d100      	bne.n	8006a1e <USB_EPStartXfer+0x7b8>
 8006a1c:	3901      	subs	r1, #1
 8006a1e:	ea6f 62c1 	mvn.w	r2, r1, lsl #27
 8006a22:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8006a26:	b292      	uxth	r2, r2
 8006a28:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8006a2c:	e001      	b.n	8006a32 <USB_EPStartXfer+0x7cc>
 8006a2e:	2b01      	cmp	r3, #1
 8006a30:	d01d      	beq.n	8006a6e <USB_EPStartXfer+0x808>
        if (ep->xfer_count != 0U)
 8006a32:	69e3      	ldr	r3, [r4, #28]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	f43f ac42 	beq.w	80062be <USB_EPStartXfer+0x58>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006a3a:	7822      	ldrb	r2, [r4, #0]
 8006a3c:	f835 1022 	ldrh.w	r1, [r5, r2, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006a40:	f244 0340 	movw	r3, #16448	; 0x4040
 8006a44:	ea03 0001 	and.w	r0, r3, r1
 8006a48:	438b      	bics	r3, r1
 8006a4a:	d002      	beq.n	8006a52 <USB_EPStartXfer+0x7ec>
 8006a4c:	2800      	cmp	r0, #0
 8006a4e:	f47f ac36 	bne.w	80062be <USB_EPStartXfer+0x58>
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8006a52:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8006a56:	b29b      	uxth	r3, r3
 8006a58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a64:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006a68:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 8006a6c:	e427      	b.n	80062be <USB_EPStartXfer+0x58>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006a6e:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8006a72:	fa15 f383 	uxtah	r3, r5, r3
 8006a76:	7822      	ldrb	r2, [r4, #0]
 8006a78:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006a7c:	8a22      	ldrh	r2, [r4, #16]
 8006a7e:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8006a82:	e7d6      	b.n	8006a32 <USB_EPStartXfer+0x7cc>
          ep->xfer_len = 0U;
 8006a84:	2200      	movs	r2, #0
 8006a86:	61a2      	str	r2, [r4, #24]
          len = ep->xfer_len;
 8006a88:	460a      	mov	r2, r1
 8006a8a:	e729      	b.n	80068e0 <USB_EPStartXfer+0x67a>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006a8c:	2a3e      	cmp	r2, #62	; 0x3e
 8006a8e:	d809      	bhi.n	8006aa4 <USB_EPStartXfer+0x83e>
 8006a90:	0851      	lsrs	r1, r2, #1
 8006a92:	f012 0f01 	tst.w	r2, #1
 8006a96:	d000      	beq.n	8006a9a <USB_EPStartXfer+0x834>
 8006a98:	3101      	adds	r1, #1
 8006a9a:	0289      	lsls	r1, r1, #10
 8006a9c:	b289      	uxth	r1, r1
 8006a9e:	f8a3 1402 	strh.w	r1, [r3, #1026]	; 0x402
 8006aa2:	e739      	b.n	8006918 <USB_EPStartXfer+0x6b2>
 8006aa4:	0951      	lsrs	r1, r2, #5
 8006aa6:	f012 0f1f 	tst.w	r2, #31
 8006aaa:	d100      	bne.n	8006aae <USB_EPStartXfer+0x848>
 8006aac:	3901      	subs	r1, #1
 8006aae:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 8006ab2:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8006ab6:	b289      	uxth	r1, r1
 8006ab8:	f8a3 1402 	strh.w	r1, [r3, #1026]	; 0x402
 8006abc:	e72c      	b.n	8006918 <USB_EPStartXfer+0x6b2>
 8006abe:	2a3e      	cmp	r2, #62	; 0x3e
 8006ac0:	d80a      	bhi.n	8006ad8 <USB_EPStartXfer+0x872>
 8006ac2:	0851      	lsrs	r1, r2, #1
 8006ac4:	f012 0f01 	tst.w	r2, #1
 8006ac8:	d000      	beq.n	8006acc <USB_EPStartXfer+0x866>
 8006aca:	3101      	adds	r1, #1
 8006acc:	028a      	lsls	r2, r1, #10
 8006ace:	b292      	uxth	r2, r2
 8006ad0:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8006ad4:	f7ff bbf3 	b.w	80062be <USB_EPStartXfer+0x58>
 8006ad8:	0951      	lsrs	r1, r2, #5
 8006ada:	f012 0f1f 	tst.w	r2, #31
 8006ade:	d100      	bne.n	8006ae2 <USB_EPStartXfer+0x87c>
 8006ae0:	3901      	subs	r1, #1
 8006ae2:	ea6f 62c1 	mvn.w	r2, r1, lsl #27
 8006ae6:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8006aea:	b292      	uxth	r2, r2
 8006aec:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8006af0:	f7ff bbe5 	b.w	80062be <USB_EPStartXfer+0x58>
 8006af4:	2b01      	cmp	r3, #1
 8006af6:	f47f abe2 	bne.w	80062be <USB_EPStartXfer+0x58>
 8006afa:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8006afe:	fa15 f383 	uxtah	r3, r5, r3
 8006b02:	7821      	ldrb	r1, [r4, #0]
 8006b04:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8006b08:	b292      	uxth	r2, r2
 8006b0a:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8006b0e:	f7ff bbd6 	b.w	80062be <USB_EPStartXfer+0x58>
        return HAL_ERROR;
 8006b12:	2001      	movs	r0, #1
 8006b14:	f7ff bbe4 	b.w	80062e0 <USB_EPStartXfer+0x7a>

08006b18 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006b18:	b410      	push	{r4}
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006b1a:	085c      	lsrs	r4, r3, #1
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006b1c:	4410      	add	r0, r2
 8006b1e:	f500 6080 	add.w	r0, r0, #1024	; 0x400

  for (i = n; i != 0U; i--)
 8006b22:	b144      	cbz	r4, 8006b36 <USB_ReadPMA+0x1e>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006b24:	f830 2b02 	ldrh.w	r2, [r0], #2
    pdwVal++;
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006b28:	700a      	strb	r2, [r1, #0]
    pBuf++;
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006b2a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8006b2e:	704a      	strb	r2, [r1, #1]
    pBuf++;
 8006b30:	3102      	adds	r1, #2
  for (i = n; i != 0U; i--)
 8006b32:	3c01      	subs	r4, #1
 8006b34:	e7f5      	b.n	8006b22 <USB_ReadPMA+0xa>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006b36:	f013 0f01 	tst.w	r3, #1
 8006b3a:	d001      	beq.n	8006b40 <USB_ReadPMA+0x28>
  {
    temp = *pdwVal;
 8006b3c:	8803      	ldrh	r3, [r0, #0]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006b3e:	700b      	strb	r3, [r1, #0]
  }
}
 8006b40:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b44:	4770      	bx	lr

08006b46 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006b46:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006b48:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 8006b4c:	b184      	cbz	r4, 8006b70 <USBD_CDC_EP0_RxReady+0x2a>
  {
    return (uint8_t)USBD_FAIL;
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006b4e:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 8006b52:	b17b      	cbz	r3, 8006b74 <USBD_CDC_EP0_RxReady+0x2e>
 8006b54:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8006b58:	28ff      	cmp	r0, #255	; 0xff
 8006b5a:	d00d      	beq.n	8006b78 <USBD_CDC_EP0_RxReady+0x32>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006b5c:	689b      	ldr	r3, [r3, #8]
 8006b5e:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8006b62:	4621      	mov	r1, r4
 8006b64:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8006b66:	23ff      	movs	r3, #255	; 0xff
 8006b68:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006b6c:	2000      	movs	r0, #0
}
 8006b6e:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 8006b70:	2003      	movs	r0, #3
 8006b72:	e7fc      	b.n	8006b6e <USBD_CDC_EP0_RxReady+0x28>
  return (uint8_t)USBD_OK;
 8006b74:	2000      	movs	r0, #0
 8006b76:	e7fa      	b.n	8006b6e <USBD_CDC_EP0_RxReady+0x28>
 8006b78:	2000      	movs	r0, #0
 8006b7a:	e7f8      	b.n	8006b6e <USBD_CDC_EP0_RxReady+0x28>

08006b7c <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8006b7c:	2343      	movs	r3, #67	; 0x43
 8006b7e:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgFSDesc;
}
 8006b80:	4800      	ldr	r0, [pc, #0]	; (8006b84 <USBD_CDC_GetFSCfgDesc+0x8>)
 8006b82:	4770      	bx	lr
 8006b84:	20000044 	.word	0x20000044

08006b88 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8006b88:	2343      	movs	r3, #67	; 0x43
 8006b8a:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgHSDesc;
}
 8006b8c:	4800      	ldr	r0, [pc, #0]	; (8006b90 <USBD_CDC_GetHSCfgDesc+0x8>)
 8006b8e:	4770      	bx	lr
 8006b90:	20000088 	.word	0x20000088

08006b94 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006b94:	2343      	movs	r3, #67	; 0x43
 8006b96:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
}
 8006b98:	4800      	ldr	r0, [pc, #0]	; (8006b9c <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8006b9a:	4770      	bx	lr
 8006b9c:	200000d8 	.word	0x200000d8

08006ba0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006ba0:	230a      	movs	r3, #10
 8006ba2:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_DeviceQualifierDesc;
}
 8006ba4:	4800      	ldr	r0, [pc, #0]	; (8006ba8 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8006ba6:	4770      	bx	lr
 8006ba8:	200000cc 	.word	0x200000cc

08006bac <USBD_CDC_DataOut>:
{
 8006bac:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006bae:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
  if (pdev->pClassData == NULL)
 8006bb2:	b175      	cbz	r5, 8006bd2 <USBD_CDC_DataOut+0x26>
 8006bb4:	4604      	mov	r4, r0
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006bb6:	f001 f8fb 	bl	8007db0 <USBD_LL_GetRxDataSize>
 8006bba:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006bbe:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 8006bc2:	68db      	ldr	r3, [r3, #12]
 8006bc4:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 8006bc8:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 8006bcc:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 8006bce:	2000      	movs	r0, #0
}
 8006bd0:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 8006bd2:	2003      	movs	r0, #3
 8006bd4:	e7fc      	b.n	8006bd0 <USBD_CDC_DataOut+0x24>

08006bd6 <USBD_CDC_DataIn>:
{
 8006bd6:	b538      	push	{r3, r4, r5, lr}
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006bd8:	f8d0 42c4 	ldr.w	r4, [r0, #708]	; 0x2c4
  if (pdev->pClassData == NULL)
 8006bdc:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 8006be0:	b353      	cbz	r3, 8006c38 <USBD_CDC_DataIn+0x62>
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006be2:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8006be6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8006bea:	6992      	ldr	r2, [r2, #24]
 8006bec:	b14a      	cbz	r2, 8006c02 <USBD_CDC_DataIn+0x2c>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006bee:	eb01 0581 	add.w	r5, r1, r1, lsl #2
 8006bf2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006bf6:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8006bf8:	fbb2 f4f5 	udiv	r4, r2, r5
 8006bfc:	fb05 2214 	mls	r2, r5, r4, r2
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006c00:	b172      	cbz	r2, 8006c20 <USBD_CDC_DataIn+0x4a>
    hcdc->TxState = 0U;
 8006c02:	2200      	movs	r2, #0
 8006c04:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8006c08:	f8d0 22c0 	ldr.w	r2, [r0, #704]	; 0x2c0
 8006c0c:	6914      	ldr	r4, [r2, #16]
 8006c0e:	b1ac      	cbz	r4, 8006c3c <USBD_CDC_DataIn+0x66>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006c10:	460a      	mov	r2, r1
 8006c12:	f503 7104 	add.w	r1, r3, #528	; 0x210
 8006c16:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
 8006c1a:	47a0      	blx	r4
  return (uint8_t)USBD_OK;
 8006c1c:	2000      	movs	r0, #0
}
 8006c1e:	bd38      	pop	{r3, r4, r5, pc}
    pdev->ep_in[epnum].total_length = 0U;
 8006c20:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8006c24:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8006c28:	2400      	movs	r4, #0
 8006c2a:	619c      	str	r4, [r3, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006c2c:	4623      	mov	r3, r4
 8006c2e:	4622      	mov	r2, r4
 8006c30:	f001 f8ae 	bl	8007d90 <USBD_LL_Transmit>
  return (uint8_t)USBD_OK;
 8006c34:	4620      	mov	r0, r4
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006c36:	e7f2      	b.n	8006c1e <USBD_CDC_DataIn+0x48>
    return (uint8_t)USBD_FAIL;
 8006c38:	2003      	movs	r0, #3
 8006c3a:	e7f0      	b.n	8006c1e <USBD_CDC_DataIn+0x48>
  return (uint8_t)USBD_OK;
 8006c3c:	2000      	movs	r0, #0
 8006c3e:	e7ee      	b.n	8006c1e <USBD_CDC_DataIn+0x48>

08006c40 <USBD_CDC_Setup>:
{
 8006c40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c42:	b083      	sub	sp, #12
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006c44:	f8d0 62bc 	ldr.w	r6, [r0, #700]	; 0x2bc
  uint8_t ifalt = 0U;
 8006c48:	2300      	movs	r3, #0
 8006c4a:	f88d 3007 	strb.w	r3, [sp, #7]
  uint16_t status_info = 0U;
 8006c4e:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (hcdc == NULL)
 8006c52:	2e00      	cmp	r6, #0
 8006c54:	d06c      	beq.n	8006d30 <USBD_CDC_Setup+0xf0>
 8006c56:	4607      	mov	r7, r0
 8006c58:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c5a:	780b      	ldrb	r3, [r1, #0]
 8006c5c:	f013 0560 	ands.w	r5, r3, #96	; 0x60
 8006c60:	d02a      	beq.n	8006cb8 <USBD_CDC_Setup+0x78>
 8006c62:	2d20      	cmp	r5, #32
 8006c64:	d15e      	bne.n	8006d24 <USBD_CDC_Setup+0xe4>
      if (req->wLength != 0U)
 8006c66:	88ca      	ldrh	r2, [r1, #6]
 8006c68:	b1f2      	cbz	r2, 8006ca8 <USBD_CDC_Setup+0x68>
        if ((req->bmRequest & 0x80U) != 0U)
 8006c6a:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006c6e:	d00f      	beq.n	8006c90 <USBD_CDC_Setup+0x50>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006c70:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 8006c74:	689b      	ldr	r3, [r3, #8]
 8006c76:	4631      	mov	r1, r6
 8006c78:	7860      	ldrb	r0, [r4, #1]
 8006c7a:	4798      	blx	r3
          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006c7c:	88e2      	ldrh	r2, [r4, #6]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006c7e:	2a07      	cmp	r2, #7
 8006c80:	bf28      	it	cs
 8006c82:	2207      	movcs	r2, #7
 8006c84:	4631      	mov	r1, r6
 8006c86:	4638      	mov	r0, r7
 8006c88:	f000 fdec 	bl	8007864 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8006c8c:	2500      	movs	r5, #0
 8006c8e:	e04c      	b.n	8006d2a <USBD_CDC_Setup+0xea>
          hcdc->CmdOpCode = req->bRequest;
 8006c90:	784b      	ldrb	r3, [r1, #1]
 8006c92:	f886 3200 	strb.w	r3, [r6, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006c96:	798b      	ldrb	r3, [r1, #6]
 8006c98:	f886 3201 	strb.w	r3, [r6, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006c9c:	88ca      	ldrh	r2, [r1, #6]
 8006c9e:	4631      	mov	r1, r6
 8006ca0:	f000 fdf5 	bl	800788e <USBD_CtlPrepareRx>
  USBD_StatusTypeDef ret = USBD_OK;
 8006ca4:	2500      	movs	r5, #0
 8006ca6:	e040      	b.n	8006d2a <USBD_CDC_Setup+0xea>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006ca8:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 8006cac:	689b      	ldr	r3, [r3, #8]
 8006cae:	2200      	movs	r2, #0
 8006cb0:	7848      	ldrb	r0, [r1, #1]
 8006cb2:	4798      	blx	r3
  USBD_StatusTypeDef ret = USBD_OK;
 8006cb4:	2500      	movs	r5, #0
 8006cb6:	e038      	b.n	8006d2a <USBD_CDC_Setup+0xea>
      switch (req->bRequest)
 8006cb8:	784e      	ldrb	r6, [r1, #1]
 8006cba:	2e0b      	cmp	r6, #11
 8006cbc:	d82e      	bhi.n	8006d1c <USBD_CDC_Setup+0xdc>
 8006cbe:	e8df f006 	tbb	[pc, r6]
 8006cc2:	3406      	.short	0x3406
 8006cc4:	2d2d2d2d 	.word	0x2d2d2d2d
 8006cc8:	2d2d2d2d 	.word	0x2d2d2d2d
 8006ccc:	2415      	.short	0x2415
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cce:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006cd2:	b2db      	uxtb	r3, r3
 8006cd4:	2b03      	cmp	r3, #3
 8006cd6:	d003      	beq.n	8006ce0 <USBD_CDC_Setup+0xa0>
            USBD_CtlError(pdev, req);
 8006cd8:	f000 fa8b 	bl	80071f2 <USBD_CtlError>
            ret = USBD_FAIL;
 8006cdc:	2503      	movs	r5, #3
 8006cde:	e024      	b.n	8006d2a <USBD_CDC_Setup+0xea>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006ce0:	2202      	movs	r2, #2
 8006ce2:	a901      	add	r1, sp, #4
 8006ce4:	f000 fdbe 	bl	8007864 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8006ce8:	4635      	mov	r5, r6
 8006cea:	e01e      	b.n	8006d2a <USBD_CDC_Setup+0xea>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cec:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006cf0:	b2db      	uxtb	r3, r3
 8006cf2:	2b03      	cmp	r3, #3
 8006cf4:	d003      	beq.n	8006cfe <USBD_CDC_Setup+0xbe>
            USBD_CtlError(pdev, req);
 8006cf6:	f000 fa7c 	bl	80071f2 <USBD_CtlError>
            ret = USBD_FAIL;
 8006cfa:	2503      	movs	r5, #3
 8006cfc:	e015      	b.n	8006d2a <USBD_CDC_Setup+0xea>
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006cfe:	2201      	movs	r2, #1
 8006d00:	f10d 0107 	add.w	r1, sp, #7
 8006d04:	f000 fdae 	bl	8007864 <USBD_CtlSendData>
 8006d08:	e00f      	b.n	8006d2a <USBD_CDC_Setup+0xea>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006d0a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006d0e:	b2db      	uxtb	r3, r3
 8006d10:	2b03      	cmp	r3, #3
 8006d12:	d00a      	beq.n	8006d2a <USBD_CDC_Setup+0xea>
            USBD_CtlError(pdev, req);
 8006d14:	f000 fa6d 	bl	80071f2 <USBD_CtlError>
            ret = USBD_FAIL;
 8006d18:	2503      	movs	r5, #3
 8006d1a:	e006      	b.n	8006d2a <USBD_CDC_Setup+0xea>
          USBD_CtlError(pdev, req);
 8006d1c:	f000 fa69 	bl	80071f2 <USBD_CtlError>
          ret = USBD_FAIL;
 8006d20:	2503      	movs	r5, #3
          break;
 8006d22:	e002      	b.n	8006d2a <USBD_CDC_Setup+0xea>
      USBD_CtlError(pdev, req);
 8006d24:	f000 fa65 	bl	80071f2 <USBD_CtlError>
      ret = USBD_FAIL;
 8006d28:	2503      	movs	r5, #3
}
 8006d2a:	4628      	mov	r0, r5
 8006d2c:	b003      	add	sp, #12
 8006d2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (uint8_t)USBD_FAIL;
 8006d30:	2503      	movs	r5, #3
 8006d32:	e7fa      	b.n	8006d2a <USBD_CDC_Setup+0xea>

08006d34 <USBD_CDC_DeInit>:
{
 8006d34:	b538      	push	{r3, r4, r5, lr}
 8006d36:	4604      	mov	r4, r0
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006d38:	2181      	movs	r1, #129	; 0x81
 8006d3a:	f000 fff2 	bl	8007d22 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006d3e:	2500      	movs	r5, #0
 8006d40:	8725      	strh	r5, [r4, #56]	; 0x38
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006d42:	2101      	movs	r1, #1
 8006d44:	4620      	mov	r0, r4
 8006d46:	f000 ffec 	bl	8007d22 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006d4a:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006d4e:	2182      	movs	r1, #130	; 0x82
 8006d50:	4620      	mov	r0, r4
 8006d52:	f000 ffe6 	bl	8007d22 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006d56:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8006d5a:	f8a4 504e 	strh.w	r5, [r4, #78]	; 0x4e
  if (pdev->pClassData != NULL)
 8006d5e:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8006d62:	b14b      	cbz	r3, 8006d78 <USBD_CDC_DeInit+0x44>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006d64:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 8006d68:	685b      	ldr	r3, [r3, #4]
 8006d6a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8006d6c:	f8d4 02bc 	ldr.w	r0, [r4, #700]	; 0x2bc
 8006d70:	f001 f84c 	bl	8007e0c <USBD_static_free>
    pdev->pClassData = NULL;
 8006d74:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
}
 8006d78:	2000      	movs	r0, #0
 8006d7a:	bd38      	pop	{r3, r4, r5, pc}

08006d7c <USBD_CDC_Init>:
{
 8006d7c:	b570      	push	{r4, r5, r6, lr}
 8006d7e:	4604      	mov	r4, r0
  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006d80:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006d84:	f001 f83e 	bl	8007e04 <USBD_static_malloc>
  if (hcdc == NULL)
 8006d88:	b3b8      	cbz	r0, 8006dfa <USBD_CDC_Init+0x7e>
 8006d8a:	4606      	mov	r6, r0
  pdev->pClassData = (void *)hcdc;
 8006d8c:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d90:	7c23      	ldrb	r3, [r4, #16]
 8006d92:	bbbb      	cbnz	r3, 8006e04 <USBD_CDC_Init+0x88>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006d94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d98:	2202      	movs	r2, #2
 8006d9a:	2181      	movs	r1, #129	; 0x81
 8006d9c:	4620      	mov	r0, r4
 8006d9e:	f000 ffb5 	bl	8007d0c <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006da2:	2501      	movs	r5, #1
 8006da4:	8725      	strh	r5, [r4, #56]	; 0x38
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006da6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006daa:	2202      	movs	r2, #2
 8006dac:	4629      	mov	r1, r5
 8006dae:	4620      	mov	r0, r4
 8006db0:	f000 ffac 	bl	8007d0c <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006db4:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006db8:	2310      	movs	r3, #16
 8006dba:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006dbe:	2308      	movs	r3, #8
 8006dc0:	2203      	movs	r2, #3
 8006dc2:	2182      	movs	r1, #130	; 0x82
 8006dc4:	4620      	mov	r0, r4
 8006dc6:	f000 ffa1 	bl	8007d0c <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006dca:	2301      	movs	r3, #1
 8006dcc:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006dd0:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4798      	blx	r3
  hcdc->TxState = 0U;
 8006dd8:	2300      	movs	r3, #0
 8006dda:	f8c6 3214 	str.w	r3, [r6, #532]	; 0x214
  hcdc->RxState = 0U;
 8006dde:	f8c6 3218 	str.w	r3, [r6, #536]	; 0x218
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006de2:	7c25      	ldrb	r5, [r4, #16]
 8006de4:	bb15      	cbnz	r5, 8006e2c <USBD_CDC_Init+0xb0>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006de6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006dea:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 8006dee:	2101      	movs	r1, #1
 8006df0:	4620      	mov	r0, r4
 8006df2:	f000 ffd5 	bl	8007da0 <USBD_LL_PrepareReceive>
}
 8006df6:	4628      	mov	r0, r5
 8006df8:	bd70      	pop	{r4, r5, r6, pc}
    pdev->pClassData = NULL;
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	f8c4 32bc 	str.w	r3, [r4, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8006e00:	2502      	movs	r5, #2
 8006e02:	e7f8      	b.n	8006df6 <USBD_CDC_Init+0x7a>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006e04:	2340      	movs	r3, #64	; 0x40
 8006e06:	2202      	movs	r2, #2
 8006e08:	2181      	movs	r1, #129	; 0x81
 8006e0a:	4620      	mov	r0, r4
 8006e0c:	f000 ff7e 	bl	8007d0c <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006e10:	2501      	movs	r5, #1
 8006e12:	8725      	strh	r5, [r4, #56]	; 0x38
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006e14:	2340      	movs	r3, #64	; 0x40
 8006e16:	2202      	movs	r2, #2
 8006e18:	4629      	mov	r1, r5
 8006e1a:	4620      	mov	r0, r4
 8006e1c:	f000 ff76 	bl	8007d0c <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006e20:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006e24:	2310      	movs	r3, #16
 8006e26:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 8006e2a:	e7c8      	b.n	8006dbe <USBD_CDC_Init+0x42>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006e2c:	2340      	movs	r3, #64	; 0x40
 8006e2e:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 8006e32:	2101      	movs	r1, #1
 8006e34:	4620      	mov	r0, r4
 8006e36:	f000 ffb3 	bl	8007da0 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 8006e3a:	2500      	movs	r5, #0
 8006e3c:	e7db      	b.n	8006df6 <USBD_CDC_Init+0x7a>

08006e3e <USBD_CDC_RegisterInterface>:
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
  if (fops == NULL)
 8006e3e:	b119      	cbz	r1, 8006e48 <USBD_CDC_RegisterInterface+0xa>
  {
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData = fops;
 8006e40:	f8c0 12c0 	str.w	r1, [r0, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8006e44:	2000      	movs	r0, #0
 8006e46:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8006e48:	2003      	movs	r0, #3
}
 8006e4a:	4770      	bx	lr

08006e4c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006e4c:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 8006e50:	b12b      	cbz	r3, 8006e5e <USBD_CDC_SetTxBuffer+0x12>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->TxBuffer = pbuff;
 8006e52:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006e56:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006e5a:	2000      	movs	r0, #0
 8006e5c:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8006e5e:	2003      	movs	r0, #3
}
 8006e60:	4770      	bx	lr

08006e62 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006e62:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 8006e66:	b11b      	cbz	r3, 8006e70 <USBD_CDC_SetRxBuffer+0xe>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->RxBuffer = pbuff;
 8006e68:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006e6c:	2000      	movs	r0, #0
 8006e6e:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8006e70:	2003      	movs	r0, #3
}
 8006e72:	4770      	bx	lr

08006e74 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006e74:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
  USBD_StatusTypeDef ret = USBD_BUSY;

  if (pdev->pClassData == NULL)
 8006e78:	b1a2      	cbz	r2, 8006ea4 <USBD_CDC_TransmitPacket+0x30>
{
 8006e7a:	b508      	push	{r3, lr}
  {
    return (uint8_t)USBD_FAIL;
  }

  if (hcdc->TxState == 0U)
 8006e7c:	f8d2 3214 	ldr.w	r3, [r2, #532]	; 0x214
 8006e80:	b10b      	cbz	r3, 8006e86 <USBD_CDC_TransmitPacket+0x12>
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006e82:	2001      	movs	r0, #1

    ret = USBD_OK;
  }

  return (uint8_t)ret;
}
 8006e84:	bd08      	pop	{r3, pc}
    hcdc->TxState = 1U;
 8006e86:	2301      	movs	r3, #1
 8006e88:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006e8c:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
 8006e90:	62c3      	str	r3, [r0, #44]	; 0x2c
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8006e92:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
 8006e96:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 8006e9a:	2181      	movs	r1, #129	; 0x81
 8006e9c:	f000 ff78 	bl	8007d90 <USBD_LL_Transmit>
    ret = USBD_OK;
 8006ea0:	2000      	movs	r0, #0
 8006ea2:	e7ef      	b.n	8006e84 <USBD_CDC_TransmitPacket+0x10>
    return (uint8_t)USBD_FAIL;
 8006ea4:	2003      	movs	r0, #3
}
 8006ea6:	4770      	bx	lr

08006ea8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006ea8:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006eaa:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc

  if (pdev->pClassData == NULL)
 8006eae:	b192      	cbz	r2, 8006ed6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006eb0:	7c04      	ldrb	r4, [r0, #16]
 8006eb2:	b944      	cbnz	r4, 8006ec6 <USBD_CDC_ReceivePacket+0x1e>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006eb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006eb8:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8006ebc:	2101      	movs	r1, #1
 8006ebe:	f000 ff6f 	bl	8007da0 <USBD_LL_PrepareReceive>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
}
 8006ec2:	4620      	mov	r0, r4
 8006ec4:	bd10      	pop	{r4, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006ec6:	2340      	movs	r3, #64	; 0x40
 8006ec8:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8006ecc:	2101      	movs	r1, #1
 8006ece:	f000 ff67 	bl	8007da0 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 8006ed2:	2400      	movs	r4, #0
 8006ed4:	e7f5      	b.n	8006ec2 <USBD_CDC_ReceivePacket+0x1a>
    return (uint8_t)USBD_FAIL;
 8006ed6:	2403      	movs	r4, #3
 8006ed8:	e7f3      	b.n	8006ec2 <USBD_CDC_ReceivePacket+0x1a>

08006eda <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006eda:	b198      	cbz	r0, 8006f04 <USBD_Init+0x2a>
{
 8006edc:	b508      	push	{r3, lr}
 8006ede:	4603      	mov	r3, r0
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8006ee0:	2000      	movs	r0, #0
 8006ee2:	f8c3 02b8 	str.w	r0, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8006ee6:	f8c3 02c0 	str.w	r0, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8006eea:	f8c3 02cc 	str.w	r0, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006eee:	b109      	cbz	r1, 8006ef4 <USBD_Init+0x1a>
  {
    pdev->pDesc = pdesc;
 8006ef0:	f8c3 12b4 	str.w	r1, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006ef4:	2101      	movs	r1, #1
 8006ef6:	f883 129c 	strb.w	r1, [r3, #668]	; 0x29c
  pdev->id = id;
 8006efa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006efc:	4618      	mov	r0, r3
 8006efe:	f000 feb9 	bl	8007c74 <USBD_LL_Init>

  return ret;
}
 8006f02:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8006f04:	2003      	movs	r0, #3
}
 8006f06:	4770      	bx	lr

08006f08 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006f08:	b510      	push	{r4, lr}
 8006f0a:	b082      	sub	sp, #8
  uint16_t len = 0U;
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	f8ad 3006 	strh.w	r3, [sp, #6]

  if (pclass == NULL)
 8006f12:	b161      	cbz	r1, 8006f2e <USBD_RegisterClass+0x26>
 8006f14:	4604      	mov	r4, r0
#endif
    return USBD_FAIL;
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006f16:	f8c0 12b8 	str.w	r1, [r0, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8006f1a:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8006f1c:	b14b      	cbz	r3, 8006f32 <USBD_RegisterClass+0x2a>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006f1e:	f10d 0006 	add.w	r0, sp, #6
 8006f22:	4798      	blx	r3
 8006f24:	f8c4 02cc 	str.w	r0, [r4, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8006f28:	2000      	movs	r0, #0
}
 8006f2a:	b002      	add	sp, #8
 8006f2c:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 8006f2e:	2003      	movs	r0, #3
 8006f30:	e7fb      	b.n	8006f2a <USBD_RegisterClass+0x22>
  return USBD_OK;
 8006f32:	2000      	movs	r0, #0
 8006f34:	e7f9      	b.n	8006f2a <USBD_RegisterClass+0x22>

08006f36 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006f36:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006f38:	f000 fee0 	bl	8007cfc <USBD_LL_Start>
}
 8006f3c:	bd08      	pop	{r3, pc}

08006f3e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006f3e:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8006f40:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8006f44:	b113      	cbz	r3, 8006f4c <USBD_SetClassConfig+0xe>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4798      	blx	r3
  }

  return ret;
}
 8006f4a:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006f4c:	2003      	movs	r0, #3
 8006f4e:	e7fc      	b.n	8006f4a <USBD_SetClassConfig+0xc>

08006f50 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006f50:	b508      	push	{r3, lr}
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006f52:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8006f56:	b10b      	cbz	r3, 8006f5c <USBD_ClrClassConfig+0xc>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8006f58:	685b      	ldr	r3, [r3, #4]
 8006f5a:	4798      	blx	r3
  }

  return USBD_OK;
}
 8006f5c:	2000      	movs	r0, #0
 8006f5e:	bd08      	pop	{r3, pc}

08006f60 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006f60:	b538      	push	{r3, r4, r5, lr}
 8006f62:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006f64:	f200 25aa 	addw	r5, r0, #682	; 0x2aa
 8006f68:	4628      	mov	r0, r5
 8006f6a:	f000 f92e 	bl	80071ca <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006f6e:	2301      	movs	r3, #1
 8006f70:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006f74:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	; 0x2b0
 8006f78:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006f7c:	f894 12aa 	ldrb.w	r1, [r4, #682]	; 0x2aa
 8006f80:	f001 031f 	and.w	r3, r1, #31
 8006f84:	2b01      	cmp	r3, #1
 8006f86:	d00d      	beq.n	8006fa4 <USBD_LL_SetupStage+0x44>
 8006f88:	2b02      	cmp	r3, #2
 8006f8a:	d010      	beq.n	8006fae <USBD_LL_SetupStage+0x4e>
 8006f8c:	b12b      	cbz	r3, 8006f9a <USBD_LL_SetupStage+0x3a>
    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006f8e:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8006f92:	4620      	mov	r0, r4
 8006f94:	f000 fecd 	bl	8007d32 <USBD_LL_StallEP>
      break;
 8006f98:	e003      	b.n	8006fa2 <USBD_LL_SetupStage+0x42>
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006f9a:	4629      	mov	r1, r5
 8006f9c:	4620      	mov	r0, r4
 8006f9e:	f000 fae4 	bl	800756a <USBD_StdDevReq>
  }

  return ret;
}
 8006fa2:	bd38      	pop	{r3, r4, r5, pc}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006fa4:	4629      	mov	r1, r5
 8006fa6:	4620      	mov	r0, r4
 8006fa8:	f000 fb17 	bl	80075da <USBD_StdItfReq>
      break;
 8006fac:	e7f9      	b.n	8006fa2 <USBD_LL_SetupStage+0x42>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006fae:	4629      	mov	r1, r5
 8006fb0:	4620      	mov	r0, r4
 8006fb2:	f000 fb46 	bl	8007642 <USBD_StdEPReq>
      break;
 8006fb6:	e7f4      	b.n	8006fa2 <USBD_LL_SetupStage+0x42>

08006fb8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006fb8:	b538      	push	{r3, r4, r5, lr}
 8006fba:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006fbc:	460d      	mov	r5, r1
 8006fbe:	bb41      	cbnz	r1, 8007012 <USBD_LL_DataOutStage+0x5a>
 8006fc0:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006fc2:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8006fc6:	2a03      	cmp	r2, #3
 8006fc8:	d001      	beq.n	8006fce <USBD_LL_DataOutStage+0x16>
        }
      }
    }
  }

  return USBD_OK;
 8006fca:	4608      	mov	r0, r1
}
 8006fcc:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 8006fce:	f8d0 115c 	ldr.w	r1, [r0, #348]	; 0x15c
 8006fd2:	f8d0 2160 	ldr.w	r2, [r0, #352]	; 0x160
 8006fd6:	4291      	cmp	r1, r2
 8006fd8:	d809      	bhi.n	8006fee <USBD_LL_DataOutStage+0x36>
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fda:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006fde:	b2db      	uxtb	r3, r3
 8006fe0:	2b03      	cmp	r3, #3
 8006fe2:	d00f      	beq.n	8007004 <USBD_LL_DataOutStage+0x4c>
        (void)USBD_CtlSendStatus(pdev);
 8006fe4:	4620      	mov	r0, r4
 8006fe6:	f000 fc69 	bl	80078bc <USBD_CtlSendStatus>
  return USBD_OK;
 8006fea:	4628      	mov	r0, r5
 8006fec:	e7ee      	b.n	8006fcc <USBD_LL_DataOutStage+0x14>
        pep->rem_length -= pep->maxpacket;
 8006fee:	1a89      	subs	r1, r1, r2
 8006ff0:	f8c0 115c 	str.w	r1, [r0, #348]	; 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006ff4:	428a      	cmp	r2, r1
 8006ff6:	bf28      	it	cs
 8006ff8:	460a      	movcs	r2, r1
 8006ffa:	4619      	mov	r1, r3
 8006ffc:	f000 fc56 	bl	80078ac <USBD_CtlContinueRx>
  return USBD_OK;
 8007000:	4628      	mov	r0, r5
 8007002:	e7e3      	b.n	8006fcc <USBD_LL_DataOutStage+0x14>
          if (pdev->pClass->EP0_RxReady != NULL)
 8007004:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8007008:	691b      	ldr	r3, [r3, #16]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d0ea      	beq.n	8006fe4 <USBD_LL_DataOutStage+0x2c>
            pdev->pClass->EP0_RxReady(pdev);
 800700e:	4798      	blx	r3
 8007010:	e7e8      	b.n	8006fe4 <USBD_LL_DataOutStage+0x2c>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007012:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8007016:	b2db      	uxtb	r3, r3
 8007018:	2b03      	cmp	r3, #3
 800701a:	d001      	beq.n	8007020 <USBD_LL_DataOutStage+0x68>
  return USBD_OK;
 800701c:	2000      	movs	r0, #0
 800701e:	e7d5      	b.n	8006fcc <USBD_LL_DataOutStage+0x14>
      if (pdev->pClass->DataOut != NULL)
 8007020:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8007024:	699b      	ldr	r3, [r3, #24]
 8007026:	b10b      	cbz	r3, 800702c <USBD_LL_DataOutStage+0x74>
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007028:	4798      	blx	r3
        if (ret != USBD_OK)
 800702a:	e7cf      	b.n	8006fcc <USBD_LL_DataOutStage+0x14>
  return USBD_OK;
 800702c:	2000      	movs	r0, #0
 800702e:	e7cd      	b.n	8006fcc <USBD_LL_DataOutStage+0x14>

08007030 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007030:	b538      	push	{r3, r4, r5, lr}
 8007032:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007034:	460d      	mov	r5, r1
 8007036:	2900      	cmp	r1, #0
 8007038:	d14a      	bne.n	80070d0 <USBD_LL_DataInStage+0xa0>
 800703a:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800703c:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8007040:	2a02      	cmp	r2, #2
 8007042:	d005      	beq.n	8007050 <USBD_LL_DataInStage+0x20>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007044:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8007048:	2b01      	cmp	r3, #1
 800704a:	d03c      	beq.n	80070c6 <USBD_LL_DataInStage+0x96>
        }
      }
    }
  }

  return USBD_OK;
 800704c:	4628      	mov	r0, r5
}
 800704e:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 8007050:	69c2      	ldr	r2, [r0, #28]
 8007052:	6a01      	ldr	r1, [r0, #32]
 8007054:	428a      	cmp	r2, r1
 8007056:	d80e      	bhi.n	8007076 <USBD_LL_DataInStage+0x46>
        if ((pep->maxpacket == pep->rem_length) &&
 8007058:	428a      	cmp	r2, r1
 800705a:	d018      	beq.n	800708e <USBD_LL_DataInStage+0x5e>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800705c:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8007060:	b2db      	uxtb	r3, r3
 8007062:	2b03      	cmp	r3, #3
 8007064:	d027      	beq.n	80070b6 <USBD_LL_DataInStage+0x86>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007066:	2180      	movs	r1, #128	; 0x80
 8007068:	4620      	mov	r0, r4
 800706a:	f000 fe62 	bl	8007d32 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800706e:	4620      	mov	r0, r4
 8007070:	f000 fc2f 	bl	80078d2 <USBD_CtlReceiveStatus>
 8007074:	e7e6      	b.n	8007044 <USBD_LL_DataInStage+0x14>
        pep->rem_length -= pep->maxpacket;
 8007076:	1a52      	subs	r2, r2, r1
 8007078:	61c2      	str	r2, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800707a:	4619      	mov	r1, r3
 800707c:	f000 fbff 	bl	800787e <USBD_CtlContinueSendData>
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007080:	2300      	movs	r3, #0
 8007082:	461a      	mov	r2, r3
 8007084:	4619      	mov	r1, r3
 8007086:	4620      	mov	r0, r4
 8007088:	f000 fe8a 	bl	8007da0 <USBD_LL_PrepareReceive>
 800708c:	e7da      	b.n	8007044 <USBD_LL_DataInStage+0x14>
            (pep->total_length >= pep->maxpacket) &&
 800708e:	6983      	ldr	r3, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 8007090:	4299      	cmp	r1, r3
 8007092:	d8e3      	bhi.n	800705c <USBD_LL_DataInStage+0x2c>
            (pep->total_length < pdev->ep0_data_len))
 8007094:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007098:	4293      	cmp	r3, r2
 800709a:	d2df      	bcs.n	800705c <USBD_LL_DataInStage+0x2c>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800709c:	2200      	movs	r2, #0
 800709e:	4611      	mov	r1, r2
 80070a0:	f000 fbed 	bl	800787e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80070a4:	2100      	movs	r1, #0
 80070a6:	f8c4 1298 	str.w	r1, [r4, #664]	; 0x298
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80070aa:	460b      	mov	r3, r1
 80070ac:	460a      	mov	r2, r1
 80070ae:	4620      	mov	r0, r4
 80070b0:	f000 fe76 	bl	8007da0 <USBD_LL_PrepareReceive>
 80070b4:	e7c6      	b.n	8007044 <USBD_LL_DataInStage+0x14>
            if (pdev->pClass->EP0_TxSent != NULL)
 80070b6:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 80070ba:	68db      	ldr	r3, [r3, #12]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d0d2      	beq.n	8007066 <USBD_LL_DataInStage+0x36>
              pdev->pClass->EP0_TxSent(pdev);
 80070c0:	4620      	mov	r0, r4
 80070c2:	4798      	blx	r3
 80070c4:	e7cf      	b.n	8007066 <USBD_LL_DataInStage+0x36>
      pdev->dev_test_mode = 0U;
 80070c6:	2300      	movs	r3, #0
 80070c8:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
  return USBD_OK;
 80070cc:	4628      	mov	r0, r5
 80070ce:	e7be      	b.n	800704e <USBD_LL_DataInStage+0x1e>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070d0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80070d4:	b2db      	uxtb	r3, r3
 80070d6:	2b03      	cmp	r3, #3
 80070d8:	d001      	beq.n	80070de <USBD_LL_DataInStage+0xae>
  return USBD_OK;
 80070da:	2000      	movs	r0, #0
 80070dc:	e7b7      	b.n	800704e <USBD_LL_DataInStage+0x1e>
      if (pdev->pClass->DataIn != NULL)
 80070de:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80070e2:	695b      	ldr	r3, [r3, #20]
 80070e4:	b10b      	cbz	r3, 80070ea <USBD_LL_DataInStage+0xba>
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80070e6:	4798      	blx	r3
        if (ret != USBD_OK)
 80070e8:	e7b1      	b.n	800704e <USBD_LL_DataInStage+0x1e>
  return USBD_OK;
 80070ea:	2000      	movs	r0, #0
 80070ec:	e7af      	b.n	800704e <USBD_LL_DataInStage+0x1e>

080070ee <USBD_LL_Reset>:
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80070ee:	2301      	movs	r3, #1
 80070f0:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80070f4:	2300      	movs	r3, #0
 80070f6:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294
  pdev->dev_config = 0U;
 80070fa:	6043      	str	r3, [r0, #4]
  pdev->dev_remote_wakeup = 0U;
 80070fc:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8007100:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8007104:	b1f3      	cbz	r3, 8007144 <USBD_LL_Reset+0x56>
{
 8007106:	b570      	push	{r4, r5, r6, lr}
 8007108:	4604      	mov	r4, r0
  {
    return USBD_FAIL;
  }

  if (pdev->pClassData != NULL)
 800710a:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 800710e:	b11a      	cbz	r2, 8007118 <USBD_LL_Reset+0x2a>
  {
    if (pdev->pClass->DeInit != NULL)
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	b10b      	cbz	r3, 8007118 <USBD_LL_Reset+0x2a>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007114:	2100      	movs	r1, #0
 8007116:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007118:	2340      	movs	r3, #64	; 0x40
 800711a:	2200      	movs	r2, #0
 800711c:	4611      	mov	r1, r2
 800711e:	4620      	mov	r0, r4
 8007120:	f000 fdf4 	bl	8007d0c <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007124:	2601      	movs	r6, #1
 8007126:	f8a4 6164 	strh.w	r6, [r4, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800712a:	2540      	movs	r5, #64	; 0x40
 800712c:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007130:	462b      	mov	r3, r5
 8007132:	2200      	movs	r2, #0
 8007134:	2180      	movs	r1, #128	; 0x80
 8007136:	4620      	mov	r0, r4
 8007138:	f000 fde8 	bl	8007d0c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800713c:	84a6      	strh	r6, [r4, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800713e:	6225      	str	r5, [r4, #32]

  return USBD_OK;
 8007140:	2000      	movs	r0, #0
}
 8007142:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 8007144:	2003      	movs	r0, #3
}
 8007146:	4770      	bx	lr

08007148 <USBD_LL_SetSpeed>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8007148:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 800714a:	2000      	movs	r0, #0
 800714c:	4770      	bx	lr

0800714e <USBD_LL_Suspend>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state = pdev->dev_state;
 800714e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8007152:	b2db      	uxtb	r3, r3
 8007154:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007158:	2304      	movs	r3, #4
 800715a:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 800715e:	2000      	movs	r0, #0
 8007160:	4770      	bx	lr

08007162 <USBD_LL_Resume>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007162:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8007166:	b2db      	uxtb	r3, r3
 8007168:	2b04      	cmp	r3, #4
 800716a:	d001      	beq.n	8007170 <USBD_LL_Resume+0xe>
  {
    pdev->dev_state = pdev->dev_old_state;
  }

  return USBD_OK;
}
 800716c:	2000      	movs	r0, #0
 800716e:	4770      	bx	lr
    pdev->dev_state = pdev->dev_old_state;
 8007170:	f890 329d 	ldrb.w	r3, [r0, #669]	; 0x29d
 8007174:	b2db      	uxtb	r3, r3
 8007176:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
 800717a:	e7f7      	b.n	800716c <USBD_LL_Resume+0xa>

0800717c <USBD_LL_SOF>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  if (pdev->pClass == NULL)
 800717c:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 8007180:	b162      	cbz	r2, 800719c <USBD_LL_SOF+0x20>
{
 8007182:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007184:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8007188:	b2db      	uxtb	r3, r3
 800718a:	2b03      	cmp	r3, #3
 800718c:	d001      	beq.n	8007192 <USBD_LL_SOF+0x16>
    {
      (void)pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
 800718e:	2000      	movs	r0, #0
}
 8007190:	bd08      	pop	{r3, pc}
    if (pdev->pClass->SOF != NULL)
 8007192:	69d3      	ldr	r3, [r2, #28]
 8007194:	b123      	cbz	r3, 80071a0 <USBD_LL_SOF+0x24>
      (void)pdev->pClass->SOF(pdev);
 8007196:	4798      	blx	r3
  return USBD_OK;
 8007198:	2000      	movs	r0, #0
 800719a:	e7f9      	b.n	8007190 <USBD_LL_SOF+0x14>
    return USBD_FAIL;
 800719c:	2003      	movs	r0, #3
}
 800719e:	4770      	bx	lr
  return USBD_OK;
 80071a0:	2000      	movs	r0, #0
 80071a2:	e7f5      	b.n	8007190 <USBD_LL_SOF+0x14>

080071a4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80071a4:	4603      	mov	r3, r0
  uint8_t  len = 0U;
 80071a6:	2000      	movs	r0, #0
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 80071a8:	781a      	ldrb	r2, [r3, #0]
 80071aa:	b11a      	cbz	r2, 80071b4 <USBD_GetLen+0x10>
  {
    len++;
 80071ac:	3001      	adds	r0, #1
 80071ae:	b2c0      	uxtb	r0, r0
    pbuff++;
 80071b0:	3301      	adds	r3, #1
 80071b2:	e7f9      	b.n	80071a8 <USBD_GetLen+0x4>
  }

  return len;
}
 80071b4:	4770      	bx	lr

080071b6 <USBD_SetFeature>:
{
 80071b6:	b508      	push	{r3, lr}
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80071b8:	884b      	ldrh	r3, [r1, #2]
 80071ba:	2b01      	cmp	r3, #1
 80071bc:	d000      	beq.n	80071c0 <USBD_SetFeature+0xa>
}
 80071be:	bd08      	pop	{r3, pc}
    pdev->dev_remote_wakeup = 1U;
 80071c0:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80071c4:	f000 fb7a 	bl	80078bc <USBD_CtlSendStatus>
}
 80071c8:	e7f9      	b.n	80071be <USBD_SetFeature+0x8>

080071ca <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 80071ca:	780b      	ldrb	r3, [r1, #0]
 80071cc:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 80071ce:	784b      	ldrb	r3, [r1, #1]
 80071d0:	7043      	strb	r3, [r0, #1]
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;

  _Byte1 = *(uint8_t *)_pbuff;
 80071d2:	788b      	ldrb	r3, [r1, #2]
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;
 80071d4:	78ca      	ldrb	r2, [r1, #3]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80071d6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wValue = SWAPBYTE(pbuff);
 80071da:	8043      	strh	r3, [r0, #2]
  _Byte1 = *(uint8_t *)_pbuff;
 80071dc:	790b      	ldrb	r3, [r1, #4]
  _Byte2 = *(uint8_t *)_pbuff;
 80071de:	794a      	ldrb	r2, [r1, #5]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 80071e0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wIndex = SWAPBYTE(pbuff);
 80071e4:	8083      	strh	r3, [r0, #4]
  _Byte1 = *(uint8_t *)_pbuff;
 80071e6:	798b      	ldrb	r3, [r1, #6]
  _Byte2 = *(uint8_t *)_pbuff;
 80071e8:	79ca      	ldrb	r2, [r1, #7]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 80071ea:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wLength = SWAPBYTE(pbuff);
 80071ee:	80c3      	strh	r3, [r0, #6]
}
 80071f0:	4770      	bx	lr

080071f2 <USBD_CtlError>:
{
 80071f2:	b510      	push	{r4, lr}
 80071f4:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 80071f6:	2180      	movs	r1, #128	; 0x80
 80071f8:	f000 fd9b 	bl	8007d32 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80071fc:	2100      	movs	r1, #0
 80071fe:	4620      	mov	r0, r4
 8007200:	f000 fd97 	bl	8007d32 <USBD_LL_StallEP>
}
 8007204:	bd10      	pop	{r4, pc}

08007206 <USBD_GetDescriptor>:
{
 8007206:	b530      	push	{r4, r5, lr}
 8007208:	b083      	sub	sp, #12
 800720a:	4604      	mov	r4, r0
 800720c:	460d      	mov	r5, r1
  uint16_t len = 0U;
 800720e:	2300      	movs	r3, #0
 8007210:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 8007214:	884a      	ldrh	r2, [r1, #2]
 8007216:	0a13      	lsrs	r3, r2, #8
 8007218:	3b01      	subs	r3, #1
 800721a:	2b0e      	cmp	r3, #14
 800721c:	f200 80bc 	bhi.w	8007398 <USBD_GetDescriptor+0x192>
 8007220:	e8df f003 	tbb	[pc, r3]
 8007224:	ba443015 	.word	0xba443015
 8007228:	baab9eba 	.word	0xbaab9eba
 800722c:	babababa 	.word	0xbabababa
 8007230:	baba      	.short	0xbaba
 8007232:	08          	.byte	0x08
 8007233:	00          	.byte	0x00
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8007234:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8007238:	69db      	ldr	r3, [r3, #28]
 800723a:	b123      	cbz	r3, 8007246 <USBD_GetDescriptor+0x40>
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800723c:	f10d 0106 	add.w	r1, sp, #6
 8007240:	7c00      	ldrb	r0, [r0, #16]
 8007242:	4798      	blx	r3
  if (err != 0U)
 8007244:	e00a      	b.n	800725c <USBD_GetDescriptor+0x56>
        USBD_CtlError(pdev, req);
 8007246:	4629      	mov	r1, r5
 8007248:	f7ff ffd3 	bl	80071f2 <USBD_CtlError>
  if (err != 0U)
 800724c:	e018      	b.n	8007280 <USBD_GetDescriptor+0x7a>
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800724e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f10d 0106 	add.w	r1, sp, #6
 8007258:	7c00      	ldrb	r0, [r0, #16]
 800725a:	4798      	blx	r3
  if (req->wLength != 0U)
 800725c:	88ea      	ldrh	r2, [r5, #6]
 800725e:	2a00      	cmp	r2, #0
 8007260:	f000 80a3 	beq.w	80073aa <USBD_GetDescriptor+0x1a4>
    if (len != 0U)
 8007264:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8007268:	2b00      	cmp	r3, #0
 800726a:	f000 8099 	beq.w	80073a0 <USBD_GetDescriptor+0x19a>
      len = MIN(len, req->wLength);
 800726e:	429a      	cmp	r2, r3
 8007270:	bf28      	it	cs
 8007272:	461a      	movcs	r2, r3
 8007274:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007278:	4601      	mov	r1, r0
 800727a:	4620      	mov	r0, r4
 800727c:	f000 faf2 	bl	8007864 <USBD_CtlSendData>
}
 8007280:	b003      	add	sp, #12
 8007282:	bd30      	pop	{r4, r5, pc}
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007284:	7c03      	ldrb	r3, [r0, #16]
 8007286:	b943      	cbnz	r3, 800729a <USBD_GetDescriptor+0x94>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007288:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800728c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800728e:	f10d 0006 	add.w	r0, sp, #6
 8007292:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007294:	2302      	movs	r3, #2
 8007296:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8007298:	e7e0      	b.n	800725c <USBD_GetDescriptor+0x56>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800729a:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800729e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072a0:	f10d 0006 	add.w	r0, sp, #6
 80072a4:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80072a6:	2302      	movs	r3, #2
 80072a8:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 80072aa:	e7d7      	b.n	800725c <USBD_GetDescriptor+0x56>
      switch ((uint8_t)(req->wValue))
 80072ac:	b2d2      	uxtb	r2, r2
 80072ae:	2a05      	cmp	r2, #5
 80072b0:	d852      	bhi.n	8007358 <USBD_GetDescriptor+0x152>
 80072b2:	e8df f002 	tbb	[pc, r2]
 80072b6:	1003      	.short	0x1003
 80072b8:	44372a1d 	.word	0x44372a1d
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80072bc:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80072c0:	685b      	ldr	r3, [r3, #4]
 80072c2:	b123      	cbz	r3, 80072ce <USBD_GetDescriptor+0xc8>
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80072c4:	f10d 0106 	add.w	r1, sp, #6
 80072c8:	7c00      	ldrb	r0, [r0, #16]
 80072ca:	4798      	blx	r3
  if (err != 0U)
 80072cc:	e7c6      	b.n	800725c <USBD_GetDescriptor+0x56>
            USBD_CtlError(pdev, req);
 80072ce:	4629      	mov	r1, r5
 80072d0:	f7ff ff8f 	bl	80071f2 <USBD_CtlError>
  if (err != 0U)
 80072d4:	e7d4      	b.n	8007280 <USBD_GetDescriptor+0x7a>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80072d6:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80072da:	689b      	ldr	r3, [r3, #8]
 80072dc:	b123      	cbz	r3, 80072e8 <USBD_GetDescriptor+0xe2>
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80072de:	f10d 0106 	add.w	r1, sp, #6
 80072e2:	7c00      	ldrb	r0, [r0, #16]
 80072e4:	4798      	blx	r3
  if (err != 0U)
 80072e6:	e7b9      	b.n	800725c <USBD_GetDescriptor+0x56>
            USBD_CtlError(pdev, req);
 80072e8:	4629      	mov	r1, r5
 80072ea:	f7ff ff82 	bl	80071f2 <USBD_CtlError>
  if (err != 0U)
 80072ee:	e7c7      	b.n	8007280 <USBD_GetDescriptor+0x7a>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80072f0:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80072f4:	68db      	ldr	r3, [r3, #12]
 80072f6:	b123      	cbz	r3, 8007302 <USBD_GetDescriptor+0xfc>
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80072f8:	f10d 0106 	add.w	r1, sp, #6
 80072fc:	7c00      	ldrb	r0, [r0, #16]
 80072fe:	4798      	blx	r3
  if (err != 0U)
 8007300:	e7ac      	b.n	800725c <USBD_GetDescriptor+0x56>
            USBD_CtlError(pdev, req);
 8007302:	4629      	mov	r1, r5
 8007304:	f7ff ff75 	bl	80071f2 <USBD_CtlError>
  if (err != 0U)
 8007308:	e7ba      	b.n	8007280 <USBD_GetDescriptor+0x7a>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800730a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800730e:	691b      	ldr	r3, [r3, #16]
 8007310:	b123      	cbz	r3, 800731c <USBD_GetDescriptor+0x116>
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007312:	f10d 0106 	add.w	r1, sp, #6
 8007316:	7c00      	ldrb	r0, [r0, #16]
 8007318:	4798      	blx	r3
  if (err != 0U)
 800731a:	e79f      	b.n	800725c <USBD_GetDescriptor+0x56>
            USBD_CtlError(pdev, req);
 800731c:	4629      	mov	r1, r5
 800731e:	f7ff ff68 	bl	80071f2 <USBD_CtlError>
  if (err != 0U)
 8007322:	e7ad      	b.n	8007280 <USBD_GetDescriptor+0x7a>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007324:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8007328:	695b      	ldr	r3, [r3, #20]
 800732a:	b123      	cbz	r3, 8007336 <USBD_GetDescriptor+0x130>
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800732c:	f10d 0106 	add.w	r1, sp, #6
 8007330:	7c00      	ldrb	r0, [r0, #16]
 8007332:	4798      	blx	r3
  if (err != 0U)
 8007334:	e792      	b.n	800725c <USBD_GetDescriptor+0x56>
            USBD_CtlError(pdev, req);
 8007336:	4629      	mov	r1, r5
 8007338:	f7ff ff5b 	bl	80071f2 <USBD_CtlError>
  if (err != 0U)
 800733c:	e7a0      	b.n	8007280 <USBD_GetDescriptor+0x7a>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800733e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8007342:	699b      	ldr	r3, [r3, #24]
 8007344:	b123      	cbz	r3, 8007350 <USBD_GetDescriptor+0x14a>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007346:	f10d 0106 	add.w	r1, sp, #6
 800734a:	7c00      	ldrb	r0, [r0, #16]
 800734c:	4798      	blx	r3
  if (err != 0U)
 800734e:	e785      	b.n	800725c <USBD_GetDescriptor+0x56>
            USBD_CtlError(pdev, req);
 8007350:	4629      	mov	r1, r5
 8007352:	f7ff ff4e 	bl	80071f2 <USBD_CtlError>
  if (err != 0U)
 8007356:	e793      	b.n	8007280 <USBD_GetDescriptor+0x7a>
          USBD_CtlError(pdev, req);
 8007358:	4629      	mov	r1, r5
 800735a:	f7ff ff4a 	bl	80071f2 <USBD_CtlError>
  if (err != 0U)
 800735e:	e78f      	b.n	8007280 <USBD_GetDescriptor+0x7a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007360:	7c03      	ldrb	r3, [r0, #16]
 8007362:	b933      	cbnz	r3, 8007372 <USBD_GetDescriptor+0x16c>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007364:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8007368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800736a:	f10d 0006 	add.w	r0, sp, #6
 800736e:	4798      	blx	r3
  if (err != 0U)
 8007370:	e774      	b.n	800725c <USBD_GetDescriptor+0x56>
        USBD_CtlError(pdev, req);
 8007372:	4629      	mov	r1, r5
 8007374:	f7ff ff3d 	bl	80071f2 <USBD_CtlError>
  if (err != 0U)
 8007378:	e782      	b.n	8007280 <USBD_GetDescriptor+0x7a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800737a:	7c03      	ldrb	r3, [r0, #16]
 800737c:	b943      	cbnz	r3, 8007390 <USBD_GetDescriptor+0x18a>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800737e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8007382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007384:	f10d 0006 	add.w	r0, sp, #6
 8007388:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800738a:	2307      	movs	r3, #7
 800738c:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800738e:	e765      	b.n	800725c <USBD_GetDescriptor+0x56>
        USBD_CtlError(pdev, req);
 8007390:	4629      	mov	r1, r5
 8007392:	f7ff ff2e 	bl	80071f2 <USBD_CtlError>
  if (err != 0U)
 8007396:	e773      	b.n	8007280 <USBD_GetDescriptor+0x7a>
      USBD_CtlError(pdev, req);
 8007398:	4629      	mov	r1, r5
 800739a:	f7ff ff2a 	bl	80071f2 <USBD_CtlError>
    return;
 800739e:	e76f      	b.n	8007280 <USBD_GetDescriptor+0x7a>
      USBD_CtlError(pdev, req);
 80073a0:	4629      	mov	r1, r5
 80073a2:	4620      	mov	r0, r4
 80073a4:	f7ff ff25 	bl	80071f2 <USBD_CtlError>
 80073a8:	e76a      	b.n	8007280 <USBD_GetDescriptor+0x7a>
    (void)USBD_CtlSendStatus(pdev);
 80073aa:	4620      	mov	r0, r4
 80073ac:	f000 fa86 	bl	80078bc <USBD_CtlSendStatus>
 80073b0:	e766      	b.n	8007280 <USBD_GetDescriptor+0x7a>

080073b2 <USBD_SetAddress>:
{
 80073b2:	b538      	push	{r3, r4, r5, lr}
 80073b4:	4604      	mov	r4, r0
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80073b6:	888b      	ldrh	r3, [r1, #4]
 80073b8:	b9fb      	cbnz	r3, 80073fa <USBD_SetAddress+0x48>
 80073ba:	88cb      	ldrh	r3, [r1, #6]
 80073bc:	b9eb      	cbnz	r3, 80073fa <USBD_SetAddress+0x48>
 80073be:	884b      	ldrh	r3, [r1, #2]
 80073c0:	2b7f      	cmp	r3, #127	; 0x7f
 80073c2:	d81a      	bhi.n	80073fa <USBD_SetAddress+0x48>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80073c4:	f003 057f 	and.w	r5, r3, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073c8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80073cc:	b2db      	uxtb	r3, r3
 80073ce:	2b03      	cmp	r3, #3
 80073d0:	d00c      	beq.n	80073ec <USBD_SetAddress+0x3a>
      pdev->dev_address = dev_addr;
 80073d2:	f880 529e 	strb.w	r5, [r0, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80073d6:	4629      	mov	r1, r5
 80073d8:	f000 fcd2 	bl	8007d80 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80073dc:	4620      	mov	r0, r4
 80073de:	f000 fa6d 	bl	80078bc <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 80073e2:	b135      	cbz	r5, 80073f2 <USBD_SetAddress+0x40>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80073e4:	2302      	movs	r3, #2
 80073e6:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 80073ea:	e009      	b.n	8007400 <USBD_SetAddress+0x4e>
      USBD_CtlError(pdev, req);
 80073ec:	f7ff ff01 	bl	80071f2 <USBD_CtlError>
 80073f0:	e006      	b.n	8007400 <USBD_SetAddress+0x4e>
        pdev->dev_state = USBD_STATE_DEFAULT;
 80073f2:	2301      	movs	r3, #1
 80073f4:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 80073f8:	e002      	b.n	8007400 <USBD_SetAddress+0x4e>
    USBD_CtlError(pdev, req);
 80073fa:	4620      	mov	r0, r4
 80073fc:	f7ff fef9 	bl	80071f2 <USBD_CtlError>
}
 8007400:	bd38      	pop	{r3, r4, r5, pc}
	...

08007404 <USBD_SetConfig>:
{
 8007404:	b570      	push	{r4, r5, r6, lr}
 8007406:	4604      	mov	r4, r0
 8007408:	460e      	mov	r6, r1
  cfgidx = (uint8_t)(req->wValue);
 800740a:	788d      	ldrb	r5, [r1, #2]
 800740c:	4b2e      	ldr	r3, [pc, #184]	; (80074c8 <USBD_SetConfig+0xc4>)
 800740e:	701d      	strb	r5, [r3, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007410:	2d01      	cmp	r5, #1
 8007412:	d810      	bhi.n	8007436 <USBD_SetConfig+0x32>
  switch (pdev->dev_state)
 8007414:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8007418:	b2db      	uxtb	r3, r3
 800741a:	2b02      	cmp	r3, #2
 800741c:	d00f      	beq.n	800743e <USBD_SetConfig+0x3a>
 800741e:	2b03      	cmp	r3, #3
 8007420:	d023      	beq.n	800746a <USBD_SetConfig+0x66>
      USBD_CtlError(pdev, req);
 8007422:	f7ff fee6 	bl	80071f2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007426:	4b28      	ldr	r3, [pc, #160]	; (80074c8 <USBD_SetConfig+0xc4>)
 8007428:	7819      	ldrb	r1, [r3, #0]
 800742a:	4620      	mov	r0, r4
 800742c:	f7ff fd90 	bl	8006f50 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007430:	2503      	movs	r5, #3
}
 8007432:	4628      	mov	r0, r5
 8007434:	bd70      	pop	{r4, r5, r6, pc}
    USBD_CtlError(pdev, req);
 8007436:	f7ff fedc 	bl	80071f2 <USBD_CtlError>
    return USBD_FAIL;
 800743a:	2503      	movs	r5, #3
 800743c:	e7f9      	b.n	8007432 <USBD_SetConfig+0x2e>
      if (cfgidx != 0U)
 800743e:	b18d      	cbz	r5, 8007464 <USBD_SetConfig+0x60>
        pdev->dev_config = cfgidx;
 8007440:	6045      	str	r5, [r0, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007442:	4629      	mov	r1, r5
 8007444:	f7ff fd7b 	bl	8006f3e <USBD_SetClassConfig>
        if (ret != USBD_OK)
 8007448:	4605      	mov	r5, r0
 800744a:	b120      	cbz	r0, 8007456 <USBD_SetConfig+0x52>
          USBD_CtlError(pdev, req);
 800744c:	4631      	mov	r1, r6
 800744e:	4620      	mov	r0, r4
 8007450:	f7ff fecf 	bl	80071f2 <USBD_CtlError>
 8007454:	e7ed      	b.n	8007432 <USBD_SetConfig+0x2e>
          (void)USBD_CtlSendStatus(pdev);
 8007456:	4620      	mov	r0, r4
 8007458:	f000 fa30 	bl	80078bc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800745c:	2303      	movs	r3, #3
 800745e:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8007462:	e7e6      	b.n	8007432 <USBD_SetConfig+0x2e>
        (void)USBD_CtlSendStatus(pdev);
 8007464:	f000 fa2a 	bl	80078bc <USBD_CtlSendStatus>
 8007468:	e7e3      	b.n	8007432 <USBD_SetConfig+0x2e>
      if (cfgidx == 0U)
 800746a:	b1cd      	cbz	r5, 80074a0 <USBD_SetConfig+0x9c>
      else if (cfgidx != pdev->dev_config)
 800746c:	6841      	ldr	r1, [r0, #4]
 800746e:	428d      	cmp	r5, r1
 8007470:	d025      	beq.n	80074be <USBD_SetConfig+0xba>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007472:	b2c9      	uxtb	r1, r1
 8007474:	f7ff fd6c 	bl	8006f50 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007478:	4b13      	ldr	r3, [pc, #76]	; (80074c8 <USBD_SetConfig+0xc4>)
 800747a:	7819      	ldrb	r1, [r3, #0]
 800747c:	6061      	str	r1, [r4, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800747e:	4620      	mov	r0, r4
 8007480:	f7ff fd5d 	bl	8006f3e <USBD_SetClassConfig>
        if (ret != USBD_OK)
 8007484:	4605      	mov	r5, r0
 8007486:	b1b0      	cbz	r0, 80074b6 <USBD_SetConfig+0xb2>
          USBD_CtlError(pdev, req);
 8007488:	4631      	mov	r1, r6
 800748a:	4620      	mov	r0, r4
 800748c:	f7ff feb1 	bl	80071f2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007490:	7921      	ldrb	r1, [r4, #4]
 8007492:	4620      	mov	r0, r4
 8007494:	f7ff fd5c 	bl	8006f50 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007498:	2302      	movs	r3, #2
 800749a:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800749e:	e7c8      	b.n	8007432 <USBD_SetConfig+0x2e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80074a0:	2302      	movs	r3, #2
 80074a2:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80074a6:	6045      	str	r5, [r0, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80074a8:	4629      	mov	r1, r5
 80074aa:	f7ff fd51 	bl	8006f50 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80074ae:	4620      	mov	r0, r4
 80074b0:	f000 fa04 	bl	80078bc <USBD_CtlSendStatus>
 80074b4:	e7bd      	b.n	8007432 <USBD_SetConfig+0x2e>
          (void)USBD_CtlSendStatus(pdev);
 80074b6:	4620      	mov	r0, r4
 80074b8:	f000 fa00 	bl	80078bc <USBD_CtlSendStatus>
 80074bc:	e7b9      	b.n	8007432 <USBD_SetConfig+0x2e>
        (void)USBD_CtlSendStatus(pdev);
 80074be:	f000 f9fd 	bl	80078bc <USBD_CtlSendStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 80074c2:	2500      	movs	r5, #0
 80074c4:	e7b5      	b.n	8007432 <USBD_SetConfig+0x2e>
 80074c6:	bf00      	nop
 80074c8:	20000208 	.word	0x20000208

080074cc <USBD_GetConfig>:
{
 80074cc:	b508      	push	{r3, lr}
  if (req->wLength != 1U)
 80074ce:	88cb      	ldrh	r3, [r1, #6]
 80074d0:	2b01      	cmp	r3, #1
 80074d2:	d10b      	bne.n	80074ec <USBD_GetConfig+0x20>
    switch (pdev->dev_state)
 80074d4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80074d8:	b2db      	uxtb	r3, r3
 80074da:	2b02      	cmp	r3, #2
 80074dc:	d909      	bls.n	80074f2 <USBD_GetConfig+0x26>
 80074de:	2b03      	cmp	r3, #3
 80074e0:	d109      	bne.n	80074f6 <USBD_GetConfig+0x2a>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80074e2:	2201      	movs	r2, #1
 80074e4:	1d01      	adds	r1, r0, #4
 80074e6:	f000 f9bd 	bl	8007864 <USBD_CtlSendData>
        break;
 80074ea:	e001      	b.n	80074f0 <USBD_GetConfig+0x24>
    USBD_CtlError(pdev, req);
 80074ec:	f7ff fe81 	bl	80071f2 <USBD_CtlError>
}
 80074f0:	bd08      	pop	{r3, pc}
    switch (pdev->dev_state)
 80074f2:	b25b      	sxtb	r3, r3
 80074f4:	b913      	cbnz	r3, 80074fc <USBD_GetConfig+0x30>
        USBD_CtlError(pdev, req);
 80074f6:	f7ff fe7c 	bl	80071f2 <USBD_CtlError>
}
 80074fa:	e7f9      	b.n	80074f0 <USBD_GetConfig+0x24>
        pdev->dev_default_config = 0U;
 80074fc:	4601      	mov	r1, r0
 80074fe:	2300      	movs	r3, #0
 8007500:	f841 3f08 	str.w	r3, [r1, #8]!
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007504:	2201      	movs	r2, #1
 8007506:	f000 f9ad 	bl	8007864 <USBD_CtlSendData>
        break;
 800750a:	e7f1      	b.n	80074f0 <USBD_GetConfig+0x24>

0800750c <USBD_GetStatus>:
{
 800750c:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 800750e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8007512:	3b01      	subs	r3, #1
 8007514:	2b02      	cmp	r3, #2
 8007516:	d812      	bhi.n	800753e <USBD_GetStatus+0x32>
      if (req->wLength != 0x2U)
 8007518:	88cb      	ldrh	r3, [r1, #6]
 800751a:	2b02      	cmp	r3, #2
 800751c:	d10c      	bne.n	8007538 <USBD_GetStatus+0x2c>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800751e:	2301      	movs	r3, #1
 8007520:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup != 0U)
 8007522:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 8007526:	b10b      	cbz	r3, 800752c <USBD_GetStatus+0x20>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007528:	2303      	movs	r3, #3
 800752a:	60c3      	str	r3, [r0, #12]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800752c:	2202      	movs	r2, #2
 800752e:	f100 010c 	add.w	r1, r0, #12
 8007532:	f000 f997 	bl	8007864 <USBD_CtlSendData>
}
 8007536:	bd08      	pop	{r3, pc}
        USBD_CtlError(pdev, req);
 8007538:	f7ff fe5b 	bl	80071f2 <USBD_CtlError>
        break;
 800753c:	e7fb      	b.n	8007536 <USBD_GetStatus+0x2a>
      USBD_CtlError(pdev, req);
 800753e:	f7ff fe58 	bl	80071f2 <USBD_CtlError>
}
 8007542:	e7f8      	b.n	8007536 <USBD_GetStatus+0x2a>

08007544 <USBD_ClrFeature>:
{
 8007544:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 8007546:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800754a:	3b01      	subs	r3, #1
 800754c:	2b02      	cmp	r3, #2
 800754e:	d809      	bhi.n	8007564 <USBD_ClrFeature+0x20>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007550:	884b      	ldrh	r3, [r1, #2]
 8007552:	2b01      	cmp	r3, #1
 8007554:	d000      	beq.n	8007558 <USBD_ClrFeature+0x14>
}
 8007556:	bd08      	pop	{r3, pc}
        pdev->dev_remote_wakeup = 0U;
 8007558:	2300      	movs	r3, #0
 800755a:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800755e:	f000 f9ad 	bl	80078bc <USBD_CtlSendStatus>
 8007562:	e7f8      	b.n	8007556 <USBD_ClrFeature+0x12>
      USBD_CtlError(pdev, req);
 8007564:	f7ff fe45 	bl	80071f2 <USBD_CtlError>
}
 8007568:	e7f5      	b.n	8007556 <USBD_ClrFeature+0x12>

0800756a <USBD_StdDevReq>:
{
 800756a:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800756c:	780c      	ldrb	r4, [r1, #0]
 800756e:	f004 0460 	and.w	r4, r4, #96	; 0x60
 8007572:	2c20      	cmp	r4, #32
 8007574:	d006      	beq.n	8007584 <USBD_StdDevReq+0x1a>
 8007576:	2c40      	cmp	r4, #64	; 0x40
 8007578:	d004      	beq.n	8007584 <USBD_StdDevReq+0x1a>
 800757a:	b154      	cbz	r4, 8007592 <USBD_StdDevReq+0x28>
      USBD_CtlError(pdev, req);
 800757c:	f7ff fe39 	bl	80071f2 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8007580:	2400      	movs	r4, #0
      break;
 8007582:	e004      	b.n	800758e <USBD_StdDevReq+0x24>
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007584:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8007588:	689b      	ldr	r3, [r3, #8]
 800758a:	4798      	blx	r3
 800758c:	4604      	mov	r4, r0
}
 800758e:	4620      	mov	r0, r4
 8007590:	bd38      	pop	{r3, r4, r5, pc}
      switch (req->bRequest)
 8007592:	784d      	ldrb	r5, [r1, #1]
 8007594:	2d09      	cmp	r5, #9
 8007596:	d81d      	bhi.n	80075d4 <USBD_StdDevReq+0x6a>
 8007598:	e8df f005 	tbb	[pc, r5]
 800759c:	161c1912 	.word	0x161c1912
 80075a0:	1c05081c 	.word	0x1c05081c
 80075a4:	0b0f      	.short	0x0b0f
          USBD_GetDescriptor(pdev, req);
 80075a6:	f7ff fe2e 	bl	8007206 <USBD_GetDescriptor>
          break;
 80075aa:	e7f0      	b.n	800758e <USBD_StdDevReq+0x24>
          USBD_SetAddress(pdev, req);
 80075ac:	f7ff ff01 	bl	80073b2 <USBD_SetAddress>
          break;
 80075b0:	e7ed      	b.n	800758e <USBD_StdDevReq+0x24>
          ret = USBD_SetConfig(pdev, req);
 80075b2:	f7ff ff27 	bl	8007404 <USBD_SetConfig>
 80075b6:	4604      	mov	r4, r0
          break;
 80075b8:	e7e9      	b.n	800758e <USBD_StdDevReq+0x24>
          USBD_GetConfig(pdev, req);
 80075ba:	f7ff ff87 	bl	80074cc <USBD_GetConfig>
          break;
 80075be:	e7e6      	b.n	800758e <USBD_StdDevReq+0x24>
          USBD_GetStatus(pdev, req);
 80075c0:	f7ff ffa4 	bl	800750c <USBD_GetStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 80075c4:	462c      	mov	r4, r5
          break;
 80075c6:	e7e2      	b.n	800758e <USBD_StdDevReq+0x24>
          USBD_SetFeature(pdev, req);
 80075c8:	f7ff fdf5 	bl	80071b6 <USBD_SetFeature>
          break;
 80075cc:	e7df      	b.n	800758e <USBD_StdDevReq+0x24>
          USBD_ClrFeature(pdev, req);
 80075ce:	f7ff ffb9 	bl	8007544 <USBD_ClrFeature>
          break;
 80075d2:	e7dc      	b.n	800758e <USBD_StdDevReq+0x24>
          USBD_CtlError(pdev, req);
 80075d4:	f7ff fe0d 	bl	80071f2 <USBD_CtlError>
          break;
 80075d8:	e7d9      	b.n	800758e <USBD_StdDevReq+0x24>

080075da <USBD_StdItfReq>:
{
 80075da:	b570      	push	{r4, r5, r6, lr}
 80075dc:	4605      	mov	r5, r0
 80075de:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80075e0:	780b      	ldrb	r3, [r1, #0]
 80075e2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80075e6:	2b20      	cmp	r3, #32
 80075e8:	d007      	beq.n	80075fa <USBD_StdItfReq+0x20>
 80075ea:	2b40      	cmp	r3, #64	; 0x40
 80075ec:	d005      	beq.n	80075fa <USBD_StdItfReq+0x20>
 80075ee:	b123      	cbz	r3, 80075fa <USBD_StdItfReq+0x20>
      USBD_CtlError(pdev, req);
 80075f0:	f7ff fdff 	bl	80071f2 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80075f4:	2600      	movs	r6, #0
}
 80075f6:	4630      	mov	r0, r6
 80075f8:	bd70      	pop	{r4, r5, r6, pc}
      switch (pdev->dev_state)
 80075fa:	f895 329c 	ldrb.w	r3, [r5, #668]	; 0x29c
 80075fe:	3b01      	subs	r3, #1
 8007600:	2b02      	cmp	r3, #2
 8007602:	d818      	bhi.n	8007636 <USBD_StdItfReq+0x5c>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007604:	7923      	ldrb	r3, [r4, #4]
 8007606:	2b01      	cmp	r3, #1
 8007608:	d80f      	bhi.n	800762a <USBD_StdItfReq+0x50>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800760a:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
 800760e:	689b      	ldr	r3, [r3, #8]
 8007610:	4621      	mov	r1, r4
 8007612:	4628      	mov	r0, r5
 8007614:	4798      	blx	r3
 8007616:	4606      	mov	r6, r0
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007618:	88e3      	ldrh	r3, [r4, #6]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d1eb      	bne.n	80075f6 <USBD_StdItfReq+0x1c>
 800761e:	2800      	cmp	r0, #0
 8007620:	d1e9      	bne.n	80075f6 <USBD_StdItfReq+0x1c>
              (void)USBD_CtlSendStatus(pdev);
 8007622:	4628      	mov	r0, r5
 8007624:	f000 f94a 	bl	80078bc <USBD_CtlSendStatus>
 8007628:	e7e5      	b.n	80075f6 <USBD_StdItfReq+0x1c>
            USBD_CtlError(pdev, req);
 800762a:	4621      	mov	r1, r4
 800762c:	4628      	mov	r0, r5
 800762e:	f7ff fde0 	bl	80071f2 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8007632:	2600      	movs	r6, #0
 8007634:	e7df      	b.n	80075f6 <USBD_StdItfReq+0x1c>
          USBD_CtlError(pdev, req);
 8007636:	4621      	mov	r1, r4
 8007638:	4628      	mov	r0, r5
 800763a:	f7ff fdda 	bl	80071f2 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800763e:	2600      	movs	r6, #0
          break;
 8007640:	e7d9      	b.n	80075f6 <USBD_StdItfReq+0x1c>

08007642 <USBD_StdEPReq>:
{
 8007642:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007644:	4606      	mov	r6, r0
 8007646:	460d      	mov	r5, r1
  ep_addr = LOBYTE(req->wIndex);
 8007648:	888b      	ldrh	r3, [r1, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800764a:	780c      	ldrb	r4, [r1, #0]
 800764c:	f004 0460 	and.w	r4, r4, #96	; 0x60
 8007650:	2c20      	cmp	r4, #32
 8007652:	d008      	beq.n	8007666 <USBD_StdEPReq+0x24>
 8007654:	b2d9      	uxtb	r1, r3
 8007656:	2c40      	cmp	r4, #64	; 0x40
 8007658:	d005      	beq.n	8007666 <USBD_StdEPReq+0x24>
 800765a:	b16c      	cbz	r4, 8007678 <USBD_StdEPReq+0x36>
      USBD_CtlError(pdev, req);
 800765c:	4629      	mov	r1, r5
 800765e:	f7ff fdc8 	bl	80071f2 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8007662:	2400      	movs	r4, #0
      break;
 8007664:	e006      	b.n	8007674 <USBD_StdEPReq+0x32>
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007666:	f8d6 32b8 	ldr.w	r3, [r6, #696]	; 0x2b8
 800766a:	689b      	ldr	r3, [r3, #8]
 800766c:	4629      	mov	r1, r5
 800766e:	4630      	mov	r0, r6
 8007670:	4798      	blx	r3
 8007672:	4604      	mov	r4, r0
}
 8007674:	4620      	mov	r0, r4
 8007676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      switch (req->bRequest)
 8007678:	786f      	ldrb	r7, [r5, #1]
 800767a:	2f01      	cmp	r7, #1
 800767c:	d02f      	beq.n	80076de <USBD_StdEPReq+0x9c>
 800767e:	2f03      	cmp	r7, #3
 8007680:	d005      	beq.n	800768e <USBD_StdEPReq+0x4c>
 8007682:	2f00      	cmp	r7, #0
 8007684:	d059      	beq.n	800773a <USBD_StdEPReq+0xf8>
          USBD_CtlError(pdev, req);
 8007686:	4629      	mov	r1, r5
 8007688:	f7ff fdb3 	bl	80071f2 <USBD_CtlError>
          break;
 800768c:	e7f2      	b.n	8007674 <USBD_StdEPReq+0x32>
          switch (pdev->dev_state)
 800768e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8007692:	b2db      	uxtb	r3, r3
 8007694:	2b02      	cmp	r3, #2
 8007696:	d005      	beq.n	80076a4 <USBD_StdEPReq+0x62>
 8007698:	2b03      	cmp	r3, #3
 800769a:	d012      	beq.n	80076c2 <USBD_StdEPReq+0x80>
              USBD_CtlError(pdev, req);
 800769c:	4629      	mov	r1, r5
 800769e:	f7ff fda8 	bl	80071f2 <USBD_CtlError>
              break;
 80076a2:	e7e7      	b.n	8007674 <USBD_StdEPReq+0x32>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80076a4:	b109      	cbz	r1, 80076aa <USBD_StdEPReq+0x68>
 80076a6:	2980      	cmp	r1, #128	; 0x80
 80076a8:	d104      	bne.n	80076b4 <USBD_StdEPReq+0x72>
                USBD_CtlError(pdev, req);
 80076aa:	4629      	mov	r1, r5
 80076ac:	4630      	mov	r0, r6
 80076ae:	f7ff fda0 	bl	80071f2 <USBD_CtlError>
 80076b2:	e7df      	b.n	8007674 <USBD_StdEPReq+0x32>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80076b4:	f000 fb3d 	bl	8007d32 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80076b8:	2180      	movs	r1, #128	; 0x80
 80076ba:	4630      	mov	r0, r6
 80076bc:	f000 fb39 	bl	8007d32 <USBD_LL_StallEP>
 80076c0:	e7d8      	b.n	8007674 <USBD_StdEPReq+0x32>
              if (req->wValue == USB_FEATURE_EP_HALT)
 80076c2:	886b      	ldrh	r3, [r5, #2]
 80076c4:	b923      	cbnz	r3, 80076d0 <USBD_StdEPReq+0x8e>
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80076c6:	b119      	cbz	r1, 80076d0 <USBD_StdEPReq+0x8e>
 80076c8:	2980      	cmp	r1, #128	; 0x80
 80076ca:	d001      	beq.n	80076d0 <USBD_StdEPReq+0x8e>
 80076cc:	88eb      	ldrh	r3, [r5, #6]
 80076ce:	b11b      	cbz	r3, 80076d8 <USBD_StdEPReq+0x96>
              (void)USBD_CtlSendStatus(pdev);
 80076d0:	4630      	mov	r0, r6
 80076d2:	f000 f8f3 	bl	80078bc <USBD_CtlSendStatus>
              break;
 80076d6:	e7cd      	b.n	8007674 <USBD_StdEPReq+0x32>
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80076d8:	f000 fb2b 	bl	8007d32 <USBD_LL_StallEP>
 80076dc:	e7f8      	b.n	80076d0 <USBD_StdEPReq+0x8e>
          switch (pdev->dev_state)
 80076de:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80076e2:	b2db      	uxtb	r3, r3
 80076e4:	2b02      	cmp	r3, #2
 80076e6:	d005      	beq.n	80076f4 <USBD_StdEPReq+0xb2>
 80076e8:	2b03      	cmp	r3, #3
 80076ea:	d012      	beq.n	8007712 <USBD_StdEPReq+0xd0>
              USBD_CtlError(pdev, req);
 80076ec:	4629      	mov	r1, r5
 80076ee:	f7ff fd80 	bl	80071f2 <USBD_CtlError>
              break;
 80076f2:	e7bf      	b.n	8007674 <USBD_StdEPReq+0x32>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80076f4:	b109      	cbz	r1, 80076fa <USBD_StdEPReq+0xb8>
 80076f6:	2980      	cmp	r1, #128	; 0x80
 80076f8:	d104      	bne.n	8007704 <USBD_StdEPReq+0xc2>
                USBD_CtlError(pdev, req);
 80076fa:	4629      	mov	r1, r5
 80076fc:	4630      	mov	r0, r6
 80076fe:	f7ff fd78 	bl	80071f2 <USBD_CtlError>
 8007702:	e7b7      	b.n	8007674 <USBD_StdEPReq+0x32>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007704:	f000 fb15 	bl	8007d32 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007708:	2180      	movs	r1, #128	; 0x80
 800770a:	4630      	mov	r0, r6
 800770c:	f000 fb11 	bl	8007d32 <USBD_LL_StallEP>
 8007710:	e7b0      	b.n	8007674 <USBD_StdEPReq+0x32>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007712:	886b      	ldrh	r3, [r5, #2]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d1ad      	bne.n	8007674 <USBD_StdEPReq+0x32>
                if ((ep_addr & 0x7FU) != 0x00U)
 8007718:	f011 0f7f 	tst.w	r1, #127	; 0x7f
 800771c:	d10a      	bne.n	8007734 <USBD_StdEPReq+0xf2>
                (void)USBD_CtlSendStatus(pdev);
 800771e:	4630      	mov	r0, r6
 8007720:	f000 f8cc 	bl	80078bc <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007724:	f8d6 32b8 	ldr.w	r3, [r6, #696]	; 0x2b8
 8007728:	689b      	ldr	r3, [r3, #8]
 800772a:	4629      	mov	r1, r5
 800772c:	4630      	mov	r0, r6
 800772e:	4798      	blx	r3
 8007730:	4604      	mov	r4, r0
 8007732:	e79f      	b.n	8007674 <USBD_StdEPReq+0x32>
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007734:	f000 fb05 	bl	8007d42 <USBD_LL_ClearStallEP>
 8007738:	e7f1      	b.n	800771e <USBD_StdEPReq+0xdc>
          switch (pdev->dev_state)
 800773a:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800773e:	b2d2      	uxtb	r2, r2
 8007740:	2a02      	cmp	r2, #2
 8007742:	d006      	beq.n	8007752 <USBD_StdEPReq+0x110>
 8007744:	2a03      	cmp	r2, #3
 8007746:	d029      	beq.n	800779c <USBD_StdEPReq+0x15a>
              USBD_CtlError(pdev, req);
 8007748:	4629      	mov	r1, r5
 800774a:	f7ff fd52 	bl	80071f2 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800774e:	463c      	mov	r4, r7
              break;
 8007750:	e790      	b.n	8007674 <USBD_StdEPReq+0x32>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007752:	b109      	cbz	r1, 8007758 <USBD_StdEPReq+0x116>
 8007754:	2980      	cmp	r1, #128	; 0x80
 8007756:	d113      	bne.n	8007780 <USBD_StdEPReq+0x13e>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007758:	f013 0f80 	tst.w	r3, #128	; 0x80
 800775c:	d115      	bne.n	800778a <USBD_StdEPReq+0x148>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800775e:	f001 017f 	and.w	r1, r1, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007762:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8007766:	0089      	lsls	r1, r1, #2
 8007768:	f501 71a8 	add.w	r1, r1, #336	; 0x150
 800776c:	4431      	add	r1, r6
 800776e:	3104      	adds	r1, #4
              pep->status = 0x0000U;
 8007770:	2300      	movs	r3, #0
 8007772:	600b      	str	r3, [r1, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007774:	2202      	movs	r2, #2
 8007776:	4630      	mov	r0, r6
 8007778:	f000 f874 	bl	8007864 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800777c:	463c      	mov	r4, r7
              break;
 800777e:	e779      	b.n	8007674 <USBD_StdEPReq+0x32>
                USBD_CtlError(pdev, req);
 8007780:	4629      	mov	r1, r5
 8007782:	f7ff fd36 	bl	80071f2 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8007786:	463c      	mov	r4, r7
                break;
 8007788:	e774      	b.n	8007674 <USBD_StdEPReq+0x32>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800778a:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800778e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8007792:	0089      	lsls	r1, r1, #2
 8007794:	3110      	adds	r1, #16
 8007796:	4431      	add	r1, r6
 8007798:	3104      	adds	r1, #4
 800779a:	e7e9      	b.n	8007770 <USBD_StdEPReq+0x12e>
              if ((ep_addr & 0x80U) == 0x80U)
 800779c:	b25b      	sxtb	r3, r3
 800779e:	2b00      	cmp	r3, #0
 80077a0:	db1f      	blt.n	80077e2 <USBD_StdEPReq+0x1a0>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80077a2:	f001 020f 	and.w	r2, r1, #15
 80077a6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80077aa:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80077ae:	f8b2 2164 	ldrh.w	r2, [r2, #356]	; 0x164
 80077b2:	b322      	cbz	r2, 80077fe <USBD_StdEPReq+0x1bc>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	db27      	blt.n	8007808 <USBD_StdEPReq+0x1c6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80077b8:	f001 037f 	and.w	r3, r1, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80077bc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80077c0:	009c      	lsls	r4, r3, #2
 80077c2:	f504 74a8 	add.w	r4, r4, #336	; 0x150
 80077c6:	4434      	add	r4, r6
 80077c8:	3404      	adds	r4, #4
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80077ca:	b109      	cbz	r1, 80077d0 <USBD_StdEPReq+0x18e>
 80077cc:	2980      	cmp	r1, #128	; 0x80
 80077ce:	d124      	bne.n	800781a <USBD_StdEPReq+0x1d8>
                pep->status = 0x0000U;
 80077d0:	2300      	movs	r3, #0
 80077d2:	6023      	str	r3, [r4, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80077d4:	2202      	movs	r2, #2
 80077d6:	4621      	mov	r1, r4
 80077d8:	4630      	mov	r0, r6
 80077da:	f000 f843 	bl	8007864 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 80077de:	463c      	mov	r4, r7
              break;
 80077e0:	e748      	b.n	8007674 <USBD_StdEPReq+0x32>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80077e2:	f001 020f 	and.w	r2, r1, #15
 80077e6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80077ea:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80077ee:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 80077f0:	2a00      	cmp	r2, #0
 80077f2:	d1df      	bne.n	80077b4 <USBD_StdEPReq+0x172>
                  USBD_CtlError(pdev, req);
 80077f4:	4629      	mov	r1, r5
 80077f6:	f7ff fcfc 	bl	80071f2 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80077fa:	463c      	mov	r4, r7
                  break;
 80077fc:	e73a      	b.n	8007674 <USBD_StdEPReq+0x32>
                  USBD_CtlError(pdev, req);
 80077fe:	4629      	mov	r1, r5
 8007800:	f7ff fcf7 	bl	80071f2 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8007804:	463c      	mov	r4, r7
                  break;
 8007806:	e735      	b.n	8007674 <USBD_StdEPReq+0x32>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007808:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 800780c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007810:	009c      	lsls	r4, r3, #2
 8007812:	3410      	adds	r4, #16
 8007814:	4434      	add	r4, r6
 8007816:	3404      	adds	r4, #4
 8007818:	e7d7      	b.n	80077ca <USBD_StdEPReq+0x188>
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800781a:	4630      	mov	r0, r6
 800781c:	f000 fa99 	bl	8007d52 <USBD_LL_IsStallEP>
 8007820:	b110      	cbz	r0, 8007828 <USBD_StdEPReq+0x1e6>
                pep->status = 0x0001U;
 8007822:	2301      	movs	r3, #1
 8007824:	6023      	str	r3, [r4, #0]
 8007826:	e7d5      	b.n	80077d4 <USBD_StdEPReq+0x192>
                pep->status = 0x0000U;
 8007828:	2300      	movs	r3, #0
 800782a:	6023      	str	r3, [r4, #0]
 800782c:	e7d2      	b.n	80077d4 <USBD_StdEPReq+0x192>

0800782e <USBD_GetString>:
  if (desc == NULL)
 800782e:	b1c0      	cbz	r0, 8007862 <USBD_GetString+0x34>
{
 8007830:	b570      	push	{r4, r5, r6, lr}
 8007832:	460d      	mov	r5, r1
 8007834:	4616      	mov	r6, r2
 8007836:	4604      	mov	r4, r0
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007838:	f7ff fcb4 	bl	80071a4 <USBD_GetLen>
 800783c:	3001      	adds	r0, #1
 800783e:	0040      	lsls	r0, r0, #1
 8007840:	8030      	strh	r0, [r6, #0]
  unicode[idx] = *(uint8_t *)len;
 8007842:	7028      	strb	r0, [r5, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007844:	2303      	movs	r3, #3
 8007846:	706b      	strb	r3, [r5, #1]
  idx++;
 8007848:	2302      	movs	r3, #2
  while (*pdesc != (uint8_t)'\0')
 800784a:	7822      	ldrb	r2, [r4, #0]
 800784c:	b142      	cbz	r2, 8007860 <USBD_GetString+0x32>
    unicode[idx] = *pdesc;
 800784e:	54ea      	strb	r2, [r5, r3]
    pdesc++;
 8007850:	3401      	adds	r4, #1
    idx++;
 8007852:	1c5a      	adds	r2, r3, #1
 8007854:	b2d2      	uxtb	r2, r2
    unicode[idx] = 0U;
 8007856:	2100      	movs	r1, #0
 8007858:	54a9      	strb	r1, [r5, r2]
    idx++;
 800785a:	3302      	adds	r3, #2
 800785c:	b2db      	uxtb	r3, r3
 800785e:	e7f4      	b.n	800784a <USBD_GetString+0x1c>
}
 8007860:	bd70      	pop	{r4, r5, r6, pc}
 8007862:	4770      	bx	lr

08007864 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007864:	b510      	push	{r4, lr}
 8007866:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007868:	2202      	movs	r2, #2
 800786a:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800786e:	6183      	str	r3, [r0, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007870:	61c3      	str	r3, [r0, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007872:	460a      	mov	r2, r1
 8007874:	2100      	movs	r1, #0
 8007876:	f000 fa8b 	bl	8007d90 <USBD_LL_Transmit>

  return USBD_OK;
}
 800787a:	2000      	movs	r0, #0
 800787c:	bd10      	pop	{r4, pc}

0800787e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800787e:	b508      	push	{r3, lr}
 8007880:	4613      	mov	r3, r2
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007882:	460a      	mov	r2, r1
 8007884:	2100      	movs	r1, #0
 8007886:	f000 fa83 	bl	8007d90 <USBD_LL_Transmit>

  return USBD_OK;
}
 800788a:	2000      	movs	r0, #0
 800788c:	bd08      	pop	{r3, pc}

0800788e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800788e:	b510      	push	{r4, lr}
 8007890:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007892:	2203      	movs	r2, #3
 8007894:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007898:	f8c0 3158 	str.w	r3, [r0, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800789c:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80078a0:	460a      	mov	r2, r1
 80078a2:	2100      	movs	r1, #0
 80078a4:	f000 fa7c 	bl	8007da0 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80078a8:	2000      	movs	r0, #0
 80078aa:	bd10      	pop	{r4, pc}

080078ac <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80078ac:	b508      	push	{r3, lr}
 80078ae:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80078b0:	460a      	mov	r2, r1
 80078b2:	2100      	movs	r1, #0
 80078b4:	f000 fa74 	bl	8007da0 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80078b8:	2000      	movs	r0, #0
 80078ba:	bd08      	pop	{r3, pc}

080078bc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80078bc:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80078be:	2204      	movs	r2, #4
 80078c0:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80078c4:	2300      	movs	r3, #0
 80078c6:	461a      	mov	r2, r3
 80078c8:	4619      	mov	r1, r3
 80078ca:	f000 fa61 	bl	8007d90 <USBD_LL_Transmit>

  return USBD_OK;
}
 80078ce:	2000      	movs	r0, #0
 80078d0:	bd08      	pop	{r3, pc}

080078d2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80078d2:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80078d4:	2205      	movs	r2, #5
 80078d6:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80078da:	2300      	movs	r3, #0
 80078dc:	461a      	mov	r2, r3
 80078de:	4619      	mov	r1, r3
 80078e0:	f000 fa5e 	bl	8007da0 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80078e4:	2000      	movs	r0, #0
 80078e6:	bd08      	pop	{r3, pc}

080078e8 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 80078e8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 80078ea:	2200      	movs	r2, #0
 80078ec:	490f      	ldr	r1, [pc, #60]	; (800792c <MX_USB_Device_Init+0x44>)
 80078ee:	4810      	ldr	r0, [pc, #64]	; (8007930 <MX_USB_Device_Init+0x48>)
 80078f0:	f7ff faf3 	bl	8006eda <USBD_Init>
 80078f4:	b970      	cbnz	r0, 8007914 <MX_USB_Device_Init+0x2c>
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 80078f6:	490f      	ldr	r1, [pc, #60]	; (8007934 <MX_USB_Device_Init+0x4c>)
 80078f8:	480d      	ldr	r0, [pc, #52]	; (8007930 <MX_USB_Device_Init+0x48>)
 80078fa:	f7ff fb05 	bl	8006f08 <USBD_RegisterClass>
 80078fe:	b960      	cbnz	r0, 800791a <MX_USB_Device_Init+0x32>
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8007900:	490d      	ldr	r1, [pc, #52]	; (8007938 <MX_USB_Device_Init+0x50>)
 8007902:	480b      	ldr	r0, [pc, #44]	; (8007930 <MX_USB_Device_Init+0x48>)
 8007904:	f7ff fa9b 	bl	8006e3e <USBD_CDC_RegisterInterface>
 8007908:	b950      	cbnz	r0, 8007920 <MX_USB_Device_Init+0x38>
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800790a:	4809      	ldr	r0, [pc, #36]	; (8007930 <MX_USB_Device_Init+0x48>)
 800790c:	f7ff fb13 	bl	8006f36 <USBD_Start>
 8007910:	b948      	cbnz	r0, 8007926 <MX_USB_Device_Init+0x3e>
    Error_Handler();
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8007912:	bd08      	pop	{r3, pc}
    Error_Handler();
 8007914:	f7fa fbc4 	bl	80020a0 <Error_Handler>
 8007918:	e7ed      	b.n	80078f6 <MX_USB_Device_Init+0xe>
    Error_Handler();
 800791a:	f7fa fbc1 	bl	80020a0 <Error_Handler>
 800791e:	e7ef      	b.n	8007900 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8007920:	f7fa fbbe 	bl	80020a0 <Error_Handler>
 8007924:	e7f1      	b.n	800790a <MX_USB_Device_Init+0x22>
    Error_Handler();
 8007926:	f7fa fbbb 	bl	80020a0 <Error_Handler>
}
 800792a:	e7f2      	b.n	8007912 <MX_USB_Device_Init+0x2a>
 800792c:	20000130 	.word	0x20000130
 8007930:	20000668 	.word	0x20000668
 8007934:	2000000c 	.word	0x2000000c
 8007938:	2000011c 	.word	0x2000011c

0800793c <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 800793c:	2000      	movs	r0, #0
 800793e:	4770      	bx	lr

08007940 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8007940:	2000      	movs	r0, #0
 8007942:	4770      	bx	lr

08007944 <CDC_TransmitCplt_FS>:
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
}
 8007944:	2000      	movs	r0, #0
 8007946:	4770      	bx	lr

08007948 <CDC_Receive_FS>:
{
 8007948:	b570      	push	{r4, r5, r6, lr}
 800794a:	4605      	mov	r5, r0
	rx_cmd_buf.IsCommandDataReceived = 1;
 800794c:	4c10      	ldr	r4, [pc, #64]	; (8007990 <CDC_Receive_FS+0x48>)
 800794e:	2301      	movs	r3, #1
 8007950:	7223      	strb	r3, [r4, #8]
	rx_cmd_buf.CMDLens[rx_cmd_buf.pos_receive] = (*Len);
 8007952:	680e      	ldr	r6, [r1, #0]
 8007954:	6823      	ldr	r3, [r4, #0]
 8007956:	18e0      	adds	r0, r4, r3
 8007958:	f245 0209 	movw	r2, #20489	; 0x5009
 800795c:	5486      	strb	r6, [r0, r2]
	memcpy(rx_cmd_buf.RxBufferFS[rx_cmd_buf.pos_receive], Buf, (*Len));
 800795e:	02db      	lsls	r3, r3, #11
 8007960:	3308      	adds	r3, #8
 8007962:	4423      	add	r3, r4
 8007964:	680a      	ldr	r2, [r1, #0]
 8007966:	4629      	mov	r1, r5
 8007968:	1c58      	adds	r0, r3, #1
 800796a:	f000 fa7b 	bl	8007e64 <memcpy>
	rx_cmd_buf.pos_receive++;
 800796e:	6823      	ldr	r3, [r4, #0]
 8007970:	3301      	adds	r3, #1
 8007972:	6023      	str	r3, [r4, #0]
	if (rx_cmd_buf.pos_receive >= RX_CMND_BUF_LEN)
 8007974:	2b09      	cmp	r3, #9
 8007976:	dd01      	ble.n	800797c <CDC_Receive_FS+0x34>
		rx_cmd_buf.pos_receive = 0;
 8007978:	2200      	movs	r2, #0
 800797a:	6022      	str	r2, [r4, #0]
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800797c:	4c05      	ldr	r4, [pc, #20]	; (8007994 <CDC_Receive_FS+0x4c>)
 800797e:	4629      	mov	r1, r5
 8007980:	4620      	mov	r0, r4
 8007982:	f7ff fa6e 	bl	8006e62 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007986:	4620      	mov	r0, r4
 8007988:	f7ff fa8e 	bl	8006ea8 <USBD_CDC_ReceivePacket>
}
 800798c:	2000      	movs	r0, #0
 800798e:	bd70      	pop	{r4, r5, r6, pc}
 8007990:	20001938 	.word	0x20001938
 8007994:	20000668 	.word	0x20000668

08007998 <CDC_Init_FS>:
{
 8007998:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800799a:	4c06      	ldr	r4, [pc, #24]	; (80079b4 <CDC_Init_FS+0x1c>)
 800799c:	2200      	movs	r2, #0
 800799e:	4906      	ldr	r1, [pc, #24]	; (80079b8 <CDC_Init_FS+0x20>)
 80079a0:	4620      	mov	r0, r4
 80079a2:	f7ff fa53 	bl	8006e4c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80079a6:	4905      	ldr	r1, [pc, #20]	; (80079bc <CDC_Init_FS+0x24>)
 80079a8:	4620      	mov	r0, r4
 80079aa:	f7ff fa5a 	bl	8006e62 <USBD_CDC_SetRxBuffer>
}
 80079ae:	2000      	movs	r0, #0
 80079b0:	bd10      	pop	{r4, pc}
 80079b2:	bf00      	nop
 80079b4:	20000668 	.word	0x20000668
 80079b8:	20001138 	.word	0x20001138
 80079bc:	20000938 	.word	0x20000938

080079c0 <CDC_Transmit_FS>:
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80079c0:	4b09      	ldr	r3, [pc, #36]	; (80079e8 <CDC_Transmit_FS+0x28>)
 80079c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
  if (hcdc->TxState != 0){
 80079c6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80079ca:	b10b      	cbz	r3, 80079d0 <CDC_Transmit_FS+0x10>
    return USBD_BUSY;
 80079cc:	2001      	movs	r0, #1
}
 80079ce:	4770      	bx	lr
{
 80079d0:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80079d2:	4c05      	ldr	r4, [pc, #20]	; (80079e8 <CDC_Transmit_FS+0x28>)
 80079d4:	460a      	mov	r2, r1
 80079d6:	4601      	mov	r1, r0
 80079d8:	4620      	mov	r0, r4
 80079da:	f7ff fa37 	bl	8006e4c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80079de:	4620      	mov	r0, r4
 80079e0:	f7ff fa48 	bl	8006e74 <USBD_CDC_TransmitPacket>
}
 80079e4:	bd10      	pop	{r4, pc}
 80079e6:	bf00      	nop
 80079e8:	20000668 	.word	0x20000668

080079ec <USB_retrieveCMD>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
uint8_t USB_retrieveCMD(uint8_t *Buf, uint32_t *Len)
{
 80079ec:	b538      	push	{r3, r4, r5, lr}
 80079ee:	4605      	mov	r5, r0
	if (rx_cmd_buf.IsCommandDataReceived == 0)
 80079f0:	4b12      	ldr	r3, [pc, #72]	; (8007a3c <USB_retrieveCMD+0x50>)
 80079f2:	7a18      	ldrb	r0, [r3, #8]
 80079f4:	b900      	cbnz	r0, 80079f8 <USB_retrieveCMD+0xc>
	}

	//check if all data were processed
	return 1;

}
 80079f6:	bd38      	pop	{r3, r4, r5, pc}
	int index = rx_cmd_buf.pos_process;
 80079f8:	461c      	mov	r4, r3
 80079fa:	685b      	ldr	r3, [r3, #4]
	*Len = rx_cmd_buf.CMDLens[index];
 80079fc:	18e0      	adds	r0, r4, r3
 80079fe:	f245 0209 	movw	r2, #20489	; 0x5009
 8007a02:	5c82      	ldrb	r2, [r0, r2]
 8007a04:	600a      	str	r2, [r1, #0]
	memcpy(Buf, rx_cmd_buf.RxBufferFS[index], (*Len));
 8007a06:	02d9      	lsls	r1, r3, #11
 8007a08:	3108      	adds	r1, #8
 8007a0a:	4421      	add	r1, r4
 8007a0c:	3101      	adds	r1, #1
 8007a0e:	4628      	mov	r0, r5
 8007a10:	f000 fa28 	bl	8007e64 <memcpy>
	rx_cmd_buf.pos_process++;
 8007a14:	6863      	ldr	r3, [r4, #4]
 8007a16:	3301      	adds	r3, #1
 8007a18:	6063      	str	r3, [r4, #4]
	if (rx_cmd_buf.pos_process >= RX_CMND_BUF_LEN)
 8007a1a:	2b09      	cmp	r3, #9
 8007a1c:	dd01      	ble.n	8007a22 <USB_retrieveCMD+0x36>
		rx_cmd_buf.pos_process = 0;
 8007a1e:	2200      	movs	r2, #0
 8007a20:	6062      	str	r2, [r4, #4]
	if (rx_cmd_buf.pos_process == rx_cmd_buf.pos_receive)
 8007a22:	4b06      	ldr	r3, [pc, #24]	; (8007a3c <USB_retrieveCMD+0x50>)
 8007a24:	685a      	ldr	r2, [r3, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	429a      	cmp	r2, r3
 8007a2a:	d001      	beq.n	8007a30 <USB_retrieveCMD+0x44>
	return 1;
 8007a2c:	2001      	movs	r0, #1
 8007a2e:	e7e2      	b.n	80079f6 <USB_retrieveCMD+0xa>
		rx_cmd_buf.IsCommandDataReceived = 0;
 8007a30:	4b02      	ldr	r3, [pc, #8]	; (8007a3c <USB_retrieveCMD+0x50>)
 8007a32:	2200      	movs	r2, #0
 8007a34:	721a      	strb	r2, [r3, #8]
	return 1;
 8007a36:	2001      	movs	r0, #1
 8007a38:	e7dd      	b.n	80079f6 <USB_retrieveCMD+0xa>
 8007a3a:	bf00      	nop
 8007a3c:	20001938 	.word	0x20001938

08007a40 <USBD_CDC_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8007a40:	2312      	movs	r3, #18
 8007a42:	800b      	strh	r3, [r1, #0]
  return USBD_CDC_DeviceDesc;
}
 8007a44:	4800      	ldr	r0, [pc, #0]	; (8007a48 <USBD_CDC_DeviceDescriptor+0x8>)
 8007a46:	4770      	bx	lr
 8007a48:	20000150 	.word	0x20000150

08007a4c <USBD_CDC_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007a4c:	2304      	movs	r3, #4
 8007a4e:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 8007a50:	4800      	ldr	r0, [pc, #0]	; (8007a54 <USBD_CDC_LangIDStrDescriptor+0x8>)
 8007a52:	4770      	bx	lr
 8007a54:	20000164 	.word	0x20000164

08007a58 <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 8007a58:	2300      	movs	r3, #0
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d217      	bcs.n	8007a8e <IntToUnicode+0x36>
{
 8007a5e:	b430      	push	{r4, r5}
 8007a60:	e00b      	b.n	8007a7a <IntToUnicode+0x22>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007a62:	3437      	adds	r4, #55	; 0x37
 8007a64:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    }

    value = value << 4;
 8007a68:	0100      	lsls	r0, r0, #4

    pbuf[2 * idx + 1] = 0;
 8007a6a:	005c      	lsls	r4, r3, #1
 8007a6c:	3401      	adds	r4, #1
 8007a6e:	2500      	movs	r5, #0
 8007a70:	550d      	strb	r5, [r1, r4]
  for (idx = 0; idx < len; idx++)
 8007a72:	3301      	adds	r3, #1
 8007a74:	b2db      	uxtb	r3, r3
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d207      	bcs.n	8007a8a <IntToUnicode+0x32>
    if (((value >> 28)) < 0xA)
 8007a7a:	0f04      	lsrs	r4, r0, #28
 8007a7c:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
 8007a80:	d2ef      	bcs.n	8007a62 <IntToUnicode+0xa>
      pbuf[2 * idx] = (value >> 28) + '0';
 8007a82:	3430      	adds	r4, #48	; 0x30
 8007a84:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
 8007a88:	e7ee      	b.n	8007a68 <IntToUnicode+0x10>
  }
}
 8007a8a:	bc30      	pop	{r4, r5}
 8007a8c:	4770      	bx	lr
 8007a8e:	4770      	bx	lr

08007a90 <Get_SerialNum>:
{
 8007a90:	b538      	push	{r3, r4, r5, lr}
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007a92:	4b0a      	ldr	r3, [pc, #40]	; (8007abc <Get_SerialNum+0x2c>)
 8007a94:	6818      	ldr	r0, [r3, #0]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007a96:	3304      	adds	r3, #4
 8007a98:	681c      	ldr	r4, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007a9a:	3304      	adds	r3, #4
 8007a9c:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 8007a9e:	18c0      	adds	r0, r0, r3
 8007aa0:	d100      	bne.n	8007aa4 <Get_SerialNum+0x14>
}
 8007aa2:	bd38      	pop	{r3, r4, r5, pc}
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007aa4:	4d06      	ldr	r5, [pc, #24]	; (8007ac0 <Get_SerialNum+0x30>)
 8007aa6:	2208      	movs	r2, #8
 8007aa8:	1ca9      	adds	r1, r5, #2
 8007aaa:	f7ff ffd5 	bl	8007a58 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007aae:	2204      	movs	r2, #4
 8007ab0:	f105 0112 	add.w	r1, r5, #18
 8007ab4:	4620      	mov	r0, r4
 8007ab6:	f7ff ffcf 	bl	8007a58 <IntToUnicode>
}
 8007aba:	e7f2      	b.n	8007aa2 <Get_SerialNum+0x12>
 8007abc:	1fff7590 	.word	0x1fff7590
 8007ac0:	20000168 	.word	0x20000168

08007ac4 <USBD_CDC_SerialStrDescriptor>:
{
 8007ac4:	b508      	push	{r3, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8007ac6:	231a      	movs	r3, #26
 8007ac8:	800b      	strh	r3, [r1, #0]
  Get_SerialNum();
 8007aca:	f7ff ffe1 	bl	8007a90 <Get_SerialNum>
}
 8007ace:	4801      	ldr	r0, [pc, #4]	; (8007ad4 <USBD_CDC_SerialStrDescriptor+0x10>)
 8007ad0:	bd08      	pop	{r3, pc}
 8007ad2:	bf00      	nop
 8007ad4:	20000168 	.word	0x20000168

08007ad8 <USBD_CDC_ProductStrDescriptor>:
{
 8007ad8:	b508      	push	{r3, lr}
 8007ada:	460a      	mov	r2, r1
  if(speed == 0)
 8007adc:	b928      	cbnz	r0, 8007aea <USBD_CDC_ProductStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8007ade:	4905      	ldr	r1, [pc, #20]	; (8007af4 <USBD_CDC_ProductStrDescriptor+0x1c>)
 8007ae0:	4805      	ldr	r0, [pc, #20]	; (8007af8 <USBD_CDC_ProductStrDescriptor+0x20>)
 8007ae2:	f7ff fea4 	bl	800782e <USBD_GetString>
}
 8007ae6:	4803      	ldr	r0, [pc, #12]	; (8007af4 <USBD_CDC_ProductStrDescriptor+0x1c>)
 8007ae8:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8007aea:	4902      	ldr	r1, [pc, #8]	; (8007af4 <USBD_CDC_ProductStrDescriptor+0x1c>)
 8007aec:	4802      	ldr	r0, [pc, #8]	; (8007af8 <USBD_CDC_ProductStrDescriptor+0x20>)
 8007aee:	f7ff fe9e 	bl	800782e <USBD_GetString>
 8007af2:	e7f8      	b.n	8007ae6 <USBD_CDC_ProductStrDescriptor+0xe>
 8007af4:	2000694c 	.word	0x2000694c
 8007af8:	080087fc 	.word	0x080087fc

08007afc <USBD_CDC_ManufacturerStrDescriptor>:
{
 8007afc:	b510      	push	{r4, lr}
 8007afe:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007b00:	4c03      	ldr	r4, [pc, #12]	; (8007b10 <USBD_CDC_ManufacturerStrDescriptor+0x14>)
 8007b02:	4621      	mov	r1, r4
 8007b04:	4803      	ldr	r0, [pc, #12]	; (8007b14 <USBD_CDC_ManufacturerStrDescriptor+0x18>)
 8007b06:	f7ff fe92 	bl	800782e <USBD_GetString>
}
 8007b0a:	4620      	mov	r0, r4
 8007b0c:	bd10      	pop	{r4, pc}
 8007b0e:	bf00      	nop
 8007b10:	2000694c 	.word	0x2000694c
 8007b14:	08008804 	.word	0x08008804

08007b18 <USBD_CDC_ConfigStrDescriptor>:
{
 8007b18:	b508      	push	{r3, lr}
 8007b1a:	460a      	mov	r2, r1
  if(speed == USBD_SPEED_HIGH)
 8007b1c:	b928      	cbnz	r0, 8007b2a <USBD_CDC_ConfigStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8007b1e:	4905      	ldr	r1, [pc, #20]	; (8007b34 <USBD_CDC_ConfigStrDescriptor+0x1c>)
 8007b20:	4805      	ldr	r0, [pc, #20]	; (8007b38 <USBD_CDC_ConfigStrDescriptor+0x20>)
 8007b22:	f7ff fe84 	bl	800782e <USBD_GetString>
}
 8007b26:	4803      	ldr	r0, [pc, #12]	; (8007b34 <USBD_CDC_ConfigStrDescriptor+0x1c>)
 8007b28:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8007b2a:	4902      	ldr	r1, [pc, #8]	; (8007b34 <USBD_CDC_ConfigStrDescriptor+0x1c>)
 8007b2c:	4802      	ldr	r0, [pc, #8]	; (8007b38 <USBD_CDC_ConfigStrDescriptor+0x20>)
 8007b2e:	f7ff fe7e 	bl	800782e <USBD_GetString>
 8007b32:	e7f8      	b.n	8007b26 <USBD_CDC_ConfigStrDescriptor+0xe>
 8007b34:	2000694c 	.word	0x2000694c
 8007b38:	0800880c 	.word	0x0800880c

08007b3c <USBD_CDC_InterfaceStrDescriptor>:
{
 8007b3c:	b508      	push	{r3, lr}
 8007b3e:	460a      	mov	r2, r1
  if(speed == 0)
 8007b40:	b928      	cbnz	r0, 8007b4e <USBD_CDC_InterfaceStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8007b42:	4905      	ldr	r1, [pc, #20]	; (8007b58 <USBD_CDC_InterfaceStrDescriptor+0x1c>)
 8007b44:	4805      	ldr	r0, [pc, #20]	; (8007b5c <USBD_CDC_InterfaceStrDescriptor+0x20>)
 8007b46:	f7ff fe72 	bl	800782e <USBD_GetString>
}
 8007b4a:	4803      	ldr	r0, [pc, #12]	; (8007b58 <USBD_CDC_InterfaceStrDescriptor+0x1c>)
 8007b4c:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8007b4e:	4902      	ldr	r1, [pc, #8]	; (8007b58 <USBD_CDC_InterfaceStrDescriptor+0x1c>)
 8007b50:	4802      	ldr	r0, [pc, #8]	; (8007b5c <USBD_CDC_InterfaceStrDescriptor+0x20>)
 8007b52:	f7ff fe6c 	bl	800782e <USBD_GetString>
 8007b56:	e7f8      	b.n	8007b4a <USBD_CDC_InterfaceStrDescriptor+0xe>
 8007b58:	2000694c 	.word	0x2000694c
 8007b5c:	08008818 	.word	0x08008818

08007b60 <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 8007b60:	2803      	cmp	r0, #3
 8007b62:	d805      	bhi.n	8007b70 <USBD_Get_USB_Status+0x10>
 8007b64:	e8df f000 	tbb	[pc, r0]
 8007b68:	05020405 	.word	0x05020405
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
    break;
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007b6c:	2001      	movs	r0, #1
    break;
 8007b6e:	4770      	bx	lr
      usb_status = USBD_FAIL;
 8007b70:	2003      	movs	r0, #3
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8007b72:	4770      	bx	lr

08007b74 <SystemClockConfig_Resume>:
{
 8007b74:	b508      	push	{r3, lr}
  SystemClock_Config();
 8007b76:	f7fa fb63 	bl	8002240 <SystemClock_Config>
}
 8007b7a:	bd08      	pop	{r3, pc}

08007b7c <HAL_PCD_MspInit>:
  if(pcdHandle->Instance==USB)
 8007b7c:	6802      	ldr	r2, [r0, #0]
 8007b7e:	4b0e      	ldr	r3, [pc, #56]	; (8007bb8 <HAL_PCD_MspInit+0x3c>)
 8007b80:	429a      	cmp	r2, r3
 8007b82:	d000      	beq.n	8007b86 <HAL_PCD_MspInit+0xa>
 8007b84:	4770      	bx	lr
{
 8007b86:	b500      	push	{lr}
 8007b88:	b083      	sub	sp, #12
    __HAL_RCC_USB_CLK_ENABLE();
 8007b8a:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8007b8e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007b90:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8007b94:	659a      	str	r2, [r3, #88]	; 0x58
 8007b96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b98:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007b9c:	9301      	str	r3, [sp, #4]
 8007b9e:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	4611      	mov	r1, r2
 8007ba4:	2014      	movs	r0, #20
 8007ba6:	f7fb f99b 	bl	8002ee0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8007baa:	2014      	movs	r0, #20
 8007bac:	f7fb f9cc 	bl	8002f48 <HAL_NVIC_EnableIRQ>
}
 8007bb0:	b003      	add	sp, #12
 8007bb2:	f85d fb04 	ldr.w	pc, [sp], #4
 8007bb6:	bf00      	nop
 8007bb8:	40005c00 	.word	0x40005c00

08007bbc <HAL_PCD_SetupStageCallback>:
{
 8007bbc:	b508      	push	{r3, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007bbe:	f500 712c 	add.w	r1, r0, #688	; 0x2b0
 8007bc2:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 8007bc6:	f7ff f9cb 	bl	8006f60 <USBD_LL_SetupStage>
}
 8007bca:	bd08      	pop	{r3, pc}

08007bcc <HAL_PCD_DataOutStageCallback>:
{
 8007bcc:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007bce:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8007bd2:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8007bd6:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 8007bda:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 8007bde:	f7ff f9eb 	bl	8006fb8 <USBD_LL_DataOutStage>
}
 8007be2:	bd08      	pop	{r3, pc}

08007be4 <HAL_PCD_DataInStageCallback>:
{
 8007be4:	b508      	push	{r3, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007be6:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8007bea:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8007bee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007bf0:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 8007bf4:	f7ff fa1c 	bl	8007030 <USBD_LL_DataInStage>
}
 8007bf8:	bd08      	pop	{r3, pc}

08007bfa <HAL_PCD_SOFCallback>:
{
 8007bfa:	b508      	push	{r3, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007bfc:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 8007c00:	f7ff fabc 	bl	800717c <USBD_LL_SOF>
}
 8007c04:	bd08      	pop	{r3, pc}

08007c06 <HAL_PCD_ResetCallback>:
{
 8007c06:	b510      	push	{r4, lr}
 8007c08:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007c0a:	6883      	ldr	r3, [r0, #8]
 8007c0c:	2b02      	cmp	r3, #2
 8007c0e:	d109      	bne.n	8007c24 <HAL_PCD_ResetCallback+0x1e>
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007c10:	2101      	movs	r1, #1
 8007c12:	f8d4 02f0 	ldr.w	r0, [r4, #752]	; 0x2f0
 8007c16:	f7ff fa97 	bl	8007148 <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007c1a:	f8d4 02f0 	ldr.w	r0, [r4, #752]	; 0x2f0
 8007c1e:	f7ff fa66 	bl	80070ee <USBD_LL_Reset>
}
 8007c22:	bd10      	pop	{r4, pc}
    Error_Handler();
 8007c24:	f7fa fa3c 	bl	80020a0 <Error_Handler>
 8007c28:	e7f2      	b.n	8007c10 <HAL_PCD_ResetCallback+0xa>
	...

08007c2c <HAL_PCD_SuspendCallback>:
{
 8007c2c:	b510      	push	{r4, lr}
 8007c2e:	4604      	mov	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007c30:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 8007c34:	f7ff fa8b 	bl	800714e <USBD_LL_Suspend>
  if (hpcd->Init.low_power_enable)
 8007c38:	69a3      	ldr	r3, [r4, #24]
 8007c3a:	b123      	cbz	r3, 8007c46 <HAL_PCD_SuspendCallback+0x1a>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007c3c:	4a02      	ldr	r2, [pc, #8]	; (8007c48 <HAL_PCD_SuspendCallback+0x1c>)
 8007c3e:	6913      	ldr	r3, [r2, #16]
 8007c40:	f043 0306 	orr.w	r3, r3, #6
 8007c44:	6113      	str	r3, [r2, #16]
}
 8007c46:	bd10      	pop	{r4, pc}
 8007c48:	e000ed00 	.word	0xe000ed00

08007c4c <HAL_PCD_ResumeCallback>:
{
 8007c4c:	b510      	push	{r4, lr}
 8007c4e:	4604      	mov	r4, r0
  if (hpcd->Init.low_power_enable)
 8007c50:	6983      	ldr	r3, [r0, #24]
 8007c52:	b923      	cbnz	r3, 8007c5e <HAL_PCD_ResumeCallback+0x12>
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007c54:	f8d4 02f0 	ldr.w	r0, [r4, #752]	; 0x2f0
 8007c58:	f7ff fa83 	bl	8007162 <USBD_LL_Resume>
}
 8007c5c:	bd10      	pop	{r4, pc}
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007c5e:	4a04      	ldr	r2, [pc, #16]	; (8007c70 <HAL_PCD_ResumeCallback+0x24>)
 8007c60:	6913      	ldr	r3, [r2, #16]
 8007c62:	f023 0306 	bic.w	r3, r3, #6
 8007c66:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8007c68:	f7ff ff84 	bl	8007b74 <SystemClockConfig_Resume>
 8007c6c:	e7f2      	b.n	8007c54 <HAL_PCD_ResumeCallback+0x8>
 8007c6e:	bf00      	nop
 8007c70:	e000ed00 	.word	0xe000ed00

08007c74 <USBD_LL_Init>:
{
 8007c74:	b510      	push	{r4, lr}
 8007c76:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 8007c78:	481e      	ldr	r0, [pc, #120]	; (8007cf4 <USBD_LL_Init+0x80>)
 8007c7a:	f8c0 42f0 	str.w	r4, [r0, #752]	; 0x2f0
  pdev->pData = &hpcd_USB_FS;
 8007c7e:	f8c4 02c4 	str.w	r0, [r4, #708]	; 0x2c4
  hpcd_USB_FS.Instance = USB;
 8007c82:	4b1d      	ldr	r3, [pc, #116]	; (8007cf8 <USBD_LL_Init+0x84>)
 8007c84:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007c86:	2308      	movs	r3, #8
 8007c88:	6043      	str	r3, [r0, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007c8a:	2302      	movs	r3, #2
 8007c8c:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007c8e:	6103      	str	r3, [r0, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8007c90:	2300      	movs	r3, #0
 8007c92:	6143      	str	r3, [r0, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007c94:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007c96:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007c98:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007c9a:	f7fb fcbf 	bl	800361c <HAL_PCD_Init>
 8007c9e:	bb30      	cbnz	r0, 8007cee <USBD_LL_Init+0x7a>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007ca0:	2318      	movs	r3, #24
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	4611      	mov	r1, r2
 8007ca6:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 8007caa:	f7fc fb7e 	bl	80043aa <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007cae:	2358      	movs	r3, #88	; 0x58
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	2180      	movs	r1, #128	; 0x80
 8007cb4:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 8007cb8:	f7fc fb77 	bl	80043aa <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8007cbc:	23c0      	movs	r3, #192	; 0xc0
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	2181      	movs	r1, #129	; 0x81
 8007cc2:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 8007cc6:	f7fc fb70 	bl	80043aa <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8007cca:	f44f 7388 	mov.w	r3, #272	; 0x110
 8007cce:	2200      	movs	r2, #0
 8007cd0:	2101      	movs	r1, #1
 8007cd2:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 8007cd6:	f7fc fb68 	bl	80043aa <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8007cda:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007cde:	2200      	movs	r2, #0
 8007ce0:	2182      	movs	r1, #130	; 0x82
 8007ce2:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 8007ce6:	f7fc fb60 	bl	80043aa <HAL_PCDEx_PMAConfig>
}
 8007cea:	2000      	movs	r0, #0
 8007cec:	bd10      	pop	{r4, pc}
    Error_Handler( );
 8007cee:	f7fa f9d7 	bl	80020a0 <Error_Handler>
 8007cf2:	e7d5      	b.n	8007ca0 <USBD_LL_Init+0x2c>
 8007cf4:	20006b4c 	.word	0x20006b4c
 8007cf8:	40005c00 	.word	0x40005c00

08007cfc <USBD_LL_Start>:
{
 8007cfc:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8007cfe:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8007d02:	f7fb fcf8 	bl	80036f6 <HAL_PCD_Start>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d06:	f7ff ff2b 	bl	8007b60 <USBD_Get_USB_Status>
}
 8007d0a:	bd08      	pop	{r3, pc}

08007d0c <USBD_LL_OpenEP>:
{
 8007d0c:	b510      	push	{r4, lr}
 8007d0e:	4614      	mov	r4, r2
 8007d10:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007d12:	4623      	mov	r3, r4
 8007d14:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8007d18:	f7fc fa1b 	bl	8004152 <HAL_PCD_EP_Open>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d1c:	f7ff ff20 	bl	8007b60 <USBD_Get_USB_Status>
}
 8007d20:	bd10      	pop	{r4, pc}

08007d22 <USBD_LL_CloseEP>:
{
 8007d22:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007d24:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8007d28:	f7fc fa4f 	bl	80041ca <HAL_PCD_EP_Close>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d2c:	f7ff ff18 	bl	8007b60 <USBD_Get_USB_Status>
}
 8007d30:	bd08      	pop	{r3, pc}

08007d32 <USBD_LL_StallEP>:
{
 8007d32:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007d34:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8007d38:	f7fc fac7 	bl	80042ca <HAL_PCD_EP_SetStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d3c:	f7ff ff10 	bl	8007b60 <USBD_Get_USB_Status>
}
 8007d40:	bd08      	pop	{r3, pc}

08007d42 <USBD_LL_ClearStallEP>:
{
 8007d42:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007d44:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8007d48:	f7fc faf4 	bl	8004334 <HAL_PCD_EP_ClrStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d4c:	f7ff ff08 	bl	8007b60 <USBD_Get_USB_Status>
}
 8007d50:	bd08      	pop	{r3, pc}

08007d52 <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007d52:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4
  if((ep_addr & 0x80) == 0x80)
 8007d56:	f011 0f80 	tst.w	r1, #128	; 0x80
 8007d5a:	d108      	bne.n	8007d6e <USBD_LL_IsStallEP+0x1c>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007d5c:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8007d60:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8007d64:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8007d68:	f891 016a 	ldrb.w	r0, [r1, #362]	; 0x16a
}
 8007d6c:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007d6e:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8007d72:	3101      	adds	r1, #1
 8007d74:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8007d78:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8007d7c:	7888      	ldrb	r0, [r1, #2]
 8007d7e:	4770      	bx	lr

08007d80 <USBD_LL_SetUSBAddress>:
{
 8007d80:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007d82:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8007d86:	f7fc f8e2 	bl	8003f4e <HAL_PCD_SetAddress>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d8a:	f7ff fee9 	bl	8007b60 <USBD_Get_USB_Status>
}
 8007d8e:	bd08      	pop	{r3, pc}

08007d90 <USBD_LL_Transmit>:
{
 8007d90:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007d92:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8007d96:	f7fc fa75 	bl	8004284 <HAL_PCD_EP_Transmit>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d9a:	f7ff fee1 	bl	8007b60 <USBD_Get_USB_Status>
}
 8007d9e:	bd08      	pop	{r3, pc}

08007da0 <USBD_LL_PrepareReceive>:
{
 8007da0:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007da2:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8007da6:	f7fc fa42 	bl	800422e <HAL_PCD_EP_Receive>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007daa:	f7ff fed9 	bl	8007b60 <USBD_Get_USB_Status>
}
 8007dae:	bd08      	pop	{r3, pc}

08007db0 <USBD_LL_GetRxDataSize>:
{
 8007db0:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007db2:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8007db6:	f7fc fa5c 	bl	8004272 <HAL_PCD_EP_GetRxCount>
}
 8007dba:	bd08      	pop	{r3, pc}

08007dbc <HAL_PCDEx_LPM_Callback>:
{
 8007dbc:	b510      	push	{r4, lr}
 8007dbe:	4604      	mov	r4, r0
  switch (msg)
 8007dc0:	b111      	cbz	r1, 8007dc8 <HAL_PCDEx_LPM_Callback+0xc>
 8007dc2:	2901      	cmp	r1, #1
 8007dc4:	d00f      	beq.n	8007de6 <HAL_PCDEx_LPM_Callback+0x2a>
}
 8007dc6:	bd10      	pop	{r4, pc}
    if (hpcd->Init.low_power_enable)
 8007dc8:	6983      	ldr	r3, [r0, #24]
 8007dca:	b923      	cbnz	r3, 8007dd6 <HAL_PCDEx_LPM_Callback+0x1a>
    USBD_LL_Resume(hpcd->pData);
 8007dcc:	f8d4 02f0 	ldr.w	r0, [r4, #752]	; 0x2f0
 8007dd0:	f7ff f9c7 	bl	8007162 <USBD_LL_Resume>
    break;
 8007dd4:	e7f7      	b.n	8007dc6 <HAL_PCDEx_LPM_Callback+0xa>
      SystemClockConfig_Resume();
 8007dd6:	f7ff fecd 	bl	8007b74 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007dda:	4a09      	ldr	r2, [pc, #36]	; (8007e00 <HAL_PCDEx_LPM_Callback+0x44>)
 8007ddc:	6913      	ldr	r3, [r2, #16]
 8007dde:	f023 0306 	bic.w	r3, r3, #6
 8007de2:	6113      	str	r3, [r2, #16]
 8007de4:	e7f2      	b.n	8007dcc <HAL_PCDEx_LPM_Callback+0x10>
    USBD_LL_Suspend(hpcd->pData);
 8007de6:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 8007dea:	f7ff f9b0 	bl	800714e <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8007dee:	69a3      	ldr	r3, [r4, #24]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d0e8      	beq.n	8007dc6 <HAL_PCDEx_LPM_Callback+0xa>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007df4:	4a02      	ldr	r2, [pc, #8]	; (8007e00 <HAL_PCDEx_LPM_Callback+0x44>)
 8007df6:	6913      	ldr	r3, [r2, #16]
 8007df8:	f043 0306 	orr.w	r3, r3, #6
 8007dfc:	6113      	str	r3, [r2, #16]
}
 8007dfe:	e7e2      	b.n	8007dc6 <HAL_PCDEx_LPM_Callback+0xa>
 8007e00:	e000ed00 	.word	0xe000ed00

08007e04 <USBD_static_malloc>:
}
 8007e04:	4800      	ldr	r0, [pc, #0]	; (8007e08 <USBD_static_malloc+0x4>)
 8007e06:	4770      	bx	lr
 8007e08:	2000020c 	.word	0x2000020c

08007e0c <USBD_static_free>:
}
 8007e0c:	4770      	bx	lr
	...

08007e10 <__errno>:
 8007e10:	4b01      	ldr	r3, [pc, #4]	; (8007e18 <__errno+0x8>)
 8007e12:	6818      	ldr	r0, [r3, #0]
 8007e14:	4770      	bx	lr
 8007e16:	bf00      	nop
 8007e18:	20000184 	.word	0x20000184

08007e1c <__libc_init_array>:
 8007e1c:	b570      	push	{r4, r5, r6, lr}
 8007e1e:	4d0d      	ldr	r5, [pc, #52]	; (8007e54 <__libc_init_array+0x38>)
 8007e20:	4c0d      	ldr	r4, [pc, #52]	; (8007e58 <__libc_init_array+0x3c>)
 8007e22:	1b64      	subs	r4, r4, r5
 8007e24:	10a4      	asrs	r4, r4, #2
 8007e26:	2600      	movs	r6, #0
 8007e28:	42a6      	cmp	r6, r4
 8007e2a:	d109      	bne.n	8007e40 <__libc_init_array+0x24>
 8007e2c:	4d0b      	ldr	r5, [pc, #44]	; (8007e5c <__libc_init_array+0x40>)
 8007e2e:	4c0c      	ldr	r4, [pc, #48]	; (8007e60 <__libc_init_array+0x44>)
 8007e30:	f000 fc4e 	bl	80086d0 <_init>
 8007e34:	1b64      	subs	r4, r4, r5
 8007e36:	10a4      	asrs	r4, r4, #2
 8007e38:	2600      	movs	r6, #0
 8007e3a:	42a6      	cmp	r6, r4
 8007e3c:	d105      	bne.n	8007e4a <__libc_init_array+0x2e>
 8007e3e:	bd70      	pop	{r4, r5, r6, pc}
 8007e40:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e44:	4798      	blx	r3
 8007e46:	3601      	adds	r6, #1
 8007e48:	e7ee      	b.n	8007e28 <__libc_init_array+0xc>
 8007e4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e4e:	4798      	blx	r3
 8007e50:	3601      	adds	r6, #1
 8007e52:	e7f2      	b.n	8007e3a <__libc_init_array+0x1e>
 8007e54:	08008864 	.word	0x08008864
 8007e58:	08008864 	.word	0x08008864
 8007e5c:	08008864 	.word	0x08008864
 8007e60:	08008868 	.word	0x08008868

08007e64 <memcpy>:
 8007e64:	440a      	add	r2, r1
 8007e66:	4291      	cmp	r1, r2
 8007e68:	f100 33ff 	add.w	r3, r0, #4294967295
 8007e6c:	d100      	bne.n	8007e70 <memcpy+0xc>
 8007e6e:	4770      	bx	lr
 8007e70:	b510      	push	{r4, lr}
 8007e72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e76:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e7a:	4291      	cmp	r1, r2
 8007e7c:	d1f9      	bne.n	8007e72 <memcpy+0xe>
 8007e7e:	bd10      	pop	{r4, pc}

08007e80 <memset>:
 8007e80:	4402      	add	r2, r0
 8007e82:	4603      	mov	r3, r0
 8007e84:	4293      	cmp	r3, r2
 8007e86:	d100      	bne.n	8007e8a <memset+0xa>
 8007e88:	4770      	bx	lr
 8007e8a:	f803 1b01 	strb.w	r1, [r3], #1
 8007e8e:	e7f9      	b.n	8007e84 <memset+0x4>

08007e90 <siprintf>:
 8007e90:	b40e      	push	{r1, r2, r3}
 8007e92:	b500      	push	{lr}
 8007e94:	b09c      	sub	sp, #112	; 0x70
 8007e96:	ab1d      	add	r3, sp, #116	; 0x74
 8007e98:	9002      	str	r0, [sp, #8]
 8007e9a:	9006      	str	r0, [sp, #24]
 8007e9c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007ea0:	4809      	ldr	r0, [pc, #36]	; (8007ec8 <siprintf+0x38>)
 8007ea2:	9107      	str	r1, [sp, #28]
 8007ea4:	9104      	str	r1, [sp, #16]
 8007ea6:	4909      	ldr	r1, [pc, #36]	; (8007ecc <siprintf+0x3c>)
 8007ea8:	f853 2b04 	ldr.w	r2, [r3], #4
 8007eac:	9105      	str	r1, [sp, #20]
 8007eae:	6800      	ldr	r0, [r0, #0]
 8007eb0:	9301      	str	r3, [sp, #4]
 8007eb2:	a902      	add	r1, sp, #8
 8007eb4:	f000 f868 	bl	8007f88 <_svfiprintf_r>
 8007eb8:	9b02      	ldr	r3, [sp, #8]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	701a      	strb	r2, [r3, #0]
 8007ebe:	b01c      	add	sp, #112	; 0x70
 8007ec0:	f85d eb04 	ldr.w	lr, [sp], #4
 8007ec4:	b003      	add	sp, #12
 8007ec6:	4770      	bx	lr
 8007ec8:	20000184 	.word	0x20000184
 8007ecc:	ffff0208 	.word	0xffff0208

08007ed0 <__ssputs_r>:
 8007ed0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ed4:	688e      	ldr	r6, [r1, #8]
 8007ed6:	429e      	cmp	r6, r3
 8007ed8:	4682      	mov	sl, r0
 8007eda:	460c      	mov	r4, r1
 8007edc:	4690      	mov	r8, r2
 8007ede:	461f      	mov	r7, r3
 8007ee0:	d838      	bhi.n	8007f54 <__ssputs_r+0x84>
 8007ee2:	898a      	ldrh	r2, [r1, #12]
 8007ee4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007ee8:	d032      	beq.n	8007f50 <__ssputs_r+0x80>
 8007eea:	6825      	ldr	r5, [r4, #0]
 8007eec:	6909      	ldr	r1, [r1, #16]
 8007eee:	eba5 0901 	sub.w	r9, r5, r1
 8007ef2:	6965      	ldr	r5, [r4, #20]
 8007ef4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007ef8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007efc:	3301      	adds	r3, #1
 8007efe:	444b      	add	r3, r9
 8007f00:	106d      	asrs	r5, r5, #1
 8007f02:	429d      	cmp	r5, r3
 8007f04:	bf38      	it	cc
 8007f06:	461d      	movcc	r5, r3
 8007f08:	0553      	lsls	r3, r2, #21
 8007f0a:	d531      	bpl.n	8007f70 <__ssputs_r+0xa0>
 8007f0c:	4629      	mov	r1, r5
 8007f0e:	f000 fb39 	bl	8008584 <_malloc_r>
 8007f12:	4606      	mov	r6, r0
 8007f14:	b950      	cbnz	r0, 8007f2c <__ssputs_r+0x5c>
 8007f16:	230c      	movs	r3, #12
 8007f18:	f8ca 3000 	str.w	r3, [sl]
 8007f1c:	89a3      	ldrh	r3, [r4, #12]
 8007f1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f22:	81a3      	strh	r3, [r4, #12]
 8007f24:	f04f 30ff 	mov.w	r0, #4294967295
 8007f28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f2c:	6921      	ldr	r1, [r4, #16]
 8007f2e:	464a      	mov	r2, r9
 8007f30:	f7ff ff98 	bl	8007e64 <memcpy>
 8007f34:	89a3      	ldrh	r3, [r4, #12]
 8007f36:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007f3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f3e:	81a3      	strh	r3, [r4, #12]
 8007f40:	6126      	str	r6, [r4, #16]
 8007f42:	6165      	str	r5, [r4, #20]
 8007f44:	444e      	add	r6, r9
 8007f46:	eba5 0509 	sub.w	r5, r5, r9
 8007f4a:	6026      	str	r6, [r4, #0]
 8007f4c:	60a5      	str	r5, [r4, #8]
 8007f4e:	463e      	mov	r6, r7
 8007f50:	42be      	cmp	r6, r7
 8007f52:	d900      	bls.n	8007f56 <__ssputs_r+0x86>
 8007f54:	463e      	mov	r6, r7
 8007f56:	4632      	mov	r2, r6
 8007f58:	6820      	ldr	r0, [r4, #0]
 8007f5a:	4641      	mov	r1, r8
 8007f5c:	f000 faa8 	bl	80084b0 <memmove>
 8007f60:	68a3      	ldr	r3, [r4, #8]
 8007f62:	6822      	ldr	r2, [r4, #0]
 8007f64:	1b9b      	subs	r3, r3, r6
 8007f66:	4432      	add	r2, r6
 8007f68:	60a3      	str	r3, [r4, #8]
 8007f6a:	6022      	str	r2, [r4, #0]
 8007f6c:	2000      	movs	r0, #0
 8007f6e:	e7db      	b.n	8007f28 <__ssputs_r+0x58>
 8007f70:	462a      	mov	r2, r5
 8007f72:	f000 fb61 	bl	8008638 <_realloc_r>
 8007f76:	4606      	mov	r6, r0
 8007f78:	2800      	cmp	r0, #0
 8007f7a:	d1e1      	bne.n	8007f40 <__ssputs_r+0x70>
 8007f7c:	6921      	ldr	r1, [r4, #16]
 8007f7e:	4650      	mov	r0, sl
 8007f80:	f000 fab0 	bl	80084e4 <_free_r>
 8007f84:	e7c7      	b.n	8007f16 <__ssputs_r+0x46>
	...

08007f88 <_svfiprintf_r>:
 8007f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f8c:	4698      	mov	r8, r3
 8007f8e:	898b      	ldrh	r3, [r1, #12]
 8007f90:	061b      	lsls	r3, r3, #24
 8007f92:	b09d      	sub	sp, #116	; 0x74
 8007f94:	4607      	mov	r7, r0
 8007f96:	460d      	mov	r5, r1
 8007f98:	4614      	mov	r4, r2
 8007f9a:	d50e      	bpl.n	8007fba <_svfiprintf_r+0x32>
 8007f9c:	690b      	ldr	r3, [r1, #16]
 8007f9e:	b963      	cbnz	r3, 8007fba <_svfiprintf_r+0x32>
 8007fa0:	2140      	movs	r1, #64	; 0x40
 8007fa2:	f000 faef 	bl	8008584 <_malloc_r>
 8007fa6:	6028      	str	r0, [r5, #0]
 8007fa8:	6128      	str	r0, [r5, #16]
 8007faa:	b920      	cbnz	r0, 8007fb6 <_svfiprintf_r+0x2e>
 8007fac:	230c      	movs	r3, #12
 8007fae:	603b      	str	r3, [r7, #0]
 8007fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8007fb4:	e0d1      	b.n	800815a <_svfiprintf_r+0x1d2>
 8007fb6:	2340      	movs	r3, #64	; 0x40
 8007fb8:	616b      	str	r3, [r5, #20]
 8007fba:	2300      	movs	r3, #0
 8007fbc:	9309      	str	r3, [sp, #36]	; 0x24
 8007fbe:	2320      	movs	r3, #32
 8007fc0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007fc4:	f8cd 800c 	str.w	r8, [sp, #12]
 8007fc8:	2330      	movs	r3, #48	; 0x30
 8007fca:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008174 <_svfiprintf_r+0x1ec>
 8007fce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007fd2:	f04f 0901 	mov.w	r9, #1
 8007fd6:	4623      	mov	r3, r4
 8007fd8:	469a      	mov	sl, r3
 8007fda:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007fde:	b10a      	cbz	r2, 8007fe4 <_svfiprintf_r+0x5c>
 8007fe0:	2a25      	cmp	r2, #37	; 0x25
 8007fe2:	d1f9      	bne.n	8007fd8 <_svfiprintf_r+0x50>
 8007fe4:	ebba 0b04 	subs.w	fp, sl, r4
 8007fe8:	d00b      	beq.n	8008002 <_svfiprintf_r+0x7a>
 8007fea:	465b      	mov	r3, fp
 8007fec:	4622      	mov	r2, r4
 8007fee:	4629      	mov	r1, r5
 8007ff0:	4638      	mov	r0, r7
 8007ff2:	f7ff ff6d 	bl	8007ed0 <__ssputs_r>
 8007ff6:	3001      	adds	r0, #1
 8007ff8:	f000 80aa 	beq.w	8008150 <_svfiprintf_r+0x1c8>
 8007ffc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ffe:	445a      	add	r2, fp
 8008000:	9209      	str	r2, [sp, #36]	; 0x24
 8008002:	f89a 3000 	ldrb.w	r3, [sl]
 8008006:	2b00      	cmp	r3, #0
 8008008:	f000 80a2 	beq.w	8008150 <_svfiprintf_r+0x1c8>
 800800c:	2300      	movs	r3, #0
 800800e:	f04f 32ff 	mov.w	r2, #4294967295
 8008012:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008016:	f10a 0a01 	add.w	sl, sl, #1
 800801a:	9304      	str	r3, [sp, #16]
 800801c:	9307      	str	r3, [sp, #28]
 800801e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008022:	931a      	str	r3, [sp, #104]	; 0x68
 8008024:	4654      	mov	r4, sl
 8008026:	2205      	movs	r2, #5
 8008028:	f814 1b01 	ldrb.w	r1, [r4], #1
 800802c:	4851      	ldr	r0, [pc, #324]	; (8008174 <_svfiprintf_r+0x1ec>)
 800802e:	f7f8 f8ff 	bl	8000230 <memchr>
 8008032:	9a04      	ldr	r2, [sp, #16]
 8008034:	b9d8      	cbnz	r0, 800806e <_svfiprintf_r+0xe6>
 8008036:	06d0      	lsls	r0, r2, #27
 8008038:	bf44      	itt	mi
 800803a:	2320      	movmi	r3, #32
 800803c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008040:	0711      	lsls	r1, r2, #28
 8008042:	bf44      	itt	mi
 8008044:	232b      	movmi	r3, #43	; 0x2b
 8008046:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800804a:	f89a 3000 	ldrb.w	r3, [sl]
 800804e:	2b2a      	cmp	r3, #42	; 0x2a
 8008050:	d015      	beq.n	800807e <_svfiprintf_r+0xf6>
 8008052:	9a07      	ldr	r2, [sp, #28]
 8008054:	4654      	mov	r4, sl
 8008056:	2000      	movs	r0, #0
 8008058:	f04f 0c0a 	mov.w	ip, #10
 800805c:	4621      	mov	r1, r4
 800805e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008062:	3b30      	subs	r3, #48	; 0x30
 8008064:	2b09      	cmp	r3, #9
 8008066:	d94e      	bls.n	8008106 <_svfiprintf_r+0x17e>
 8008068:	b1b0      	cbz	r0, 8008098 <_svfiprintf_r+0x110>
 800806a:	9207      	str	r2, [sp, #28]
 800806c:	e014      	b.n	8008098 <_svfiprintf_r+0x110>
 800806e:	eba0 0308 	sub.w	r3, r0, r8
 8008072:	fa09 f303 	lsl.w	r3, r9, r3
 8008076:	4313      	orrs	r3, r2
 8008078:	9304      	str	r3, [sp, #16]
 800807a:	46a2      	mov	sl, r4
 800807c:	e7d2      	b.n	8008024 <_svfiprintf_r+0x9c>
 800807e:	9b03      	ldr	r3, [sp, #12]
 8008080:	1d19      	adds	r1, r3, #4
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	9103      	str	r1, [sp, #12]
 8008086:	2b00      	cmp	r3, #0
 8008088:	bfbb      	ittet	lt
 800808a:	425b      	neglt	r3, r3
 800808c:	f042 0202 	orrlt.w	r2, r2, #2
 8008090:	9307      	strge	r3, [sp, #28]
 8008092:	9307      	strlt	r3, [sp, #28]
 8008094:	bfb8      	it	lt
 8008096:	9204      	strlt	r2, [sp, #16]
 8008098:	7823      	ldrb	r3, [r4, #0]
 800809a:	2b2e      	cmp	r3, #46	; 0x2e
 800809c:	d10c      	bne.n	80080b8 <_svfiprintf_r+0x130>
 800809e:	7863      	ldrb	r3, [r4, #1]
 80080a0:	2b2a      	cmp	r3, #42	; 0x2a
 80080a2:	d135      	bne.n	8008110 <_svfiprintf_r+0x188>
 80080a4:	9b03      	ldr	r3, [sp, #12]
 80080a6:	1d1a      	adds	r2, r3, #4
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	9203      	str	r2, [sp, #12]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	bfb8      	it	lt
 80080b0:	f04f 33ff 	movlt.w	r3, #4294967295
 80080b4:	3402      	adds	r4, #2
 80080b6:	9305      	str	r3, [sp, #20]
 80080b8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008184 <_svfiprintf_r+0x1fc>
 80080bc:	7821      	ldrb	r1, [r4, #0]
 80080be:	2203      	movs	r2, #3
 80080c0:	4650      	mov	r0, sl
 80080c2:	f7f8 f8b5 	bl	8000230 <memchr>
 80080c6:	b140      	cbz	r0, 80080da <_svfiprintf_r+0x152>
 80080c8:	2340      	movs	r3, #64	; 0x40
 80080ca:	eba0 000a 	sub.w	r0, r0, sl
 80080ce:	fa03 f000 	lsl.w	r0, r3, r0
 80080d2:	9b04      	ldr	r3, [sp, #16]
 80080d4:	4303      	orrs	r3, r0
 80080d6:	3401      	adds	r4, #1
 80080d8:	9304      	str	r3, [sp, #16]
 80080da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080de:	4826      	ldr	r0, [pc, #152]	; (8008178 <_svfiprintf_r+0x1f0>)
 80080e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80080e4:	2206      	movs	r2, #6
 80080e6:	f7f8 f8a3 	bl	8000230 <memchr>
 80080ea:	2800      	cmp	r0, #0
 80080ec:	d038      	beq.n	8008160 <_svfiprintf_r+0x1d8>
 80080ee:	4b23      	ldr	r3, [pc, #140]	; (800817c <_svfiprintf_r+0x1f4>)
 80080f0:	bb1b      	cbnz	r3, 800813a <_svfiprintf_r+0x1b2>
 80080f2:	9b03      	ldr	r3, [sp, #12]
 80080f4:	3307      	adds	r3, #7
 80080f6:	f023 0307 	bic.w	r3, r3, #7
 80080fa:	3308      	adds	r3, #8
 80080fc:	9303      	str	r3, [sp, #12]
 80080fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008100:	4433      	add	r3, r6
 8008102:	9309      	str	r3, [sp, #36]	; 0x24
 8008104:	e767      	b.n	8007fd6 <_svfiprintf_r+0x4e>
 8008106:	fb0c 3202 	mla	r2, ip, r2, r3
 800810a:	460c      	mov	r4, r1
 800810c:	2001      	movs	r0, #1
 800810e:	e7a5      	b.n	800805c <_svfiprintf_r+0xd4>
 8008110:	2300      	movs	r3, #0
 8008112:	3401      	adds	r4, #1
 8008114:	9305      	str	r3, [sp, #20]
 8008116:	4619      	mov	r1, r3
 8008118:	f04f 0c0a 	mov.w	ip, #10
 800811c:	4620      	mov	r0, r4
 800811e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008122:	3a30      	subs	r2, #48	; 0x30
 8008124:	2a09      	cmp	r2, #9
 8008126:	d903      	bls.n	8008130 <_svfiprintf_r+0x1a8>
 8008128:	2b00      	cmp	r3, #0
 800812a:	d0c5      	beq.n	80080b8 <_svfiprintf_r+0x130>
 800812c:	9105      	str	r1, [sp, #20]
 800812e:	e7c3      	b.n	80080b8 <_svfiprintf_r+0x130>
 8008130:	fb0c 2101 	mla	r1, ip, r1, r2
 8008134:	4604      	mov	r4, r0
 8008136:	2301      	movs	r3, #1
 8008138:	e7f0      	b.n	800811c <_svfiprintf_r+0x194>
 800813a:	ab03      	add	r3, sp, #12
 800813c:	9300      	str	r3, [sp, #0]
 800813e:	462a      	mov	r2, r5
 8008140:	4b0f      	ldr	r3, [pc, #60]	; (8008180 <_svfiprintf_r+0x1f8>)
 8008142:	a904      	add	r1, sp, #16
 8008144:	4638      	mov	r0, r7
 8008146:	f3af 8000 	nop.w
 800814a:	1c42      	adds	r2, r0, #1
 800814c:	4606      	mov	r6, r0
 800814e:	d1d6      	bne.n	80080fe <_svfiprintf_r+0x176>
 8008150:	89ab      	ldrh	r3, [r5, #12]
 8008152:	065b      	lsls	r3, r3, #25
 8008154:	f53f af2c 	bmi.w	8007fb0 <_svfiprintf_r+0x28>
 8008158:	9809      	ldr	r0, [sp, #36]	; 0x24
 800815a:	b01d      	add	sp, #116	; 0x74
 800815c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008160:	ab03      	add	r3, sp, #12
 8008162:	9300      	str	r3, [sp, #0]
 8008164:	462a      	mov	r2, r5
 8008166:	4b06      	ldr	r3, [pc, #24]	; (8008180 <_svfiprintf_r+0x1f8>)
 8008168:	a904      	add	r1, sp, #16
 800816a:	4638      	mov	r0, r7
 800816c:	f000 f87a 	bl	8008264 <_printf_i>
 8008170:	e7eb      	b.n	800814a <_svfiprintf_r+0x1c2>
 8008172:	bf00      	nop
 8008174:	08008826 	.word	0x08008826
 8008178:	08008830 	.word	0x08008830
 800817c:	00000000 	.word	0x00000000
 8008180:	08007ed1 	.word	0x08007ed1
 8008184:	0800882c 	.word	0x0800882c

08008188 <_printf_common>:
 8008188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800818c:	4616      	mov	r6, r2
 800818e:	4699      	mov	r9, r3
 8008190:	688a      	ldr	r2, [r1, #8]
 8008192:	690b      	ldr	r3, [r1, #16]
 8008194:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008198:	4293      	cmp	r3, r2
 800819a:	bfb8      	it	lt
 800819c:	4613      	movlt	r3, r2
 800819e:	6033      	str	r3, [r6, #0]
 80081a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80081a4:	4607      	mov	r7, r0
 80081a6:	460c      	mov	r4, r1
 80081a8:	b10a      	cbz	r2, 80081ae <_printf_common+0x26>
 80081aa:	3301      	adds	r3, #1
 80081ac:	6033      	str	r3, [r6, #0]
 80081ae:	6823      	ldr	r3, [r4, #0]
 80081b0:	0699      	lsls	r1, r3, #26
 80081b2:	bf42      	ittt	mi
 80081b4:	6833      	ldrmi	r3, [r6, #0]
 80081b6:	3302      	addmi	r3, #2
 80081b8:	6033      	strmi	r3, [r6, #0]
 80081ba:	6825      	ldr	r5, [r4, #0]
 80081bc:	f015 0506 	ands.w	r5, r5, #6
 80081c0:	d106      	bne.n	80081d0 <_printf_common+0x48>
 80081c2:	f104 0a19 	add.w	sl, r4, #25
 80081c6:	68e3      	ldr	r3, [r4, #12]
 80081c8:	6832      	ldr	r2, [r6, #0]
 80081ca:	1a9b      	subs	r3, r3, r2
 80081cc:	42ab      	cmp	r3, r5
 80081ce:	dc26      	bgt.n	800821e <_printf_common+0x96>
 80081d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80081d4:	1e13      	subs	r3, r2, #0
 80081d6:	6822      	ldr	r2, [r4, #0]
 80081d8:	bf18      	it	ne
 80081da:	2301      	movne	r3, #1
 80081dc:	0692      	lsls	r2, r2, #26
 80081de:	d42b      	bmi.n	8008238 <_printf_common+0xb0>
 80081e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80081e4:	4649      	mov	r1, r9
 80081e6:	4638      	mov	r0, r7
 80081e8:	47c0      	blx	r8
 80081ea:	3001      	adds	r0, #1
 80081ec:	d01e      	beq.n	800822c <_printf_common+0xa4>
 80081ee:	6823      	ldr	r3, [r4, #0]
 80081f0:	68e5      	ldr	r5, [r4, #12]
 80081f2:	6832      	ldr	r2, [r6, #0]
 80081f4:	f003 0306 	and.w	r3, r3, #6
 80081f8:	2b04      	cmp	r3, #4
 80081fa:	bf08      	it	eq
 80081fc:	1aad      	subeq	r5, r5, r2
 80081fe:	68a3      	ldr	r3, [r4, #8]
 8008200:	6922      	ldr	r2, [r4, #16]
 8008202:	bf0c      	ite	eq
 8008204:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008208:	2500      	movne	r5, #0
 800820a:	4293      	cmp	r3, r2
 800820c:	bfc4      	itt	gt
 800820e:	1a9b      	subgt	r3, r3, r2
 8008210:	18ed      	addgt	r5, r5, r3
 8008212:	2600      	movs	r6, #0
 8008214:	341a      	adds	r4, #26
 8008216:	42b5      	cmp	r5, r6
 8008218:	d11a      	bne.n	8008250 <_printf_common+0xc8>
 800821a:	2000      	movs	r0, #0
 800821c:	e008      	b.n	8008230 <_printf_common+0xa8>
 800821e:	2301      	movs	r3, #1
 8008220:	4652      	mov	r2, sl
 8008222:	4649      	mov	r1, r9
 8008224:	4638      	mov	r0, r7
 8008226:	47c0      	blx	r8
 8008228:	3001      	adds	r0, #1
 800822a:	d103      	bne.n	8008234 <_printf_common+0xac>
 800822c:	f04f 30ff 	mov.w	r0, #4294967295
 8008230:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008234:	3501      	adds	r5, #1
 8008236:	e7c6      	b.n	80081c6 <_printf_common+0x3e>
 8008238:	18e1      	adds	r1, r4, r3
 800823a:	1c5a      	adds	r2, r3, #1
 800823c:	2030      	movs	r0, #48	; 0x30
 800823e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008242:	4422      	add	r2, r4
 8008244:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008248:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800824c:	3302      	adds	r3, #2
 800824e:	e7c7      	b.n	80081e0 <_printf_common+0x58>
 8008250:	2301      	movs	r3, #1
 8008252:	4622      	mov	r2, r4
 8008254:	4649      	mov	r1, r9
 8008256:	4638      	mov	r0, r7
 8008258:	47c0      	blx	r8
 800825a:	3001      	adds	r0, #1
 800825c:	d0e6      	beq.n	800822c <_printf_common+0xa4>
 800825e:	3601      	adds	r6, #1
 8008260:	e7d9      	b.n	8008216 <_printf_common+0x8e>
	...

08008264 <_printf_i>:
 8008264:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008268:	460c      	mov	r4, r1
 800826a:	4691      	mov	r9, r2
 800826c:	7e27      	ldrb	r7, [r4, #24]
 800826e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008270:	2f78      	cmp	r7, #120	; 0x78
 8008272:	4680      	mov	r8, r0
 8008274:	469a      	mov	sl, r3
 8008276:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800827a:	d807      	bhi.n	800828c <_printf_i+0x28>
 800827c:	2f62      	cmp	r7, #98	; 0x62
 800827e:	d80a      	bhi.n	8008296 <_printf_i+0x32>
 8008280:	2f00      	cmp	r7, #0
 8008282:	f000 80d8 	beq.w	8008436 <_printf_i+0x1d2>
 8008286:	2f58      	cmp	r7, #88	; 0x58
 8008288:	f000 80a3 	beq.w	80083d2 <_printf_i+0x16e>
 800828c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008290:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008294:	e03a      	b.n	800830c <_printf_i+0xa8>
 8008296:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800829a:	2b15      	cmp	r3, #21
 800829c:	d8f6      	bhi.n	800828c <_printf_i+0x28>
 800829e:	a001      	add	r0, pc, #4	; (adr r0, 80082a4 <_printf_i+0x40>)
 80082a0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80082a4:	080082fd 	.word	0x080082fd
 80082a8:	08008311 	.word	0x08008311
 80082ac:	0800828d 	.word	0x0800828d
 80082b0:	0800828d 	.word	0x0800828d
 80082b4:	0800828d 	.word	0x0800828d
 80082b8:	0800828d 	.word	0x0800828d
 80082bc:	08008311 	.word	0x08008311
 80082c0:	0800828d 	.word	0x0800828d
 80082c4:	0800828d 	.word	0x0800828d
 80082c8:	0800828d 	.word	0x0800828d
 80082cc:	0800828d 	.word	0x0800828d
 80082d0:	0800841d 	.word	0x0800841d
 80082d4:	08008341 	.word	0x08008341
 80082d8:	080083ff 	.word	0x080083ff
 80082dc:	0800828d 	.word	0x0800828d
 80082e0:	0800828d 	.word	0x0800828d
 80082e4:	0800843f 	.word	0x0800843f
 80082e8:	0800828d 	.word	0x0800828d
 80082ec:	08008341 	.word	0x08008341
 80082f0:	0800828d 	.word	0x0800828d
 80082f4:	0800828d 	.word	0x0800828d
 80082f8:	08008407 	.word	0x08008407
 80082fc:	680b      	ldr	r3, [r1, #0]
 80082fe:	1d1a      	adds	r2, r3, #4
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	600a      	str	r2, [r1, #0]
 8008304:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008308:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800830c:	2301      	movs	r3, #1
 800830e:	e0a3      	b.n	8008458 <_printf_i+0x1f4>
 8008310:	6825      	ldr	r5, [r4, #0]
 8008312:	6808      	ldr	r0, [r1, #0]
 8008314:	062e      	lsls	r6, r5, #24
 8008316:	f100 0304 	add.w	r3, r0, #4
 800831a:	d50a      	bpl.n	8008332 <_printf_i+0xce>
 800831c:	6805      	ldr	r5, [r0, #0]
 800831e:	600b      	str	r3, [r1, #0]
 8008320:	2d00      	cmp	r5, #0
 8008322:	da03      	bge.n	800832c <_printf_i+0xc8>
 8008324:	232d      	movs	r3, #45	; 0x2d
 8008326:	426d      	negs	r5, r5
 8008328:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800832c:	485e      	ldr	r0, [pc, #376]	; (80084a8 <_printf_i+0x244>)
 800832e:	230a      	movs	r3, #10
 8008330:	e019      	b.n	8008366 <_printf_i+0x102>
 8008332:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008336:	6805      	ldr	r5, [r0, #0]
 8008338:	600b      	str	r3, [r1, #0]
 800833a:	bf18      	it	ne
 800833c:	b22d      	sxthne	r5, r5
 800833e:	e7ef      	b.n	8008320 <_printf_i+0xbc>
 8008340:	680b      	ldr	r3, [r1, #0]
 8008342:	6825      	ldr	r5, [r4, #0]
 8008344:	1d18      	adds	r0, r3, #4
 8008346:	6008      	str	r0, [r1, #0]
 8008348:	0628      	lsls	r0, r5, #24
 800834a:	d501      	bpl.n	8008350 <_printf_i+0xec>
 800834c:	681d      	ldr	r5, [r3, #0]
 800834e:	e002      	b.n	8008356 <_printf_i+0xf2>
 8008350:	0669      	lsls	r1, r5, #25
 8008352:	d5fb      	bpl.n	800834c <_printf_i+0xe8>
 8008354:	881d      	ldrh	r5, [r3, #0]
 8008356:	4854      	ldr	r0, [pc, #336]	; (80084a8 <_printf_i+0x244>)
 8008358:	2f6f      	cmp	r7, #111	; 0x6f
 800835a:	bf0c      	ite	eq
 800835c:	2308      	moveq	r3, #8
 800835e:	230a      	movne	r3, #10
 8008360:	2100      	movs	r1, #0
 8008362:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008366:	6866      	ldr	r6, [r4, #4]
 8008368:	60a6      	str	r6, [r4, #8]
 800836a:	2e00      	cmp	r6, #0
 800836c:	bfa2      	ittt	ge
 800836e:	6821      	ldrge	r1, [r4, #0]
 8008370:	f021 0104 	bicge.w	r1, r1, #4
 8008374:	6021      	strge	r1, [r4, #0]
 8008376:	b90d      	cbnz	r5, 800837c <_printf_i+0x118>
 8008378:	2e00      	cmp	r6, #0
 800837a:	d04d      	beq.n	8008418 <_printf_i+0x1b4>
 800837c:	4616      	mov	r6, r2
 800837e:	fbb5 f1f3 	udiv	r1, r5, r3
 8008382:	fb03 5711 	mls	r7, r3, r1, r5
 8008386:	5dc7      	ldrb	r7, [r0, r7]
 8008388:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800838c:	462f      	mov	r7, r5
 800838e:	42bb      	cmp	r3, r7
 8008390:	460d      	mov	r5, r1
 8008392:	d9f4      	bls.n	800837e <_printf_i+0x11a>
 8008394:	2b08      	cmp	r3, #8
 8008396:	d10b      	bne.n	80083b0 <_printf_i+0x14c>
 8008398:	6823      	ldr	r3, [r4, #0]
 800839a:	07df      	lsls	r7, r3, #31
 800839c:	d508      	bpl.n	80083b0 <_printf_i+0x14c>
 800839e:	6923      	ldr	r3, [r4, #16]
 80083a0:	6861      	ldr	r1, [r4, #4]
 80083a2:	4299      	cmp	r1, r3
 80083a4:	bfde      	ittt	le
 80083a6:	2330      	movle	r3, #48	; 0x30
 80083a8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80083ac:	f106 36ff 	addle.w	r6, r6, #4294967295
 80083b0:	1b92      	subs	r2, r2, r6
 80083b2:	6122      	str	r2, [r4, #16]
 80083b4:	f8cd a000 	str.w	sl, [sp]
 80083b8:	464b      	mov	r3, r9
 80083ba:	aa03      	add	r2, sp, #12
 80083bc:	4621      	mov	r1, r4
 80083be:	4640      	mov	r0, r8
 80083c0:	f7ff fee2 	bl	8008188 <_printf_common>
 80083c4:	3001      	adds	r0, #1
 80083c6:	d14c      	bne.n	8008462 <_printf_i+0x1fe>
 80083c8:	f04f 30ff 	mov.w	r0, #4294967295
 80083cc:	b004      	add	sp, #16
 80083ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083d2:	4835      	ldr	r0, [pc, #212]	; (80084a8 <_printf_i+0x244>)
 80083d4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80083d8:	6823      	ldr	r3, [r4, #0]
 80083da:	680e      	ldr	r6, [r1, #0]
 80083dc:	061f      	lsls	r7, r3, #24
 80083de:	f856 5b04 	ldr.w	r5, [r6], #4
 80083e2:	600e      	str	r6, [r1, #0]
 80083e4:	d514      	bpl.n	8008410 <_printf_i+0x1ac>
 80083e6:	07d9      	lsls	r1, r3, #31
 80083e8:	bf44      	itt	mi
 80083ea:	f043 0320 	orrmi.w	r3, r3, #32
 80083ee:	6023      	strmi	r3, [r4, #0]
 80083f0:	b91d      	cbnz	r5, 80083fa <_printf_i+0x196>
 80083f2:	6823      	ldr	r3, [r4, #0]
 80083f4:	f023 0320 	bic.w	r3, r3, #32
 80083f8:	6023      	str	r3, [r4, #0]
 80083fa:	2310      	movs	r3, #16
 80083fc:	e7b0      	b.n	8008360 <_printf_i+0xfc>
 80083fe:	6823      	ldr	r3, [r4, #0]
 8008400:	f043 0320 	orr.w	r3, r3, #32
 8008404:	6023      	str	r3, [r4, #0]
 8008406:	2378      	movs	r3, #120	; 0x78
 8008408:	4828      	ldr	r0, [pc, #160]	; (80084ac <_printf_i+0x248>)
 800840a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800840e:	e7e3      	b.n	80083d8 <_printf_i+0x174>
 8008410:	065e      	lsls	r6, r3, #25
 8008412:	bf48      	it	mi
 8008414:	b2ad      	uxthmi	r5, r5
 8008416:	e7e6      	b.n	80083e6 <_printf_i+0x182>
 8008418:	4616      	mov	r6, r2
 800841a:	e7bb      	b.n	8008394 <_printf_i+0x130>
 800841c:	680b      	ldr	r3, [r1, #0]
 800841e:	6826      	ldr	r6, [r4, #0]
 8008420:	6960      	ldr	r0, [r4, #20]
 8008422:	1d1d      	adds	r5, r3, #4
 8008424:	600d      	str	r5, [r1, #0]
 8008426:	0635      	lsls	r5, r6, #24
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	d501      	bpl.n	8008430 <_printf_i+0x1cc>
 800842c:	6018      	str	r0, [r3, #0]
 800842e:	e002      	b.n	8008436 <_printf_i+0x1d2>
 8008430:	0671      	lsls	r1, r6, #25
 8008432:	d5fb      	bpl.n	800842c <_printf_i+0x1c8>
 8008434:	8018      	strh	r0, [r3, #0]
 8008436:	2300      	movs	r3, #0
 8008438:	6123      	str	r3, [r4, #16]
 800843a:	4616      	mov	r6, r2
 800843c:	e7ba      	b.n	80083b4 <_printf_i+0x150>
 800843e:	680b      	ldr	r3, [r1, #0]
 8008440:	1d1a      	adds	r2, r3, #4
 8008442:	600a      	str	r2, [r1, #0]
 8008444:	681e      	ldr	r6, [r3, #0]
 8008446:	6862      	ldr	r2, [r4, #4]
 8008448:	2100      	movs	r1, #0
 800844a:	4630      	mov	r0, r6
 800844c:	f7f7 fef0 	bl	8000230 <memchr>
 8008450:	b108      	cbz	r0, 8008456 <_printf_i+0x1f2>
 8008452:	1b80      	subs	r0, r0, r6
 8008454:	6060      	str	r0, [r4, #4]
 8008456:	6863      	ldr	r3, [r4, #4]
 8008458:	6123      	str	r3, [r4, #16]
 800845a:	2300      	movs	r3, #0
 800845c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008460:	e7a8      	b.n	80083b4 <_printf_i+0x150>
 8008462:	6923      	ldr	r3, [r4, #16]
 8008464:	4632      	mov	r2, r6
 8008466:	4649      	mov	r1, r9
 8008468:	4640      	mov	r0, r8
 800846a:	47d0      	blx	sl
 800846c:	3001      	adds	r0, #1
 800846e:	d0ab      	beq.n	80083c8 <_printf_i+0x164>
 8008470:	6823      	ldr	r3, [r4, #0]
 8008472:	079b      	lsls	r3, r3, #30
 8008474:	d413      	bmi.n	800849e <_printf_i+0x23a>
 8008476:	68e0      	ldr	r0, [r4, #12]
 8008478:	9b03      	ldr	r3, [sp, #12]
 800847a:	4298      	cmp	r0, r3
 800847c:	bfb8      	it	lt
 800847e:	4618      	movlt	r0, r3
 8008480:	e7a4      	b.n	80083cc <_printf_i+0x168>
 8008482:	2301      	movs	r3, #1
 8008484:	4632      	mov	r2, r6
 8008486:	4649      	mov	r1, r9
 8008488:	4640      	mov	r0, r8
 800848a:	47d0      	blx	sl
 800848c:	3001      	adds	r0, #1
 800848e:	d09b      	beq.n	80083c8 <_printf_i+0x164>
 8008490:	3501      	adds	r5, #1
 8008492:	68e3      	ldr	r3, [r4, #12]
 8008494:	9903      	ldr	r1, [sp, #12]
 8008496:	1a5b      	subs	r3, r3, r1
 8008498:	42ab      	cmp	r3, r5
 800849a:	dcf2      	bgt.n	8008482 <_printf_i+0x21e>
 800849c:	e7eb      	b.n	8008476 <_printf_i+0x212>
 800849e:	2500      	movs	r5, #0
 80084a0:	f104 0619 	add.w	r6, r4, #25
 80084a4:	e7f5      	b.n	8008492 <_printf_i+0x22e>
 80084a6:	bf00      	nop
 80084a8:	08008837 	.word	0x08008837
 80084ac:	08008848 	.word	0x08008848

080084b0 <memmove>:
 80084b0:	4288      	cmp	r0, r1
 80084b2:	b510      	push	{r4, lr}
 80084b4:	eb01 0402 	add.w	r4, r1, r2
 80084b8:	d902      	bls.n	80084c0 <memmove+0x10>
 80084ba:	4284      	cmp	r4, r0
 80084bc:	4623      	mov	r3, r4
 80084be:	d807      	bhi.n	80084d0 <memmove+0x20>
 80084c0:	1e43      	subs	r3, r0, #1
 80084c2:	42a1      	cmp	r1, r4
 80084c4:	d008      	beq.n	80084d8 <memmove+0x28>
 80084c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80084ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 80084ce:	e7f8      	b.n	80084c2 <memmove+0x12>
 80084d0:	4402      	add	r2, r0
 80084d2:	4601      	mov	r1, r0
 80084d4:	428a      	cmp	r2, r1
 80084d6:	d100      	bne.n	80084da <memmove+0x2a>
 80084d8:	bd10      	pop	{r4, pc}
 80084da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80084de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80084e2:	e7f7      	b.n	80084d4 <memmove+0x24>

080084e4 <_free_r>:
 80084e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80084e6:	2900      	cmp	r1, #0
 80084e8:	d048      	beq.n	800857c <_free_r+0x98>
 80084ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80084ee:	9001      	str	r0, [sp, #4]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	f1a1 0404 	sub.w	r4, r1, #4
 80084f6:	bfb8      	it	lt
 80084f8:	18e4      	addlt	r4, r4, r3
 80084fa:	f000 f8d3 	bl	80086a4 <__malloc_lock>
 80084fe:	4a20      	ldr	r2, [pc, #128]	; (8008580 <_free_r+0x9c>)
 8008500:	9801      	ldr	r0, [sp, #4]
 8008502:	6813      	ldr	r3, [r2, #0]
 8008504:	4615      	mov	r5, r2
 8008506:	b933      	cbnz	r3, 8008516 <_free_r+0x32>
 8008508:	6063      	str	r3, [r4, #4]
 800850a:	6014      	str	r4, [r2, #0]
 800850c:	b003      	add	sp, #12
 800850e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008512:	f000 b8cd 	b.w	80086b0 <__malloc_unlock>
 8008516:	42a3      	cmp	r3, r4
 8008518:	d90b      	bls.n	8008532 <_free_r+0x4e>
 800851a:	6821      	ldr	r1, [r4, #0]
 800851c:	1862      	adds	r2, r4, r1
 800851e:	4293      	cmp	r3, r2
 8008520:	bf04      	itt	eq
 8008522:	681a      	ldreq	r2, [r3, #0]
 8008524:	685b      	ldreq	r3, [r3, #4]
 8008526:	6063      	str	r3, [r4, #4]
 8008528:	bf04      	itt	eq
 800852a:	1852      	addeq	r2, r2, r1
 800852c:	6022      	streq	r2, [r4, #0]
 800852e:	602c      	str	r4, [r5, #0]
 8008530:	e7ec      	b.n	800850c <_free_r+0x28>
 8008532:	461a      	mov	r2, r3
 8008534:	685b      	ldr	r3, [r3, #4]
 8008536:	b10b      	cbz	r3, 800853c <_free_r+0x58>
 8008538:	42a3      	cmp	r3, r4
 800853a:	d9fa      	bls.n	8008532 <_free_r+0x4e>
 800853c:	6811      	ldr	r1, [r2, #0]
 800853e:	1855      	adds	r5, r2, r1
 8008540:	42a5      	cmp	r5, r4
 8008542:	d10b      	bne.n	800855c <_free_r+0x78>
 8008544:	6824      	ldr	r4, [r4, #0]
 8008546:	4421      	add	r1, r4
 8008548:	1854      	adds	r4, r2, r1
 800854a:	42a3      	cmp	r3, r4
 800854c:	6011      	str	r1, [r2, #0]
 800854e:	d1dd      	bne.n	800850c <_free_r+0x28>
 8008550:	681c      	ldr	r4, [r3, #0]
 8008552:	685b      	ldr	r3, [r3, #4]
 8008554:	6053      	str	r3, [r2, #4]
 8008556:	4421      	add	r1, r4
 8008558:	6011      	str	r1, [r2, #0]
 800855a:	e7d7      	b.n	800850c <_free_r+0x28>
 800855c:	d902      	bls.n	8008564 <_free_r+0x80>
 800855e:	230c      	movs	r3, #12
 8008560:	6003      	str	r3, [r0, #0]
 8008562:	e7d3      	b.n	800850c <_free_r+0x28>
 8008564:	6825      	ldr	r5, [r4, #0]
 8008566:	1961      	adds	r1, r4, r5
 8008568:	428b      	cmp	r3, r1
 800856a:	bf04      	itt	eq
 800856c:	6819      	ldreq	r1, [r3, #0]
 800856e:	685b      	ldreq	r3, [r3, #4]
 8008570:	6063      	str	r3, [r4, #4]
 8008572:	bf04      	itt	eq
 8008574:	1949      	addeq	r1, r1, r5
 8008576:	6021      	streq	r1, [r4, #0]
 8008578:	6054      	str	r4, [r2, #4]
 800857a:	e7c7      	b.n	800850c <_free_r+0x28>
 800857c:	b003      	add	sp, #12
 800857e:	bd30      	pop	{r4, r5, pc}
 8008580:	2000042c 	.word	0x2000042c

08008584 <_malloc_r>:
 8008584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008586:	1ccd      	adds	r5, r1, #3
 8008588:	f025 0503 	bic.w	r5, r5, #3
 800858c:	3508      	adds	r5, #8
 800858e:	2d0c      	cmp	r5, #12
 8008590:	bf38      	it	cc
 8008592:	250c      	movcc	r5, #12
 8008594:	2d00      	cmp	r5, #0
 8008596:	4606      	mov	r6, r0
 8008598:	db01      	blt.n	800859e <_malloc_r+0x1a>
 800859a:	42a9      	cmp	r1, r5
 800859c:	d903      	bls.n	80085a6 <_malloc_r+0x22>
 800859e:	230c      	movs	r3, #12
 80085a0:	6033      	str	r3, [r6, #0]
 80085a2:	2000      	movs	r0, #0
 80085a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085a6:	f000 f87d 	bl	80086a4 <__malloc_lock>
 80085aa:	4921      	ldr	r1, [pc, #132]	; (8008630 <_malloc_r+0xac>)
 80085ac:	680a      	ldr	r2, [r1, #0]
 80085ae:	4614      	mov	r4, r2
 80085b0:	b99c      	cbnz	r4, 80085da <_malloc_r+0x56>
 80085b2:	4f20      	ldr	r7, [pc, #128]	; (8008634 <_malloc_r+0xb0>)
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	b923      	cbnz	r3, 80085c2 <_malloc_r+0x3e>
 80085b8:	4621      	mov	r1, r4
 80085ba:	4630      	mov	r0, r6
 80085bc:	f000 f862 	bl	8008684 <_sbrk_r>
 80085c0:	6038      	str	r0, [r7, #0]
 80085c2:	4629      	mov	r1, r5
 80085c4:	4630      	mov	r0, r6
 80085c6:	f000 f85d 	bl	8008684 <_sbrk_r>
 80085ca:	1c43      	adds	r3, r0, #1
 80085cc:	d123      	bne.n	8008616 <_malloc_r+0x92>
 80085ce:	230c      	movs	r3, #12
 80085d0:	6033      	str	r3, [r6, #0]
 80085d2:	4630      	mov	r0, r6
 80085d4:	f000 f86c 	bl	80086b0 <__malloc_unlock>
 80085d8:	e7e3      	b.n	80085a2 <_malloc_r+0x1e>
 80085da:	6823      	ldr	r3, [r4, #0]
 80085dc:	1b5b      	subs	r3, r3, r5
 80085de:	d417      	bmi.n	8008610 <_malloc_r+0x8c>
 80085e0:	2b0b      	cmp	r3, #11
 80085e2:	d903      	bls.n	80085ec <_malloc_r+0x68>
 80085e4:	6023      	str	r3, [r4, #0]
 80085e6:	441c      	add	r4, r3
 80085e8:	6025      	str	r5, [r4, #0]
 80085ea:	e004      	b.n	80085f6 <_malloc_r+0x72>
 80085ec:	6863      	ldr	r3, [r4, #4]
 80085ee:	42a2      	cmp	r2, r4
 80085f0:	bf0c      	ite	eq
 80085f2:	600b      	streq	r3, [r1, #0]
 80085f4:	6053      	strne	r3, [r2, #4]
 80085f6:	4630      	mov	r0, r6
 80085f8:	f000 f85a 	bl	80086b0 <__malloc_unlock>
 80085fc:	f104 000b 	add.w	r0, r4, #11
 8008600:	1d23      	adds	r3, r4, #4
 8008602:	f020 0007 	bic.w	r0, r0, #7
 8008606:	1ac2      	subs	r2, r0, r3
 8008608:	d0cc      	beq.n	80085a4 <_malloc_r+0x20>
 800860a:	1a1b      	subs	r3, r3, r0
 800860c:	50a3      	str	r3, [r4, r2]
 800860e:	e7c9      	b.n	80085a4 <_malloc_r+0x20>
 8008610:	4622      	mov	r2, r4
 8008612:	6864      	ldr	r4, [r4, #4]
 8008614:	e7cc      	b.n	80085b0 <_malloc_r+0x2c>
 8008616:	1cc4      	adds	r4, r0, #3
 8008618:	f024 0403 	bic.w	r4, r4, #3
 800861c:	42a0      	cmp	r0, r4
 800861e:	d0e3      	beq.n	80085e8 <_malloc_r+0x64>
 8008620:	1a21      	subs	r1, r4, r0
 8008622:	4630      	mov	r0, r6
 8008624:	f000 f82e 	bl	8008684 <_sbrk_r>
 8008628:	3001      	adds	r0, #1
 800862a:	d1dd      	bne.n	80085e8 <_malloc_r+0x64>
 800862c:	e7cf      	b.n	80085ce <_malloc_r+0x4a>
 800862e:	bf00      	nop
 8008630:	2000042c 	.word	0x2000042c
 8008634:	20000430 	.word	0x20000430

08008638 <_realloc_r>:
 8008638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800863a:	4607      	mov	r7, r0
 800863c:	4614      	mov	r4, r2
 800863e:	460e      	mov	r6, r1
 8008640:	b921      	cbnz	r1, 800864c <_realloc_r+0x14>
 8008642:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008646:	4611      	mov	r1, r2
 8008648:	f7ff bf9c 	b.w	8008584 <_malloc_r>
 800864c:	b922      	cbnz	r2, 8008658 <_realloc_r+0x20>
 800864e:	f7ff ff49 	bl	80084e4 <_free_r>
 8008652:	4625      	mov	r5, r4
 8008654:	4628      	mov	r0, r5
 8008656:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008658:	f000 f830 	bl	80086bc <_malloc_usable_size_r>
 800865c:	42a0      	cmp	r0, r4
 800865e:	d20f      	bcs.n	8008680 <_realloc_r+0x48>
 8008660:	4621      	mov	r1, r4
 8008662:	4638      	mov	r0, r7
 8008664:	f7ff ff8e 	bl	8008584 <_malloc_r>
 8008668:	4605      	mov	r5, r0
 800866a:	2800      	cmp	r0, #0
 800866c:	d0f2      	beq.n	8008654 <_realloc_r+0x1c>
 800866e:	4631      	mov	r1, r6
 8008670:	4622      	mov	r2, r4
 8008672:	f7ff fbf7 	bl	8007e64 <memcpy>
 8008676:	4631      	mov	r1, r6
 8008678:	4638      	mov	r0, r7
 800867a:	f7ff ff33 	bl	80084e4 <_free_r>
 800867e:	e7e9      	b.n	8008654 <_realloc_r+0x1c>
 8008680:	4635      	mov	r5, r6
 8008682:	e7e7      	b.n	8008654 <_realloc_r+0x1c>

08008684 <_sbrk_r>:
 8008684:	b538      	push	{r3, r4, r5, lr}
 8008686:	4d06      	ldr	r5, [pc, #24]	; (80086a0 <_sbrk_r+0x1c>)
 8008688:	2300      	movs	r3, #0
 800868a:	4604      	mov	r4, r0
 800868c:	4608      	mov	r0, r1
 800868e:	602b      	str	r3, [r5, #0]
 8008690:	f7fa fb5a 	bl	8002d48 <_sbrk>
 8008694:	1c43      	adds	r3, r0, #1
 8008696:	d102      	bne.n	800869e <_sbrk_r+0x1a>
 8008698:	682b      	ldr	r3, [r5, #0]
 800869a:	b103      	cbz	r3, 800869e <_sbrk_r+0x1a>
 800869c:	6023      	str	r3, [r4, #0]
 800869e:	bd38      	pop	{r3, r4, r5, pc}
 80086a0:	20006e40 	.word	0x20006e40

080086a4 <__malloc_lock>:
 80086a4:	4801      	ldr	r0, [pc, #4]	; (80086ac <__malloc_lock+0x8>)
 80086a6:	f000 b811 	b.w	80086cc <__retarget_lock_acquire_recursive>
 80086aa:	bf00      	nop
 80086ac:	20006e48 	.word	0x20006e48

080086b0 <__malloc_unlock>:
 80086b0:	4801      	ldr	r0, [pc, #4]	; (80086b8 <__malloc_unlock+0x8>)
 80086b2:	f000 b80c 	b.w	80086ce <__retarget_lock_release_recursive>
 80086b6:	bf00      	nop
 80086b8:	20006e48 	.word	0x20006e48

080086bc <_malloc_usable_size_r>:
 80086bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086c0:	1f18      	subs	r0, r3, #4
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	bfbc      	itt	lt
 80086c6:	580b      	ldrlt	r3, [r1, r0]
 80086c8:	18c0      	addlt	r0, r0, r3
 80086ca:	4770      	bx	lr

080086cc <__retarget_lock_acquire_recursive>:
 80086cc:	4770      	bx	lr

080086ce <__retarget_lock_release_recursive>:
 80086ce:	4770      	bx	lr

080086d0 <_init>:
 80086d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086d2:	bf00      	nop
 80086d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086d6:	bc08      	pop	{r3}
 80086d8:	469e      	mov	lr, r3
 80086da:	4770      	bx	lr

080086dc <_fini>:
 80086dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086de:	bf00      	nop
 80086e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086e2:	bc08      	pop	{r3}
 80086e4:	469e      	mov	lr, r3
 80086e6:	4770      	bx	lr
